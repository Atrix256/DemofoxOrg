<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.7.5" created="2017-05-25 03:01" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>The blog at the bottom of the sea</title>
	<link>http://blog.demofox.org</link>
	<description>Programming and Gamedev Stuff</description>
	<pubDate>Thu, 25 May 2017 03:01:45 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.demofox.org</wp:base_site_url>
	<wp:base_blog_url>http://blog.demofox.org</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[admin]]></wp:author_login><wp:author_email><![CDATA[demofox@demofox.org]]></wp:author_email><wp:author_display_name><![CDATA[Demofox]]></wp:author_display_name><wp:author_first_name><![CDATA[Alan]]></wp:author_first_name><wp:author_last_name><![CDATA[Wolfe]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>20</wp:term_id>
		<wp:category_nicename><![CDATA[assembly]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[assembly]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[audio-synthesis]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Audio Synthesis]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>11</wp:term_id>
		<wp:category_nicename><![CDATA[c]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[C++]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>21</wp:term_id>
		<wp:category_nicename><![CDATA[coding-style]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Coding Style]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>10</wp:term_id>
		<wp:category_nicename><![CDATA[computer-science]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Computer Science]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>6</wp:term_id>
		<wp:category_nicename><![CDATA[cryptography]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Cryptography]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[encryption-security]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Encryption + Security]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>8</wp:term_id>
		<wp:category_nicename><![CDATA[fractals]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Fractals]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[game-development]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Game Development]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>13</wp:term_id>
		<wp:category_nicename><![CDATA[gamedev-commentary]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Gamedev Commentary]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[graphics]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Graphics]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>12</wp:term_id>
		<wp:category_nicename><![CDATA[math]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Math]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>22</wp:term_id>
		<wp:category_nicename><![CDATA[my-old-master]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[My Old Master]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>9</wp:term_id>
		<wp:category_nicename><![CDATA[neural-networks]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Neural Networks]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>23</wp:term_id>
		<wp:category_nicename><![CDATA[other]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Other]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>19</wp:term_id>
		<wp:category_nicename><![CDATA[path-tracing]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Path Tracing]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>14</wp:term_id>
		<wp:category_nicename><![CDATA[people-skills]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[People Skills]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>17</wp:term_id>
		<wp:category_nicename><![CDATA[quantum-computing]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Quantum Computing]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[ray-tracing]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Ray Tracing]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[research]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Research]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>18</wp:term_id>
		<wp:category_nicename><![CDATA[shadertoy]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Shadertoy]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>7</wp:term_id>
		<wp:category_nicename><![CDATA[skeletal-animation]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Skeletal Animation]]></wp:cat_name>
	</wp:category>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[assembly]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[assembly]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[audio-synthesis]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Audio Synthesis]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[C++]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[coding-style]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Coding Style]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[computer-science]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Computer Science]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cryptography]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Cryptography]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[encryption-security]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Encryption + Security]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[fractals]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Fractals]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[game-development]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Game Development]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[game-development]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Game Development]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[gamedev-commentary]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Gamedev Commentary]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[graphics]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Graphics]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[math]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Math]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[my-old-master]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[My Old Master]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[neural-networks]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Neural Networks]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[other]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Other]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[path-tracing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Path Tracing]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[people-skills]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[People Skills]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[quantum-computing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Quantum Computing]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ray-tracing]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Ray Tracing]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[research]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Research]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[shadertoy]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Shadertoy]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[skeletal-animation]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Skeletal Animation]]></wp:term_name>
	</wp:term>

	<generator>https://wordpress.org/?v=4.7.5</generator>
<site xmlns="com-wordpress:feed-additions:1">92399121</site>
	<item>
		<title>DIY Synthesizer Chapter 1 Source Code</title>
		<link>http://blog.demofox.org/2012/05/14/diy-synthesizer-chapter-1-sound-output/diy-synthesizer-chapter-1-source-code/</link>
		<pubDate>Tue, 15 May 2012 06:42:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/maincpp.txt</guid>
		<description></description>
		<content:encoded><![CDATA[Source code for chapter 1]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date><![CDATA[2012-05-14 22:42:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-15 06:42:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synthesizer-chapter-1-source-code]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/maincpp.txt]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/maincpp.txt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DIY Synthesizer Chapter 1: outmono.wav</title>
		<link>http://blog.demofox.org/2012/05/14/diy-synthesizer-chapter-1-sound-output/diy-synthesizer-chapter-1-outmonowav/</link>
		<pubDate>Tue, 15 May 2012 07:27:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/outmono.wav</guid>
		<description></description>
		<content:encoded><![CDATA[outmono.wav]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date><![CDATA[2012-05-14 23:27:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-15 07:27:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synthesizer-chapter-1-outmonowav]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/outmono.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/outmono.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DIY Synthesizer Chapter 1: outstereo.wav</title>
		<link>http://blog.demofox.org/2012/05/14/diy-synthesizer-chapter-1-sound-output/diy-synthesizer-chapter-1-outstereowav/</link>
		<pubDate>Tue, 15 May 2012 07:32:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/outstereo.wav</guid>
		<description></description>
		<content:encoded><![CDATA[outstereo.wav]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2012-05-14 23:32:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-15 07:32:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synthesizer-chapter-1-outstereowav]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/outstereo.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/outstereo.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Naive Sine Wave Generation</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/naive-sine-wave-generation/</link>
		<pubDate>Sat, 19 May 2012 18:41:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sinenaive.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 10:41:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 18:41:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[naive-sine-wave-generation]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinenaive.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinenaive.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Discontinuous Sine Wave</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/discontinuous-sine-wave/</link>
		<pubDate>Sat, 19 May 2012 18:46:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sinediscon.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 10:46:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 18:46:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[discontinuous-sine-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinediscon.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinediscon.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Naive Sine Wave</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/naive-sine-wave/</link>
		<pubDate>Sat, 19 May 2012 18:49:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sinenaive.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 10:49:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 18:49:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[naive-sine-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinenaive.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinenaive.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:617;s:6:"height";i:71;s:14:"hwstring_small";s:23:"height='14' width='128'";s:4:"file";s:94:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinenaive.png";s:5:"thumb";s:23:"sinenaive.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sine Wave Popping</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/sine-wave-popping/</link>
		<pubDate>Sat, 19 May 2012 18:55:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sinediscon.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 10:55:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 18:55:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sine-wave-popping]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinediscon.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinediscon.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:353;s:6:"height";i:70;s:14:"hwstring_small";s:23:"height='25' width='128'";s:4:"file";s:95:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinediscon.png";s:5:"thumb";s:24:"sinediscon.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Continuous sine wave</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/continuous-sine-wave/</link>
		<pubDate>Sat, 19 May 2012 19:09:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sinecon.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:09:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:09:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[continuous-sine-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinecon.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinecon.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Continuous Frequency Change</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/continuous-frequency-change/</link>
		<pubDate>Sat, 19 May 2012 19:13:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sinegood.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:13:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:13:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[continuous-frequency-change]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinegood.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinegood.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:612;s:6:"height";i:160;s:14:"hwstring_small";s:23:"height='33' width='128'";s:4:"file";s:93:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinegood.png";s:5:"thumb";s:22:"sinegood.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vanilla Sine Wave</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/vanilla-sine-wave/</link>
		<pubDate>Sat, 19 May 2012 19:26:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sine.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:26:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:26:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vanilla-sine-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vanilla Sine Wave - Quiet</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/vanilla-sine-wave-quiet/</link>
		<pubDate>Sat, 19 May 2012 19:32:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sinequiet.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:32:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:32:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vanilla-sine-wave-quiet]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinequiet.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinequiet.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sine Quiet</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/sine-quiet/</link>
		<pubDate>Sat, 19 May 2012 19:34:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sinequiet.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:34:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:34:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sine-quiet]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinequiet.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinequiet.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:523;s:6:"height";i:70;s:14:"hwstring_small";s:23:"height='17' width='128'";s:4:"file";s:94:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sinequiet.png";s:5:"thumb";s:23:"sinequiet.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vanilla Sine Wave - Clipping</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/vanilla-sine-wave-clipping/</link>
		<pubDate>Sat, 19 May 2012 19:38:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sineclip.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:38:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:38:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vanilla-sine-wave-clipping]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sineclip.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sineclip.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clipping Sine Wave</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/clipping-sine-wave/</link>
		<pubDate>Sat, 19 May 2012 19:39:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/sineclip.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:39:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:39:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clipping-sine-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sineclip.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sineclip.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:633;s:6:"height";i:71;s:14:"hwstring_small";s:23:"height='14' width='128'";s:4:"file";s:93:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/sineclip.png";s:5:"thumb";s:22:"sineclip.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Square Wave</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/square-wave/</link>
		<pubDate>Sat, 19 May 2012 19:51:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/square.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:51:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:51:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[square-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/square.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/square.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:510;s:6:"height";i:92;s:14:"hwstring_small";s:23:"height='23' width='128'";s:4:"file";s:91:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/square.png";s:5:"thumb";s:20:"square.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Square Wave Audio</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/square-wave-audio/</link>
		<pubDate>Sat, 19 May 2012 19:52:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/square.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:52:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:52:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[square-wave-audio]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/square.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/square.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Saw Wave Audio</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/saw-wave-audio/</link>
		<pubDate>Sat, 19 May 2012 19:54:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/saw.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:54:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:54:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[saw-wave-audio]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/saw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/saw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Saw Wave</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/saw-wave/</link>
		<pubDate>Sat, 19 May 2012 19:56:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/saw.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 11:56:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 19:56:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[saw-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/saw.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/saw.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:747;s:6:"height";i:70;s:14:"hwstring_small";s:23:"height='11' width='128'";s:4:"file";s:88:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/saw.png";s:5:"thumb";s:17:"saw.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Triangle Wave</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/triangle-wave/</link>
		<pubDate>Sat, 19 May 2012 20:01:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/triangle.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 12:01:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 20:01:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[triangle-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/triangle.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/triangle.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:579;s:6:"height";i:81;s:14:"hwstring_small";s:23:"height='17' width='128'";s:4:"file";s:93:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/triangle.png";s:5:"thumb";s:22:"triangle.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Triangle Wave Audio</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/triangle-wave-audio/</link>
		<pubDate>Sat, 19 May 2012 20:02:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/triangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 12:02:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 20:02:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[triangle-wave-audio]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/triangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/triangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Noise Audio</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/noise-audio/</link>
		<pubDate>Sat, 19 May 2012 20:08:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/noise.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 12:08:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 20:08:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[noise-audio]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/noise.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/noise.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Noise Audio</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/noise-audio-2/</link>
		<pubDate>Sat, 19 May 2012 20:10:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/noise.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 12:10:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 20:10:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[noise-audio-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/noise.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/noise.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:595;s:6:"height";i:83;s:14:"hwstring_small";s:23:"height='17' width='128'";s:4:"file";s:90:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/noise.png";s:5:"thumb";s:19:"noise.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simple Song</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/simple-song/</link>
		<pubDate>Sat, 19 May 2012 20:19:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/songnopop.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 12:19:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 20:19:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[simple-song]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/songnopop.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/songnopop.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simple Song With Pop</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/simple-song-with-pop/</link>
		<pubDate>Sat, 19 May 2012 20:21:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/song.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 12:21:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 20:21:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[simple-song-with-pop]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/song.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/song.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DIY Synthesizer: Chapter 2 Source Code</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/diy-synthesizer-chapter-2-source-code/</link>
		<pubDate>Sat, 19 May 2012 20:27:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/maincpp.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 12:27:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 20:27:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synthesizer-chapter-2-source-code]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>7</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/maincpp.txt]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/maincpp.txt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DIY Synthesizer Chapter 1 Source Code</title>
		<link>http://blog.demofox.org/2012/05/14/diy-synthesizer-chapter-1-sound-output/diy-synthesizer-chapter-1-source-code-2/</link>
		<pubDate>Wed, 23 May 2012 04:48:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/05/ch1cpp.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date><![CDATA[2012-05-22 20:48:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-23 04:48:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synthesizer-chapter-1-source-code-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/ch1cpp.txt]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/05/ch1cpp.txt]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Saw Wave</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-saw-wave/</link>
		<pubDate>Mon, 18 Jun 2012 06:17:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/ch3blsaw.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date><![CDATA[2012-06-17 22:17:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-18 06:17:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-saw-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3blsaw.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3blsaw.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:490;s:6:"height";i:171;s:14:"hwstring_small";s:23:"height='44' width='128'";s:4:"file";s:93:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3blsaw.png";s:5:"thumb";s:22:"ch3blsaw.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Saw</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-saw/</link>
		<pubDate>Mon, 18 Jun 2012 06:19:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/saw.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date><![CDATA[2012-06-17 22:19:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-18 06:19:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-saw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/saw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/saw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Saw Band Limited</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-saw-band-limited/</link>
		<pubDate>Mon, 18 Jun 2012 06:19:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/sawbl.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date><![CDATA[2012-06-17 22:19:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-18 06:19:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-saw-band-limited]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/sawbl.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/sawbl.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 square Wave</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-square-wave/</link>
		<pubDate>Tue, 19 Jun 2012 03:10:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/ch3square.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 19:10:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 03:10:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-square-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3square.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3square.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:489;s:6:"height";i:178;s:14:"hwstring_small";s:23:"height='46' width='128'";s:4:"file";s:94:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3square.png";s:5:"thumb";s:23:"ch3square.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Square</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-square/</link>
		<pubDate>Tue, 19 Jun 2012 03:11:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/square.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 19:11:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 03:11:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-square]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/square.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/square.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Square Band Limited</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-square-band-limited/</link>
		<pubDate>Tue, 19 Jun 2012 03:12:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/squarebl.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 19:12:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 03:12:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-square-band-limited]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/squarebl.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/squarebl.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Triangle Wave</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-triangle-wave/</link>
		<pubDate>Tue, 19 Jun 2012 03:24:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/ch3triangle.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 19:24:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 03:24:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-triangle-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3triangle.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3triangle.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:664;s:6:"height";i:178;s:14:"hwstring_small";s:23:"height='34' width='128'";s:4:"file";s:96:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3triangle.png";s:5:"thumb";s:25:"ch3triangle.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Triangle</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-triangle/</link>
		<pubDate>Tue, 19 Jun 2012 03:24:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/triangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 19:24:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 03:24:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-triangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/triangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/triangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Triangle Band Limited</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-triangle-band-limited/</link>
		<pubDate>Tue, 19 Jun 2012 03:25:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/trianglebl.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 19:25:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 03:25:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-triangle-band-limited]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/trianglebl.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/trianglebl.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Random Beeps</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-random-beeps/</link>
		<pubDate>Tue, 19 Jun 2012 03:34:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/randombeeps.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 19:34:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 03:34:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-random-beeps]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/randombeeps.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/randombeeps.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Beeps</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-beeps/</link>
		<pubDate>Tue, 19 Jun 2012 03:36:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/ch3beeps.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 19:36:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 03:36:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-beeps]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3beeps.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3beeps.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:620;s:6:"height";i:89;s:14:"hwstring_small";s:23:"height='18' width='128'";s:4:"file";s:93:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3beeps.png";s:5:"thumb";s:22:"ch3beeps.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Noise Wave</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-noise-wave/</link>
		<pubDate>Tue, 19 Jun 2012 03:41:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/noisebl.wav</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 19:41:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 03:41:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-noise-wave]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/noisebl.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/noisebl.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chapter 3 Noise</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/chapter-3-noise/</link>
		<pubDate>Tue, 19 Jun 2012 03:42:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/ch3noise.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 19:42:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 03:42:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chapter-3-noise]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3noise.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3noise.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:477;s:6:"height";i:74;s:14:"hwstring_small";s:23:"height='19' width='128'";s:4:"file";s:93:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/ch3noise.png";s:5:"thumb";s:22:"ch3noise.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Lament Of Tim Curry</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/the-lament-of-tim-curry/</link>
		<pubDate>Tue, 19 Jun 2012 04:22:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/lamentoftimcurry.mp3</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 20:22:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 04:22:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-lament-of-tim-curry]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/lamentoftimcurry.mp3]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/lamentoftimcurry.mp3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DIY Synthesizer: Chapter 3 Source Code</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/diy-synthesizer-chapter-3-source-code/</link>
		<pubDate>Tue, 19 Jun 2012 04:45:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/06/diysynth3.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 20:45:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 04:45:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synthesizer-chapter-3-source-code]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>31</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/diysynth3.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/06/diysynth3.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Animtree</title>
		<link>http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-2/animtree/</link>
		<pubDate>Sat, 22 Sep 2012 05:49:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/animtree.png</guid>
		<description></description>
		<content:encoded><![CDATA[AnimTree Diagram]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2012-09-21 21:49:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-22 05:49:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[animtree]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>55</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/animtree.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/animtree.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:466;s:6:"height";i:402;s:14:"hwstring_small";s:23:"height='96' width='111'";s:4:"file";s:93:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/animtree.png";s:5:"thumb";s:22:"animtree.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bias 0.5</title>
		<link>http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/bias-05/</link>
		<pubDate>Tue, 25 Sep 2012 06:20:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/bias05.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2012-09-24 22:20:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-25 06:20:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bias-05]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>59</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias05.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias05.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:313;s:6:"height";i:310;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:91:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias05.png";s:5:"thumb";s:20:"bias05.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bias 0.25</title>
		<link>http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/bias-025/</link>
		<pubDate>Tue, 25 Sep 2012 06:21:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/bias025.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date><![CDATA[2012-09-24 22:21:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-25 06:21:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bias-025]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>59</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias025.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias025.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:309;s:6:"height";i:309;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:92:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias025.png";s:5:"thumb";s:21:"bias025.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bias 0.75</title>
		<link>http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/bias-075/</link>
		<pubDate>Tue, 25 Sep 2012 06:21:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/bias075.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date><![CDATA[2012-09-24 22:21:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-25 06:21:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bias-075]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>59</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias075.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias075.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:309;s:6:"height";i:309;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:92:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias075.png";s:5:"thumb";s:21:"bias075.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bias 0.97</title>
		<link>http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/bias-097/</link>
		<pubDate>Tue, 25 Sep 2012 06:21:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/bias097.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2012-09-24 22:21:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-25 06:21:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bias-097]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>59</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias097.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias097.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:305;s:6:"height";i:308;s:14:"hwstring_small";s:22:"height='96' width='95'";s:4:"file";s:92:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/bias097.png";s:5:"thumb";s:21:"bias097.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gain 0.5</title>
		<link>http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/gain-05/</link>
		<pubDate>Tue, 25 Sep 2012 06:29:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/gain05.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2012-09-24 22:29:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-25 06:29:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gain-05]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>59</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain05.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain05.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:313;s:6:"height";i:310;s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:91:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain05.png";s:5:"thumb";s:20:"gain05.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gain 0.25</title>
		<link>http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/gain-025/</link>
		<pubDate>Tue, 25 Sep 2012 06:31:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/gain025.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date><![CDATA[2012-09-24 22:31:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-25 06:31:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gain-025]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>59</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain025.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain025.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:307;s:6:"height";i:310;s:14:"hwstring_small";s:22:"height='96' width='95'";s:4:"file";s:92:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain025.png";s:5:"thumb";s:21:"gain025.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gain 0.75</title>
		<link>http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/gain-075/</link>
		<pubDate>Tue, 25 Sep 2012 06:31:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/gain075.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2012-09-24 22:31:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-25 06:31:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gain-075]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>59</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain075.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain075.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:309;s:6:"height";i:310;s:14:"hwstring_small";s:22:"height='96' width='95'";s:4:"file";s:92:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain075.png";s:5:"thumb";s:21:"gain075.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gain 0.97</title>
		<link>http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/gain-097/</link>
		<pubDate>Tue, 25 Sep 2012 06:31:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/gain097.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date><![CDATA[2012-09-24 22:31:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-25 06:31:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gain-097]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>59</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain097.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain097.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:307;s:6:"height";i:308;s:14:"hwstring_small";s:22:"height='96' width='95'";s:4:"file";s:92:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/gain097.png";s:5:"thumb";s:21:"gain097.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mandelbrot set</title>
		<link>http://blog.demofox.org/2012/09/25/how-to-render-the-mandelbrot-set/mandelbrot-set/</link>
		<pubDate>Wed, 26 Sep 2012 03:02:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/mandelbrot.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date><![CDATA[2012-09-25 19:02:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-26 03:02:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mandelbrot-set]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>69</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/mandelbrot.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/mandelbrot.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:501;s:6:"height";i:503;s:14:"hwstring_small";s:22:"height='96' width='95'";s:4:"file";s:95:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/mandelbrot.png";s:5:"thumb";s:24:"mandelbrot.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>minima</title>
		<link>http://blog.demofox.org/2012/10/23/bam-neural-networks/minima/</link>
		<pubDate>Thu, 27 Sep 2012 03:12:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/09/minima.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date><![CDATA[2012-09-26 19:12:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-27 03:12:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[minima]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>71</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/minima.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/minima.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:452;s:6:"height";i:267;s:14:"hwstring_small";s:23:"height='75' width='128'";s:4:"file";s:91:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/09/minima.png";s:5:"thumb";s:20:"minima.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NotGate</title>
		<link>http://blog.demofox.org/2012/11/28/mechanical-computer-quest-part-i/notgate/</link>
		<pubDate>Thu, 29 Nov 2012 07:04:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/11/notgate.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2012-11-28 23:04:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-29 07:04:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[notgate]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/11/notgate.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/11/notgate.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:466;s:6:"height";i:402;s:14:"hwstring_small";s:23:"height='96' width='111'";s:4:"file";s:92:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/11/notgate.png";s:5:"thumb";s:21:"notgate.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OrGate</title>
		<link>http://blog.demofox.org/2012/11/28/mechanical-computer-quest-part-i/orgate/</link>
		<pubDate>Thu, 29 Nov 2012 07:05:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/11/orgate.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date><![CDATA[2012-11-28 23:05:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-29 07:05:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[orgate]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/11/orgate.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/11/orgate.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:466;s:6:"height";i:402;s:14:"hwstring_small";s:23:"height='96' width='111'";s:4:"file";s:91:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/11/orgate.png";s:5:"thumb";s:20:"orgate.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AndGate</title>
		<link>http://blog.demofox.org/2012/11/28/mechanical-computer-quest-part-i/andgate/</link>
		<pubDate>Thu, 29 Nov 2012 07:07:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2012/11/andgate.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date><![CDATA[2012-11-28 23:07:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-29 07:07:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[andgate]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com//kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/11/andgate.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/11/andgate.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:466;s:6:"height";i:402;s:14:"hwstring_small";s:23:"height='96' width='111'";s:4:"file";s:92:"/kunden/homepages/15/d132235455/.oneclick/wordpress/1/__oneclick_uploads/2012/11/andgate.png";s:5:"thumb";s:21:"andgate.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TemplateSlots_cpp</title>
		<link>http://blog.demofox.org/2013/05/01/permutation-programming-without-maintenance-nightmares/templateslots_cpp/</link>
		<pubDate>Wed, 01 May 2013 23:16:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/05/TemplateSlots_cpp.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2013-05-01 15:16:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-01 23:16:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[templateslots_cpp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>78</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/05/TemplateSlots_cpp.txt]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/05/TemplateSlots_cpp.txt]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code_050713</title>
		<link>http://blog.demofox.org/2013/05/07/macro-lists-for-the-win-side-b/code_050713/</link>
		<pubDate>Wed, 08 May 2013 03:16:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/05/Code_050713.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date><![CDATA[2013-05-07 19:16:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-08 03:16:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[code_050713]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>194</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/05/Code_050713.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/05/Code_050713.zip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code_051113</title>
		<link>http://blog.demofox.org/2013/05/11/lists-of-macro-lists/code_051113/</link>
		<pubDate>Sun, 12 May 2013 01:22:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/05/Code_051113.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date><![CDATA[2013-05-11 17:22:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-12 01:22:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[code_051113]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>262</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/05/Code_051113.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/05/Code_051113.zip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>fruittest</title>
		<link>http://blog.demofox.org/2013/05/21/the-black-art-of-sizeof-aka-compile-time-type-deduction/fruittest/</link>
		<pubDate>Wed, 22 May 2013 05:48:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/05/fruittest.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date><![CDATA[2013-05-21 21:48:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-22 05:48:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fruittest]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>307</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/05/fruittest.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/05/fruittest.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:844;s:6:"height";i:548;s:4:"file";s:21:"2013/05/fruittest.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"fruittest-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"fruittest-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"fruittest-844x188.png";s:5:"width";i:844;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"fruittest-844x188.png";s:5:"width";i:844;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"fruittest-462x300.png";s:5:"width";i:462;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>disassembly</title>
		<link>http://blog.demofox.org/2013/05/21/the-black-art-of-sizeof-aka-compile-time-type-deduction/disassembly/</link>
		<pubDate>Wed, 22 May 2013 06:15:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/05/disassembly.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>351</wp:post_id>
		<wp:post_date><![CDATA[2013-05-21 22:15:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-22 06:15:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[disassembly]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>307</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/05/disassembly.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/05/disassembly.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:770;s:6:"height";i:708;s:4:"file";s:23:"2013/05/disassembly.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"disassembly-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"disassembly-300x275.png";s:5:"width";i:300;s:6:"height";i:275;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"disassembly-770x188.png";s:5:"width";i:770;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"disassembly-770x188.png";s:5:"width";i:770;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"disassembly-326x300.png";s:5:"width";i:326;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepost1</title>
		<link>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/prepost1/</link>
		<pubDate>Thu, 06 Jun 2013 05:51:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/prepost1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date><![CDATA[2013-06-05 21:51:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 05:51:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepost1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>368</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/prepost1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/prepost1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:783;s:6:"height";i:619;s:4:"file";s:20:"2013/06/prepost1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"prepost1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"prepost1-300x237.png";s:5:"width";i:300;s:6:"height";i:237;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"prepost1-783x188.png";s:5:"width";i:783;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"prepost1-783x188.png";s:5:"width";i:783;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"prepost1-379x300.png";s:5:"width";i:379;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepost2</title>
		<link>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/prepost2/</link>
		<pubDate>Thu, 06 Jun 2013 05:58:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/prepost2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>403</wp:post_id>
		<wp:post_date><![CDATA[2013-06-05 21:58:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 05:58:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepost2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>368</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/prepost2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/prepost2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1176;s:6:"height";i:769;s:4:"file";s:20:"2013/06/prepost2.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"prepost2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"prepost2-300x196.png";s:5:"width";i:300;s:6:"height";i:196;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"prepost2-1024x669.png";s:5:"width";i:1024;s:6:"height";i:669;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"prepost2-1176x188.png";s:5:"width";i:1176;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"prepost2-1176x188.png";s:5:"width";i:1176;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"prepost2-458x300.png";s:5:"width";i:458;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepost3</title>
		<link>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/prepost3/</link>
		<pubDate>Thu, 06 Jun 2013 06:14:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/prepost3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date><![CDATA[2013-06-05 22:14:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 06:14:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepost3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>368</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/prepost3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/prepost3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:842;s:6:"height";i:918;s:4:"file";s:20:"2013/06/prepost3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"prepost3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"prepost3-275x300.png";s:5:"width";i:275;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"prepost3-842x188.png";s:5:"width";i:842;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"prepost3-842x188.png";s:5:"width";i:842;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"prepost3-275x300.png";s:5:"width";i:275;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepost4</title>
		<link>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/prepost4/</link>
		<pubDate>Thu, 06 Jun 2013 06:19:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/prepost4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>412</wp:post_id>
		<wp:post_date><![CDATA[2013-06-05 22:19:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 06:19:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepost4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>368</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/prepost4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/prepost4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:842;s:6:"height";i:918;s:4:"file";s:20:"2013/06/prepost4.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"prepost4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"prepost4-275x300.png";s:5:"width";i:275;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"prepost4-842x188.png";s:5:"width";i:842;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"prepost4-842x188.png";s:5:"width";i:842;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"prepost4-275x300.png";s:5:"width";i:275;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepost5a</title>
		<link>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/prepost5a/</link>
		<pubDate>Thu, 06 Jun 2013 06:26:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/prepost5a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>416</wp:post_id>
		<wp:post_date><![CDATA[2013-06-05 22:26:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 06:26:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepost5a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>368</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/prepost5a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/prepost5a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:842;s:6:"height";i:918;s:4:"file";s:21:"2013/06/prepost5a.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"prepost5a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"prepost5a-275x300.png";s:5:"width";i:275;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"prepost5a-842x188.png";s:5:"width";i:842;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"prepost5a-842x188.png";s:5:"width";i:842;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"prepost5a-275x300.png";s:5:"width";i:275;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepost5b</title>
		<link>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/prepost5b/</link>
		<pubDate>Thu, 06 Jun 2013 06:26:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/prepost5b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date><![CDATA[2013-06-05 22:26:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 06:26:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepost5b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>368</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/prepost5b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/prepost5b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:842;s:6:"height";i:402;s:4:"file";s:21:"2013/06/prepost5b.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"prepost5b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"prepost5b-300x143.png";s:5:"width";i:300;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"prepost5b-842x188.png";s:5:"width";i:842;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"prepost5b-842x188.png";s:5:"width";i:842;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"prepost5b-500x238.png";s:5:"width";i:500;s:6:"height";i:238;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepost6</title>
		<link>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/prepost6/</link>
		<pubDate>Thu, 06 Jun 2013 06:40:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/prepost6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>422</wp:post_id>
		<wp:post_date><![CDATA[2013-06-05 22:40:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 06:40:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepost6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>368</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/prepost6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/prepost6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:593;s:6:"height";i:1032;s:4:"file";s:20:"2013/06/prepost6.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"prepost6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"prepost6-172x300.png";s:5:"width";i:172;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"prepost6-588x1024.png";s:5:"width";i:588;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"prepost6-593x188.png";s:5:"width";i:593;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"prepost6-593x188.png";s:5:"width";i:593;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"prepost6-172x300.png";s:5:"width";i:172;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepost7a</title>
		<link>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/prepost7a/</link>
		<pubDate>Thu, 06 Jun 2013 06:45:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/prepost7a.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>424</wp:post_id>
		<wp:post_date><![CDATA[2013-06-05 22:45:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 06:45:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepost7a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>368</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/prepost7a.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/prepost7a.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:625;s:6:"height";i:1032;s:4:"file";s:21:"2013/06/prepost7a.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"prepost7a-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"prepost7a-181x300.png";s:5:"width";i:181;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"prepost7a-620x1024.png";s:5:"width";i:620;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"prepost7a-625x188.png";s:5:"width";i:625;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"prepost7a-625x188.png";s:5:"width";i:625;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"prepost7a-181x300.png";s:5:"width";i:181;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepost7b</title>
		<link>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/prepost7b/</link>
		<pubDate>Thu, 06 Jun 2013 06:45:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/prepost7b.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>425</wp:post_id>
		<wp:post_date><![CDATA[2013-06-05 22:45:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 06:45:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepost7b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>368</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/prepost7b.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/prepost7b.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:585;s:6:"height";i:404;s:4:"file";s:21:"2013/06/prepost7b.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"prepost7b-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"prepost7b-300x207.png";s:5:"width";i:300;s:6:"height";i:207;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"prepost7b-585x188.png";s:5:"width";i:585;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"prepost7b-585x188.png";s:5:"width";i:585;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"prepost7b-434x300.png";s:5:"width";i:434;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shuffle</title>
		<link>http://blog.demofox.org/2013/06/08/fast-lightweight-random-shuffle-functionality/shuffle/</link>
		<pubDate>Sun, 09 Jun 2013 07:15:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/shuffle.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>480</wp:post_id>
		<wp:post_date><![CDATA[2013-06-08 23:15:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-09 07:15:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shuffle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>456</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/shuffle.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/shuffle.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:843;s:6:"height";i:589;s:4:"file";s:19:"2013/06/shuffle.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"shuffle-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"shuffle-300x209.png";s:5:"width";i:300;s:6:"height";i:209;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"shuffle-843x188.png";s:5:"width";i:843;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"shuffle-843x188.png";s:5:"width";i:843;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"shuffle-429x300.png";s:5:"width";i:429;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shufflewhatif</title>
		<link>http://blog.demofox.org/2013/06/08/fast-lightweight-random-shuffle-functionality/shufflewhatif/</link>
		<pubDate>Sun, 09 Jun 2013 07:28:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/06/shufflewhatif.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>485</wp:post_id>
		<wp:post_date><![CDATA[2013-06-08 23:28:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-09 07:28:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shufflewhatif]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>456</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/06/shufflewhatif.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/shufflewhatif.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:400;s:4:"file";s:25:"2013/06/shufflewhatif.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"shufflewhatif-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:25:"shufflewhatif-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"shufflewhatif-400x188.jpg";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"large-feature";a:4:{s:4:"file";s:25:"shufflewhatif-400x188.jpg";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"small-feature";a:4:{s:4:"file";s:25:"shufflewhatif-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mrmrrandperf</title>
		<link>http://blog.demofox.org/2013/07/06/the-incredible-time-traveling-random-number-generator/mrmrrandperf/</link>
		<pubDate>Sat, 06 Jul 2013 20:01:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/mrmrrandperf.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>529</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 12:01:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 20:01:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mrmrrandperf]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>521</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/mrmrrandperf.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/mrmrrandperf.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:358;s:6:"height";i:82;s:4:"file";s:24:"2013/07/mrmrrandperf.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"mrmrrandperf-150x82.png";s:5:"width";i:150;s:6:"height";i:82;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"mrmrrandperf-300x68.png";s:5:"width";i:300;s:6:"height";i:68;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mrmrout1</title>
		<link>http://blog.demofox.org/2013/07/06/the-incredible-time-traveling-random-number-generator/mrmrout1/</link>
		<pubDate>Sat, 06 Jul 2013 20:24:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/mrmrout1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>536</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 12:24:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 20:24:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mrmrout1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>521</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/mrmrout1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/mrmrout1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:324;s:6:"height";i:492;s:4:"file";s:20:"2013/07/mrmrout1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"mrmrout1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"mrmrout1-197x300.png";s:5:"width";i:197;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"mrmrout1-324x188.png";s:5:"width";i:324;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"mrmrout1-324x188.png";s:5:"width";i:324;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"mrmrout1-197x300.png";s:5:"width";i:197;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mrmrout2</title>
		<link>http://blog.demofox.org/2013/07/06/the-incredible-time-traveling-random-number-generator/mrmrout2/</link>
		<pubDate>Sat, 06 Jul 2013 20:24:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/mrmrout2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>537</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 12:24:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 20:24:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mrmrout2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>521</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/mrmrout2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/mrmrout2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:335;s:6:"height";i:482;s:4:"file";s:20:"2013/07/mrmrout2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"mrmrout2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"mrmrout2-208x300.png";s:5:"width";i:208;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"mrmrout2-335x188.png";s:5:"width";i:335;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"mrmrout2-335x188.png";s:5:"width";i:335;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"mrmrout2-208x300.png";s:5:"width";i:208;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mrmrout3</title>
		<link>http://blog.demofox.org/2013/07/06/the-incredible-time-traveling-random-number-generator/mrmrout3/</link>
		<pubDate>Sat, 06 Jul 2013 20:24:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/mrmrout3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>538</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 12:24:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 20:24:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mrmrout3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>521</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/mrmrout3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/mrmrout3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:340;s:6:"height";i:484;s:4:"file";s:20:"2013/07/mrmrout3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"mrmrout3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"mrmrout3-210x300.png";s:5:"width";i:210;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"mrmrout3-340x188.png";s:5:"width";i:340;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"mrmrout3-340x188.png";s:5:"width";i:340;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"mrmrout3-210x300.png";s:5:"width";i:210;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mrmrout4</title>
		<link>http://blog.demofox.org/2013/07/06/the-incredible-time-traveling-random-number-generator/mrmrout4/</link>
		<pubDate>Sat, 06 Jul 2013 20:24:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/mrmrout4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>539</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 12:24:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 20:24:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mrmrout4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>521</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/mrmrout4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/mrmrout4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:318;s:6:"height";i:484;s:4:"file";s:20:"2013/07/mrmrout4.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"mrmrout4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"mrmrout4-197x300.png";s:5:"width";i:197;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"mrmrout4-318x188.png";s:5:"width";i:318;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"mrmrout4-318x188.png";s:5:"width";i:318;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"mrmrout4-197x300.png";s:5:"width";i:197;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shuf1</title>
		<link>http://blog.demofox.org/2013/07/06/fast-lightweight-random-shuffle-functionality-fixed/shuf1/</link>
		<pubDate>Sat, 06 Jul 2013 23:43:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/shuf1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>561</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 15:43:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 23:43:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shuf1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>549</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/shuf1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/shuf1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:496;s:6:"height";i:252;s:4:"file";s:17:"2013/07/shuf1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"shuf1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"shuf1-300x152.png";s:5:"width";i:300;s:6:"height";i:152;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"shuf1-496x188.png";s:5:"width";i:496;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"shuf1-496x188.png";s:5:"width";i:496;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shuf2</title>
		<link>http://blog.demofox.org/2013/07/06/fast-lightweight-random-shuffle-functionality-fixed/shuf2/</link>
		<pubDate>Sat, 06 Jul 2013 23:43:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/shuf2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>562</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 15:43:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 23:43:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shuf2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>549</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/shuf2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/shuf2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:493;s:6:"height";i:244;s:4:"file";s:17:"2013/07/shuf2.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"shuf2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"shuf2-300x148.png";s:5:"width";i:300;s:6:"height";i:148;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"shuf2-493x188.png";s:5:"width";i:493;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"shuf2-493x188.png";s:5:"width";i:493;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shuf3</title>
		<link>http://blog.demofox.org/2013/07/06/fast-lightweight-random-shuffle-functionality-fixed/shuf3/</link>
		<pubDate>Sat, 06 Jul 2013 23:43:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/shuf3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>563</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 15:43:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 23:43:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shuf3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>549</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/shuf3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/shuf3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:484;s:6:"height";i:244;s:4:"file";s:17:"2013/07/shuf3.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"shuf3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"shuf3-300x151.png";s:5:"width";i:300;s:6:"height";i:151;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"shuf3-484x188.png";s:5:"width";i:484;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"shuf3-484x188.png";s:5:"width";i:484;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shuf4</title>
		<link>http://blog.demofox.org/2013/07/06/fast-lightweight-random-shuffle-functionality-fixed/shuf4/</link>
		<pubDate>Sat, 06 Jul 2013 23:43:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/shuf4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>564</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 15:43:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 23:43:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shuf4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>549</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/shuf4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/shuf4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:490;s:6:"height";i:240;s:4:"file";s:17:"2013/07/shuf4.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"shuf4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"shuf4-300x146.png";s:5:"width";i:300;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"shuf4-490x188.png";s:5:"width";i:490;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"shuf4-490x188.png";s:5:"width";i:490;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tinyprng1</title>
		<link>http://blog.demofox.org/2013/07/07/a-super-tiny-random-number-generator/tinyprng1/</link>
		<pubDate>Sun, 07 Jul 2013 17:09:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/tinyprng1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>581</wp:post_id>
		<wp:post_date><![CDATA[2013-07-07 09:09:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-07 17:09:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tinyprng1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/tinyprng1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/tinyprng1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:799;s:6:"height";i:498;s:4:"file";s:21:"2013/07/tinyprng1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"tinyprng1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"tinyprng1-300x186.png";s:5:"width";i:300;s:6:"height";i:186;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"tinyprng1-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"tinyprng1-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"tinyprng1-481x300.png";s:5:"width";i:481;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tinyprng2</title>
		<link>http://blog.demofox.org/2013/07/07/a-super-tiny-random-number-generator/tinyprng2/</link>
		<pubDate>Sun, 07 Jul 2013 17:09:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/tinyprng2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>582</wp:post_id>
		<wp:post_date><![CDATA[2013-07-07 09:09:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-07 17:09:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tinyprng2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/tinyprng2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/tinyprng2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:799;s:6:"height";i:500;s:4:"file";s:21:"2013/07/tinyprng2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"tinyprng2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"tinyprng2-300x187.png";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"tinyprng2-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"tinyprng2-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"tinyprng2-479x300.png";s:5:"width";i:479;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tinyprng3</title>
		<link>http://blog.demofox.org/2013/07/07/a-super-tiny-random-number-generator/tinyprng3/</link>
		<pubDate>Sun, 07 Jul 2013 17:09:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/tinyprng3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>583</wp:post_id>
		<wp:post_date><![CDATA[2013-07-07 09:09:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-07 17:09:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tinyprng3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/tinyprng3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/tinyprng3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:499;s:4:"file";s:21:"2013/07/tinyprng3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"tinyprng3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"tinyprng3-300x186.png";s:5:"width";i:300;s:6:"height";i:186;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"tinyprng3-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"tinyprng3-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"tinyprng3-481x300.png";s:5:"width";i:481;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tinyprng4</title>
		<link>http://blog.demofox.org/2013/07/07/a-super-tiny-random-number-generator/tinyprng4/</link>
		<pubDate>Sun, 07 Jul 2013 17:10:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/tinyprng4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>584</wp:post_id>
		<wp:post_date><![CDATA[2013-07-07 09:10:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-07 17:10:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tinyprng4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>576</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/tinyprng4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/tinyprng4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:501;s:4:"file";s:21:"2013/07/tinyprng4.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"tinyprng4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"tinyprng4-300x187.png";s:5:"width";i:300;s:6:"height";i:187;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"tinyprng4-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"tinyprng4-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"tinyprng4-479x300.png";s:5:"width";i:479;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepostdebug</title>
		<link>http://blog.demofox.org/2013/07/08/is-pre-increment-really-faster-than-post-increment-part-2/prepostdebug/</link>
		<pubDate>Tue, 09 Jul 2013 05:33:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/prepostdebug.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>605</wp:post_id>
		<wp:post_date><![CDATA[2013-07-08 21:33:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-09 05:33:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepostdebug]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>590</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/prepostdebug.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/prepostdebug.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:843;s:6:"height";i:569;s:4:"file";s:24:"2013/07/prepostdebug.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"prepostdebug-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"prepostdebug-300x202.png";s:5:"width";i:300;s:6:"height";i:202;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"prepostdebug-843x188.png";s:5:"width";i:843;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"prepostdebug-843x188.png";s:5:"width";i:843;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"prepostdebug-444x300.png";s:5:"width";i:444;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepostrelease</title>
		<link>http://blog.demofox.org/2013/07/08/is-pre-increment-really-faster-than-post-increment-part-2/prepostrelease/</link>
		<pubDate>Tue, 09 Jul 2013 05:33:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/07/prepostrelease.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>606</wp:post_id>
		<wp:post_date><![CDATA[2013-07-08 21:33:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-09 05:33:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[prepostrelease]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>590</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/07/prepostrelease.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/prepostrelease.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:843;s:6:"height";i:489;s:4:"file";s:26:"2013/07/prepostrelease.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"prepostrelease-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"prepostrelease-300x174.png";s:5:"width";i:300;s:6:"height";i:174;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"prepostrelease-843x188.png";s:5:"width";i:843;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"prepostrelease-843x188.png";s:5:"width";i:843;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"prepostrelease-500x290.png";s:5:"width";i:500;s:6:"height";i:290;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rt3dss1</title>
		<link>http://blog.demofox.org/rt3dss1/</link>
		<pubDate>Fri, 04 Oct 2013 02:33:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/09/rt3dss1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>701</wp:post_id>
		<wp:post_date><![CDATA[2013-10-03 18:33:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-04 02:33:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rt3dss1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/09/rt3dss1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/09/rt3dss1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:448;s:4:"file";s:19:"2013/09/rt3dss1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"rt3dss1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"rt3dss1-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"rt3dss1-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"rt3dss1-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"rt3dss1-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rt3dss2</title>
		<link>http://blog.demofox.org/rt3dss2/</link>
		<pubDate>Fri, 04 Oct 2013 02:33:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/09/rt3dss2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>702</wp:post_id>
		<wp:post_date><![CDATA[2013-10-03 18:33:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-04 02:33:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rt3dss2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/09/rt3dss2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/09/rt3dss2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:448;s:4:"file";s:19:"2013/09/rt3dss2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"rt3dss2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"rt3dss2-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"rt3dss2-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"rt3dss2-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"rt3dss2-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>leftright</title>
		<link>http://blog.demofox.org/leftright/</link>
		<pubDate>Fri, 04 Oct 2013 02:51:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/09/leftright.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>704</wp:post_id>
		<wp:post_date><![CDATA[2013-10-03 18:51:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-04 02:51:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[leftright]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/09/leftright.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/09/leftright.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1600;s:6:"height";i:448;s:4:"file";s:21:"2013/09/leftright.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"leftright-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"leftright-300x84.png";s:5:"width";i:300;s:6:"height";i:84;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"leftright-1024x286.png";s:5:"width";i:1024;s:6:"height";i:286;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"leftright-1500x188.png";s:5:"width";i:1500;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"leftright-1500x188.png";s:5:"width";i:1500;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"leftright-500x140.png";s:5:"width";i:500;s:6:"height";i:140;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>polar1</title>
		<link>http://blog.demofox.org/2013/10/12/converting-to-and-from-polar-spherical-coordinates-made-easy/polar1/</link>
		<pubDate>Sun, 06 Oct 2013 04:36:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/10/polar1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>738</wp:post_id>
		<wp:post_date><![CDATA[2013-10-05 20:36:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-06 04:36:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[polar1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>706</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/10/polar1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/10/polar1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:280;s:6:"height";i:234;s:4:"file";s:18:"2013/10/polar1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"polar1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"polar1-280x188.png";s:5:"width";i:280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"polar1-280x188.png";s:5:"width";i:280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>polcorunitcircle</title>
		<link>http://blog.demofox.org/2013/10/12/converting-to-and-from-polar-spherical-coordinates-made-easy/polcorunitcircle/</link>
		<pubDate>Sat, 12 Oct 2013 21:44:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2013/10/polcorunitcircle.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>752</wp:post_id>
		<wp:post_date><![CDATA[2013-10-12 13:44:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-12 21:44:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[polcorunitcircle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>706</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2013/10/polcorunitcircle.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/10/polcorunitcircle.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:400;s:4:"file";s:28:"2013/10/polcorunitcircle.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"polcorunitcircle-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"polcorunitcircle-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"polcorunitcircle-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:28:"polcorunitcircle-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:28:"polcorunitcircle-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>color</title>
		<link>http://blog.demofox.org/2014/02/03/converting-rgb-to-grayscale/color/</link>
		<pubDate>Tue, 04 Feb 2014 06:34:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/02/color.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>856</wp:post_id>
		<wp:post_date><![CDATA[2014-02-03 22:34:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-04 06:34:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[color]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>853</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/02/color.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/02/color.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:500;s:4:"file";s:17:"2014/02/color.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"color-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"color-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"color-500x188.png";s:5:"width";i:500;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"color-500x188.png";s:5:"width";i:500;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:17:"color-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>avg</title>
		<link>http://blog.demofox.org/2014/02/03/converting-rgb-to-grayscale/avg/</link>
		<pubDate>Tue, 04 Feb 2014 06:35:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/02/avg.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>857</wp:post_id>
		<wp:post_date><![CDATA[2014-02-03 22:35:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-04 06:35:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[avg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>853</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/02/avg.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/02/avg.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:500;s:4:"file";s:15:"2014/02/avg.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"avg-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"avg-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"avg-500x188.png";s:5:"width";i:500;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"avg-500x188.png";s:5:"width";i:500;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"avg-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>good</title>
		<link>http://blog.demofox.org/2014/02/03/converting-rgb-to-grayscale/good/</link>
		<pubDate>Tue, 04 Feb 2014 06:35:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/02/good.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>858</wp:post_id>
		<wp:post_date><![CDATA[2014-02-03 22:35:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-04 06:35:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[good]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>853</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/02/good.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/02/good.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:500;s:4:"file";s:16:"2014/02/good.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"good-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"good-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"good-500x188.png";s:5:"width";i:500;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:16:"good-500x188.png";s:5:"width";i:500;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"good-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>redblu3d1</title>
		<link>http://blog.demofox.org/2014/02/03/converting-rgb-to-grayscale/redblu3d1/</link>
		<pubDate>Tue, 04 Feb 2014 07:02:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/02/redblu3d1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>864</wp:post_id>
		<wp:post_date><![CDATA[2014-02-03 23:02:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-04 07:02:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[redblu3d1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>853</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/02/redblu3d1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/02/redblu3d1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1000;s:6:"height";i:1000;s:4:"file";s:21:"2014/02/redblu3d1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"redblu3d1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"redblu3d1-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"redblu3d1-1000x188.png";s:5:"width";i:1000;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"redblu3d1-1000x188.png";s:5:"width";i:1000;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"redblu3d1-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>redblue3d2</title>
		<link>http://blog.demofox.org/2014/02/03/converting-rgb-to-grayscale/redblue3d2/</link>
		<pubDate>Tue, 04 Feb 2014 07:02:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/02/redblue3d2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>865</wp:post_id>
		<wp:post_date><![CDATA[2014-02-03 23:02:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-04 07:02:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[redblue3d2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>853</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/02/redblue3d2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/02/redblue3d2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1000;s:6:"height";i:1000;s:4:"file";s:22:"2014/02/redblue3d2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"redblue3d2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"redblue3d2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"redblue3d2-1000x188.png";s:5:"width";i:1000;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"redblue3d2-1000x188.png";s:5:"width";i:1000;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"redblue3d2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>softminOFF</title>
		<link>http://blog.demofox.org/2014/02/20/soft-maximum-vs-hard-maximum/softminoff/</link>
		<pubDate>Thu, 20 Feb 2014 20:11:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/02/softminOFF.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>878</wp:post_id>
		<wp:post_date><![CDATA[2014-02-20 12:11:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-20 20:11:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[softminoff]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>876</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/02/softminOFF.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/02/softminOFF.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:802;s:6:"height";i:483;s:4:"file";s:22:"2014/02/softminOFF.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"softminOFF-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"softminOFF-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"softminOFF-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"softminOFF-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"softminOFF-498x300.png";s:5:"width";i:498;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>softminON</title>
		<link>http://blog.demofox.org/2014/02/20/soft-maximum-vs-hard-maximum/softminon/</link>
		<pubDate>Thu, 20 Feb 2014 20:12:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/02/softminON.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>879</wp:post_id>
		<wp:post_date><![CDATA[2014-02-20 12:12:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-20 20:12:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[softminon]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>876</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/02/softminON.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/02/softminON.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:483;s:4:"file";s:21:"2014/02/softminON.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"softminON-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"softminON-300x181.png";s:5:"width";i:300;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"softminON-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"softminON-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"softminON-496x300.png";s:5:"width";i:496;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bezquad</title>
		<link>http://blog.demofox.org/2014/03/04/bezier-curves/bezquad/</link>
		<pubDate>Wed, 05 Mar 2014 07:17:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/03/bezquad.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>888</wp:post_id>
		<wp:post_date><![CDATA[2014-03-04 23:17:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-05 07:17:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bezquad]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>886</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/03/bezquad.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/bezquad.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:807;s:6:"height";i:406;s:4:"file";s:19:"2014/03/bezquad.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"bezquad-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"bezquad-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"bezquad-807x188.png";s:5:"width";i:807;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"bezquad-807x188.png";s:5:"width";i:807;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"bezquad-500x251.png";s:5:"width";i:500;s:6:"height";i:251;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bezcubic</title>
		<link>http://blog.demofox.org/2014/03/04/bezier-curves/bezcubic/</link>
		<pubDate>Wed, 05 Mar 2014 07:24:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/03/bezcubic.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>892</wp:post_id>
		<wp:post_date><![CDATA[2014-03-04 23:24:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-05 07:24:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bezcubic]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>886</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/03/bezcubic.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/bezcubic.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:806;s:6:"height";i:405;s:4:"file";s:20:"2014/03/bezcubic.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"bezcubic-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"bezcubic-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"bezcubic-806x188.png";s:5:"width";i:806;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"bezcubic-806x188.png";s:5:"width";i:806;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"bezcubic-500x251.png";s:5:"width";i:500;s:6:"height";i:251;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fog</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/fog/</link>
		<pubDate>Sat, 21 Jun 2014 22:50:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/Fog.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>979</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 14:50:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-21 22:50:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fog]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/Fog.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/Fog.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:641;s:6:"height";i:353;s:4:"file";s:15:"2014/06/Fog.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"Fog-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"Fog-300x165.png";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"Fog-641x188.png";s:5:"width";i:641;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"Fog-641x188.png";s:5:"width";i:641;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"Fog-500x275.png";s:5:"width";i:500;s:6:"height";i:275;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>heightfog</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/heightfog/</link>
		<pubDate>Sat, 21 Jun 2014 23:05:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/heightfog.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>984</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 15:05:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-21 23:05:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[heightfog]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/heightfog.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/heightfog.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1005;s:6:"height";i:733;s:4:"file";s:21:"2014/06/heightfog.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"heightfog-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"heightfog-300x218.jpg";s:5:"width";i:300;s:6:"height";i:218;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"heightfog-1005x188.jpg";s:5:"width";i:1005;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"large-feature";a:4:{s:4:"file";s:22:"heightfog-1005x188.jpg";s:5:"width";i:1005;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"small-feature";a:4:{s:4:"file";s:21:"heightfog-411x300.jpg";s:5:"width";i:411;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ConstantFog1</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/constantfog1/</link>
		<pubDate>Sat, 21 Jun 2014 23:41:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/ConstantFog1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>992</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 15:41:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-21 23:41:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[constantfog1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/ConstantFog1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/ConstantFog1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1262;s:6:"height";i:672;s:4:"file";s:24:"2014/06/ConstantFog1.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"ConstantFog1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"ConstantFog1-300x159.png";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:25:"ConstantFog1-1024x545.png";s:5:"width";i:1024;s:6:"height";i:545;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"ConstantFog1-1262x188.png";s:5:"width";i:1262;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"ConstantFog1-1262x188.png";s:5:"width";i:1262;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"ConstantFog1-500x266.png";s:5:"width";i:500;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ConstantFog2</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/constantfog2/</link>
		<pubDate>Sat, 21 Jun 2014 23:44:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/ConstantFog2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>995</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 15:44:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-21 23:44:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[constantfog2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/ConstantFog2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/ConstantFog2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1261;s:6:"height";i:673;s:4:"file";s:24:"2014/06/ConstantFog2.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"ConstantFog2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"ConstantFog2-300x160.png";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:25:"ConstantFog2-1024x546.png";s:5:"width";i:1024;s:6:"height";i:546;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"ConstantFog2-1261x188.png";s:5:"width";i:1261;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"ConstantFog2-1261x188.png";s:5:"width";i:1261;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"ConstantFog2-500x266.png";s:5:"width";i:500;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ConstantFog3</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/constantfog3/</link>
		<pubDate>Sat, 21 Jun 2014 23:47:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/ConstantFog3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>997</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 15:47:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-21 23:47:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[constantfog3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/ConstantFog3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/ConstantFog3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1263;s:6:"height";i:672;s:4:"file";s:24:"2014/06/ConstantFog3.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"ConstantFog3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"ConstantFog3-300x159.png";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:25:"ConstantFog3-1024x544.png";s:5:"width";i:1024;s:6:"height";i:544;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"ConstantFog3-1263x188.png";s:5:"width";i:1263;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"ConstantFog3-1263x188.png";s:5:"width";i:1263;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"ConstantFog3-500x266.png";s:5:"width";i:500;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LinearFog1</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/linearfog1/</link>
		<pubDate>Sun, 22 Jun 2014 00:02:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/LinearFog1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1002</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 16:02:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 00:02:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linearfog1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/LinearFog1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/LinearFog1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1261;s:6:"height";i:672;s:4:"file";s:22:"2014/06/LinearFog1.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"LinearFog1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"LinearFog1-300x159.png";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:23:"LinearFog1-1024x545.png";s:5:"width";i:1024;s:6:"height";i:545;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"LinearFog1-1261x188.png";s:5:"width";i:1261;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"LinearFog1-1261x188.png";s:5:"width";i:1261;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"LinearFog1-500x266.png";s:5:"width";i:500;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LinearFog2</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/linearfog2/</link>
		<pubDate>Sun, 22 Jun 2014 00:03:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/LinearFog2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1003</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 16:03:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 00:03:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linearfog2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/LinearFog2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/LinearFog2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1261;s:6:"height";i:673;s:4:"file";s:22:"2014/06/LinearFog2.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"LinearFog2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"LinearFog2-300x160.png";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:23:"LinearFog2-1024x546.png";s:5:"width";i:1024;s:6:"height";i:546;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"LinearFog2-1261x188.png";s:5:"width";i:1261;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"LinearFog2-1261x188.png";s:5:"width";i:1261;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"LinearFog2-500x266.png";s:5:"width";i:500;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LinearFog3</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/linearfog3/</link>
		<pubDate>Sun, 22 Jun 2014 00:03:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/LinearFog3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1004</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 16:03:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 00:03:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linearfog3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/LinearFog3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/LinearFog3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1262;s:6:"height";i:673;s:4:"file";s:22:"2014/06/LinearFog3.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"LinearFog3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"LinearFog3-300x159.png";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:23:"LinearFog3-1024x546.png";s:5:"width";i:1024;s:6:"height";i:546;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"LinearFog3-1262x188.png";s:5:"width";i:1262;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"LinearFog3-1262x188.png";s:5:"width";i:1262;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"LinearFog3-500x266.png";s:5:"width";i:500;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AnalyticFog</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/analyticfog/</link>
		<pubDate>Sun, 22 Jun 2014 00:46:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/AnalyticFog.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1011</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 16:46:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 00:46:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[analyticfog]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/AnalyticFog.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/AnalyticFog.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:23:"2014/06/AnalyticFog.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"AnalyticFog-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"AnalyticFog-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:24:"AnalyticFog-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"AnalyticFog-1500x188.png";s:5:"width";i:1500;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"AnalyticFog-1500x188.png";s:5:"width";i:1500;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"AnalyticFog-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GraphConstant</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/graphconstant/</link>
		<pubDate>Sun, 22 Jun 2014 05:00:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/GraphConstant.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1014</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 21:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 05:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[graphconstant]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/GraphConstant.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/GraphConstant.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:397;s:6:"height";i:266;s:4:"file";s:25:"2014/06/GraphConstant.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"GraphConstant-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"GraphConstant-300x201.png";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"GraphConstant-397x188.png";s:5:"width";i:397;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"GraphConstant-397x188.png";s:5:"width";i:397;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GraphLinear</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/graphlinear/</link>
		<pubDate>Sun, 22 Jun 2014 05:00:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/GraphLinear.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1015</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 21:00:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 05:00:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[graphlinear]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/GraphLinear.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/GraphLinear.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:301;s:4:"file";s:23:"2014/06/GraphLinear.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"GraphLinear-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"GraphLinear-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"GraphLinear-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"GraphLinear-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"GraphLinear-398x300.png";s:5:"width";i:398;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GraphAnalytic</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/graphanalytic/</link>
		<pubDate>Sun, 22 Jun 2014 05:01:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/GraphAnalytic.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1016</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 21:01:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 05:01:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[graphanalytic]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/GraphAnalytic.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/GraphAnalytic.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:258;s:4:"file";s:25:"2014/06/GraphAnalytic.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"GraphAnalytic-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"GraphAnalytic-300x193.png";s:5:"width";i:300;s:6:"height";i:193;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"GraphAnalytic-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"GraphAnalytic-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>comic_source</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/comic_source/</link>
		<pubDate>Tue, 01 Jul 2014 04:54:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/comic_source.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1042</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 20:54:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 04:54:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[comic_source]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/comic_source.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/comic_source.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:24:"2014/06/comic_source.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"comic_source-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"comic_source-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"comic_source-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"comic_source-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"comic_source-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>moustache_source</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/moustache_source/</link>
		<pubDate>Tue, 01 Jul 2014 04:55:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/moustache_source.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1043</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 20:55:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 04:55:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[moustache_source]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/moustache_source.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/moustache_source.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:128;s:6:"height";i:128;s:4:"file";s:28:"2014/06/moustache_source.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ZoomedOut</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/zoomedout/</link>
		<pubDate>Tue, 01 Jul 2014 04:57:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/ZoomedOut.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1045</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 20:57:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 04:57:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[zoomedout]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/ZoomedOut.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/ZoomedOut.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:21:"2014/06/ZoomedOut.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"ZoomedOut-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"ZoomedOut-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"ZoomedOut-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"ZoomedOut-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"ZoomedOut-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"ZoomedOut-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LettersAlphaTest</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/lettersalphatest/</link>
		<pubDate>Tue, 01 Jul 2014 05:02:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/LettersAlphaTest.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1048</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:02:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:02:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lettersalphatest]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/LettersAlphaTest.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/LettersAlphaTest.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:28:"2014/06/LettersAlphaTest.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"LettersAlphaTest-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"LettersAlphaTest-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:29:"LettersAlphaTest-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"LettersAlphaTest-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"LettersAlphaTest-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:28:"LettersAlphaTest-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LettersSmooth</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/letterssmooth/</link>
		<pubDate>Tue, 01 Jul 2014 05:03:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/LettersSmooth.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1049</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:03:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:03:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[letterssmooth]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/LettersSmooth.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/LettersSmooth.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:25:"2014/06/LettersSmooth.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"LettersSmooth-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"LettersSmooth-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:26:"LettersSmooth-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"LettersSmooth-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"LettersSmooth-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"LettersSmooth-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LettersAlphaTest_256x256</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/lettersalphatest_256x256/</link>
		<pubDate>Tue, 01 Jul 2014 05:06:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/LettersAlphaTest_256x256.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1051</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:06:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:06:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lettersalphatest_256x256]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/LettersAlphaTest_256x256.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/LettersAlphaTest_256x256.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:36:"2014/06/LettersAlphaTest_256x256.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"LettersAlphaTest_256x256-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:36:"LettersAlphaTest_256x256-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:37:"LettersAlphaTest_256x256-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:37:"LettersAlphaTest_256x256-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:37:"LettersAlphaTest_256x256-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:36:"LettersAlphaTest_256x256-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LettersSmooth_256x256</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/letterssmooth_256x256/</link>
		<pubDate>Tue, 01 Jul 2014 05:07:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/LettersSmooth_256x256.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1052</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:07:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:07:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[letterssmooth_256x256]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/LettersSmooth_256x256.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/LettersSmooth_256x256.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:33:"2014/06/LettersSmooth_256x256.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"LettersSmooth_256x256-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"LettersSmooth_256x256-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:34:"LettersSmooth_256x256-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"LettersSmooth_256x256-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:34:"LettersSmooth_256x256-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:33:"LettersSmooth_256x256-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MoustacheAlphaTest</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/moustachealphatest/</link>
		<pubDate>Tue, 01 Jul 2014 05:09:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1054</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:09:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:09:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[moustachealphatest]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/MoustacheAlphaTest.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:30:"2014/06/MoustacheAlphaTest.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"MoustacheAlphaTest-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"MoustacheAlphaTest-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:31:"MoustacheAlphaTest-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:31:"MoustacheAlphaTest-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:31:"MoustacheAlphaTest-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:30:"MoustacheAlphaTest-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MoustacheSmooth</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/moustachesmooth/</link>
		<pubDate>Tue, 01 Jul 2014 05:10:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1055</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:10:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:10:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[moustachesmooth]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/MoustacheSmooth.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:27:"2014/06/MoustacheSmooth.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"MoustacheSmooth-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"MoustacheSmooth-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:28:"MoustacheSmooth-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"MoustacheSmooth-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:28:"MoustacheSmooth-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"MoustacheSmooth-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MoustacheAlphaTest_64x64</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/moustachealphatest_64x64/</link>
		<pubDate>Tue, 01 Jul 2014 05:10:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_64x64.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1056</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:10:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:10:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[moustachealphatest_64x64]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_64x64.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/MoustacheAlphaTest_64x64.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:36:"2014/06/MoustacheAlphaTest_64x64.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"MoustacheAlphaTest_64x64-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:36:"MoustacheAlphaTest_64x64-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:37:"MoustacheAlphaTest_64x64-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:37:"MoustacheAlphaTest_64x64-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:37:"MoustacheAlphaTest_64x64-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:36:"MoustacheAlphaTest_64x64-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MoustacheSmooth_64x64</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/moustachesmooth_64x64/</link>
		<pubDate>Tue, 01 Jul 2014 05:11:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_64x64.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1057</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:11:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:11:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[moustachesmooth_64x64]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_64x64.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/MoustacheSmooth_64x64.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:33:"2014/06/MoustacheSmooth_64x64.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"MoustacheSmooth_64x64-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"MoustacheSmooth_64x64-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:34:"MoustacheSmooth_64x64-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"MoustacheSmooth_64x64-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:34:"MoustacheSmooth_64x64-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:33:"MoustacheSmooth_64x64-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MoustacheAlphaTest_32x32</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/moustachealphatest_32x32/</link>
		<pubDate>Tue, 01 Jul 2014 05:11:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_32x32.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1058</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:11:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:11:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[moustachealphatest_32x32]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_32x32.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/MoustacheAlphaTest_32x32.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:36:"2014/06/MoustacheAlphaTest_32x32.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"MoustacheAlphaTest_32x32-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:36:"MoustacheAlphaTest_32x32-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:37:"MoustacheAlphaTest_32x32-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:37:"MoustacheAlphaTest_32x32-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:37:"MoustacheAlphaTest_32x32-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:36:"MoustacheAlphaTest_32x32-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MoustacheSmooth_32x32</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/moustachesmooth_32x32/</link>
		<pubDate>Tue, 01 Jul 2014 05:12:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_32x32.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1059</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:12:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:12:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[moustachesmooth_32x32]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_32x32.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/MoustacheSmooth_32x32.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:33:"2014/06/MoustacheSmooth_32x32.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"MoustacheSmooth_32x32-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"MoustacheSmooth_32x32-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:34:"MoustacheSmooth_32x32-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"MoustacheSmooth_32x32-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:34:"MoustacheSmooth_32x32-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:33:"MoustacheSmooth_32x32-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MoustacheAlphaTest_16x16</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/moustachealphatest_16x16/</link>
		<pubDate>Tue, 01 Jul 2014 05:12:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_16x16.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1061</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:12:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:12:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[moustachealphatest_16x16]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_16x16.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/MoustacheAlphaTest_16x16.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:36:"2014/06/MoustacheAlphaTest_16x16.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"MoustacheAlphaTest_16x16-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:36:"MoustacheAlphaTest_16x16-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:37:"MoustacheAlphaTest_16x16-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:37:"MoustacheAlphaTest_16x16-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:37:"MoustacheAlphaTest_16x16-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:36:"MoustacheAlphaTest_16x16-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MoustacheSmooth_16x16</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/moustachesmooth_16x16/</link>
		<pubDate>Tue, 01 Jul 2014 05:13:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_16x16.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1062</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:13:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:13:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[moustachesmooth_16x16]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1037</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_16x16.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/06/MoustacheSmooth_16x16.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1280;s:6:"height";i:720;s:4:"file";s:33:"2014/06/MoustacheSmooth_16x16.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"MoustacheSmooth_16x16-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"MoustacheSmooth_16x16-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:34:"MoustacheSmooth_16x16-1024x576.png";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"MoustacheSmooth_16x16-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:34:"MoustacheSmooth_16x16-1280x188.png";s:5:"width";i:1280;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:33:"MoustacheSmooth_16x16-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SLChart</title>
		<link>http://blog.demofox.org/2014/07/21/situational-leadership/slchart/</link>
		<pubDate>Tue, 22 Jul 2014 03:03:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/07/SLChart.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1071</wp:post_id>
		<wp:post_date><![CDATA[2014-07-21 19:03:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-22 03:03:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[slchart]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1068</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/07/SLChart.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/SLChart.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:442;s:6:"height";i:390;s:4:"file";s:19:"2014/07/SLChart.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"SLChart-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"SLChart-300x264.png";s:5:"width";i:300;s:6:"height";i:264;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"SLChart-442x188.png";s:5:"width";i:442;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"SLChart-442x188.png";s:5:"width";i:442;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"SLChart-340x300.png";s:5:"width";i:340;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MSAAConfigs</title>
		<link>http://blog.demofox.org/2014/08/11/temporal-supersampling-flipquads-and-real-time-raytracing/msaaconfigs/</link>
		<pubDate>Tue, 12 Aug 2014 05:45:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/08/MSAAConfigs.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1130</wp:post_id>
		<wp:post_date><![CDATA[2014-08-11 21:45:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-12 05:45:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[msaaconfigs]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1127</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/08/MSAAConfigs.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/MSAAConfigs.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:303;s:6:"height";i:75;s:4:"file";s:23:"2014/08/MSAAConfigs.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"MSAAConfigs-150x75.png";s:5:"width";i:150;s:6:"height";i:75;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"MSAAConfigs-300x74.png";s:5:"width";i:300;s:6:"height";i:74;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WTGrid</title>
		<link>http://blog.demofox.org/2014/08/13/wang-tiling/wtgrid/</link>
		<pubDate>Thu, 14 Aug 2014 06:38:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/08/WTGrid.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1151</wp:post_id>
		<wp:post_date><![CDATA[2014-08-13 22:38:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-14 06:38:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wtgrid]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1148</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/08/WTGrid.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/WTGrid.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:576;s:4:"file";s:18:"2014/08/WTGrid.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"WTGrid-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"WTGrid-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"WTGrid-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"WTGrid-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"WTGrid-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WTTiles</title>
		<link>http://blog.demofox.org/2014/08/13/wang-tiling/wttiles/</link>
		<pubDate>Thu, 14 Aug 2014 14:51:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/08/WTTiles.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1155</wp:post_id>
		<wp:post_date><![CDATA[2014-08-14 06:51:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-14 14:51:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wttiles]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1148</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/08/WTTiles.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:576;s:4:"file";s:19:"2014/08/WTTiles.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"WTTiles-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"WTTiles-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"WTTiles-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"WTTiles-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"WTTiles-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/WTTiles.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BinaryFractal1</title>
		<link>http://blog.demofox.org/2014/08/14/counting-in-binary-is-a-fractal/binaryfractal1/</link>
		<pubDate>Fri, 15 Aug 2014 01:25:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/08/BinaryFractal1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1162</wp:post_id>
		<wp:post_date><![CDATA[2014-08-14 17:25:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-15 01:25:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[binaryfractal1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1160</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/08/BinaryFractal1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/BinaryFractal1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:160;s:4:"file";s:26:"2014/08/BinaryFractal1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"BinaryFractal1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"BinaryFractal1-300x46.png";s:5:"width";i:300;s:6:"height";i:46;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"BinaryFractal1-500x78.png";s:5:"width";i:500;s:6:"height";i:78;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BinaryFractal2</title>
		<link>http://blog.demofox.org/2014/08/14/counting-in-binary-is-a-fractal/binaryfractal2/</link>
		<pubDate>Fri, 15 Aug 2014 01:25:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/08/BinaryFractal2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1163</wp:post_id>
		<wp:post_date><![CDATA[2014-08-14 17:25:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-15 01:25:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[binaryfractal2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1160</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/08/BinaryFractal2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/BinaryFractal2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:160;s:4:"file";s:26:"2014/08/BinaryFractal2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"BinaryFractal2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"BinaryFractal2-300x46.png";s:5:"width";i:300;s:6:"height";i:46;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"BinaryFractal2-500x78.png";s:5:"width";i:500;s:6:"height";i:78;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BinaryFractal3</title>
		<link>http://blog.demofox.org/2014/08/14/counting-in-binary-is-a-fractal/binaryfractal3/</link>
		<pubDate>Fri, 15 Aug 2014 01:25:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/08/BinaryFractal3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1164</wp:post_id>
		<wp:post_date><![CDATA[2014-08-14 17:25:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-15 01:25:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[binaryfractal3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1160</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/08/BinaryFractal3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/BinaryFractal3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:160;s:4:"file";s:26:"2014/08/BinaryFractal3.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"BinaryFractal3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"BinaryFractal3-300x46.png";s:5:"width";i:300;s:6:"height";i:46;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"BinaryFractal3-500x78.png";s:5:"width";i:500;s:6:"height";i:78;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BinaryFractal4</title>
		<link>http://blog.demofox.org/2014/08/14/counting-in-binary-is-a-fractal/binaryfractal4/</link>
		<pubDate>Fri, 15 Aug 2014 01:25:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/08/BinaryFractal4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1165</wp:post_id>
		<wp:post_date><![CDATA[2014-08-14 17:25:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-15 01:25:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[binaryfractal4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1160</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/08/BinaryFractal4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/BinaryFractal4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:160;s:4:"file";s:26:"2014/08/BinaryFractal4.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"BinaryFractal4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"BinaryFractal4-300x46.png";s:5:"width";i:300;s:6:"height";i:46;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"BinaryFractal4-500x78.png";s:5:"width";i:500;s:6:"height";i:78;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wang2Tiles</title>
		<link>http://blog.demofox.org/2014/08/13/wang-tiling/wang2tiles/</link>
		<pubDate>Sat, 16 Aug 2014 18:40:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/08/Wang2Tiles.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1169</wp:post_id>
		<wp:post_date><![CDATA[2014-08-16 10:40:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-16 18:40:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wang2tiles]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1148</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/08/Wang2Tiles.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/Wang2Tiles.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:576;s:4:"file";s:22:"2014/08/Wang2Tiles.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"Wang2Tiles-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"Wang2Tiles-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"Wang2Tiles-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"Wang2Tiles-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"Wang2Tiles-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wang2Grid</title>
		<link>http://blog.demofox.org/2014/08/13/wang-tiling/wang2grid/</link>
		<pubDate>Sat, 16 Aug 2014 18:41:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/08/Wang2Grid.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1170</wp:post_id>
		<wp:post_date><![CDATA[2014-08-16 10:41:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-16 18:41:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wang2grid]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1148</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/08/Wang2Grid.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/Wang2Grid.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:576;s:4:"file";s:21:"2014/08/Wang2Grid.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"Wang2Grid-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"Wang2Grid-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"Wang2Grid-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"Wang2Grid-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"Wang2Grid-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cubicbez</title>
		<link>http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/cubicbez/</link>
		<pubDate>Thu, 28 Aug 2014 19:30:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/08/cubicbez.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1186</wp:post_id>
		<wp:post_date><![CDATA[2014-08-28 11:30:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-28 19:30:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cubicbez]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1176</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/08/cubicbez.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/cubicbez.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:804;s:6:"height";i:805;s:4:"file";s:20:"2014/08/cubicbez.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"cubicbez-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"cubicbez-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"cubicbez-804x188.png";s:5:"width";i:804;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"cubicbez-804x188.png";s:5:"width";i:804;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"cubicbez-299x300.png";s:5:"width";i:299;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sin1_64</title>
		<link>http://blog.demofox.org/sin1_64/</link>
		<pubDate>Mon, 03 Nov 2014 20:51:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/sin1_64.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1223</wp:post_id>
		<wp:post_date><![CDATA[2014-11-03 12:51:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-03 20:51:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin1_64]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/sin1_64.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/sin1_64.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:453;s:4:"file";s:19:"2014/11/sin1_64.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"sin1_64-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"sin1_64-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"sin1_64-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"sin1_64-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"sin1_64-500x283.png";s:5:"width";i:500;s:6:"height";i:283;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sin1_128</title>
		<link>http://blog.demofox.org/sin1_128/</link>
		<pubDate>Mon, 03 Nov 2014 20:51:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/sin1_128.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1224</wp:post_id>
		<wp:post_date><![CDATA[2014-11-03 12:51:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-03 20:51:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin1_128]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/sin1_128.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/sin1_128.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:451;s:4:"file";s:20:"2014/11/sin1_128.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"sin1_128-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"sin1_128-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"sin1_128-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"sin1_128-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"sin1_128-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sin1_256</title>
		<link>http://blog.demofox.org/sin1_256/</link>
		<pubDate>Mon, 03 Nov 2014 20:51:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/sin1_256.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1225</wp:post_id>
		<wp:post_date><![CDATA[2014-11-03 12:51:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-03 20:51:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin1_256]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/sin1_256.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/sin1_256.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:452;s:4:"file";s:20:"2014/11/sin1_256.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"sin1_256-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"sin1_256-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"sin1_256-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"sin1_256-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"sin1_256-500x282.png";s:5:"width";i:500;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sin1_1024</title>
		<link>http://blog.demofox.org/sin1_1024/</link>
		<pubDate>Mon, 03 Nov 2014 20:51:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/sin1_1024.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1226</wp:post_id>
		<wp:post_date><![CDATA[2014-11-03 12:51:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-03 20:51:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin1_1024]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/sin1_1024.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/sin1_1024.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:450;s:4:"file";s:21:"2014/11/sin1_1024.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"sin1_1024-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"sin1_1024-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"sin1_1024-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"sin1_1024-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"sin1_1024-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sin2_1</title>
		<link>http://blog.demofox.org/sin2_1/</link>
		<pubDate>Tue, 04 Nov 2014 20:17:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sin2_1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1240</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:17:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:17:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin2_1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sin2_1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sin2_1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:559;s:6:"height";i:332;s:4:"file";s:18:"2014/11/Sin2_1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Sin2_1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"Sin2_1-300x178.png";s:5:"width";i:300;s:6:"height";i:178;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Sin2_1-559x188.png";s:5:"width";i:559;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Sin2_1-559x188.png";s:5:"width";i:559;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"Sin2_1-500x296.png";s:5:"width";i:500;s:6:"height";i:296;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sin2_2</title>
		<link>http://blog.demofox.org/sin2_2/</link>
		<pubDate>Tue, 04 Nov 2014 20:17:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sin2_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1241</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:17:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:17:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin2_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sin2_2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sin2_2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:555;s:6:"height";i:335;s:4:"file";s:18:"2014/11/Sin2_2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Sin2_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"Sin2_2-300x181.png";s:5:"width";i:300;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Sin2_2-555x188.png";s:5:"width";i:555;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Sin2_2-555x188.png";s:5:"width";i:555;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"Sin2_2-497x300.png";s:5:"width";i:497;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sin2_3</title>
		<link>http://blog.demofox.org/sin2_3/</link>
		<pubDate>Tue, 04 Nov 2014 20:17:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sin2_3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1242</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:17:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:17:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin2_3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sin2_3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sin2_3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:555;s:6:"height";i:336;s:4:"file";s:18:"2014/11/Sin2_3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Sin2_3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"Sin2_3-300x181.png";s:5:"width";i:300;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Sin2_3-555x188.png";s:5:"width";i:555;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Sin2_3-555x188.png";s:5:"width";i:555;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"Sin2_3-495x300.png";s:5:"width";i:495;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sin2_4</title>
		<link>http://blog.demofox.org/sin2_4/</link>
		<pubDate>Tue, 04 Nov 2014 20:17:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sin2_4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1243</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:17:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:17:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin2_4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sin2_4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sin2_4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:558;s:6:"height";i:335;s:4:"file";s:18:"2014/11/Sin2_4.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Sin2_4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"Sin2_4-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Sin2_4-558x188.png";s:5:"width";i:558;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Sin2_4-558x188.png";s:5:"width";i:558;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"Sin2_4-500x300.png";s:5:"width";i:500;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sin2_5</title>
		<link>http://blog.demofox.org/sin2_5/</link>
		<pubDate>Tue, 04 Nov 2014 20:17:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sin2_5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1244</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:17:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:17:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin2_5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sin2_5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sin2_5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:552;s:6:"height";i:362;s:4:"file";s:18:"2014/11/Sin2_5.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Sin2_5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"Sin2_5-300x196.png";s:5:"width";i:300;s:6:"height";i:196;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Sin2_5-552x188.png";s:5:"width";i:552;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Sin2_5-552x188.png";s:5:"width";i:552;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"Sin2_5-457x300.png";s:5:"width";i:457;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sin2_6</title>
		<link>http://blog.demofox.org/sin2_6/</link>
		<pubDate>Tue, 04 Nov 2014 20:17:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sin2_6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1245</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:17:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:17:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin2_6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sin2_6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sin2_6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:558;s:6:"height";i:363;s:4:"file";s:18:"2014/11/Sin2_6.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Sin2_6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"Sin2_6-300x195.png";s:5:"width";i:300;s:6:"height";i:195;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Sin2_6-558x188.png";s:5:"width";i:558;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Sin2_6-558x188.png";s:5:"width";i:558;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"Sin2_6-461x300.png";s:5:"width";i:461;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sin2_7</title>
		<link>http://blog.demofox.org/sin2_7/</link>
		<pubDate>Tue, 04 Nov 2014 20:29:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sin2_7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1249</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:29:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:29:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin2_7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sin2_7.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sin2_7.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:450;s:4:"file";s:18:"2014/11/Sin2_7.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Sin2_7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"Sin2_7-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Sin2_7-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Sin2_7-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"Sin2_7-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sin2_8</title>
		<link>http://blog.demofox.org/sin2_8/</link>
		<pubDate>Tue, 04 Nov 2014 20:34:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sin2_8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1252</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:34:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:34:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sin2_8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sin2_8.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sin2_8.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:451;s:4:"file";s:18:"2014/11/Sin2_8.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Sin2_8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"Sin2_8-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Sin2_8-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Sin2_8-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"Sin2_8-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sine3_1</title>
		<link>http://blog.demofox.org/sine3_1/</link>
		<pubDate>Tue, 04 Nov 2014 20:47:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sine3_1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1257</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:47:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:47:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sine3_1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sine3_1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sine3_1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:451;s:4:"file";s:19:"2014/11/Sine3_1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Sine3_1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Sine3_1-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"Sine3_1-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"Sine3_1-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"Sine3_1-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sine3_2</title>
		<link>http://blog.demofox.org/sine3_2/</link>
		<pubDate>Tue, 04 Nov 2014 20:47:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sine3_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1258</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:47:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:47:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sine3_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sine3_2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sine3_2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:802;s:6:"height";i:451;s:4:"file";s:19:"2014/11/Sine3_2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Sine3_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Sine3_2-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"Sine3_2-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"Sine3_2-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"Sine3_2-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sine3_3</title>
		<link>http://blog.demofox.org/sine3_3/</link>
		<pubDate>Tue, 04 Nov 2014 20:47:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/11/Sine3_3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1259</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:47:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:47:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sine3_3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/11/Sine3_3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/11/Sine3_3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:802;s:6:"height";i:450;s:4:"file";s:19:"2014/11/Sine3_3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Sine3_3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Sine3_3-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"Sine3_3-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"Sine3_3-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"Sine3_3-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ImRot1</title>
		<link>http://blog.demofox.org/imrot1/</link>
		<pubDate>Sun, 28 Dec 2014 04:23:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/12/ImRot1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1295</wp:post_id>
		<wp:post_date><![CDATA[2014-12-27 20:23:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-28 04:23:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[imrot1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/12/ImRot1.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/ImRot1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:316;s:6:"height";i:252;s:4:"file";s:18:"2014/12/ImRot1.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"ImRot1-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:18:"ImRot1-300x239.gif";s:5:"width";i:300;s:6:"height";i:239;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"ImRot1-316x188.gif";s:5:"width";i:316;s:6:"height";i:188;s:9:"mime-type";s:9:"image/gif";}s:13:"large-feature";a:4:{s:4:"file";s:18:"ImRot1-316x188.gif";s:5:"width";i:316;s:6:"height";i:188;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ImRot2</title>
		<link>http://blog.demofox.org/imrot2/</link>
		<pubDate>Sun, 28 Dec 2014 04:35:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/12/ImRot2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1300</wp:post_id>
		<wp:post_date><![CDATA[2014-12-27 20:35:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-28 04:35:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[imrot2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/12/ImRot2.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/ImRot2.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:339;s:6:"height";i:252;s:4:"file";s:18:"2014/12/ImRot2.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"ImRot2-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:18:"ImRot2-300x223.gif";s:5:"width";i:300;s:6:"height";i:223;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"ImRot2-339x188.gif";s:5:"width";i:339;s:6:"height";i:188;s:9:"mime-type";s:9:"image/gif";}s:13:"large-feature";a:4:{s:4:"file";s:18:"ImRot2-339x188.gif";s:5:"width";i:339;s:6:"height";i:188;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ImRot3</title>
		<link>http://blog.demofox.org/imrot3/</link>
		<pubDate>Sun, 28 Dec 2014 04:51:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/12/ImRot3.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1305</wp:post_id>
		<wp:post_date><![CDATA[2014-12-27 20:51:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-28 04:51:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[imrot3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/12/ImRot3.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/ImRot3.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:323;s:6:"height";i:247;s:4:"file";s:18:"2014/12/ImRot3.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"ImRot3-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:18:"ImRot3-300x229.gif";s:5:"width";i:300;s:6:"height";i:229;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"ImRot3-323x188.gif";s:5:"width";i:323;s:6:"height";i:188;s:9:"mime-type";s:9:"image/gif";}s:13:"large-feature";a:4:{s:4:"file";s:18:"ImRot3-323x188.gif";s:5:"width";i:323;s:6:"height";i:188;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>output</title>
		<link>http://blog.demofox.org/output/</link>
		<pubDate>Sun, 28 Dec 2014 05:49:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/12/output.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1316</wp:post_id>
		<wp:post_date><![CDATA[2014-12-27 21:49:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-28 05:49:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[output]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/12/output.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/output.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:40;s:4:"file";s:18:"2014/12/output.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"output-150x40.png";s:5:"width";i:150;s:6:"height";i:40;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"output-300x18.png";s:5:"width";i:300;s:6:"height";i:18;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:17:"output-500x31.png";s:5:"width";i:500;s:6:"height";i:31;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>y2xPlus1</title>
		<link>http://blog.demofox.org/y2xplus1/</link>
		<pubDate>Tue, 30 Dec 2014 19:38:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/12/y2xPlus1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1332</wp:post_id>
		<wp:post_date><![CDATA[2014-12-30 11:38:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-30 19:38:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[y2xplus1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/12/y2xPlus1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/y2xPlus1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:559;s:6:"height";i:333;s:4:"file";s:20:"2014/12/y2xPlus1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"y2xPlus1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"y2xPlus1-300x178.png";s:5:"width";i:300;s:6:"height";i:178;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"y2xPlus1-559x188.png";s:5:"width";i:559;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"y2xPlus1-559x188.png";s:5:"width";i:559;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"y2xPlus1-500x297.png";s:5:"width";i:500;s:6:"height";i:297;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>yx2MinPoint2</title>
		<link>http://blog.demofox.org/yx2minpoint2/</link>
		<pubDate>Tue, 30 Dec 2014 19:44:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/12/yx2MinPoint2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1334</wp:post_id>
		<wp:post_date><![CDATA[2014-12-30 11:44:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-30 19:44:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[yx2minpoint2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/12/yx2MinPoint2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/yx2MinPoint2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:558;s:6:"height";i:334;s:4:"file";s:24:"2014/12/yx2MinPoint2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"yx2MinPoint2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"yx2MinPoint2-300x179.png";s:5:"width";i:300;s:6:"height";i:179;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"yx2MinPoint2-558x188.png";s:5:"width";i:558;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"yx2MinPoint2-558x188.png";s:5:"width";i:558;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"yx2MinPoint2-500x300.png";s:5:"width";i:500;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DualNumberOutput</title>
		<link>http://blog.demofox.org/dualnumberoutput/</link>
		<pubDate>Wed, 31 Dec 2014 01:53:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2014/12/DualNumberOutput.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1357</wp:post_id>
		<wp:post_date><![CDATA[2014-12-30 17:53:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-31 01:53:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dualnumberoutput]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2014/12/DualNumberOutput.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/12/DualNumberOutput.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:277;s:4:"file";s:28:"2014/12/DualNumberOutput.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"DualNumberOutput-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"DualNumberOutput-300x129.png";s:5:"width";i:300;s:6:"height";i:129;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"DualNumberOutput-640x188.png";s:5:"width";i:640;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:28:"DualNumberOutput-640x188.png";s:5:"width";i:640;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:28:"DualNumberOutput-500x216.png";s:5:"width";i:500;s:6:"height";i:216;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HorVer</title>
		<link>http://blog.demofox.org/horver/</link>
		<pubDate>Fri, 16 Jan 2015 05:28:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/01/HorVer.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1399</wp:post_id>
		<wp:post_date><![CDATA[2015-01-15 21:28:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-16 05:28:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[horver]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/01/HorVer.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/01/HorVer.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:520;s:6:"height";i:256;s:4:"file";s:18:"2015/01/HorVer.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"HorVer-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"HorVer-300x148.png";s:5:"width";i:300;s:6:"height";i:148;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"HorVer-520x188.png";s:5:"width";i:520;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"HorVer-520x188.png";s:5:"width";i:520;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"HorVer-500x246.png";s:5:"width";i:500;s:6:"height";i:246;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BresenhamTest</title>
		<link>http://blog.demofox.org/bresenhamtest/</link>
		<pubDate>Mon, 19 Jan 2015 02:08:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/01/BresenhamTest.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1445</wp:post_id>
		<wp:post_date><![CDATA[2015-01-18 18:08:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-19 02:08:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bresenhamtest]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/01/BresenhamTest.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:25:"2015/01/BresenhamTest.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"BresenhamTest-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"BresenhamTest-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"BresenhamTest-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"BresenhamTest-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"BresenhamTest-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/01/BresenhamTest.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>animated</title>
		<link>http://blog.demofox.org/animated/</link>
		<pubDate>Sat, 24 Jan 2015 19:05:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/01/animated.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1449</wp:post_id>
		<wp:post_date><![CDATA[2015-01-24 11:05:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-24 19:05:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[animated]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/01/animated.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/01/animated.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:20:"2015/01/animated.gif";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"animated-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:20:"animated-300x300.gif";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"animated-512x188.gif";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/gif";}s:13:"large-feature";a:4:{s:4:"file";s:20:"animated-512x188.gif";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/gif";}s:13:"small-feature";a:4:{s:4:"file";s:20:"animated-300x300.gif";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MinHash</title>
		<link>http://blog.demofox.org/minhash/</link>
		<pubDate>Fri, 30 Jan 2015 06:06:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/01/MinHash.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1513</wp:post_id>
		<wp:post_date><![CDATA[2015-01-29 22:06:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-30 06:06:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[minhash]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/01/MinHash.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/01/MinHash.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:256;s:4:"file";s:19:"2015/01/MinHash.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"MinHash-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"MinHash-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"MinHash-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"MinHash-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"MinHash-500x250.png";s:5:"width";i:500;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>KMVOutput</title>
		<link>http://blog.demofox.org/kmvoutput/</link>
		<pubDate>Wed, 04 Feb 2015 04:06:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/KMVOutput.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1574</wp:post_id>
		<wp:post_date><![CDATA[2015-02-03 20:06:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-04 04:06:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kmvoutput]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/KMVOutput.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/KMVOutput.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:642;s:6:"height";i:373;s:4:"file";s:21:"2015/02/KMVOutput.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"KMVOutput-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"KMVOutput-300x174.png";s:5:"width";i:300;s:6:"height";i:174;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"KMVOutput-642x188.png";s:5:"width";i:642;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"KMVOutput-642x188.png";s:5:"width";i:642;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"KMVOutput-500x290.png";s:5:"width";i:500;s:6:"height";i:290;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>phantom</title>
		<link>http://blog.demofox.org/phantom/</link>
		<pubDate>Thu, 05 Feb 2015 20:28:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/phantom.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1593</wp:post_id>
		<wp:post_date><![CDATA[2015-02-05 12:28:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-05 20:28:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[phantom]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/phantom.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/phantom.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:318;s:6:"height";i:400;s:4:"file";s:19:"2015/02/phantom.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"phantom-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"phantom-239x300.png";s:5:"width";i:239;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"phantom-318x188.png";s:5:"width";i:318;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"phantom-318x188.png";s:5:"width";i:318;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"phantom-239x300.png";s:5:"width";i:239;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BloomFilterOutput</title>
		<link>http://blog.demofox.org/bloomfilteroutput/</link>
		<pubDate>Mon, 09 Feb 2015 03:33:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/BloomFilterOutput.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1646</wp:post_id>
		<wp:post_date><![CDATA[2015-02-08 19:33:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-09 03:33:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bloomfilteroutput]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/BloomFilterOutput.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/BloomFilterOutput.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:645;s:6:"height";i:450;s:4:"file";s:29:"2015/02/BloomFilterOutput.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"BloomFilterOutput-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"BloomFilterOutput-300x209.png";s:5:"width";i:300;s:6:"height";i:209;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"BloomFilterOutput-645x188.png";s:5:"width";i:645;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"BloomFilterOutput-645x188.png";s:5:"width";i:645;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:29:"BloomFilterOutput-430x300.png";s:5:"width";i:430;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ApplesOranges1</title>
		<link>http://blog.demofox.org/applesoranges1/</link>
		<pubDate>Wed, 11 Feb 2015 20:39:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/ApplesOranges1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1676</wp:post_id>
		<wp:post_date><![CDATA[2015-02-11 12:39:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-11 20:39:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[applesoranges1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/ApplesOranges1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/ApplesOranges1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:300;s:4:"file";s:26:"2015/02/ApplesOranges1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"ApplesOranges1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"ApplesOranges1-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"ApplesOranges1-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"ApplesOranges1-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"ApplesOranges1-400x300.png";s:5:"width";i:400;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ApplesOranges2</title>
		<link>http://blog.demofox.org/applesoranges2/</link>
		<pubDate>Wed, 11 Feb 2015 20:39:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/ApplesOranges2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1677</wp:post_id>
		<wp:post_date><![CDATA[2015-02-11 12:39:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-11 20:39:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[applesoranges2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/ApplesOranges2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/ApplesOranges2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:300;s:4:"file";s:26:"2015/02/ApplesOranges2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"ApplesOranges2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"ApplesOranges2-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"ApplesOranges2-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"ApplesOranges2-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"ApplesOranges2-400x300.png";s:5:"width";i:400;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ApplesOranges3</title>
		<link>http://blog.demofox.org/applesoranges3/</link>
		<pubDate>Wed, 11 Feb 2015 20:45:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/ApplesOranges3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1682</wp:post_id>
		<wp:post_date><![CDATA[2015-02-11 12:45:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-11 20:45:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[applesoranges3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/ApplesOranges3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/ApplesOranges3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:300;s:4:"file";s:26:"2015/02/ApplesOranges3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"ApplesOranges3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"ApplesOranges3-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"ApplesOranges3-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"ApplesOranges3-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"ApplesOranges3-400x300.png";s:5:"width";i:400;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ApplesOranges4</title>
		<link>http://blog.demofox.org/applesoranges4/</link>
		<pubDate>Wed, 11 Feb 2015 20:52:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/ApplesOranges4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1686</wp:post_id>
		<wp:post_date><![CDATA[2015-02-11 12:52:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-11 20:52:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[applesoranges4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/ApplesOranges4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/ApplesOranges4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:300;s:4:"file";s:26:"2015/02/ApplesOranges4.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"ApplesOranges4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"ApplesOranges4-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"ApplesOranges4-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"ApplesOranges4-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"ApplesOranges4-400x300.png";s:5:"width";i:400;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HistogramDotProduct</title>
		<link>http://blog.demofox.org/histogramdotproduct/</link>
		<pubDate>Mon, 16 Feb 2015 17:42:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/HistogramDotProduct.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1720</wp:post_id>
		<wp:post_date><![CDATA[2015-02-16 09:42:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-16 17:42:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[histogramdotproduct]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/HistogramDotProduct.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/HistogramDotProduct.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:646;s:6:"height";i:316;s:4:"file";s:31:"2015/02/HistogramDotProduct.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"HistogramDotProduct-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"HistogramDotProduct-300x147.png";s:5:"width";i:300;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:31:"HistogramDotProduct-646x188.png";s:5:"width";i:646;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:31:"HistogramDotProduct-646x188.png";s:5:"width";i:646;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:31:"HistogramDotProduct-500x245.png";s:5:"width";i:500;s:6:"height";i:245;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CMS_normed_normal</title>
		<link>http://blog.demofox.org/cms_normed_normal/</link>
		<pubDate>Sun, 22 Feb 2015 19:50:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/CMS_normed_normal.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1740</wp:post_id>
		<wp:post_date><![CDATA[2015-02-22 11:50:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-22 19:50:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cms_normed_normal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/CMS_normed_normal.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/CMS_normed_normal.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:645;s:6:"height";i:630;s:4:"file";s:29:"2015/02/CMS_normed_normal.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"CMS_normed_normal-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"CMS_normed_normal-300x293.png";s:5:"width";i:300;s:6:"height";i:293;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"CMS_normed_normal-645x188.png";s:5:"width";i:645;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"CMS_normed_normal-645x188.png";s:5:"width";i:645;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:29:"CMS_normed_normal-307x300.png";s:5:"width";i:307;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CMS_unnormed_conservative</title>
		<link>http://blog.demofox.org/cms_unnormed_conservative/</link>
		<pubDate>Sun, 22 Feb 2015 19:50:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/CMS_unnormed_conservative.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1741</wp:post_id>
		<wp:post_date><![CDATA[2015-02-22 11:50:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-22 19:50:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cms_unnormed_conservative]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/CMS_unnormed_conservative.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/CMS_unnormed_conservative.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:647;s:6:"height";i:630;s:4:"file";s:37:"2015/02/CMS_unnormed_conservative.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"CMS_unnormed_conservative-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"CMS_unnormed_conservative-300x292.png";s:5:"width";i:300;s:6:"height";i:292;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:37:"CMS_unnormed_conservative-647x188.png";s:5:"width";i:647;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:37:"CMS_unnormed_conservative-647x188.png";s:5:"width";i:647;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:37:"CMS_unnormed_conservative-308x300.png";s:5:"width";i:308;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CMS_unnormed_normal</title>
		<link>http://blog.demofox.org/cms_unnormed_normal/</link>
		<pubDate>Sun, 22 Feb 2015 19:51:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/CMS_unnormed_normal.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1742</wp:post_id>
		<wp:post_date><![CDATA[2015-02-22 11:51:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-22 19:51:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cms_unnormed_normal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/CMS_unnormed_normal.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/CMS_unnormed_normal.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:647;s:6:"height";i:631;s:4:"file";s:31:"2015/02/CMS_unnormed_normal.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"CMS_unnormed_normal-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"CMS_unnormed_normal-300x293.png";s:5:"width";i:300;s:6:"height";i:293;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:31:"CMS_unnormed_normal-647x188.png";s:5:"width";i:647;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:31:"CMS_unnormed_normal-647x188.png";s:5:"width";i:647;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:31:"CMS_unnormed_normal-308x300.png";s:5:"width";i:308;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StdFunc</title>
		<link>http://blog.demofox.org/stdfunc/</link>
		<pubDate>Wed, 25 Feb 2015 20:20:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/StdFunc.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1784</wp:post_id>
		<wp:post_date><![CDATA[2015-02-25 12:20:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-25 20:20:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stdfunc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/StdFunc.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/StdFunc.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:646;s:6:"height";i:394;s:4:"file";s:19:"2015/02/StdFunc.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"StdFunc-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"StdFunc-300x183.png";s:5:"width";i:300;s:6:"height";i:183;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"StdFunc-646x188.png";s:5:"width";i:646;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"StdFunc-646x188.png";s:5:"width";i:646;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"StdFunc-492x300.png";s:5:"width";i:492;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>xzibit</title>
		<link>http://blog.demofox.org/xzibit/</link>
		<pubDate>Wed, 25 Feb 2015 20:33:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/02/xzibit.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1790</wp:post_id>
		<wp:post_date><![CDATA[2015-02-25 12:33:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-25 20:33:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[xzibit]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/02/xzibit.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/02/xzibit.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:333;s:4:"file";s:18:"2015/02/xzibit.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"xzibit-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"xzibit-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"xzibit-500x188.jpg";s:5:"width";i:500;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"large-feature";a:4:{s:4:"file";s:18:"xzibit-500x188.jpg";s:5:"width";i:500;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"small-feature";a:4:{s:4:"file";s:18:"xzibit-450x300.jpg";s:5:"width";i:450;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>plotBitsError</title>
		<link>http://blog.demofox.org/plotbitserror/</link>
		<pubDate>Sat, 07 Mar 2015 19:32:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/plotBitsError.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1858</wp:post_id>
		<wp:post_date><![CDATA[2015-03-07 11:32:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-07 19:32:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[plotbitserror]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/plotBitsError.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/plotBitsError.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:771;s:6:"height";i:526;s:4:"file";s:25:"2015/03/plotBitsError.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"plotBitsError-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"plotBitsError-300x205.png";s:5:"width";i:300;s:6:"height";i:205;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"plotBitsError-771x188.png";s:5:"width";i:771;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"plotBitsError-771x188.png";s:5:"width";i:771;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"plotBitsError-440x300.png";s:5:"width";i:440;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HLLOutput</title>
		<link>http://blog.demofox.org/hlloutput/</link>
		<pubDate>Mon, 09 Mar 2015 19:22:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/HLLOutput.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1908</wp:post_id>
		<wp:post_date><![CDATA[2015-03-09 11:22:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-09 19:22:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hlloutput]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/HLLOutput.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/HLLOutput.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:647;s:6:"height";i:366;s:4:"file";s:21:"2015/03/HLLOutput.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"HLLOutput-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"HLLOutput-300x170.png";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"HLLOutput-647x188.png";s:5:"width";i:647;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"HLLOutput-647x188.png";s:5:"width";i:647;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"HLLOutput-500x283.png";s:5:"width";i:500;s:6:"height";i:283;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hll</title>
		<link>http://blog.demofox.org/hll/</link>
		<pubDate>Tue, 10 Mar 2015 03:51:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/hll.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1937</wp:post_id>
		<wp:post_date><![CDATA[2015-03-09 19:51:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-10 03:51:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hll]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/hll.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/hll.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:480;s:6:"height";i:360;s:4:"file";s:15:"2015/03/hll.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"hll-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:15:"hll-300x225.jpg";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"hll-480x188.jpg";s:5:"width";i:480;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"large-feature";a:4:{s:4:"file";s:15:"hll-480x188.jpg";s:5:"width";i:480;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"small-feature";a:4:{s:4:"file";s:15:"hll-400x300.jpg";s:5:"width";i:400;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Envelope</title>
		<link>http://blog.demofox.org/envelope/</link>
		<pubDate>Sun, 15 Mar 2015 03:45:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/Envelope.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1956</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 19:45:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-15 03:45:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[envelope]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/Envelope.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/Envelope.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:893;s:6:"height";i:71;s:4:"file";s:20:"2015/03/Envelope.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Envelope-150x71.png";s:5:"width";i:150;s:6:"height";i:71;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Envelope-300x24.png";s:5:"width";i:300;s:6:"height";i:24;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"Envelope-500x40.png";s:5:"width";i:500;s:6:"height";i:40;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>melody</title>
		<link>http://blog.demofox.org/melody/</link>
		<pubDate>Sun, 15 Mar 2015 04:40:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/melody.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1981</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 20:40:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-15 04:40:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[melody]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/melody.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/melody.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:902;s:6:"height";i:75;s:4:"file";s:18:"2015/03/melody.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"melody-150x75.png";s:5:"width";i:150;s:6:"height";i:75;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"melody-300x25.png";s:5:"width";i:300;s:6:"height";i:25;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:17:"melody-500x42.png";s:5:"width";i:500;s:6:"height";i:42;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>melody</title>
		<link>http://blog.demofox.org/melody-2/</link>
		<pubDate>Sun, 15 Mar 2015 04:40:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/melody.wav</guid>
		<description></description>
		<content:encoded><![CDATA["melody".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1982</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 20:40:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-15 04:40:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[melody-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/melody.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/melody.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:793844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:9;s:16:"length_formatted";s:4:"0:09";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sine</title>
		<link>http://blog.demofox.org/sine/</link>
		<pubDate>Sun, 15 Mar 2015 04:44:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/sine.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1983</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 20:44:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-15 04:44:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/sine.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:895;s:6:"height";i:73;s:4:"file";s:16:"2015/03/sine.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"sine-150x73.png";s:5:"width";i:150;s:6:"height";i:73;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"sine-300x24.png";s:5:"width";i:300;s:6:"height";i:24;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"sine-500x41.png";s:5:"width";i:500;s:6:"height";i:41;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/sine.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sine</title>
		<link>http://blog.demofox.org/sine-2/</link>
		<pubDate>Sun, 15 Mar 2015 04:44:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/sine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["sine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1984</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 20:44:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-15 04:44:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sine-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/sine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/sine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:88244;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sineenvelope</title>
		<link>http://blog.demofox.org/sineenvelope/</link>
		<pubDate>Sun, 15 Mar 2015 04:49:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/sineenvelope.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1987</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 20:49:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-15 04:49:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sineenvelope]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/sineenvelope.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/sineenvelope.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:895;s:6:"height";i:73;s:4:"file";s:24:"2015/03/sineenvelope.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"sineenvelope-150x73.png";s:5:"width";i:150;s:6:"height";i:73;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"sineenvelope-300x24.png";s:5:"width";i:300;s:6:"height";i:24;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"sineenvelope-500x41.png";s:5:"width";i:500;s:6:"height";i:41;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sineenvelope</title>
		<link>http://blog.demofox.org/sineenvelope-2/</link>
		<pubDate>Sun, 15 Mar 2015 04:49:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/sineenvelope.wav</guid>
		<description></description>
		<content:encoded><![CDATA["sineenvelope".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1988</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 20:49:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-15 04:49:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sineenvelope-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/sineenvelope.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/sineenvelope.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:88244;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>drum</title>
		<link>http://blog.demofox.org/drum/</link>
		<pubDate>Sun, 15 Mar 2015 04:51:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/drum.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1989</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 20:51:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-15 04:51:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[drum]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/drum.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/drum.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:894;s:6:"height";i:74;s:4:"file";s:16:"2015/03/drum.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"drum-150x74.png";s:5:"width";i:150;s:6:"height";i:74;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"drum-300x25.png";s:5:"width";i:300;s:6:"height";i:25;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"drum-500x41.png";s:5:"width";i:500;s:6:"height";i:41;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>drum</title>
		<link>http://blog.demofox.org/drum-2/</link>
		<pubDate>Sun, 15 Mar 2015 04:51:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/drum.wav</guid>
		<description></description>
		<content:encoded><![CDATA["drum".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1990</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 20:51:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-15 04:51:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[drum-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/drum.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/drum.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:88244;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cymbal</title>
		<link>http://blog.demofox.org/cymbal/</link>
		<pubDate>Mon, 16 Mar 2015 21:41:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/cymbal.wav</guid>
		<description></description>
		<content:encoded><![CDATA["cymbal".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2003</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 13:41:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 21:41:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cymbal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/cymbal.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:693104;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cymbal_f</title>
		<link>http://blog.demofox.org/cymbal_f/</link>
		<pubDate>Mon, 16 Mar 2015 21:41:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/cymbal_f.wav</guid>
		<description></description>
		<content:encoded><![CDATA["cymbal_f".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2004</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 13:41:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 21:41:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cymbal_f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal_f.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/cymbal_f.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:693044;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>legend</title>
		<link>http://blog.demofox.org/legend/</link>
		<pubDate>Mon, 16 Mar 2015 21:41:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/legend.wav</guid>
		<description></description>
		<content:encoded><![CDATA["legend".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2005</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 13:41:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 21:41:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[legend]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/legend.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:793904;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:9;s:16:"length_formatted";s:4:"0:09";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>legend_f</title>
		<link>http://blog.demofox.org/legend_f/</link>
		<pubDate>Mon, 16 Mar 2015 21:42:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/legend_f.wav</guid>
		<description></description>
		<content:encoded><![CDATA["legend_f".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2006</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 13:42:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 21:42:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[legend_f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend_f.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/legend_f.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:793844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:9;s:16:"length_formatted";s:4:"0:09";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_triangle</title>
		<link>http://blog.demofox.org/_triangle/</link>
		<pubDate>Mon, 16 Mar 2015 22:32:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/triangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_triangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2026</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:32:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:32:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_triangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/triangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/triangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_triangle_f</title>
		<link>http://blog.demofox.org/_triangle_f/</link>
		<pubDate>Mon, 16 Mar 2015 22:32:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/triangle_f.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_triangle_f".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2027</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:32:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:32:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_triangle_f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/triangle_f.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/triangle_f.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_triangleBL</title>
		<link>http://blog.demofox.org/_trianglebl/</link>
		<pubDate>Mon, 16 Mar 2015 22:32:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/triangleBL.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_triangleBL".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2028</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:32:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:32:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_trianglebl]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/triangleBL.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/triangleBL.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_triangleBL_f</title>
		<link>http://blog.demofox.org/_trianglebl_f/</link>
		<pubDate>Mon, 16 Mar 2015 22:32:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/triangleBL_f.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_triangleBL_f".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2029</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:32:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:32:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_trianglebl_f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/triangleBL_f.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/triangleBL_f.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_sine</title>
		<link>http://blog.demofox.org/_sine/</link>
		<pubDate>Mon, 16 Mar 2015 22:32:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/sine1.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_sine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2030</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:32:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:32:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_sine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/sine1.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/sine1.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_sine_f</title>
		<link>http://blog.demofox.org/_sine_f/</link>
		<pubDate>Mon, 16 Mar 2015 22:32:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/sine_f.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_sine_f".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2031</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:32:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:32:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_sine_f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/sine_f.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/sine_f.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_square</title>
		<link>http://blog.demofox.org/_square/</link>
		<pubDate>Mon, 16 Mar 2015 22:32:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/square.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_square".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2032</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:32:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:32:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_square]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/square.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/square.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_square_f</title>
		<link>http://blog.demofox.org/_square_f/</link>
		<pubDate>Mon, 16 Mar 2015 22:32:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/square_f.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_square_f".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2033</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:32:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:32:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_square_f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/square_f.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/square_f.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_squareBL</title>
		<link>http://blog.demofox.org/_squarebl/</link>
		<pubDate>Mon, 16 Mar 2015 22:32:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/squareBL.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_squareBL".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2034</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:32:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:32:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_squarebl]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/squareBL.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/squareBL.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_squareBL_f</title>
		<link>http://blog.demofox.org/_squarebl_f/</link>
		<pubDate>Mon, 16 Mar 2015 22:33:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/squareBL_f.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_squareBL_f".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2035</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:33:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:33:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_squarebl_f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/squareBL_f.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/squareBL_f.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_saw_f</title>
		<link>http://blog.demofox.org/_saw_f/</link>
		<pubDate>Mon, 16 Mar 2015 22:46:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/saw_f.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_saw_f".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2044</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:46:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:46:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_saw_f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/saw_f.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/saw_f.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_sawBL</title>
		<link>http://blog.demofox.org/_sawbl/</link>
		<pubDate>Mon, 16 Mar 2015 22:46:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/sawBL.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_sawBL".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2045</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:46:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:46:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_sawbl]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/sawBL.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/sawBL.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_sawBL_f</title>
		<link>http://blog.demofox.org/_sawbl_f/</link>
		<pubDate>Mon, 16 Mar 2015 22:46:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/sawBL_f.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_sawBL_f".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2046</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:46:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:46:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_sawbl_f]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/sawBL_f.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/sawBL_f.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_saw</title>
		<link>http://blog.demofox.org/_saw/</link>
		<pubDate>Mon, 16 Mar 2015 22:46:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/saw.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_saw".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2047</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:46:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:46:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_saw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/saw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/saw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:352844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_cymbal_250_3</title>
		<link>http://blog.demofox.org/_cymbal_250_3/</link>
		<pubDate>Tue, 17 Mar 2015 22:24:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/cymbal_250_3.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_cymbal_250_3".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2062</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 14:24:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-17 22:24:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_cymbal_250_3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal_250_3.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/cymbal_250_3.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:693044;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_cymbal_250_12</title>
		<link>http://blog.demofox.org/_cymbal_250_12/</link>
		<pubDate>Tue, 17 Mar 2015 22:24:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/cymbal_250_12.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_cymbal_250_12".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2063</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 14:24:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-17 22:24:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_cymbal_250_12]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal_250_12.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/cymbal_250_12.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:693044;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_cymbal_333_6</title>
		<link>http://blog.demofox.org/_cymbal_333_6/</link>
		<pubDate>Tue, 17 Mar 2015 22:24:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/cymbal_333_6.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_cymbal_333_6".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2064</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 14:24:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-17 22:24:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_cymbal_333_6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal_333_6.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/cymbal_333_6.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:693044;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_legend_250_3</title>
		<link>http://blog.demofox.org/_legend_250_3/</link>
		<pubDate>Tue, 17 Mar 2015 22:24:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/legend_250_3.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_legend_250_3".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2065</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 14:24:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-17 22:24:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_legend_250_3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend_250_3.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/legend_250_3.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:793844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:9;s:16:"length_formatted";s:4:"0:09";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_legend_250_12</title>
		<link>http://blog.demofox.org/_legend_250_12/</link>
		<pubDate>Tue, 17 Mar 2015 22:24:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/legend_250_12.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_legend_250_12".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2066</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 14:24:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-17 22:24:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_legend_250_12]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend_250_12.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/legend_250_12.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:793844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:9;s:16:"length_formatted";s:4:"0:09";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_legend_333_6</title>
		<link>http://blog.demofox.org/_legend_333_6/</link>
		<pubDate>Tue, 17 Mar 2015 22:24:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/legend_333_6.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_legend_333_6".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2067</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 14:24:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-17 22:24:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_legend_333_6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend_333_6.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/legend_333_6.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:793844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:9;s:16:"length_formatted";s:4:"0:09";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_cymbal_mtr</title>
		<link>http://blog.demofox.org/_cymbal_mtr/</link>
		<pubDate>Wed, 18 Mar 2015 00:12:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/cymbal_mtr.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_cymbal_mtr".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2090</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 16:12:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-18 00:12:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_cymbal_mtr]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal_mtr.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/cymbal_mtr.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:693044;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_legend_mtr</title>
		<link>http://blog.demofox.org/_legend_mtr/</link>
		<pubDate>Wed, 18 Mar 2015 00:12:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/legend_mtr.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_legend_mtr".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2091</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 16:12:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-18 00:12:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_legend_mtr]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend_mtr.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/legend_mtr.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:793844;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:9;s:16:"length_formatted";s:4:"0:09";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_ReverbLarge</title>
		<link>http://blog.demofox.org/_reverblarge/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_ReverbLarge".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2120</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_reverblarge]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/ReverbLarge.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:533714;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:6;s:16:"length_formatted";s:4:"0:06";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_ReverbMedium</title>
		<link>http://blog.demofox.org/_reverbmedium/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_ReverbMedium".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2121</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_reverbmedium]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/ReverbMedium.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:88304;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_ReverbSmall</title>
		<link>http://blog.demofox.org/_reverbsmall/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_ReverbSmall".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2122</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_reverbsmall]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/ReverbSmall.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:66254;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_SoundBite</title>
		<link>http://blog.demofox.org/_soundbite/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/SoundBite.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_SoundBite".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2123</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_soundbite]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundBite.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/SoundBite.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:103298;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_SoundCymbal</title>
		<link>http://blog.demofox.org/_soundcymbal/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_SoundCymbal".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2124</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_soundcymbal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/SoundCymbal.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:591926;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_SoundJawharp</title>
		<link>http://blog.demofox.org/_soundjawharp/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_SoundJawharp".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2125</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_soundjawharp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/SoundJawharp.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:88304;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_SoundLegend</title>
		<link>http://blog.demofox.org/_soundlegend/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_SoundLegend".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2126</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_soundlegend]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/SoundLegend.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:617504;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_SoundSaw</title>
		<link>http://blog.demofox.org/_soundsaw/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_SoundSaw".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2127</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_soundsaw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/SoundSaw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:11130;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_SoundSine</title>
		<link>http://blog.demofox.org/_soundsine/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/SoundSine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_SoundSine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2128</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_soundsine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundSine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/SoundSine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:11130;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_SoundSquare</title>
		<link>http://blog.demofox.org/_soundsquare/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_SoundSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2129</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_soundsquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/SoundSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:11130;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_SoundTriangle</title>
		<link>http://blog.demofox.org/_soundtriangle/</link>
		<pubDate>Sun, 22 Mar 2015 05:51:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_SoundTriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2130</wp:post_id>
		<wp:post_date><![CDATA[2015-03-21 21:51:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 05:51:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_soundtriangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/SoundTriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:11130;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_SBite</title>
		<link>http://blog.demofox.org/c_rl_sbite/</link>
		<pubDate>Sun, 22 Mar 2015 16:06:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_SBite.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_SBite".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2135</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 08:06:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 16:06:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_sbite]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SBite.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_SBite.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:636846;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_SBite_66</title>
		<link>http://blog.demofox.org/c_rl_sbite_66/</link>
		<pubDate>Sun, 22 Mar 2015 16:06:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_SBite_66.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_SBite_66".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2136</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 08:06:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 16:06:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_sbite_66]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SBite_66.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_SBite_66.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:636846;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_SBite_33</title>
		<link>http://blog.demofox.org/c_rl_sbite_33/</link>
		<pubDate>Sun, 22 Mar 2015 16:37:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_SBite_33.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_SBite_33".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2143</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 08:37:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-22 16:37:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_sbite_33]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SBite_33.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_SBite_33.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:636846;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SSaw_SSquare</title>
		<link>http://blog.demofox.org/c_ssaw_ssquare/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SSaw_SSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2155</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_ssaw_ssquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SSaw_SSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:22094;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SSaw_STriangle</title>
		<link>http://blog.demofox.org/c_ssaw_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SSaw_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SSaw_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2156</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_ssaw_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSaw_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SSaw_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:22094;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SSine_SSine</title>
		<link>http://blog.demofox.org/c_ssine_ssine/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SSine_SSine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SSine_SSine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2157</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_ssine_ssine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSine_SSine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SSine_SSine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:22094;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SSine_SSquare</title>
		<link>http://blog.demofox.org/c_ssine_ssquare/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SSine_SSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SSine_SSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2158</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_ssine_ssquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSine_SSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SSine_SSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:22094;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SSine_STriangle</title>
		<link>http://blog.demofox.org/c_ssine_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SSine_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SSine_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2159</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_ssine_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSine_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SSine_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:22094;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SSquare_SSquare</title>
		<link>http://blog.demofox.org/c_ssquare_ssquare/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SSquare_SSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SSquare_SSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2160</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_ssquare_ssquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSquare_SSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SSquare_SSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:22094;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SSquare_STriangle</title>
		<link>http://blog.demofox.org/c_ssquare_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SSquare_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SSquare_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2161</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_ssquare_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSquare_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SSquare_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:22094;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_STriangle_STriangle</title>
		<link>http://blog.demofox.org/c_striangle_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_STriangle_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_STriangle_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2162</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_striangle_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_STriangle_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_STriangle_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:22094;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_RL</title>
		<link>http://blog.demofox.org/c_rl_rl/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_RL.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_RL".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2163</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_rl]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_RL.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_RL.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:1067262;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:12;s:16:"length_formatted";s:4:"0:12";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_RM</title>
		<link>http://blog.demofox.org/c_rl_rm/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_RM.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_RM".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2164</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_rm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_RM.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_RM.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:621852;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_RS</title>
		<link>http://blog.demofox.org/c_rl_rs/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_RS.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_RS".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2165</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_rs]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_RS.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_RS.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:599802;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_SCymbal</title>
		<link>http://blog.demofox.org/c_rl_scymbal/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_SCymbal.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_SCymbal".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2167</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_scymbal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SCymbal.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_SCymbal.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:1125474;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:13;s:16:"length_formatted";s:4:"0:13";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_SJawharp</title>
		<link>http://blog.demofox.org/c_rl_sjawharp/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_SJawharp.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_SJawharp".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2168</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_sjawharp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SJawharp.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_SJawharp.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:621852;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_SLegend</title>
		<link>http://blog.demofox.org/c_rl_slegend/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_SLegend.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_SLegend".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2169</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_slegend]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SLegend.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_SLegend.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:1151052;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:13;s:16:"length_formatted";s:4:"0:13";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_SSaw</title>
		<link>http://blog.demofox.org/c_rl_ssaw/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_SSaw.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_SSaw".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2170</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_ssaw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SSaw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_SSaw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:544678;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:6;s:16:"length_formatted";s:4:"0:06";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_SSine</title>
		<link>http://blog.demofox.org/c_rl_ssine/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_SSine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_SSine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2171</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_ssine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SSine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_SSine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:544678;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:6;s:16:"length_formatted";s:4:"0:06";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_SSquare</title>
		<link>http://blog.demofox.org/c_rl_ssquare/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_SSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_SSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2172</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_ssquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_SSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:544678;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:6;s:16:"length_formatted";s:4:"0:06";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RL_STriangle</title>
		<link>http://blog.demofox.org/c_rl_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RL_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RL_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2173</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rl_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RL_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:544678;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:6;s:16:"length_formatted";s:4:"0:06";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RM_RM</title>
		<link>http://blog.demofox.org/c_rm_rm/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RM_RM.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RM_RM".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2174</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rm_rm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_RM.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RM_RM.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:176442;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RM_RS</title>
		<link>http://blog.demofox.org/c_rm_rs/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RM_RS.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RM_RS".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2175</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rm_rs]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_RS.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RM_RS.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:154392;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RM_SBite</title>
		<link>http://blog.demofox.org/c_rm_sbite/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RM_SBite.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RM_SBite".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2176</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rm_sbite]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SBite.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RM_SBite.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:191436;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RM_SCymbal</title>
		<link>http://blog.demofox.org/c_rm_scymbal/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RM_SCymbal.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RM_SCymbal".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2177</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rm_scymbal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SCymbal.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RM_SCymbal.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:680064;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RM_SJawharp</title>
		<link>http://blog.demofox.org/c_rm_sjawharp/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RM_SJawharp.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RM_SJawharp".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2178</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rm_sjawharp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SJawharp.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RM_SJawharp.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:176442;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RM_SLegend</title>
		<link>http://blog.demofox.org/c_rm_slegend/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RM_SLegend.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RM_SLegend".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2179</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rm_slegend]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SLegend.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RM_SLegend.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:705642;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RM_SSaw</title>
		<link>http://blog.demofox.org/c_rm_ssaw/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RM_SSaw.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RM_SSaw".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2180</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rm_ssaw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SSaw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RM_SSaw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:99268;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RM_SSine</title>
		<link>http://blog.demofox.org/c_rm_ssine/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RM_SSine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RM_SSine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2181</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rm_ssine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SSine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RM_SSine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:99268;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RM_SSquare</title>
		<link>http://blog.demofox.org/c_rm_ssquare/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RM_SSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RM_SSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2182</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rm_ssquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RM_SSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:99268;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RM_STriangle</title>
		<link>http://blog.demofox.org/c_rm_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RM_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RM_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2183</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rm_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RM_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:99268;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RS_RS</title>
		<link>http://blog.demofox.org/c_rs_rs/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RS_RS.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RS_RS".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2184</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rs_rs]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_RS.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RS_RS.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:132342;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RS_SBite</title>
		<link>http://blog.demofox.org/c_rs_sbite/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RS_SBite.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RS_SBite".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2185</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rs_sbite]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SBite.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RS_SBite.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:169386;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RS_SCymbal</title>
		<link>http://blog.demofox.org/c_rs_scymbal/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RS_SCymbal.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RS_SCymbal".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2186</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rs_scymbal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SCymbal.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RS_SCymbal.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:658014;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RS_SJawharp</title>
		<link>http://blog.demofox.org/c_rs_sjawharp/</link>
		<pubDate>Mon, 23 Mar 2015 04:09:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RS_SJawharp.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RS_SJawharp".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2187</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:09:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:09:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rs_sjawharp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SJawharp.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RS_SJawharp.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:154392;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RS_SLegend</title>
		<link>http://blog.demofox.org/c_rs_slegend/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RS_SLegend.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RS_SLegend".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2188</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rs_slegend]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SLegend.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RS_SLegend.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:683592;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RS_SSaw</title>
		<link>http://blog.demofox.org/c_rs_ssaw/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RS_SSaw.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RS_SSaw".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2189</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rs_ssaw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SSaw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RS_SSaw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:77218;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RS_SSine</title>
		<link>http://blog.demofox.org/c_rs_ssine/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RS_SSine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RS_SSine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2190</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rs_ssine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SSine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RS_SSine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:77218;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RS_SSquare</title>
		<link>http://blog.demofox.org/c_rs_ssquare/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RS_SSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RS_SSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2191</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rs_ssquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RS_SSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:77218;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_RS_STriangle</title>
		<link>http://blog.demofox.org/c_rs_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_RS_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_RS_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2192</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_rs_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_RS_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:77218;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SBite_SBite</title>
		<link>http://blog.demofox.org/c_sbite_sbite/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SBite_SBite.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SBite_SBite".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2193</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sbite_sbite]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SBite.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SBite_SBite.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:206430;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SBite_SCymbal</title>
		<link>http://blog.demofox.org/c_sbite_scymbal/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SBite_SCymbal.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SBite_SCymbal".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2194</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sbite_scymbal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SCymbal.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SBite_SCymbal.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:695058;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SBite_SJawharp</title>
		<link>http://blog.demofox.org/c_sbite_sjawharp/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SBite_SJawharp.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SBite_SJawharp".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2195</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sbite_sjawharp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SJawharp.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SBite_SJawharp.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:191436;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SBite_SLegend</title>
		<link>http://blog.demofox.org/c_sbite_slegend/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SBite_SLegend.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SBite_SLegend".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2196</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sbite_slegend]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SLegend.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SBite_SLegend.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:720636;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SBite_SSaw</title>
		<link>http://blog.demofox.org/c_sbite_ssaw/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SBite_SSaw.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SBite_SSaw".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2197</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sbite_ssaw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SSaw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SBite_SSaw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:114262;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SBite_SSine</title>
		<link>http://blog.demofox.org/c_sbite_ssine/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SBite_SSine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SBite_SSine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2198</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sbite_ssine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SSine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SBite_SSine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:114262;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SBite_SSquare</title>
		<link>http://blog.demofox.org/c_sbite_ssquare/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SBite_SSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SBite_SSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2199</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sbite_ssquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SBite_SSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:114262;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SBite_STriangle</title>
		<link>http://blog.demofox.org/c_sbite_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SBite_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SBite_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2200</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sbite_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SBite_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:114262;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SCymbal_SCymbal</title>
		<link>http://blog.demofox.org/c_scymbal_scymbal/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SCymbal.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SCymbal_SCymbal".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2201</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_scymbal_scymbal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SCymbal.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SCymbal_SCymbal.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:1183686;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:13;s:16:"length_formatted";s:4:"0:13";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SCymbal_SJawharp</title>
		<link>http://blog.demofox.org/c_scymbal_sjawharp/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SJawharp.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SCymbal_SJawharp".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2202</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_scymbal_sjawharp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SJawharp.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SCymbal_SJawharp.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:680064;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SCymbal_SLegend</title>
		<link>http://blog.demofox.org/c_scymbal_slegend/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SLegend.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SCymbal_SLegend".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2203</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_scymbal_slegend]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SLegend.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SCymbal_SLegend.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:1209264;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:14;s:16:"length_formatted";s:4:"0:14";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SCymbal_SSaw</title>
		<link>http://blog.demofox.org/c_scymbal_ssaw/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSaw.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SCymbal_SSaw".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2204</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_scymbal_ssaw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSaw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SCymbal_SSaw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:602890;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SCymbal_SSine</title>
		<link>http://blog.demofox.org/c_scymbal_ssine/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SCymbal_SSine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2205</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_scymbal_ssine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SCymbal_SSine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:602890;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SCymbal_SSquare</title>
		<link>http://blog.demofox.org/c_scymbal_ssquare/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SCymbal_SSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2206</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_scymbal_ssquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SCymbal_SSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:602890;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SCymbal_STriangle</title>
		<link>http://blog.demofox.org/c_scymbal_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SCymbal_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SCymbal_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2207</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_scymbal_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SCymbal_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:602890;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SJawharp_SJawharp</title>
		<link>http://blog.demofox.org/c_sjawharp_sjawharp/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SJawharp.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SJawharp_SJawharp".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2208</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sjawharp_sjawharp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SJawharp.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SJawharp_SJawharp.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:176442;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SJawharp_SLegend</title>
		<link>http://blog.demofox.org/c_sjawharp_slegend/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SLegend.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SJawharp_SLegend".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2209</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sjawharp_slegend]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SLegend.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SJawharp_SLegend.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:705642;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:8;s:16:"length_formatted";s:4:"0:08";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SJawharp_SSaw</title>
		<link>http://blog.demofox.org/c_sjawharp_ssaw/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSaw.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SJawharp_SSaw".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2210</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sjawharp_ssaw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSaw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SJawharp_SSaw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:99268;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SJawharp_SSine</title>
		<link>http://blog.demofox.org/c_sjawharp_ssine/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SJawharp_SSine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2211</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sjawharp_ssine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SJawharp_SSine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:99268;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SJawharp_SSquare</title>
		<link>http://blog.demofox.org/c_sjawharp_ssquare/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SJawharp_SSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2212</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sjawharp_ssquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SJawharp_SSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:99268;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SJawharp_STriangle</title>
		<link>http://blog.demofox.org/c_sjawharp_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SJawharp_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SJawharp_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2213</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_sjawharp_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SJawharp_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:99268;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SLegend_SLegend</title>
		<link>http://blog.demofox.org/c_slegend_slegend/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SLegend_SLegend.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SLegend_SLegend".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2214</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_slegend_slegend]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SLegend_SLegend.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SLegend_SLegend.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:1234842;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:14;s:16:"length_formatted";s:4:"0:14";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SLegend_SSaw</title>
		<link>http://blog.demofox.org/c_slegend_ssaw/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSaw.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SLegend_SSaw".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2215</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_slegend_ssaw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSaw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SLegend_SSaw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:628468;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SLegend_SSine</title>
		<link>http://blog.demofox.org/c_slegend_ssine/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SLegend_SSine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2216</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_slegend_ssine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SLegend_SSine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:628468;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SLegend_SSquare</title>
		<link>http://blog.demofox.org/c_slegend_ssquare/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSquare.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SLegend_SSquare".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2217</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_slegend_ssquare]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSquare.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SLegend_SSquare.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:628468;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SLegend_STriangle</title>
		<link>http://blog.demofox.org/c_slegend_striangle/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SLegend_STriangle.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SLegend_STriangle".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2218</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_slegend_striangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SLegend_STriangle.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SLegend_STriangle.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:628468;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SSaw_SSaw</title>
		<link>http://blog.demofox.org/c_ssaw_ssaw/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSaw.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SSaw_SSaw".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2219</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_ssaw_ssaw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSaw.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SSaw_SSaw.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:22094;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_SSaw_SSine</title>
		<link>http://blog.demofox.org/c_ssaw_ssine/</link>
		<pubDate>Mon, 23 Mar 2015 04:10:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSine.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_SSaw_SSine".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2220</wp:post_id>
		<wp:post_date><![CDATA[2015-03-22 20:10:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:10:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_ssaw_ssine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSine.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_SSaw_SSine.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:22094;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:0;s:16:"length_formatted";s:4:"0:00";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>c_ReverseRL_SBite</title>
		<link>http://blog.demofox.org/c_reverserl_sbite/</link>
		<pubDate>Mon, 23 Mar 2015 19:38:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/03/c_ReverseRL_SBite.wav</guid>
		<description></description>
		<content:encoded><![CDATA["c_ReverseRL_SBite".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2248</wp:post_id>
		<wp:post_date><![CDATA[2015-03-23 11:38:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 19:38:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c_reverserl_sbite]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_ReverseRL_SBite.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/03/c_ReverseRL_SBite.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:636846;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:7;s:16:"length_formatted";s:4:"0:07";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cosine</title>
		<link>http://blog.demofox.org/cosine/</link>
		<pubDate>Sat, 18 Apr 2015 04:38:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/cosine.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2308</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 20:38:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-18 04:38:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cosine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/cosine.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/cosine.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:246;s:6:"height";i:68;s:4:"file";s:18:"2015/04/cosine.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"cosine-150x68.png";s:5:"width";i:150;s:6:"height";i:68;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sine</title>
		<link>http://blog.demofox.org/sine-3/</link>
		<pubDate>Sat, 18 Apr 2015 04:38:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/sine.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2309</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 20:38:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-18 04:38:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sine-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/sine.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/sine.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:253;s:6:"height";i:70;s:4:"file";s:16:"2015/04/sine.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"sine-150x70.png";s:5:"width";i:150;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>saw</title>
		<link>http://blog.demofox.org/saw/</link>
		<pubDate>Sat, 18 Apr 2015 04:55:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/saw.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2314</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 20:55:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-18 04:55:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[saw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/saw.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:267;s:6:"height";i:69;s:4:"file";s:15:"2015/04/saw.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:14:"saw-150x69.png";s:5:"width";i:150;s:6:"height";i:69;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sawphase</title>
		<link>http://blog.demofox.org/sawphase/</link>
		<pubDate>Sat, 18 Apr 2015 05:08:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/sawphase.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2318</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 21:08:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-18 05:08:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sawphase]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/sawphase.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/sawphase.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:977;s:6:"height";i:437;s:4:"file";s:20:"2015/04/sawphase.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"sawphase-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"sawphase-300x134.png";s:5:"width";i:300;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"sawphase-977x188.png";s:5:"width";i:977;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"sawphase-977x188.png";s:5:"width";i:977;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"sawphase-500x224.png";s:5:"width";i:500;s:6:"height";i:224;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_saw_120</title>
		<link>http://blog.demofox.org/_saw_120/</link>
		<pubDate>Sat, 18 Apr 2015 05:09:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/saw_120.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_saw_120".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2320</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 21:09:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-18 05:09:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_saw_120]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw_120.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/saw_120.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:44144;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_saw_180</title>
		<link>http://blog.demofox.org/_saw_180/</link>
		<pubDate>Sat, 18 Apr 2015 05:09:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/saw_180.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_saw_180".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2321</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 21:09:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-18 05:09:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_saw_180]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw_180.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/saw_180.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:44144;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_saw_270</title>
		<link>http://blog.demofox.org/_saw_270/</link>
		<pubDate>Sat, 18 Apr 2015 05:09:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/saw_270.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_saw_270".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2322</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 21:09:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-18 05:09:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_saw_270]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw_270.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/saw_270.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:44144;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_saw_0</title>
		<link>http://blog.demofox.org/_saw_0/</link>
		<pubDate>Sat, 18 Apr 2015 05:09:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/saw_0.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_saw_0".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2323</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 21:09:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-18 05:09:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_saw_0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw_0.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/saw_0.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:44144;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_saw_60</title>
		<link>http://blog.demofox.org/_saw_60/</link>
		<pubDate>Sat, 18 Apr 2015 05:09:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/saw_60.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_saw_60".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2324</wp:post_id>
		<wp:post_date><![CDATA[2015-04-17 21:09:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-18 05:09:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_saw_60]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw_60.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/saw_60.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:44144;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:1;s:16:"length_formatted";s:4:"0:01";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_IFFTTest1</title>
		<link>http://blog.demofox.org/_iffttest1/</link>
		<pubDate>Mon, 20 Apr 2015 03:55:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/IFFTTest1.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_IFFTTest1".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2331</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 19:55:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 03:55:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_iffttest1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/IFFTTest1.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/IFFTTest1.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:176444;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_IFFTTest2</title>
		<link>http://blog.demofox.org/_iffttest2/</link>
		<pubDate>Mon, 20 Apr 2015 03:55:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/IFFTTest2.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_IFFTTest2".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2332</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 19:55:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 03:55:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_iffttest2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/IFFTTest2.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/IFFTTest2.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:176444;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_IFFTTest3</title>
		<link>http://blog.demofox.org/_iffttest3/</link>
		<pubDate>Mon, 20 Apr 2015 03:55:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/IFFTTest3.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_IFFTTest3".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2333</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 19:55:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 03:55:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_iffttest3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/IFFTTest3.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/IFFTTest3.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:176444;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IFFTTest1</title>
		<link>http://blog.demofox.org/iffttest1/</link>
		<pubDate>Mon, 20 Apr 2015 04:00:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/IFFTTest1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2335</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 20:00:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 04:00:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[iffttest1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/IFFTTest1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/IFFTTest1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1164;s:6:"height";i:99;s:4:"file";s:21:"2015/04/IFFTTest1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"IFFTTest1-150x99.png";s:5:"width";i:150;s:6:"height";i:99;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"IFFTTest1-300x26.png";s:5:"width";i:300;s:6:"height";i:26;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"IFFTTest1-1024x87.png";s:5:"width";i:1024;s:6:"height";i:87;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"IFFTTest1-500x43.png";s:5:"width";i:500;s:6:"height";i:43;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IFFTTest2</title>
		<link>http://blog.demofox.org/iffttest2/</link>
		<pubDate>Mon, 20 Apr 2015 04:04:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/IFFTTest2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2337</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 20:04:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 04:04:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[iffttest2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/IFFTTest2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/IFFTTest2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1106;s:6:"height";i:102;s:4:"file";s:21:"2015/04/IFFTTest2.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"IFFTTest2-150x102.png";s:5:"width";i:150;s:6:"height";i:102;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"IFFTTest2-300x28.png";s:5:"width";i:300;s:6:"height";i:28;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"IFFTTest2-1024x94.png";s:5:"width";i:1024;s:6:"height";i:94;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"IFFTTest2-500x46.png";s:5:"width";i:500;s:6:"height";i:46;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IFFTTest3</title>
		<link>http://blog.demofox.org/iffttest3/</link>
		<pubDate>Mon, 20 Apr 2015 04:14:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/IFFTTest3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2339</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 20:14:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 04:14:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[iffttest3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/IFFTTest3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/IFFTTest3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1181;s:6:"height";i:199;s:4:"file";s:21:"2015/04/IFFTTest3.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"IFFTTest3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"IFFTTest3-300x51.png";s:5:"width";i:300;s:6:"height";i:51;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"IFFTTest3-1024x173.png";s:5:"width";i:1024;s:6:"height";i:173;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"IFFTTest3-1181x188.png";s:5:"width";i:1181;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"IFFTTest3-1181x188.png";s:5:"width";i:1181;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"IFFTTest3-500x84.png";s:5:"width";i:500;s:6:"height";i:84;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_drums_ifft</title>
		<link>http://blog.demofox.org/_drums_ifft/</link>
		<pubDate>Mon, 20 Apr 2015 04:19:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/drums_ifft.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_drums_ifft".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2341</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 20:19:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 04:19:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_drums_ifft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/drums_ifft.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/drums_ifft.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:176444;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_drums_osc</title>
		<link>http://blog.demofox.org/_drums_osc/</link>
		<pubDate>Mon, 20 Apr 2015 04:19:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/drums_osc.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_drums_osc".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2342</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 20:19:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 04:19:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_drums_osc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/drums_osc.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/drums_osc.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:176444;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>drumsifftosc</title>
		<link>http://blog.demofox.org/drumsifftosc/</link>
		<pubDate>Mon, 20 Apr 2015 04:19:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/drumsifftosc.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2343</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 20:19:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 04:19:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[drumsifftosc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/drumsifftosc.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/drumsifftosc.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1043;s:6:"height";i:194;s:4:"file";s:24:"2015/04/drumsifftosc.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"drumsifftosc-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"drumsifftosc-300x56.png";s:5:"width";i:300;s:6:"height";i:56;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:25:"drumsifftosc-1024x190.png";s:5:"width";i:1024;s:6:"height";i:190;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"drumsifftosc-1043x188.png";s:5:"width";i:1043;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"drumsifftosc-1043x188.png";s:5:"width";i:1043;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"drumsifftosc-500x93.png";s:5:"width";i:500;s:6:"height";i:93;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ConvolutionIFFT</title>
		<link>http://blog.demofox.org/convolutionifft/</link>
		<pubDate>Mon, 20 Apr 2015 04:26:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/ConvolutionIFFT.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2348</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 20:26:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 04:26:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[convolutionifft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/ConvolutionIFFT.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/ConvolutionIFFT.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:363;s:6:"height";i:292;s:4:"file";s:27:"2015/04/ConvolutionIFFT.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"ConvolutionIFFT-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"ConvolutionIFFT-300x241.png";s:5:"width";i:300;s:6:"height";i:241;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"ConvolutionIFFT-363x188.png";s:5:"width";i:363;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:27:"ConvolutionIFFT-363x188.png";s:5:"width";i:363;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ConvolutionLin</title>
		<link>http://blog.demofox.org/convolutionlin/</link>
		<pubDate>Mon, 20 Apr 2015 04:30:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/ConvolutionLin.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2352</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 20:30:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 04:30:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[convolutionlin]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/ConvolutionLin.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/ConvolutionLin.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:725;s:6:"height";i:102;s:4:"file";s:26:"2015/04/ConvolutionLin.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"ConvolutionLin-150x102.png";s:5:"width";i:150;s:6:"height";i:102;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"ConvolutionLin-300x42.png";s:5:"width";i:300;s:6:"height";i:42;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"ConvolutionLin-500x70.png";s:5:"width";i:500;s:6:"height";i:70;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_alien_ifft</title>
		<link>http://blog.demofox.org/_alien_ifft/</link>
		<pubDate>Mon, 20 Apr 2015 04:41:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/alien_ifft.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_alien_ifft".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2356</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 20:41:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 04:41:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_alien_ifft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/alien_ifft.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/alien_ifft.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:176444;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>_alien_osc</title>
		<link>http://blog.demofox.org/_alien_osc/</link>
		<pubDate>Mon, 20 Apr 2015 04:41:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/alien_osc.wav</guid>
		<description></description>
		<content:encoded><![CDATA["_alien_osc".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2357</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 20:41:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 04:41:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[_alien_osc]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/alien_osc.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/alien_osc.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:705600;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:176444;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>quincunx</title>
		<link>http://blog.demofox.org/quincunx/</link>
		<pubDate>Wed, 22 Apr 2015 14:17:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/quincunx.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2374</wp:post_id>
		<wp:post_date><![CDATA[2015-04-22 06:17:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-22 14:17:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[quincunx]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/quincunx.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/quincunx.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:20:"2015/04/quincunx.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"quincunx-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"quincunx-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"quincunx-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>quincunxst</title>
		<link>http://blog.demofox.org/quincunxst/</link>
		<pubDate>Wed, 22 Apr 2015 14:21:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/quincunxst.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2377</wp:post_id>
		<wp:post_date><![CDATA[2015-04-22 06:21:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-22 14:21:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[quincunxst]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/quincunxst.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/quincunxst.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:802;s:6:"height";i:451;s:4:"file";s:22:"2015/04/quincunxst.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"quincunxst-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"quincunxst-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"quincunxst-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"quincunxst-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"quincunxst-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4rookst</title>
		<link>http://blog.demofox.org/4rookst/</link>
		<pubDate>Thu, 23 Apr 2015 14:17:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/4rookst.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2394</wp:post_id>
		<wp:post_date><![CDATA[2015-04-23 06:17:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-23 14:17:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[4rookst]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/4rookst.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/4rookst.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:452;s:4:"file";s:19:"2015/04/4rookst.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"4rookst-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"4rookst-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"4rookst-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"4rookst-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"4rookst-500x282.png";s:5:"width";i:500;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4rook</title>
		<link>http://blog.demofox.org/4rook/</link>
		<pubDate>Thu, 23 Apr 2015 14:27:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/4rook.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2397</wp:post_id>
		<wp:post_date><![CDATA[2015-04-23 06:27:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-23 14:27:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[4rook]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/4rook.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/4rook.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:17:"2015/04/4rook.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"4rook-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"4rook-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"4rook-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"4rook-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:17:"4rook-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FlipQuadST</title>
		<link>http://blog.demofox.org/flipquadst/</link>
		<pubDate>Fri, 24 Apr 2015 03:49:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/FlipQuadST.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2415</wp:post_id>
		<wp:post_date><![CDATA[2015-04-23 19:49:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-24 03:49:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[flipquadst]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/FlipQuadST.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/FlipQuadST.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:802;s:6:"height";i:451;s:4:"file";s:22:"2015/04/FlipQuadST.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"FlipQuadST-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"FlipQuadST-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"FlipQuadST-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"FlipQuadST-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"FlipQuadST-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FlipTriST</title>
		<link>http://blog.demofox.org/fliptrist/</link>
		<pubDate>Fri, 24 Apr 2015 03:49:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/FlipTriST.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2416</wp:post_id>
		<wp:post_date><![CDATA[2015-04-23 19:49:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-24 03:49:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[fliptrist]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/FlipTriST.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/FlipTriST.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:452;s:4:"file";s:21:"2015/04/FlipTriST.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"FlipTriST-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"FlipTriST-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"FlipTriST-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"FlipTriST-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"FlipTriST-500x282.png";s:5:"width";i:500;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FlipQuadSamples</title>
		<link>http://blog.demofox.org/flipquadsamples/</link>
		<pubDate>Fri, 24 Apr 2015 04:34:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/FlipQuadSamples.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2420</wp:post_id>
		<wp:post_date><![CDATA[2015-04-23 20:34:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-24 04:34:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[flipquadsamples]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/FlipQuadSamples.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/FlipQuadSamples.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:27:"2015/04/FlipQuadSamples.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"FlipQuadSamples-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"FlipQuadSamples-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"FlipQuadSamples-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:27:"FlipQuadSamples-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"FlipQuadSamples-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FlipTriSamples</title>
		<link>http://blog.demofox.org/fliptrisamples/</link>
		<pubDate>Fri, 24 Apr 2015 04:48:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/FlipTriSamples.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2425</wp:post_id>
		<wp:post_date><![CDATA[2015-04-23 20:48:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-24 04:48:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[fliptrisamples]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/FlipTriSamples.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/FlipTriSamples.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:26:"2015/04/FlipTriSamples.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"FlipTriSamples-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"FlipTriSamples-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"FlipTriSamples-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"FlipTriSamples-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"FlipTriSamples-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Square</title>
		<link>http://blog.demofox.org/square/</link>
		<pubDate>Fri, 01 May 2015 03:39:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/Square.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2438</wp:post_id>
		<wp:post_date><![CDATA[2015-04-30 19:39:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-01 03:39:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[square]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/Square.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/Square.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:18:"2015/04/Square.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Square-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"Square-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Square-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Square-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"Square-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bilinear</title>
		<link>http://blog.demofox.org/bilinear/</link>
		<pubDate>Fri, 01 May 2015 04:14:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/04/bilinear.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2448</wp:post_id>
		<wp:post_date><![CDATA[2015-04-30 20:14:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-01 04:14:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bilinear]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/04/bilinear.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/04/bilinear.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:802;s:6:"height";i:451;s:4:"file";s:20:"2015/04/bilinear.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"bilinear-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"bilinear-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"bilinear-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"bilinear-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"bilinear-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PointA</title>
		<link>http://blog.demofox.org/pointa/</link>
		<pubDate>Fri, 01 May 2015 19:13:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/05/PointA.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2455</wp:post_id>
		<wp:post_date><![CDATA[2015-05-01 11:13:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-01 19:13:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pointa]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/05/PointA.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/PointA.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:18:"2015/05/PointA.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"PointA-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"PointA-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"PointA-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"PointA-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"PointA-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pascal</title>
		<link>http://blog.demofox.org/pascal/</link>
		<pubDate>Tue, 26 May 2015 01:52:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/05/pascal.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2503</wp:post_id>
		<wp:post_date><![CDATA[2015-05-25 17:52:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-26 01:52:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pascal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/05/pascal.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/pascal.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:250;s:6:"height";i:180;s:4:"file";s:18:"2015/05/pascal.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"pascal-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>binomial1</title>
		<link>http://blog.demofox.org/binomial1/</link>
		<pubDate>Tue, 26 May 2015 03:51:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/05/binomial1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2525</wp:post_id>
		<wp:post_date><![CDATA[2015-05-25 19:51:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-26 03:51:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[binomial1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/05/binomial1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/binomial1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:223;s:4:"file";s:21:"2015/05/binomial1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"binomial1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"binomial1-300x99.png";s:5:"width";i:300;s:6:"height";i:99;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"binomial1-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"binomial1-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"binomial1-500x165.png";s:5:"width";i:500;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>binomial2</title>
		<link>http://blog.demofox.org/binomial2/</link>
		<pubDate>Tue, 26 May 2015 03:51:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/05/binomial2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2526</wp:post_id>
		<wp:post_date><![CDATA[2015-05-25 19:51:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-26 03:51:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[binomial2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/05/binomial2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/binomial2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:235;s:4:"file";s:21:"2015/05/binomial2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"binomial2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"binomial2-300x104.png";s:5:"width";i:300;s:6:"height";i:104;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"binomial2-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"binomial2-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"binomial2-500x174.png";s:5:"width";i:500;s:6:"height";i:174;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>binomial3</title>
		<link>http://blog.demofox.org/binomial3/</link>
		<pubDate>Tue, 26 May 2015 03:51:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/05/binomial3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2527</wp:post_id>
		<wp:post_date><![CDATA[2015-05-25 19:51:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-26 03:51:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[binomial3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/05/binomial3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/binomial3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:223;s:4:"file";s:21:"2015/05/binomial3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"binomial3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"binomial3-300x99.png";s:5:"width";i:300;s:6:"height";i:99;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"binomial3-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"binomial3-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"binomial3-500x165.png";s:5:"width";i:500;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>binomial5</title>
		<link>http://blog.demofox.org/binomial5/</link>
		<pubDate>Tue, 26 May 2015 03:51:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/05/binomial5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2528</wp:post_id>
		<wp:post_date><![CDATA[2015-05-25 19:51:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-26 03:51:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[binomial5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/05/binomial5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/binomial5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:235;s:4:"file";s:21:"2015/05/binomial5.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"binomial5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"binomial5-300x104.png";s:5:"width";i:300;s:6:"height";i:104;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"binomial5-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"binomial5-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"binomial5-500x174.png";s:5:"width";i:500;s:6:"height";i:174;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>binomial10</title>
		<link>http://blog.demofox.org/binomial10/</link>
		<pubDate>Tue, 26 May 2015 03:51:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/05/binomial10.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2529</wp:post_id>
		<wp:post_date><![CDATA[2015-05-25 19:51:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-26 03:51:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[binomial10]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/05/binomial10.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/05/binomial10.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:271;s:4:"file";s:22:"2015/05/binomial10.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"binomial10-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"binomial10-300x120.png";s:5:"width";i:300;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"binomial10-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"binomial10-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"binomial10-500x200.png";s:5:"width";i:500;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rationalsine</title>
		<link>http://blog.demofox.org/rationalsine/</link>
		<pubDate>Sun, 14 Jun 2015 17:54:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/06/rationalsine.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2565</wp:post_id>
		<wp:post_date><![CDATA[2015-06-14 09:54:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-14 17:54:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[rationalsine]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/06/rationalsine.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/06/rationalsine.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:799;s:6:"height";i:450;s:4:"file";s:24:"2015/06/rationalsine.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"rationalsine-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"rationalsine-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"rationalsine-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"rationalsine-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"rationalsine-500x282.png";s:5:"width";i:500;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bezier2</title>
		<link>http://blog.demofox.org/bezier2/</link>
		<pubDate>Sun, 05 Jul 2015 19:13:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/Bezier2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2675</wp:post_id>
		<wp:post_date><![CDATA[2015-07-05 11:13:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-05 19:13:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bezier2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/Bezier2.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/Bezier2.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:240;s:6:"height";i:100;s:4:"file";s:19:"2015/07/Bezier2.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Bezier2-150x100.gif";s:5:"width";i:150;s:6:"height";i:100;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bezier3</title>
		<link>http://blog.demofox.org/bezier3/</link>
		<pubDate>Sun, 05 Jul 2015 19:13:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/Bezier3.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2676</wp:post_id>
		<wp:post_date><![CDATA[2015-07-05 11:13:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-05 19:13:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bezier3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/Bezier3.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/Bezier3.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:240;s:6:"height";i:100;s:4:"file";s:19:"2015/07/Bezier3.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Bezier3-150x100.gif";s:5:"width";i:150;s:6:"height";i:100;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bezier4</title>
		<link>http://blog.demofox.org/bezier4/</link>
		<pubDate>Sun, 05 Jul 2015 19:13:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/Bezier4.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2677</wp:post_id>
		<wp:post_date><![CDATA[2015-07-05 11:13:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-05 19:13:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bezier4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/Bezier4.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/Bezier4.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:240;s:6:"height";i:100;s:4:"file";s:19:"2015/07/Bezier4.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Bezier4-150x100.gif";s:5:"width";i:150;s:6:"height";i:100;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BezierOut</title>
		<link>http://blog.demofox.org/bezierout/</link>
		<pubDate>Sun, 05 Jul 2015 19:30:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/BezierOut.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2682</wp:post_id>
		<wp:post_date><![CDATA[2015-07-05 11:30:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-05 19:30:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bezierout]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/BezierOut.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/BezierOut.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:647;s:6:"height";i:142;s:4:"file";s:21:"2015/07/BezierOut.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"BezierOut-150x142.png";s:5:"width";i:150;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"BezierOut-300x66.png";s:5:"width";i:300;s:6:"height";i:66;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"BezierOut-500x110.png";s:5:"width";i:500;s:6:"height";i:110;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Decasteljeau.png-000001</title>
		<link>http://blog.demofox.org/decasteljeau-png-000001-2/</link>
		<pubDate>Sun, 05 Jul 2015 22:29:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/Decasteljeau1.png-0000011.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2689</wp:post_id>
		<wp:post_date><![CDATA[2015-07-05 14:29:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-05 22:29:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[decasteljeau-png-000001-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/Decasteljeau1.png-0000011.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/Decasteljeau1.png-0000011.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:831;s:6:"height";i:353;s:4:"file";s:37:"2015/07/Decasteljeau1.png-0000011.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"Decasteljeau1.png-0000011-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"Decasteljeau1.png-0000011-300x127.png";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:37:"Decasteljeau1.png-0000011-831x188.png";s:5:"width";i:831;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:37:"Decasteljeau1.png-0000011-831x188.png";s:5:"width";i:831;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:37:"Decasteljeau1.png-0000011-500x212.png";s:5:"width";i:500;s:6:"height";i:212;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lag</title>
		<link>http://blog.demofox.org/lag/</link>
		<pubDate>Wed, 08 Jul 2015 19:49:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/Lag.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2743</wp:post_id>
		<wp:post_date><![CDATA[2015-07-08 11:49:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-08 19:49:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/Lag.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/Lag.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:646;s:6:"height";i:308;s:4:"file";s:15:"2015/07/Lag.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"Lag-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"Lag-300x143.png";s:5:"width";i:300;s:6:"height";i:143;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"Lag-646x188.png";s:5:"width";i:646;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"Lag-646x188.png";s:5:"width";i:646;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"Lag-500x238.png";s:5:"width";i:500;s:6:"height";i:238;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>quadraticbezrect</title>
		<link>http://blog.demofox.org/quadraticbezrect/</link>
		<pubDate>Mon, 27 Jul 2015 00:33:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/quadraticbezrect.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2757</wp:post_id>
		<wp:post_date><![CDATA[2015-07-26 16:33:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-27 00:33:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[quadraticbezrect]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/quadraticbezrect.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/quadraticbezrect.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:451;s:4:"file";s:28:"2015/07/quadraticbezrect.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"quadraticbezrect-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"quadraticbezrect-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"quadraticbezrect-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:28:"quadraticbezrect-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:28:"quadraticbezrect-500x282.png";s:5:"width";i:500;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cubicbezrect</title>
		<link>http://blog.demofox.org/cubicbezrect/</link>
		<pubDate>Mon, 27 Jul 2015 00:33:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/cubicbezrect.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2758</wp:post_id>
		<wp:post_date><![CDATA[2015-07-26 16:33:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-27 00:33:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cubicbezrect]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/cubicbezrect.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/cubicbezrect.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:802;s:6:"height";i:449;s:4:"file";s:24:"2015/07/cubicbezrect.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"cubicbezrect-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"cubicbezrect-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"cubicbezrect-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"cubicbezrect-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"cubicbezrect-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CurveAnim</title>
		<link>http://blog.demofox.org/curveanim/</link>
		<pubDate>Mon, 27 Jul 2015 14:21:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/CurveAnim.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2762</wp:post_id>
		<wp:post_date><![CDATA[2015-07-27 06:21:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-27 14:21:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[curveanim]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/CurveAnim.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/CurveAnim.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:662;s:6:"height";i:332;s:4:"file";s:21:"2015/07/CurveAnim.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"CurveAnim-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"CurveAnim-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"CurveAnim-662x188.png";s:5:"width";i:662;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"CurveAnim-662x188.png";s:5:"width";i:662;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"CurveAnim-500x251.png";s:5:"width";i:500;s:6:"height";i:251;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ProgramRun</title>
		<link>http://blog.demofox.org/programrun/</link>
		<pubDate>Tue, 28 Jul 2015 19:18:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/ProgramRun.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2799</wp:post_id>
		<wp:post_date><![CDATA[2015-07-28 11:18:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-28 19:18:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[programrun]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/ProgramRun.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/ProgramRun.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:644;s:6:"height";i:104;s:4:"file";s:22:"2015/07/ProgramRun.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"ProgramRun-150x104.png";s:5:"width";i:150;s:6:"height";i:104;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"ProgramRun-300x48.png";s:5:"width";i:300;s:6:"height";i:48;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"ProgramRun-500x81.png";s:5:"width";i:500;s:6:"height";i:81;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BezierOcean</title>
		<link>http://blog.demofox.org/bezierocean/</link>
		<pubDate>Tue, 28 Jul 2015 19:34:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/07/BezierOcean.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2806</wp:post_id>
		<wp:post_date><![CDATA[2015-07-28 11:34:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-28 19:34:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bezierocean]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/07/BezierOcean.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/07/BezierOcean.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:793;s:6:"height";i:447;s:4:"file";s:23:"2015/07/BezierOcean.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"BezierOcean-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"BezierOcean-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"BezierOcean-793x188.png";s:5:"width";i:793;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"BezierOcean-793x188.png";s:5:"width";i:793;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"BezierOcean-500x282.png";s:5:"width";i:500;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CentralDifference</title>
		<link>http://blog.demofox.org/centraldifference/</link>
		<pubDate>Sun, 02 Aug 2015 14:58:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/CentralDifference.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2838</wp:post_id>
		<wp:post_date><![CDATA[2015-08-02 06:58:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-02 14:58:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[centraldifference]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/CentralDifference.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/CentralDifference.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:475;s:6:"height";i:494;s:4:"file";s:29:"2015/08/CentralDifference.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"CentralDifference-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"CentralDifference-288x300.png";s:5:"width";i:288;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"CentralDifference-475x188.png";s:5:"width";i:475;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"CentralDifference-475x188.png";s:5:"width";i:475;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:29:"CentralDifference-288x300.png";s:5:"width";i:288;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BackwardDifference</title>
		<link>http://blog.demofox.org/backwarddifference/</link>
		<pubDate>Sun, 02 Aug 2015 18:02:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/BackwardDifference.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2848</wp:post_id>
		<wp:post_date><![CDATA[2015-08-02 10:02:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-02 18:02:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[backwarddifference]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/BackwardDifference.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/BackwardDifference.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:475;s:6:"height";i:622;s:4:"file";s:30:"2015/08/BackwardDifference.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"BackwardDifference-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"BackwardDifference-229x300.png";s:5:"width";i:229;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"BackwardDifference-475x188.png";s:5:"width";i:475;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:30:"BackwardDifference-475x188.png";s:5:"width";i:475;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:30:"BackwardDifference-229x300.png";s:5:"width";i:229;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ForwardDifference</title>
		<link>http://blog.demofox.org/forwarddifference/</link>
		<pubDate>Sun, 02 Aug 2015 18:16:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/ForwardDifference.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2852</wp:post_id>
		<wp:post_date><![CDATA[2015-08-02 10:16:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-02 18:16:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[forwarddifference]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/ForwardDifference.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/ForwardDifference.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:475;s:6:"height";i:494;s:4:"file";s:29:"2015/08/ForwardDifference.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"ForwardDifference-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"ForwardDifference-288x300.png";s:5:"width";i:288;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"ForwardDifference-475x188.png";s:5:"width";i:475;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"ForwardDifference-475x188.png";s:5:"width";i:475;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:29:"ForwardDifference-288x300.png";s:5:"width";i:288;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lagrangerectangle</title>
		<link>http://blog.demofox.org/lagrangerectangle/</link>
		<pubDate>Wed, 05 Aug 2015 13:54:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/lagrangerectangle.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2882</wp:post_id>
		<wp:post_date><![CDATA[2015-08-05 05:54:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-05 13:54:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lagrangerectangle]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/lagrangerectangle.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/lagrangerectangle.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:450;s:4:"file";s:29:"2015/08/lagrangerectangle.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"lagrangerectangle-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"lagrangerectangle-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"lagrangerectangle-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"lagrangerectangle-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:29:"lagrangerectangle-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lagrangerectangle2</title>
		<link>http://blog.demofox.org/lagrangerectangle2/</link>
		<pubDate>Wed, 05 Aug 2015 13:59:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/lagrangerectangle2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2884</wp:post_id>
		<wp:post_date><![CDATA[2015-08-05 05:59:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-05 13:59:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lagrangerectangle2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/lagrangerectangle2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/lagrangerectangle2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:450;s:4:"file";s:30:"2015/08/lagrangerectangle2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"lagrangerectangle2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"lagrangerectangle2-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"lagrangerectangle2-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:30:"lagrangerectangle2-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:30:"lagrangerectangle2-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lagrangerectangle3</title>
		<link>http://blog.demofox.org/lagrangerectangle3/</link>
		<pubDate>Wed, 05 Aug 2015 14:11:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/lagrangerectangle3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2891</wp:post_id>
		<wp:post_date><![CDATA[2015-08-05 06:11:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-05 14:11:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lagrangerectangle3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/lagrangerectangle3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/lagrangerectangle3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:139;s:4:"file";s:30:"2015/08/lagrangerectangle3.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"lagrangerectangle3-150x139.png";s:5:"width";i:150;s:6:"height";i:139;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"lagrangerectangle3-300x62.png";s:5:"width";i:300;s:6:"height";i:62;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:30:"lagrangerectangle3-500x103.png";s:5:"width";i:500;s:6:"height";i:103;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cubichermite</title>
		<link>http://blog.demofox.org/cubichermite/</link>
		<pubDate>Sat, 08 Aug 2015 14:36:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/cubichermite.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2923</wp:post_id>
		<wp:post_date><![CDATA[2015-08-08 06:36:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-08 14:36:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cubichermite]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/cubichermite.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/cubichermite.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:608;s:6:"height";i:400;s:4:"file";s:24:"2015/08/cubichermite.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"cubichermite-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"cubichermite-300x197.png";s:5:"width";i:300;s:6:"height";i:197;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"cubichermite-608x188.png";s:5:"width";i:608;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"cubichermite-608x188.png";s:5:"width";i:608;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"cubichermite-456x300.png";s:5:"width";i:456;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cubichermite2</title>
		<link>http://blog.demofox.org/cubichermite2/</link>
		<pubDate>Sat, 08 Aug 2015 16:58:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/cubichermite2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2932</wp:post_id>
		<wp:post_date><![CDATA[2015-08-08 08:58:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-08 16:58:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cubichermite2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/cubichermite2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/cubichermite2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:415;s:4:"file";s:25:"2015/08/cubichermite2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"cubichermite2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"cubichermite2-300x184.png";s:5:"width";i:300;s:6:"height";i:184;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"cubichermite2-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"cubichermite2-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"cubichermite2-489x300.png";s:5:"width";i:489;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cubichermite3</title>
		<link>http://blog.demofox.org/cubichermite3/</link>
		<pubDate>Sat, 08 Aug 2015 17:01:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/cubichermite3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2935</wp:post_id>
		<wp:post_date><![CDATA[2015-08-08 09:01:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-08 17:01:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cubichermite3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/cubichermite3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/cubichermite3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:400;s:4:"file";s:25:"2015/08/cubichermite3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"cubichermite3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"cubichermite3-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"cubichermite3-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"cubichermite3-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"cubichermite3-500x250.png";s:5:"width";i:500;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hermitesurface</title>
		<link>http://blog.demofox.org/hermitesurface/</link>
		<pubDate>Sun, 09 Aug 2015 18:49:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/hermitesurface.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2939</wp:post_id>
		<wp:post_date><![CDATA[2015-08-09 10:49:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-09 18:49:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hermitesurface]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/hermitesurface.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/hermitesurface.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:450;s:4:"file";s:26:"2015/08/hermitesurface.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"hermitesurface-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"hermitesurface-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"hermitesurface-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"hermitesurface-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"hermitesurface-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hermitesurface2</title>
		<link>http://blog.demofox.org/hermitesurface2/</link>
		<pubDate>Sun, 09 Aug 2015 18:52:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/hermitesurface2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2941</wp:post_id>
		<wp:post_date><![CDATA[2015-08-09 10:52:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-09 18:52:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hermitesurface2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/hermitesurface2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/hermitesurface2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:450;s:4:"file";s:27:"2015/08/hermitesurface2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"hermitesurface2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"hermitesurface2-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"hermitesurface2-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:27:"hermitesurface2-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"hermitesurface2-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hermitesurface3</title>
		<link>http://blog.demofox.org/hermitesurface3/</link>
		<pubDate>Sun, 09 Aug 2015 19:04:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/hermitesurface3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2945</wp:post_id>
		<wp:post_date><![CDATA[2015-08-09 11:04:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-09 19:04:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hermitesurface3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/hermitesurface3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/hermitesurface3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:139;s:4:"file";s:27:"2015/08/hermitesurface3.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"hermitesurface3-150x139.png";s:5:"width";i:150;s:6:"height";i:139;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"hermitesurface3-300x62.png";s:5:"width";i:300;s:6:"height";i:62;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"hermitesurface3-500x103.png";s:5:"width";i:500;s:6:"height";i:103;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LozMan</title>
		<link>http://blog.demofox.org/lozman/</link>
		<pubDate>Sat, 15 Aug 2015 13:59:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/LozMan.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2988</wp:post_id>
		<wp:post_date><![CDATA[2015-08-15 05:59:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-15 13:59:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lozman]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/LozMan.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/LozMan.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:21;s:6:"height";i:20;s:4:"file";s:18:"2015/08/LozMan.bmp";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lozman_4_0</title>
		<link>http://blog.demofox.org/lozman_4_0/</link>
		<pubDate>Sat, 15 Aug 2015 13:59:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/lozman_4_0.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2989</wp:post_id>
		<wp:post_date><![CDATA[2015-08-15 05:59:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-15 13:59:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lozman_4_0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/lozman_4_0.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/lozman_4_0.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:22:"2015/08/lozman_4_0.bmp";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lozman_4_1</title>
		<link>http://blog.demofox.org/lozman_4_1/</link>
		<pubDate>Sat, 15 Aug 2015 13:59:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/lozman_4_1.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2990</wp:post_id>
		<wp:post_date><![CDATA[2015-08-15 05:59:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-15 13:59:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lozman_4_1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/lozman_4_1.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/lozman_4_1.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:22:"2015/08/lozman_4_1.bmp";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lozman_4_2</title>
		<link>http://blog.demofox.org/lozman_4_2/</link>
		<pubDate>Sat, 15 Aug 2015 13:59:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/lozman_4_2.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2991</wp:post_id>
		<wp:post_date><![CDATA[2015-08-15 05:59:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-15 13:59:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lozman_4_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/lozman_4_2.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/lozman_4_2.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:22:"2015/08/lozman_4_2.bmp";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lozman_16_0</title>
		<link>http://blog.demofox.org/lozman_16_0/</link>
		<pubDate>Sat, 15 Aug 2015 13:59:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/lozman_16_0.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2992</wp:post_id>
		<wp:post_date><![CDATA[2015-08-15 05:59:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-15 13:59:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lozman_16_0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/lozman_16_0.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/lozman_16_0.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:336;s:6:"height";i:320;s:4:"file";s:23:"2015/08/lozman_16_0.bmp";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lozman_16_1</title>
		<link>http://blog.demofox.org/lozman_16_1/</link>
		<pubDate>Sat, 15 Aug 2015 13:59:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/lozman_16_1.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2993</wp:post_id>
		<wp:post_date><![CDATA[2015-08-15 05:59:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-15 13:59:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lozman_16_1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/lozman_16_1.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/lozman_16_1.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:336;s:6:"height";i:320;s:4:"file";s:23:"2015/08/lozman_16_1.bmp";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lozman_16_2</title>
		<link>http://blog.demofox.org/lozman_16_2/</link>
		<pubDate>Sat, 15 Aug 2015 13:59:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/lozman_16_2.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2994</wp:post_id>
		<wp:post_date><![CDATA[2015-08-15 05:59:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-15 13:59:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lozman_16_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/lozman_16_2.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/lozman_16_2.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:336;s:6:"height";i:320;s:4:"file";s:23:"2015/08/lozman_16_2.bmp";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Shadertoy</title>
		<link>http://blog.demofox.org/shadertoy/</link>
		<pubDate>Sat, 15 Aug 2015 14:08:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/Shadertoy.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2997</wp:post_id>
		<wp:post_date><![CDATA[2015-08-15 06:08:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-15 14:08:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[shadertoy]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/Shadertoy.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/Shadertoy.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:449;s:4:"file";s:21:"2015/08/Shadertoy.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"Shadertoy-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"Shadertoy-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"Shadertoy-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"Shadertoy-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"Shadertoy-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shadertoy</title>
		<link>http://blog.demofox.org/shadertoy-2/</link>
		<pubDate>Tue, 18 Aug 2015 13:51:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/shadertoy.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3012</wp:post_id>
		<wp:post_date><![CDATA[2015-08-18 05:51:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-18 13:51:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[shadertoy-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/shadertoy.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/shadertoy.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:450;s:4:"file";s:21:"2015/08/shadertoy.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"shadertoy-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"shadertoy-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"shadertoy-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"shadertoy-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"shadertoy-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Weights</title>
		<link>http://blog.demofox.org/weights/</link>
		<pubDate>Tue, 18 Aug 2015 14:14:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/Weights.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3019</wp:post_id>
		<wp:post_date><![CDATA[2015-08-18 06:14:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-18 14:14:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[weights]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/Weights.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/Weights.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:19:"2015/08/Weights.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Weights-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"Weights-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"Weights-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Boxcar3</title>
		<link>http://blog.demofox.org/boxcar3/</link>
		<pubDate>Tue, 18 Aug 2015 18:57:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/Boxcar3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3024</wp:post_id>
		<wp:post_date><![CDATA[2015-08-18 10:57:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-18 18:57:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[boxcar3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/Boxcar3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/Boxcar3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:64;s:4:"file";s:19:"2015/08/Boxcar3.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Boxcar3-150x64.png";s:5:"width";i:150;s:6:"height";i:64;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>boxweights</title>
		<link>http://blog.demofox.org/boxweights/</link>
		<pubDate>Tue, 18 Aug 2015 19:09:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/boxweights.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3027</wp:post_id>
		<wp:post_date><![CDATA[2015-08-18 11:09:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-18 19:09:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[boxweights]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/boxweights.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/boxweights.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:22:"2015/08/boxweights.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"boxweights-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"boxweights-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"boxweights-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>boxblur</title>
		<link>http://blog.demofox.org/boxblur/</link>
		<pubDate>Tue, 18 Aug 2015 19:18:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/boxblur.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3029</wp:post_id>
		<wp:post_date><![CDATA[2015-08-18 11:18:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-18 19:18:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[boxblur]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/boxblur.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/boxblur.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:449;s:4:"file";s:19:"2015/08/boxblur.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"boxblur-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"boxblur-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"boxblur-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"boxblur-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"boxblur-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Florida</title>
		<link>http://blog.demofox.org/florida/</link>
		<pubDate>Tue, 18 Aug 2015 19:37:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/Florida.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3039</wp:post_id>
		<wp:post_date><![CDATA[2015-08-18 11:37:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-18 19:37:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[florida]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/Florida.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/Florida.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:792;s:6:"height";i:612;s:4:"file";s:19:"2015/08/Florida.bmp";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>florida_10_10</title>
		<link>http://blog.demofox.org/florida_10_10/</link>
		<pubDate>Tue, 18 Aug 2015 19:37:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/florida_10_10.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3040</wp:post_id>
		<wp:post_date><![CDATA[2015-08-18 11:37:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-18 19:37:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[florida_10_10]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/florida_10_10.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/florida_10_10.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:792;s:6:"height";i:612;s:4:"file";s:25:"2015/08/florida_10_10.bmp";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>florida_100_10</title>
		<link>http://blog.demofox.org/florida_100_10/</link>
		<pubDate>Tue, 18 Aug 2015 19:37:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/florida_100_10.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3041</wp:post_id>
		<wp:post_date><![CDATA[2015-08-18 11:37:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-18 19:37:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[florida_100_10]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/florida_100_10.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/florida_100_10.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:792;s:6:"height";i:612;s:4:"file";s:26:"2015/08/florida_100_10.bmp";s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gaussian1d</title>
		<link>http://blog.demofox.org/gaussian1d/</link>
		<pubDate>Thu, 20 Aug 2015 03:18:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/Gaussian1d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3048</wp:post_id>
		<wp:post_date><![CDATA[2015-08-19 19:18:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 03:18:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[gaussian1d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/Gaussian1d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/Gaussian1d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:64;s:4:"file";s:22:"2015/08/Gaussian1d.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"Gaussian1d-150x64.png";s:5:"width";i:150;s:6:"height";i:64;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FloridaBlur3_3</title>
		<link>http://blog.demofox.org/floridablur3_3/</link>
		<pubDate>Thu, 20 Aug 2015 04:02:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/FloridaBlur3_3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3065</wp:post_id>
		<wp:post_date><![CDATA[2015-08-19 20:02:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 04:02:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[floridablur3_3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/FloridaBlur3_3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/FloridaBlur3_3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:792;s:6:"height";i:612;s:4:"file";s:26:"2015/08/FloridaBlur3_3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"FloridaBlur3_3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"FloridaBlur3_3-300x232.png";s:5:"width";i:300;s:6:"height";i:232;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"FloridaBlur3_3-792x188.png";s:5:"width";i:792;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"FloridaBlur3_3-792x188.png";s:5:"width";i:792;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"FloridaBlur3_3-388x300.png";s:5:"width";i:388;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FloridaBlur20_3</title>
		<link>http://blog.demofox.org/floridablur20_3/</link>
		<pubDate>Thu, 20 Aug 2015 04:02:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/FloridaBlur20_3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3066</wp:post_id>
		<wp:post_date><![CDATA[2015-08-19 20:02:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 04:02:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[floridablur20_3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/FloridaBlur20_3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/FloridaBlur20_3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:792;s:6:"height";i:612;s:4:"file";s:27:"2015/08/FloridaBlur20_3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"FloridaBlur20_3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"FloridaBlur20_3-300x232.png";s:5:"width";i:300;s:6:"height";i:232;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"FloridaBlur20_3-792x188.png";s:5:"width";i:792;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:27:"FloridaBlur20_3-792x188.png";s:5:"width";i:792;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"FloridaBlur20_3-388x300.png";s:5:"width";i:388;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FloridaBlur50_50</title>
		<link>http://blog.demofox.org/floridablur50_50/</link>
		<pubDate>Thu, 20 Aug 2015 04:02:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/FloridaBlur50_50.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3067</wp:post_id>
		<wp:post_date><![CDATA[2015-08-19 20:02:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 04:02:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[floridablur50_50]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/FloridaBlur50_50.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/FloridaBlur50_50.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:792;s:6:"height";i:612;s:4:"file";s:28:"2015/08/FloridaBlur50_50.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"FloridaBlur50_50-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"FloridaBlur50_50-300x232.png";s:5:"width";i:300;s:6:"height";i:232;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"FloridaBlur50_50-792x188.png";s:5:"width";i:792;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:28:"FloridaBlur50_50-792x188.png";s:5:"width";i:792;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:28:"FloridaBlur50_50-388x300.png";s:5:"width";i:388;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SuperSimpleHE</title>
		<link>http://blog.demofox.org/supersimplehe/</link>
		<pubDate>Fri, 28 Aug 2015 20:48:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/08/SuperSimpleHE.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3157</wp:post_id>
		<wp:post_date><![CDATA[2015-08-28 12:48:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-28 20:48:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[supersimplehe]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/08/SuperSimpleHE.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/08/SuperSimpleHE.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:418;s:4:"file";s:25:"2015/08/SuperSimpleHE.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"SuperSimpleHE-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"SuperSimpleHE-300x251.png";s:5:"width";i:300;s:6:"height";i:251;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"SuperSimpleHE-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"SuperSimpleHE-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"SuperSimpleHE-358x300.png";s:5:"width";i:358;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SimpleHEBetter</title>
		<link>http://blog.demofox.org/simplehebetter/</link>
		<pubDate>Thu, 03 Sep 2015 04:11:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/09/SimpleHEBetter.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3191</wp:post_id>
		<wp:post_date><![CDATA[2015-09-02 20:11:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-03 04:11:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[simplehebetter]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/09/SimpleHEBetter.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/SimpleHEBetter.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:399;s:4:"file";s:26:"2015/09/SimpleHEBetter.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"SimpleHEBetter-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"SimpleHEBetter-300x240.png";s:5:"width";i:300;s:6:"height";i:240;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"SimpleHEBetter-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"SimpleHEBetter-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"SimpleHEBetter-375x300.png";s:5:"width";i:375;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>5_7_3</title>
		<link>http://blog.demofox.org/5_7_3/</link>
		<pubDate>Thu, 10 Sep 2015 14:22:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/09/5_7_3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3227</wp:post_id>
		<wp:post_date><![CDATA[2015-09-10 06:22:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-10 14:22:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[5_7_3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/09/5_7_3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/5_7_3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:265;s:4:"file";s:17:"2015/09/5_7_3.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"5_7_3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"5_7_3-300x159.png";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"5_7_3-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"5_7_3-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>7_1m1_538</title>
		<link>http://blog.demofox.org/7_1m1_538/</link>
		<pubDate>Thu, 10 Sep 2015 14:22:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/09/7_1m1_538.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3228</wp:post_id>
		<wp:post_date><![CDATA[2015-09-10 06:22:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-10 14:22:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[7_1m1_538]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/09/7_1m1_538.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/7_1m1_538.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:268;s:4:"file";s:21:"2015/09/7_1m1_538.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"7_1m1_538-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"7_1m1_538-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"7_1m1_538-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"7_1m1_538-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>7_9_2</title>
		<link>http://blog.demofox.org/7_9_2/</link>
		<pubDate>Thu, 10 Sep 2015 14:22:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/09/7_9_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3229</wp:post_id>
		<wp:post_date><![CDATA[2015-09-10 06:22:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-10 14:22:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[7_9_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/09/7_9_2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/7_9_2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:267;s:4:"file";s:17:"2015/09/7_9_2.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"7_9_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"7_9_2-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"7_9_2-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"7_9_2-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>8_6_4</title>
		<link>http://blog.demofox.org/8_6_4/</link>
		<pubDate>Thu, 10 Sep 2015 14:22:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/09/8_6_4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3230</wp:post_id>
		<wp:post_date><![CDATA[2015-09-10 06:22:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-10 14:22:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[8_6_4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/09/8_6_4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/8_6_4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:246;s:4:"file";s:17:"2015/09/8_6_4.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"8_6_4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"8_6_4-300x148.png";s:5:"width";i:300;s:6:"height";i:148;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"8_6_4-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"8_6_4-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CRT</title>
		<link>http://blog.demofox.org/crt/</link>
		<pubDate>Sat, 12 Sep 2015 15:26:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/09/CRT.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3269</wp:post_id>
		<wp:post_date><![CDATA[2015-09-12 07:26:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-12 15:26:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[crt]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/09/CRT.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/CRT.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:230;s:4:"file";s:15:"2015/09/CRT.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"CRT-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"CRT-300x138.png";s:5:"width";i:300;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"CRT-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"CRT-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nested</title>
		<link>http://blog.demofox.org/nested/</link>
		<pubDate>Wed, 16 Sep 2015 04:48:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/09/Nested.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3324</wp:post_id>
		<wp:post_date><![CDATA[2015-09-15 20:48:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-16 04:48:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nested]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/09/Nested.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/09/Nested.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:292;s:4:"file";s:18:"2015/09/Nested.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Nested-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"Nested-300x176.png";s:5:"width";i:300;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Nested-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Nested-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OneQubit</title>
		<link>http://blog.demofox.org/onequbit/</link>
		<pubDate>Sat, 17 Oct 2015 17:00:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/10/OneQubit.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3424</wp:post_id>
		<wp:post_date><![CDATA[2015-10-17 09:00:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-17 17:00:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[onequbit]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/10/OneQubit.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/10/OneQubit.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:879;s:4:"file";s:20:"2015/10/OneQubit.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"OneQubit-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"OneQubit-170x300.png";s:5:"width";i:170;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"OneQubit-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"OneQubit-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"OneQubit-170x300.png";s:5:"width";i:170;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>entanglement2</title>
		<link>http://blog.demofox.org/entanglement2/</link>
		<pubDate>Fri, 06 Nov 2015 17:51:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/11/entanglement2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3639</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 09:51:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 17:51:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[entanglement2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/11/entanglement2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:80;s:4:"file";s:25:"2015/11/entanglement2.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"entanglement2-150x80.png";s:5:"width";i:150;s:6:"height";i:80;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/entanglement2.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cnot42</title>
		<link>http://blog.demofox.org/cnot42/</link>
		<pubDate>Fri, 06 Nov 2015 18:02:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/11/cnot42.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3643</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 10:02:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 18:02:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cnot42]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/11/cnot42.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/cnot42.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:160;s:4:"file";s:18:"2015/11/cnot42.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"cnot42-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"cnot42-300x120.png";s:5:"width";i:300;s:6:"height";i:120;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>swaps</title>
		<link>http://blog.demofox.org/swaps/</link>
		<pubDate>Fri, 06 Nov 2015 18:07:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/11/swaps.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3645</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 10:07:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 18:07:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[swaps]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/11/swaps.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/swaps.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:386;s:6:"height";i:275;s:4:"file";s:17:"2015/11/swaps.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"swaps-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"swaps-300x214.png";s:5:"width";i:300;s:6:"height";i:214;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"swaps-386x188.png";s:5:"width";i:386;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"swaps-386x188.png";s:5:"width";i:386;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cnot42simple2</title>
		<link>http://blog.demofox.org/cnot42simple2/</link>
		<pubDate>Fri, 06 Nov 2015 18:15:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/11/cnot42simple2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3649</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 10:15:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 18:15:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cnot42simple2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/11/cnot42simple2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/cnot42simple2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:160;s:6:"height";i:160;s:4:"file";s:25:"2015/11/cnot42simple2.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"cnot42simple2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Output1</title>
		<link>http://blog.demofox.org/output1/</link>
		<pubDate>Fri, 06 Nov 2015 21:24:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/11/Output1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3661</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 13:24:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 21:24:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[output1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/11/Output1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/Output1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:246;s:4:"file";s:19:"2015/11/Output1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Output1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Output1-300x148.png";s:5:"width";i:300;s:6:"height";i:148;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"Output1-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"Output1-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Output2</title>
		<link>http://blog.demofox.org/output2/</link>
		<pubDate>Fri, 06 Nov 2015 21:24:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/11/Output2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3662</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 13:24:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 21:24:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[output2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/11/Output2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/Output2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:853;s:4:"file";s:19:"2015/11/Output2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Output2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Output2-175x300.png";s:5:"width";i:175;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"Output2-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"Output2-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"Output2-175x300.png";s:5:"width";i:175;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lut1</title>
		<link>http://blog.demofox.org/lut1/</link>
		<pubDate>Fri, 13 Nov 2015 20:35:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/11/lut1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3711</wp:post_id>
		<wp:post_date><![CDATA[2015-11-13 12:35:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-13 20:35:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lut1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/11/lut1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/lut1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:174;s:4:"file";s:16:"2015/11/lut1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"lut1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"lut1-300x77.png";s:5:"width";i:300;s:6:"height";i:77;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"lut1-500x129.png";s:5:"width";i:500;s:6:"height";i:129;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lut2</title>
		<link>http://blog.demofox.org/lut2/</link>
		<pubDate>Fri, 13 Nov 2015 20:35:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/11/lut2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3712</wp:post_id>
		<wp:post_date><![CDATA[2015-11-13 12:35:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-13 20:35:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lut2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/11/lut2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/11/lut2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:677;s:6:"height";i:1098;s:4:"file";s:16:"2015/11/lut2.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"lut2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"lut2-185x300.png";s:5:"width";i:185;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:17:"lut2-631x1024.png";s:5:"width";i:631;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"lut2-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:16:"lut2-677x188.png";s:5:"width";i:677;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"lut2-185x300.png";s:5:"width";i:185;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>words</title>
		<link>http://blog.demofox.org/words/</link>
		<pubDate>Mon, 14 Dec 2015 20:34:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2015/12/words.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3747</wp:post_id>
		<wp:post_date><![CDATA[2015-12-14 12:34:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-14 20:34:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[words]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2015/12/words.txt]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/words.txt]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>snake</title>
		<link>http://blog.demofox.org/snake/</link>
		<pubDate>Sun, 17 Jan 2016 04:38:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/01/snake.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3862</wp:post_id>
		<wp:post_date><![CDATA[2016-01-16 20:38:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-17 04:38:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[snake]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/01/snake.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/01/snake.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:473;s:4:"file";s:17:"2016/01/snake.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"snake-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"snake-300x177.png";s:5:"width";i:300;s:6:"height";i:177;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"snake-768x454.png";s:5:"width";i:768;s:6:"height";i:454;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"snake-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"snake-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:17:"snake-500x296.png";s:5:"width";i:500;s:6:"height";i:296;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dust</title>
		<link>http://blog.demofox.org/dust/</link>
		<pubDate>Wed, 03 Feb 2016 15:13:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/dust.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3885</wp:post_id>
		<wp:post_date><![CDATA[2016-02-03 07:13:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-03 15:13:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dust]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/dust.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/dust.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:704;s:6:"height";i:424;s:4:"file";s:16:"2016/02/dust.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"dust-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"dust-300x181.png";s:5:"width";i:300;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"dust-704x188.png";s:5:"width";i:704;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:16:"dust-704x188.png";s:5:"width";i:704;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"dust-498x300.png";s:5:"width";i:498;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>minesweeper</title>
		<link>http://blog.demofox.org/minesweeper/</link>
		<pubDate>Wed, 03 Feb 2016 15:18:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/minesweeper.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3890</wp:post_id>
		<wp:post_date><![CDATA[2016-02-03 07:18:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-03 15:18:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[minesweeper]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/minesweeper.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/minesweeper.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:704;s:6:"height";i:423;s:4:"file";s:23:"2016/02/minesweeper.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"minesweeper-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"minesweeper-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"minesweeper-704x188.png";s:5:"width";i:704;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"minesweeper-704x188.png";s:5:"width";i:704;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"minesweeper-500x300.png";s:5:"width";i:500;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>largeangle</title>
		<link>http://blog.demofox.org/largeangle-2/</link>
		<pubDate>Sat, 20 Feb 2016 20:10:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/largeangle-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3981</wp:post_id>
		<wp:post_date><![CDATA[2016-02-20 12:10:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-20 20:10:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[largeangle-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/largeangle-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:450;s:4:"file";s:24:"2016/02/largeangle-1.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"largeangle-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"largeangle-1-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:24:"largeangle-1-768x431.png";s:5:"width";i:768;s:6:"height";i:431;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"largeangle-1-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"largeangle-1-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"largeangle-1-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/largeangle-1.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>medangle</title>
		<link>http://blog.demofox.org/medangle-2/</link>
		<pubDate>Sat, 20 Feb 2016 20:10:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/medangle-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3982</wp:post_id>
		<wp:post_date><![CDATA[2016-02-20 12:10:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-20 20:10:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[medangle-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/medangle-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/medangle-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:803;s:6:"height";i:452;s:4:"file";s:22:"2016/02/medangle-1.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"medangle-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"medangle-1-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"medangle-1-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"medangle-1-803x188.png";s:5:"width";i:803;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"medangle-1-803x188.png";s:5:"width";i:803;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"medangle-1-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>smangle</title>
		<link>http://blog.demofox.org/smangle-2/</link>
		<pubDate>Sat, 20 Feb 2016 20:10:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/smangle-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3983</wp:post_id>
		<wp:post_date><![CDATA[2016-02-20 12:10:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-20 20:10:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[smangle-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/smangle-1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/smangle-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:450;s:4:"file";s:21:"2016/02/smangle-1.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"smangle-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"smangle-1-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"smangle-1-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"smangle-1-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"smangle-1-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"smangle-1-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>normal</title>
		<link>http://blog.demofox.org/normal/</link>
		<pubDate>Sun, 21 Feb 2016 15:17:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/normal.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3987</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 07:17:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 15:17:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[normal]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/normal.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/normal.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:448;s:4:"file";s:18:"2016/02/normal.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"normal-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"normal-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"normal-768x430.png";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"normal-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"normal-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"normal-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>upsized</title>
		<link>http://blog.demofox.org/upsized/</link>
		<pubDate>Sun, 21 Feb 2016 15:17:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/upsized.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3988</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 07:17:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 15:17:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[upsized]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/upsized.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/upsized.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:802;s:6:"height";i:441;s:4:"file";s:19:"2016/02/upsized.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"upsized-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"upsized-300x165.png";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"upsized-768x422.png";s:5:"width";i:768;s:6:"height";i:422;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"upsized-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"upsized-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"upsized-500x275.png";s:5:"width";i:500;s:6:"height";i:275;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>upsizedmid</title>
		<link>http://blog.demofox.org/upsizedmid/</link>
		<pubDate>Sun, 21 Feb 2016 15:21:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/upsizedmid.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3990</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 07:21:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 15:21:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[upsizedmid]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/upsizedmid.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/upsizedmid.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:444;s:4:"file";s:22:"2016/02/upsizedmid.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"upsizedmid-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"upsizedmid-300x167.png";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"upsizedmid-768x426.png";s:5:"width";i:768;s:6:"height";i:426;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"upsizedmid-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"upsizedmid-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"upsizedmid-500x278.png";s:5:"width";i:500;s:6:"height";i:278;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bcmed</title>
		<link>http://blog.demofox.org/bcmed/</link>
		<pubDate>Sun, 21 Feb 2016 15:27:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/bcmed.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3994</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 07:27:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 15:27:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bcmed]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/bcmed.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/bcmed.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:799;s:6:"height";i:445;s:4:"file";s:17:"2016/02/bcmed.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"bcmed-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"bcmed-300x167.png";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"bcmed-768x428.png";s:5:"width";i:768;s:6:"height";i:428;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"bcmed-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"bcmed-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:17:"bcmed-500x278.png";s:5:"width";i:500;s:6:"height";i:278;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bcsm</title>
		<link>http://blog.demofox.org/bcsm/</link>
		<pubDate>Sun, 21 Feb 2016 15:27:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/bcsm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3995</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 07:27:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 15:27:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bcsm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/bcsm.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/bcsm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:799;s:6:"height";i:440;s:4:"file";s:16:"2016/02/bcsm.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"bcsm-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"bcsm-300x165.png";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:16:"bcsm-768x423.png";s:5:"width";i:768;s:6:"height";i:423;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"bcsm-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:16:"bcsm-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"bcsm-500x275.png";s:5:"width";i:500;s:6:"height";i:275;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>halfhoriz</title>
		<link>http://blog.demofox.org/halfhoriz/</link>
		<pubDate>Sun, 21 Feb 2016 15:36:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/halfhoriz.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4002</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 07:36:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 15:36:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[halfhoriz]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/halfhoriz.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/halfhoriz.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:447;s:4:"file";s:21:"2016/02/halfhoriz.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"halfhoriz-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"halfhoriz-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"halfhoriz-768x429.png";s:5:"width";i:768;s:6:"height";i:429;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"halfhoriz-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"halfhoriz-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"halfhoriz-500x279.png";s:5:"width";i:500;s:6:"height";i:279;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>depthcubic</title>
		<link>http://blog.demofox.org/depthcubic/</link>
		<pubDate>Sun, 21 Feb 2016 15:57:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/depthcubic.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4006</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 07:57:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 15:57:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[depthcubic]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/depthcubic.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/depthcubic.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:442;s:4:"file";s:22:"2016/02/depthcubic.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"depthcubic-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"depthcubic-300x166.png";s:5:"width";i:300;s:6:"height";i:166;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"depthcubic-768x424.png";s:5:"width";i:768;s:6:"height";i:424;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"depthcubic-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"depthcubic-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"depthcubic-500x276.png";s:5:"width";i:500;s:6:"height";i:276;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>depthlin</title>
		<link>http://blog.demofox.org/depthlin/</link>
		<pubDate>Sun, 21 Feb 2016 15:57:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/depthlin.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4007</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 07:57:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 15:57:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[depthlin]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/depthlin.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/depthlin.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:441;s:4:"file";s:20:"2016/02/depthlin.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"depthlin-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"depthlin-300x165.png";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"depthlin-768x423.png";s:5:"width";i:768;s:6:"height";i:423;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"depthlin-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"depthlin-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"depthlin-500x275.png";s:5:"width";i:500;s:6:"height";i:275;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image</title>
		<link>http://blog.demofox.org/image/</link>
		<pubDate>Tue, 23 Feb 2016 04:59:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4021</wp:post_id>
		<wp:post_date><![CDATA[2016-02-22 20:59:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-23 04:59:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/image.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/image.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:839;s:6:"height";i:282;s:4:"file";s:17:"2016/02/image.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"image-300x101.png";s:5:"width";i:300;s:6:"height";i:101;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"image-768x258.png";s:5:"width";i:768;s:6:"height";i:258;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"image-839x188.png";s:5:"width";i:839;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"image-839x188.png";s:5:"width";i:839;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:17:"image-500x168.png";s:5:"width";i:500;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GPUBezier2016</title>
		<link>http://blog.demofox.org/gpubezier2016/</link>
		<pubDate>Tue, 23 Feb 2016 05:04:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/GPUBezier2016.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4024</wp:post_id>
		<wp:post_date><![CDATA[2016-02-22 21:04:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-23 05:04:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[gpubezier2016]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/GPUBezier2016.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/GPUBezier2016.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SupplementalMaterials</title>
		<link>http://blog.demofox.org/supplementalmaterials/</link>
		<pubDate>Tue, 23 Feb 2016 05:23:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/SupplementalMaterials.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4029</wp:post_id>
		<wp:post_date><![CDATA[2016-02-22 21:23:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-23 05:23:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[supplementalmaterials]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/SupplementalMaterials.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/SupplementalMaterials.zip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>vornoi</title>
		<link>http://blog.demofox.org/vornoi/</link>
		<pubDate>Mon, 29 Feb 2016 14:38:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/vornoi.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4040</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 06:38:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 14:38:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[vornoi]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/vornoi.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/vornoi.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:451;s:4:"file";s:18:"2016/02/vornoi.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"vornoi-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"vornoi-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"vornoi-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"vornoi-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"vornoi-801x188.png";s:5:"width";i:801;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"vornoi-500x282.png";s:5:"width";i:500;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>voronoi2</title>
		<link>http://blog.demofox.org/voronoi2/</link>
		<pubDate>Mon, 29 Feb 2016 14:54:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/voronoi2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4044</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 06:54:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 14:54:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[voronoi2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/voronoi2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/voronoi2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:449;s:4:"file";s:20:"2016/02/voronoi2.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"voronoi2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"voronoi2-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"voronoi2-768x431.png";s:5:"width";i:768;s:6:"height";i:431;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"voronoi2-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"voronoi2-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"voronoi2-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DistanceTexture</title>
		<link>http://blog.demofox.org/distancetexture/</link>
		<pubDate>Mon, 29 Feb 2016 14:54:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/02/DistanceTexture.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4045</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 06:54:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-29 14:54:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[distancetexture]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/02/DistanceTexture.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/02/DistanceTexture.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:796;s:6:"height";i:447;s:4:"file";s:27:"2016/02/DistanceTexture.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"DistanceTexture-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"DistanceTexture-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:27:"DistanceTexture-768x431.png";s:5:"width";i:768;s:6:"height";i:431;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"DistanceTexture-796x188.png";s:5:"width";i:796;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:27:"DistanceTexture-796x188.png";s:5:"width";i:796;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"DistanceTexture-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df1</title>
		<link>http://blog.demofox.org/df1/</link>
		<pubDate>Wed, 02 Mar 2016 14:38:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4073</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:38:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:38:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:452;s:4:"file";s:15:"2016/03/df1.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"df1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"df1-300x170.png";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"df1-768x434.png";s:5:"width";i:768;s:6:"height";i:434;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"df1-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"df1-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"df1-500x283.png";s:5:"width";i:500;s:6:"height";i:283;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df2</title>
		<link>http://blog.demofox.org/df2/</link>
		<pubDate>Wed, 02 Mar 2016 14:38:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4074</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:38:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:38:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:802;s:6:"height";i:448;s:4:"file";s:15:"2016/03/df2.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"df2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"df2-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"df2-768x429.png";s:5:"width";i:768;s:6:"height";i:429;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"df2-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"df2-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"df2-500x279.png";s:5:"width";i:500;s:6:"height";i:279;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df3</title>
		<link>http://blog.demofox.org/df3/</link>
		<pubDate>Wed, 02 Mar 2016 14:38:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4075</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:38:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:38:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:802;s:6:"height";i:449;s:4:"file";s:15:"2016/03/df3.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"df3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"df3-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"df3-768x430.png";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"df3-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"df3-802x188.png";s:5:"width";i:802;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"df3-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df4</title>
		<link>http://blog.demofox.org/df4/</link>
		<pubDate>Wed, 02 Mar 2016 14:38:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4076</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:38:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:38:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:799;s:6:"height";i:446;s:4:"file";s:15:"2016/03/df4.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"df4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"df4-300x167.png";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"df4-768x429.png";s:5:"width";i:768;s:6:"height";i:429;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"df4-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"df4-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"df4-500x279.png";s:5:"width";i:500;s:6:"height";i:279;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df5</title>
		<link>http://blog.demofox.org/df5/</link>
		<pubDate>Wed, 02 Mar 2016 14:50:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4079</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:50:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:50:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:797;s:6:"height";i:448;s:4:"file";s:15:"2016/03/df5.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"df5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"df5-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"df5-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"df5-797x188.png";s:5:"width";i:797;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"df5-797x188.png";s:5:"width";i:797;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"df5-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df6</title>
		<link>http://blog.demofox.org/df6/</link>
		<pubDate>Wed, 02 Mar 2016 14:50:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4080</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:50:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:50:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:799;s:6:"height";i:450;s:4:"file";s:15:"2016/03/df6.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"df6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"df6-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"df6-768x433.png";s:5:"width";i:768;s:6:"height";i:433;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"df6-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"df6-799x188.png";s:5:"width";i:799;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"df6-500x282.png";s:5:"width";i:500;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df7</title>
		<link>http://blog.demofox.org/df7/</link>
		<pubDate>Wed, 02 Mar 2016 14:59:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4082</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:59:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:59:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df7.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df7.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:797;s:6:"height";i:449;s:4:"file";s:15:"2016/03/df7.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"df7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"df7-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"df7-768x433.png";s:5:"width";i:768;s:6:"height";i:433;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"df7-797x188.png";s:5:"width";i:797;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"df7-797x188.png";s:5:"width";i:797;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"df7-500x282.png";s:5:"width";i:500;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df8</title>
		<link>http://blog.demofox.org/df8/</link>
		<pubDate>Wed, 02 Mar 2016 14:59:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df8.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4083</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:59:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:59:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df8.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df8.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:798;s:6:"height";i:447;s:4:"file";s:15:"2016/03/df8.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"df8-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"df8-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"df8-768x430.png";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"df8-798x188.png";s:5:"width";i:798;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"df8-798x188.png";s:5:"width";i:798;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"df8-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df9</title>
		<link>http://blog.demofox.org/df9/</link>
		<pubDate>Wed, 02 Mar 2016 14:59:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df9.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4084</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:59:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:59:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df9]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df9.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df9.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:798;s:6:"height";i:448;s:4:"file";s:15:"2016/03/df9.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"df9-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"df9-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"df9-768x431.png";s:5:"width";i:768;s:6:"height";i:431;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"df9-798x188.png";s:5:"width";i:798;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"df9-798x188.png";s:5:"width";i:798;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"df9-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df10</title>
		<link>http://blog.demofox.org/df10/</link>
		<pubDate>Wed, 02 Mar 2016 14:59:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df10.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4085</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:59:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:59:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df10]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df10.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df10.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:798;s:6:"height";i:446;s:4:"file";s:16:"2016/03/df10.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"df10-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"df10-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:16:"df10-768x429.png";s:5:"width";i:768;s:6:"height";i:429;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"df10-798x188.png";s:5:"width";i:798;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:16:"df10-798x188.png";s:5:"width";i:798;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"df10-500x279.png";s:5:"width";i:500;s:6:"height";i:279;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df11</title>
		<link>http://blog.demofox.org/df11/</link>
		<pubDate>Wed, 02 Mar 2016 14:59:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df11.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4086</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:59:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:59:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df11]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df11.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df11.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:796;s:6:"height";i:445;s:4:"file";s:16:"2016/03/df11.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"df11-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"df11-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:16:"df11-768x429.png";s:5:"width";i:768;s:6:"height";i:429;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"df11-796x188.png";s:5:"width";i:796;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:16:"df11-796x188.png";s:5:"width";i:796;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"df11-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>df12</title>
		<link>http://blog.demofox.org/df12/</link>
		<pubDate>Wed, 02 Mar 2016 14:59:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/df12.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4087</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 06:59:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 14:59:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[df12]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/df12.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/df12.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:797;s:6:"height";i:448;s:4:"file";s:16:"2016/03/df12.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"df12-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"df12-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:16:"df12-768x432.png";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"df12-797x188.png";s:5:"width";i:797;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:16:"df12-797x188.png";s:5:"width";i:797;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"df12-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_0_x_0_x_2</title>
		<link>http://blog.demofox.org/wangtile_0_x_0_x_2/</link>
		<pubDate>Sun, 20 Mar 2016 05:10:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_0_x_0_x_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4189</wp:post_id>
		<wp:post_date><![CDATA[2016-03-19 21:10:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-20 05:10:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_0_x_0_x_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_0_x_0_x_2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_0_x_0_x_2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:30:"2016/03/WangTile_0_x_0_x_2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"WangTile_0_x_0_x_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"WangTile_0_x_0_x_2-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:30:"WangTile_0_x_0_x_2-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_1_x_1_x_2</title>
		<link>http://blog.demofox.org/wangtile_1_x_1_x_2/</link>
		<pubDate>Sun, 20 Mar 2016 05:10:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_1_x_1_x_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4190</wp:post_id>
		<wp:post_date><![CDATA[2016-03-19 21:10:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-20 05:10:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_1_x_1_x_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_1_x_1_x_2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_1_x_1_x_2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:30:"2016/03/WangTile_1_x_1_x_2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"WangTile_1_x_1_x_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"WangTile_1_x_1_x_2-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:30:"WangTile_1_x_1_x_2-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTileMemory4_2</title>
		<link>http://blog.demofox.org/wangtilememory4_2/</link>
		<pubDate>Sun, 20 Mar 2016 05:21:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTileMemory4_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4192</wp:post_id>
		<wp:post_date><![CDATA[2016-03-19 21:21:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-20 05:21:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtilememory4_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTileMemory4_2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTileMemory4_2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:367;s:6:"height";i:394;s:4:"file";s:29:"2016/03/WangTileMemory4_2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"WangTileMemory4_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"WangTileMemory4_2-279x300.png";s:5:"width";i:279;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"WangTileMemory4_2-367x188.png";s:5:"width";i:367;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"WangTileMemory4_2-367x188.png";s:5:"width";i:367;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:29:"WangTileMemory4_2-279x300.png";s:5:"width";i:279;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_A0_x_1_B</title>
		<link>http://blog.demofox.org/wangtile_a0_x_1_b/</link>
		<pubDate>Mon, 21 Mar 2016 03:32:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_A0_x_1_B.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4202</wp:post_id>
		<wp:post_date><![CDATA[2016-03-20 19:32:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 03:32:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_a0_x_1_b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_A0_x_1_B.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_A0_x_1_B.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:29:"2016/03/WangTile_A0_x_1_B.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"WangTile_A0_x_1_B-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"WangTile_A0_x_1_B-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"WangTile_A0_x_1_B-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_0_B_B0_x</title>
		<link>http://blog.demofox.org/wangtile_0_b_b0_x/</link>
		<pubDate>Mon, 21 Mar 2016 03:34:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_0_B_B0_x.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4203</wp:post_id>
		<wp:post_date><![CDATA[2016-03-20 19:34:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 03:34:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_0_b_b0_x]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_0_B_B0_x.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_0_B_B0_x.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:29:"2016/03/WangTile_0_B_B0_x.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"WangTile_0_B_B0_x-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"WangTile_0_B_B0_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"WangTile_0_B_B0_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_1_B_B1_x</title>
		<link>http://blog.demofox.org/wangtile_1_b_b1_x/</link>
		<pubDate>Mon, 21 Mar 2016 03:35:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_1_B_B1_x.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4204</wp:post_id>
		<wp:post_date><![CDATA[2016-03-20 19:35:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 03:35:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_1_b_b1_x]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_1_B_B1_x.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_1_B_B1_x.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:29:"2016/03/WangTile_1_B_B1_x.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"WangTile_1_B_B1_x-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"WangTile_1_B_B1_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"WangTile_1_B_B1_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_B0_A_1_x</title>
		<link>http://blog.demofox.org/wangtile_b0_a_1_x/</link>
		<pubDate>Mon, 21 Mar 2016 03:49:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_B0_A_1_x.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4208</wp:post_id>
		<wp:post_date><![CDATA[2016-03-20 19:49:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 03:49:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_b0_a_1_x]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_B0_A_1_x.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_B0_A_1_x.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:29:"2016/03/WangTile_B0_A_1_x.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"WangTile_B0_A_1_x-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"WangTile_B0_A_1_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"WangTile_B0_A_1_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_0_x_A0_A</title>
		<link>http://blog.demofox.org/wangtile_0_x_a0_a/</link>
		<pubDate>Mon, 21 Mar 2016 03:50:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_0_x_A0_A.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4209</wp:post_id>
		<wp:post_date><![CDATA[2016-03-20 19:50:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 03:50:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_0_x_a0_a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_0_x_A0_A.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_0_x_A0_A.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:29:"2016/03/WangTile_0_x_A0_A.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"WangTile_0_x_A0_A-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"WangTile_0_x_A0_A-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"WangTile_0_x_A0_A-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_1_x_A1_A</title>
		<link>http://blog.demofox.org/wangtile_1_x_a1_a/</link>
		<pubDate>Mon, 21 Mar 2016 03:50:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_1_x_A1_A.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4210</wp:post_id>
		<wp:post_date><![CDATA[2016-03-20 19:50:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 03:50:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_1_x_a1_a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_1_x_A1_A.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_1_x_A1_A.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:29:"2016/03/WangTile_1_x_A1_A.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"WangTile_1_x_A1_A-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"WangTile_1_x_A1_A-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"WangTile_1_x_A1_A-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_A1_x_H1_x</title>
		<link>http://blog.demofox.org/wangtile_a1_x_h1_x/</link>
		<pubDate>Mon, 21 Mar 2016 04:27:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_A1_x_H1_x.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4221</wp:post_id>
		<wp:post_date><![CDATA[2016-03-20 20:27:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 04:27:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_a1_x_h1_x]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_A1_x_H1_x.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_A1_x_H1_x.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:30:"2016/03/WangTile_A1_x_H1_x.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"WangTile_A1_x_H1_x-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"WangTile_A1_x_H1_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:30:"WangTile_A1_x_H1_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_B1_x_H1_x</title>
		<link>http://blog.demofox.org/wangtile_b1_x_h1_x/</link>
		<pubDate>Mon, 21 Mar 2016 04:27:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_B1_x_H1_x.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4222</wp:post_id>
		<wp:post_date><![CDATA[2016-03-20 20:27:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 04:27:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_b1_x_h1_x]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_B1_x_H1_x.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_B1_x_H1_x.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:30:"2016/03/WangTile_B1_x_H1_x.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"WangTile_B1_x_H1_x-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"WangTile_B1_x_H1_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:30:"WangTile_B1_x_H1_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_x_x_0_x</title>
		<link>http://blog.demofox.org/wangtile_x_x_0_x/</link>
		<pubDate>Mon, 21 Mar 2016 16:44:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_x_x_0_x.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4230</wp:post_id>
		<wp:post_date><![CDATA[2016-03-21 08:44:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 16:44:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_x_x_0_x]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_x_x_0_x.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_x_x_0_x.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:28:"2016/03/WangTile_x_x_0_x.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"WangTile_x_x_0_x-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"WangTile_x_x_0_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:28:"WangTile_x_x_0_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WangTile_x_x_A0_x</title>
		<link>http://blog.demofox.org/wangtile_x_x_a0_x/</link>
		<pubDate>Mon, 21 Mar 2016 16:47:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/WangTile_x_x_A0_x.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4231</wp:post_id>
		<wp:post_date><![CDATA[2016-03-21 08:47:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 16:47:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wangtile_x_x_a0_x]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/WangTile_x_x_A0_x.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/WangTile_x_x_A0_x.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:239;s:6:"height";i:252;s:4:"file";s:29:"2016/03/WangTile_x_x_A0_x.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"WangTile_x_x_A0_x-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"WangTile_x_x_A0_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"WangTile_x_x_A0_x-239x188.png";s:5:"width";i:239;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tileset6</title>
		<link>http://blog.demofox.org/tileset6/</link>
		<pubDate>Mon, 21 Mar 2016 16:50:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/tileset6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4232</wp:post_id>
		<wp:post_date><![CDATA[2016-03-21 08:50:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 16:50:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tileset6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/tileset6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/tileset6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:450;s:6:"height";i:600;s:4:"file";s:20:"2016/03/tileset6.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"tileset6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"tileset6-225x300.png";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"tileset6-450x188.png";s:5:"width";i:450;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"tileset6-450x188.png";s:5:"width";i:450;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"tileset6-225x300.png";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Time0_2</title>
		<link>http://blog.demofox.org/time0_2/</link>
		<pubDate>Mon, 21 Mar 2016 17:33:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/Time0_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4244</wp:post_id>
		<wp:post_date><![CDATA[2016-03-21 09:33:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 17:33:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[time0_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/Time0_2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/Time0_2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:600;s:4:"file";s:19:"2016/03/Time0_2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Time0_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Time0_2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"Time0_2-600x188.png";s:5:"width";i:600;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"Time0_2-600x188.png";s:5:"width";i:600;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"Time0_2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Time1_2</title>
		<link>http://blog.demofox.org/time1_2/</link>
		<pubDate>Mon, 21 Mar 2016 17:34:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/Time1_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4245</wp:post_id>
		<wp:post_date><![CDATA[2016-03-21 09:34:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 17:34:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[time1_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/Time1_2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/Time1_2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:600;s:4:"file";s:19:"2016/03/Time1_2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Time1_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Time1_2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"Time1_2-600x188.png";s:5:"width";i:600;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"Time1_2-600x188.png";s:5:"width";i:600;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"Time1_2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Time2_2</title>
		<link>http://blog.demofox.org/time2_2/</link>
		<pubDate>Mon, 21 Mar 2016 17:34:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/Time2_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4246</wp:post_id>
		<wp:post_date><![CDATA[2016-03-21 09:34:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 17:34:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[time2_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/Time2_2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/Time2_2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:600;s:4:"file";s:19:"2016/03/Time2_2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Time2_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Time2_2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"Time2_2-600x188.png";s:5:"width";i:600;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"Time2_2-600x188.png";s:5:"width";i:600;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"Time2_2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Time3_2</title>
		<link>http://blog.demofox.org/time3_2/</link>
		<pubDate>Mon, 21 Mar 2016 17:34:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/03/Time3_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4247</wp:post_id>
		<wp:post_date><![CDATA[2016-03-21 09:34:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-21 17:34:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[time3_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/03/Time3_2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/03/Time3_2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:600;s:4:"file";s:19:"2016/03/Time3_2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Time3_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Time3_2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"Time3_2-600x188.png";s:5:"width";i:600;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"Time3_2-600x188.png";s:5:"width";i:600;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"Time3_2-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>anf_add</title>
		<link>http://blog.demofox.org/anf_add/</link>
		<pubDate>Mon, 11 Apr 2016 04:24:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/04/anf_add.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4327</wp:post_id>
		<wp:post_date><![CDATA[2016-04-10 20:24:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-11 04:24:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[anf_add]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/04/anf_add.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/anf_add.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:264;s:6:"height";i:248;s:4:"file";s:19:"2016/04/anf_add.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"anf_add-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"anf_add-264x188.png";s:5:"width";i:264;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"anf_add-264x188.png";s:5:"width";i:264;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>anf_bitcount</title>
		<link>http://blog.demofox.org/anf_bitcount/</link>
		<pubDate>Mon, 11 Apr 2016 04:24:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/04/anf_bitcount.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4328</wp:post_id>
		<wp:post_date><![CDATA[2016-04-10 20:24:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-11 04:24:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[anf_bitcount]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/04/anf_bitcount.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/anf_bitcount.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:260;s:6:"height";i:181;s:4:"file";s:24:"2016/04/anf_bitcount.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"anf_bitcount-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>anf_divide</title>
		<link>http://blog.demofox.org/anf_divide/</link>
		<pubDate>Mon, 11 Apr 2016 04:24:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/04/anf_divide.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4329</wp:post_id>
		<wp:post_date><![CDATA[2016-04-10 20:24:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-11 04:24:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[anf_divide]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/04/anf_divide.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/anf_divide.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:261;s:6:"height";i:197;s:4:"file";s:22:"2016/04/anf_divide.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"anf_divide-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"anf_divide-261x188.png";s:5:"width";i:261;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"anf_divide-261x188.png";s:5:"width";i:261;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>anf_modulus</title>
		<link>http://blog.demofox.org/anf_modulus/</link>
		<pubDate>Mon, 11 Apr 2016 04:24:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/04/anf_modulus.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4330</wp:post_id>
		<wp:post_date><![CDATA[2016-04-10 20:24:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-11 04:24:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[anf_modulus]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/04/anf_modulus.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/anf_modulus.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:262;s:6:"height";i:156;s:4:"file";s:23:"2016/04/anf_modulus.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"anf_modulus-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>anf_multiply</title>
		<link>http://blog.demofox.org/anf_multiply/</link>
		<pubDate>Mon, 11 Apr 2016 04:24:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/04/anf_multiply.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4331</wp:post_id>
		<wp:post_date><![CDATA[2016-04-10 20:24:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-11 04:24:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[anf_multiply]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/04/anf_multiply.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/anf_multiply.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:289;s:6:"height";i:258;s:4:"file";s:24:"2016/04/anf_multiply.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"anf_multiply-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"anf_multiply-289x188.png";s:5:"width";i:289;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"anf_multiply-289x188.png";s:5:"width";i:289;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SSS</title>
		<link>http://blog.demofox.org/sss/</link>
		<pubDate>Sun, 01 May 2016 03:53:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/04/SSS.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4374</wp:post_id>
		<wp:post_date><![CDATA[2016-04-30 19:53:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-01 03:53:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sss]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/04/SSS.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/04/SSS.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:334;s:4:"file";s:15:"2016/04/SSS.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"SSS-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"SSS-300x201.png";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"SSS-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"SSS-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"SSS-448x300.png";s:5:"width";i:448;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Buffer15</title>
		<link>http://blog.demofox.org/buffer15/</link>
		<pubDate>Thu, 19 May 2016 05:30:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/05/Buffer15.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4415</wp:post_id>
		<wp:post_date><![CDATA[2016-05-18 21:30:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-19 05:30:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[buffer15]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/05/Buffer15.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/Buffer15.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:811;s:6:"height";i:489;s:4:"file";s:20:"2016/05/Buffer15.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"Buffer15-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"Buffer15-300x181.png";s:5:"width";i:300;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"Buffer15-768x463.png";s:5:"width";i:768;s:6:"height";i:463;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"Buffer15-811x188.png";s:5:"width";i:811;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"Buffer15-811x188.png";s:5:"width";i:811;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"Buffer15-498x300.png";s:5:"width";i:498;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BufferDouble</title>
		<link>http://blog.demofox.org/bufferdouble/</link>
		<pubDate>Thu, 19 May 2016 05:30:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/05/BufferDouble.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4416</wp:post_id>
		<wp:post_date><![CDATA[2016-05-18 21:30:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-19 05:30:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bufferdouble]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/05/BufferDouble.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/05/BufferDouble.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:906;s:6:"height";i:511;s:4:"file";s:24:"2016/05/BufferDouble.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"BufferDouble-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"BufferDouble-300x169.png";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:24:"BufferDouble-768x433.png";s:5:"width";i:768;s:6:"height";i:433;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"BufferDouble-906x188.png";s:5:"width";i:906;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"BufferDouble-906x188.png";s:5:"width";i:906;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"BufferDouble-500x282.png";s:5:"width";i:500;s:6:"height";i:282;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>karplusstrong</title>
		<link>http://blog.demofox.org/karplusstrong/</link>
		<pubDate>Thu, 16 Jun 2016 18:10:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/06/karplusstrong.wav</guid>
		<description></description>
		<content:encoded><![CDATA["karplusstrong".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4438</wp:post_id>
		<wp:post_date><![CDATA[2016-06-16 10:10:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-16 18:10:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[karplusstrong]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/06/karplusstrong.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/karplusstrong.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:1411200;s:15:"bits_per_sample";i:32;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:1587644;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:9;s:16:"length_formatted";s:4:"0:09";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>kpflangereverb</title>
		<link>http://blog.demofox.org/kpflangereverb/</link>
		<pubDate>Thu, 16 Jun 2016 18:46:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/06/kpflangereverb.wav</guid>
		<description></description>
		<content:encoded><![CDATA["kpflangereverb".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4441</wp:post_id>
		<wp:post_date><![CDATA[2016-06-16 10:46:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-16 18:46:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[kpflangereverb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/06/kpflangereverb.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/kpflangereverb.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:2;s:11:"sample_rate";i:48000;s:7:"bitrate";i:1536000;s:15:"bits_per_sample";i:16;s:8:"lossless";b:1;s:11:"channelmode";s:6:"stereo";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:2323244;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:12;s:16:"length_formatted";s:4:"0:12";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>monobeat</title>
		<link>http://blog.demofox.org/monobeat/</link>
		<pubDate>Fri, 24 Jun 2016 04:04:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/06/monobeat.wav</guid>
		<description></description>
		<content:encoded><![CDATA["monobeat".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4450</wp:post_id>
		<wp:post_date><![CDATA[2016-06-23 20:04:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-24 04:04:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[monobeat]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/06/monobeat.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/monobeat.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:1;s:11:"sample_rate";i:44100;s:7:"bitrate";i:1411200;s:15:"bits_per_sample";i:32;s:8:"lossless";b:1;s:11:"channelmode";s:4:"mono";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:705644;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>stereobeat</title>
		<link>http://blog.demofox.org/stereobeat/</link>
		<pubDate>Fri, 24 Jun 2016 04:04:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/06/stereobeat.wav</guid>
		<description></description>
		<content:encoded><![CDATA["stereobeat".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4451</wp:post_id>
		<wp:post_date><![CDATA[2016-06-23 20:04:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-24 04:04:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stereobeat]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/06/stereobeat.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/stereobeat.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:16:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";i:2822400;s:15:"bits_per_sample";i:32;s:8:"lossless";b:1;s:11:"channelmode";s:6:"stereo";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:1411244;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>stereonoise</title>
		<link>http://blog.demofox.org/stereonoise/</link>
		<pubDate>Sat, 25 Jun 2016 20:58:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/06/stereonoise.wav</guid>
		<description></description>
		<content:encoded><![CDATA["stereonoise".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4458</wp:post_id>
		<wp:post_date><![CDATA[2016-06-25 12:58:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-25 20:58:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stereonoise]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/06/stereonoise.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/stereonoise.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";i:2822400;s:15:"bits_per_sample";i:32;s:8:"lossless";b:1;s:11:"channelmode";s:6:"stereo";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:705644;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:2;s:16:"length_formatted";s:4:"0:02";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>stereonoise2</title>
		<link>http://blog.demofox.org/stereonoise2/</link>
		<pubDate>Sat, 25 Jun 2016 22:10:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/06/stereonoise2.wav</guid>
		<description></description>
		<content:encoded><![CDATA["stereonoise2".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4459</wp:post_id>
		<wp:post_date><![CDATA[2016-06-25 14:10:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-25 22:10:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stereonoise2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/06/stereonoise2.wav]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/stereonoise2.wav]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:18:{s:10:"dataformat";s:3:"wav";s:12:"bitrate_mode";s:3:"cbr";s:10:"wformattag";i:1;s:5:"codec";s:27:"Pulse Code Modulation (PCM)";s:8:"channels";i:2;s:11:"sample_rate";i:44100;s:7:"bitrate";i:2822400;s:15:"bits_per_sample";i:32;s:8:"lossless";b:1;s:11:"channelmode";s:6:"stereo";s:17:"compression_ratio";i:1;s:10:"fileformat";s:3:"wav";s:8:"filesize";i:1411244;s:9:"mime_type";s:12:"audio/x-wave";s:6:"length";i:4;s:16:"length_formatted";s:4:"0:04";s:6:"artist";s:0:"";s:5:"album";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>quincunx2</title>
		<link>http://blog.demofox.org/quincunx2/</link>
		<pubDate>Mon, 27 Jun 2016 17:44:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/06/quincunx2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4460</wp:post_id>
		<wp:post_date><![CDATA[2016-06-27 09:44:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-27 17:44:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[quincunx2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/06/quincunx2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/quincunx2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:21:"2016/06/quincunx2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"quincunx2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"quincunx2-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"quincunx2-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>quincunx</title>
		<link>http://blog.demofox.org/quincunx-2/</link>
		<pubDate>Mon, 27 Jun 2016 17:45:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/06/quincunx.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4462</wp:post_id>
		<wp:post_date><![CDATA[2016-06-27 09:45:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-27 17:45:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[quincunx-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/06/quincunx.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/06/quincunx.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:20:"2016/06/quincunx.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"quincunx-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"quincunx-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"quincunx-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zeldaguy</title>
		<link>http://blog.demofox.org/zeldaguy/</link>
		<pubDate>Fri, 29 Jul 2016 02:59:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/zeldaguy.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4492</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 18:59:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 02:59:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zeldaguy]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/zeldaguy.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/zeldaguy.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:20:"2016/07/zeldaguy.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zeldaguy.hpf.idft</title>
		<link>http://blog.demofox.org/zeldaguy-hpf-idft/</link>
		<pubDate>Fri, 29 Jul 2016 02:59:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/zeldaguy.hpf_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4493</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 18:59:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 02:59:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zeldaguy-hpf-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/zeldaguy.hpf_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/zeldaguy.hpf_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:31:"2016/07/zeldaguy.hpf_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zeldaguy.hpf.mag</title>
		<link>http://blog.demofox.org/zeldaguy-hpf-mag/</link>
		<pubDate>Fri, 29 Jul 2016 02:59:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/zeldaguy.hpf_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4494</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 18:59:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 02:59:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zeldaguy-hpf-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/zeldaguy.hpf_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/zeldaguy.hpf_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:30:"2016/07/zeldaguy.hpf_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zeldaguy.lpf.idft</title>
		<link>http://blog.demofox.org/zeldaguy-lpf-idft/</link>
		<pubDate>Fri, 29 Jul 2016 02:59:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/zeldaguy.lpf_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4495</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 18:59:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 02:59:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zeldaguy-lpf-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/zeldaguy.lpf_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/zeldaguy.lpf_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:31:"2016/07/zeldaguy.lpf_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zeldaguy.lpf.mag</title>
		<link>http://blog.demofox.org/zeldaguy-lpf-mag/</link>
		<pubDate>Fri, 29 Jul 2016 02:59:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/zeldaguy.lpf_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4496</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 18:59:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 02:59:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zeldaguy-lpf-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/zeldaguy.lpf_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/zeldaguy.lpf_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:30:"2016/07/zeldaguy.lpf_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zeldaguy.phase0.idft</title>
		<link>http://blog.demofox.org/zeldaguy-phase0-idft/</link>
		<pubDate>Fri, 29 Jul 2016 02:59:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/zeldaguy.phase0_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4497</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 18:59:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 02:59:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zeldaguy-phase0-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/zeldaguy.phase0_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/zeldaguy.phase0_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:34:"2016/07/zeldaguy.phase0_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zeldaguy.phase0.mag</title>
		<link>http://blog.demofox.org/zeldaguy-phase0-mag/</link>
		<pubDate>Fri, 29 Jul 2016 02:59:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/zeldaguy.phase0_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4498</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 18:59:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 02:59:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zeldaguy-phase0-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/zeldaguy.phase0_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/zeldaguy.phase0_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:33:"2016/07/zeldaguy.phase0_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zeldaguy.raw.idft</title>
		<link>http://blog.demofox.org/zeldaguy-raw-idft/</link>
		<pubDate>Fri, 29 Jul 2016 02:59:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/zeldaguy.raw_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4499</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 18:59:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 02:59:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zeldaguy-raw-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/zeldaguy.raw_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/zeldaguy.raw_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:31:"2016/07/zeldaguy.raw_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zeldaguy.raw.mag</title>
		<link>http://blog.demofox.org/zeldaguy-raw-mag/</link>
		<pubDate>Fri, 29 Jul 2016 02:59:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/zeldaguy.raw_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4500</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 18:59:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 02:59:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zeldaguy-raw-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/zeldaguy.raw_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/zeldaguy.raw_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:30:"2016/07/zeldaguy.raw_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>zeldaguy.raw.phase</title>
		<link>http://blog.demofox.org/zeldaguy-raw-phase/</link>
		<pubDate>Fri, 29 Jul 2016 03:00:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/zeldaguy.raw_.phase_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4501</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 19:00:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 03:00:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[zeldaguy-raw-phase]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/zeldaguy.raw_.phase_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/zeldaguy.raw_.phase_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:84;s:6:"height";i:80;s:4:"file";s:32:"2016/07/zeldaguy.raw_.phase_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paulalan.raw.idft</title>
		<link>http://blog.demofox.org/paulalan-raw-idft/</link>
		<pubDate>Fri, 29 Jul 2016 03:54:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/paulalan.raw_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4510</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 19:54:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 03:54:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paulalan-raw-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/paulalan.raw_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/paulalan.raw_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:100;s:6:"height";i:133;s:4:"file";s:31:"2016/07/paulalan.raw_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paulalan.raw.mag</title>
		<link>http://blog.demofox.org/paulalan-raw-mag/</link>
		<pubDate>Fri, 29 Jul 2016 03:54:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/paulalan.raw_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4511</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 19:54:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 03:54:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paulalan-raw-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/paulalan.raw_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/paulalan.raw_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:100;s:6:"height";i:133;s:4:"file";s:30:"2016/07/paulalan.raw_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paulalan.raw.phase</title>
		<link>http://blog.demofox.org/paulalan-raw-phase/</link>
		<pubDate>Fri, 29 Jul 2016 03:54:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/paulalan.raw_.phase_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4512</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 19:54:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 03:54:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paulalan-raw-phase]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/paulalan.raw_.phase_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/paulalan.raw_.phase_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:100;s:6:"height";i:133;s:4:"file";s:32:"2016/07/paulalan.raw_.phase_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paulalan</title>
		<link>http://blog.demofox.org/paulalan/</link>
		<pubDate>Fri, 29 Jul 2016 03:54:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/paulalan.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4513</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 19:54:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 03:54:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paulalan]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/paulalan.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/paulalan.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:100;s:6:"height";i:133;s:4:"file";s:20:"2016/07/paulalan.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paulalan.hpf.idft</title>
		<link>http://blog.demofox.org/paulalan-hpf-idft/</link>
		<pubDate>Fri, 29 Jul 2016 03:54:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/paulalan.hpf_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4514</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 19:54:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 03:54:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paulalan-hpf-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/paulalan.hpf_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/paulalan.hpf_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:100;s:6:"height";i:133;s:4:"file";s:31:"2016/07/paulalan.hpf_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paulalan.hpf.mag</title>
		<link>http://blog.demofox.org/paulalan-hpf-mag/</link>
		<pubDate>Fri, 29 Jul 2016 03:54:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/paulalan.hpf_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4515</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 19:54:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 03:54:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paulalan-hpf-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/paulalan.hpf_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/paulalan.hpf_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:100;s:6:"height";i:133;s:4:"file";s:30:"2016/07/paulalan.hpf_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paulalan.lpf.idft</title>
		<link>http://blog.demofox.org/paulalan-lpf-idft/</link>
		<pubDate>Fri, 29 Jul 2016 03:54:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/paulalan.lpf_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4516</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 19:54:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 03:54:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paulalan-lpf-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/paulalan.lpf_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/paulalan.lpf_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:100;s:6:"height";i:133;s:4:"file";s:31:"2016/07/paulalan.lpf_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paulalan.lpf.mag</title>
		<link>http://blog.demofox.org/paulalan-lpf-mag/</link>
		<pubDate>Fri, 29 Jul 2016 03:54:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/paulalan.lpf_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4517</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 19:54:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 03:54:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paulalan-lpf-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/paulalan.lpf_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/paulalan.lpf_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:100;s:6:"height";i:133;s:4:"file";s:30:"2016/07/paulalan.lpf_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>paulalan.phase0.idft</title>
		<link>http://blog.demofox.org/paulalan-phase0-idft/</link>
		<pubDate>Fri, 29 Jul 2016 03:54:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/paulalan.phase0_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4518</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 19:54:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 03:54:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[paulalan-phase0-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/paulalan.phase0_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/paulalan.phase0_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:100;s:6:"height";i:133;s:4:"file";s:34:"2016/07/paulalan.phase0_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripesH.raw.phase</title>
		<link>http://blog.demofox.org/stripesh-raw-phase/</link>
		<pubDate>Fri, 29 Jul 2016 04:01:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripesH.raw_.phase_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4522</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:01:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:01:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripesh-raw-phase]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripesH.raw_.phase_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripesH.raw_.phase_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:32:"2016/07/StripesH.raw_.phase_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripesH.raw.idft</title>
		<link>http://blog.demofox.org/stripesh-raw-idft/</link>
		<pubDate>Fri, 29 Jul 2016 04:01:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripesH.raw_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4523</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:01:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:01:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripesh-raw-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripesH.raw_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripesH.raw_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:31:"2016/07/StripesH.raw_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripesH.raw.mag</title>
		<link>http://blog.demofox.org/stripesh-raw-mag/</link>
		<pubDate>Fri, 29 Jul 2016 04:01:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripesH.raw_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4524</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:01:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:01:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripesh-raw-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripesH.raw_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripesH.raw_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:30:"2016/07/StripesH.raw_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripesV.raw.phase</title>
		<link>http://blog.demofox.org/stripesv-raw-phase/</link>
		<pubDate>Fri, 29 Jul 2016 04:11:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripesV.raw_.phase_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4533</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:11:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:11:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripesv-raw-phase]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripesV.raw_.phase_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripesV.raw_.phase_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:32:"2016/07/StripesV.raw_.phase_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripesV.raw.idft</title>
		<link>http://blog.demofox.org/stripesv-raw-idft/</link>
		<pubDate>Fri, 29 Jul 2016 04:11:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripesV.raw_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4534</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:11:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:11:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripesv-raw-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripesV.raw_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripesV.raw_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:31:"2016/07/StripesV.raw_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripesV.raw.mag</title>
		<link>http://blog.demofox.org/stripesv-raw-mag/</link>
		<pubDate>Fri, 29 Jul 2016 04:11:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripesV.raw_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4535</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:11:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:11:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripesv-raw-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripesV.raw_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripesV.raw_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:30:"2016/07/StripesV.raw_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripeH.raw.phase</title>
		<link>http://blog.demofox.org/stripeh-raw-phase/</link>
		<pubDate>Fri, 29 Jul 2016 04:13:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripeH.raw_.phase_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4537</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:13:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:13:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripeh-raw-phase]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripeH.raw_.phase_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripeH.raw_.phase_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:31:"2016/07/StripeH.raw_.phase_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripeH.raw.idft</title>
		<link>http://blog.demofox.org/stripeh-raw-idft/</link>
		<pubDate>Fri, 29 Jul 2016 04:13:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripeH.raw_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4538</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:13:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:13:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripeh-raw-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripeH.raw_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripeH.raw_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:30:"2016/07/StripeH.raw_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripeH.raw.mag</title>
		<link>http://blog.demofox.org/stripeh-raw-mag/</link>
		<pubDate>Fri, 29 Jul 2016 04:13:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripeH.raw_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4539</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:13:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:13:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripeh-raw-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripeH.raw_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripeH.raw_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:29:"2016/07/StripeH.raw_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripeV.raw.phase</title>
		<link>http://blog.demofox.org/stripev-raw-phase/</link>
		<pubDate>Fri, 29 Jul 2016 04:14:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripeV.raw_.phase_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4540</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:14:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:14:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripev-raw-phase]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripeV.raw_.phase_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripeV.raw_.phase_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:31:"2016/07/StripeV.raw_.phase_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripeV.raw.idft</title>
		<link>http://blog.demofox.org/stripev-raw-idft/</link>
		<pubDate>Fri, 29 Jul 2016 04:14:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripeV.raw_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4541</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:14:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:14:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripev-raw-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripeV.raw_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripeV.raw_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:30:"2016/07/StripeV.raw_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripeV.raw.mag</title>
		<link>http://blog.demofox.org/stripev-raw-mag/</link>
		<pubDate>Fri, 29 Jul 2016 04:14:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripeV.raw_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4542</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:14:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:14:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[stripev-raw-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripeV.raw_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripeV.raw_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:29:"2016/07/StripeV.raw_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripeD.raw.phase</title>
		<link>http://blog.demofox.org/striped-raw-phase/</link>
		<pubDate>Fri, 29 Jul 2016 04:15:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripeD.raw_.phase_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4544</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:15:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:15:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[striped-raw-phase]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripeD.raw_.phase_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripeD.raw_.phase_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:31:"2016/07/StripeD.raw_.phase_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripeD.raw.idft</title>
		<link>http://blog.demofox.org/striped-raw-idft/</link>
		<pubDate>Fri, 29 Jul 2016 04:15:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripeD.raw_.idft_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4545</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:15:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:15:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[striped-raw-idft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripeD.raw_.idft_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripeD.raw_.idft_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:30:"2016/07/StripeD.raw_.idft_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>StripeD.raw.mag</title>
		<link>http://blog.demofox.org/striped-raw-mag/</link>
		<pubDate>Fri, 29 Jul 2016 04:15:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/07/StripeD.raw_.mag_.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4546</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:15:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:15:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[striped-raw-mag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/07/StripeD.raw_.mag_.bmp]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/07/StripeD.raw_.mag_.bmp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:29:"2016/07/StripeD.raw_.mag_.bmp";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>samples4cos</title>
		<link>http://blog.demofox.org/samples4cos/</link>
		<pubDate>Mon, 08 Aug 2016 14:29:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/08/samples4cos.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4561</wp:post_id>
		<wp:post_date><![CDATA[2016-08-08 06:29:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-08 14:29:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[samples4cos]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/08/samples4cos.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/samples4cos.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:340;s:6:"height";i:215;s:4:"file";s:23:"2016/08/samples4cos.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"samples4cos-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"samples4cos-300x190.png";s:5:"width";i:300;s:6:"height";i:190;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"samples4cos-340x188.png";s:5:"width";i:340;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"samples4cos-340x188.png";s:5:"width";i:340;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cosine4samples</title>
		<link>http://blog.demofox.org/cosine4samples/</link>
		<pubDate>Mon, 08 Aug 2016 18:55:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/08/cosine4samples.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4566</wp:post_id>
		<wp:post_date><![CDATA[2016-08-08 10:55:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-08 18:55:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cosine4samples]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/08/cosine4samples.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/cosine4samples.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:340;s:6:"height";i:219;s:4:"file";s:26:"2016/08/cosine4samples.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"cosine4samples-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"cosine4samples-300x193.png";s:5:"width";i:300;s:6:"height";i:193;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"cosine4samples-340x188.png";s:5:"width";i:340;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"cosine4samples-340x188.png";s:5:"width";i:340;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cosShifted4Samples</title>
		<link>http://blog.demofox.org/cosshifted4samples/</link>
		<pubDate>Tue, 09 Aug 2016 03:30:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/08/cosShifted4Samples.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4575</wp:post_id>
		<wp:post_date><![CDATA[2016-08-08 19:30:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-09 03:30:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cosshifted4samples]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/08/cosShifted4Samples.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/cosShifted4Samples.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:340;s:6:"height";i:221;s:4:"file";s:30:"2016/08/cosShifted4Samples.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"cosShifted4Samples-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"cosShifted4Samples-300x195.png";s:5:"width";i:300;s:6:"height";i:195;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:30:"cosShifted4Samples-340x188.png";s:5:"width";i:340;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:30:"cosShifted4Samples-340x188.png";s:5:"width";i:340;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>spidermandft</title>
		<link>http://blog.demofox.org/spidermandft/</link>
		<pubDate>Wed, 10 Aug 2016 13:41:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/08/spidermandft.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4613</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 05:41:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 13:41:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[spidermandft]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/08/spidermandft.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/spidermandft.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:250;s:4:"file";s:24:"2016/08/spidermandft.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"spidermandft-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:24:"spidermandft-300x250.jpg";s:5:"width";i:300;s:6:"height";i:250;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"spidermandft-300x188.jpg";s:5:"width";i:300;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"large-feature";a:4:{s:4:"file";s:24:"spidermandft-300x188.jpg";s:5:"width";i:300;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sincos01</title>
		<link>http://blog.demofox.org/sincos01/</link>
		<pubDate>Wed, 10 Aug 2016 13:46:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/08/sincos01.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4617</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 05:46:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 13:46:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sincos01]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/08/sincos01.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/sincos01.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:420;s:6:"height";i:219;s:4:"file";s:20:"2016/08/sincos01.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"sincos01-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"sincos01-300x156.png";s:5:"width";i:300;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"sincos01-420x188.png";s:5:"width";i:420;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"sincos01-420x188.png";s:5:"width";i:420;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sincos2hz01</title>
		<link>http://blog.demofox.org/sincos2hz01/</link>
		<pubDate>Wed, 10 Aug 2016 13:46:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/08/sincos2hz01.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4618</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 05:46:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 13:46:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sincos2hz01]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/08/sincos2hz01.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/sincos2hz01.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:420;s:6:"height";i:219;s:4:"file";s:23:"2016/08/sincos2hz01.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"sincos2hz01-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"sincos2hz01-300x156.png";s:5:"width";i:300;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"sincos2hz01-420x188.png";s:5:"width";i:420;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"sincos2hz01-420x188.png";s:5:"width";i:420;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sincos2pi</title>
		<link>http://blog.demofox.org/sincos2pi/</link>
		<pubDate>Wed, 10 Aug 2016 13:46:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/08/sincos2pi.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4619</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 05:46:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 13:46:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sincos2pi]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/08/sincos2pi.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/sincos2pi.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:403;s:6:"height";i:221;s:4:"file";s:21:"2016/08/sincos2pi.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"sincos2pi-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"sincos2pi-300x165.png";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"sincos2pi-403x188.png";s:5:"width";i:403;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"sincos2pi-403x188.png";s:5:"width";i:403;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>readyex_sine0_9hz</title>
		<link>http://blog.demofox.org/readyex_sine0_9hz/</link>
		<pubDate>Wed, 10 Aug 2016 18:57:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/08/readyex_sine0_9hz.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4632</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 10:57:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 18:57:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[readyex_sine0_9hz]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/08/readyex_sine0_9hz.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/readyex_sine0_9hz.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:561;s:6:"height";i:171;s:4:"file";s:29:"2016/08/readyex_sine0_9hz.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"readyex_sine0_9hz-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"readyex_sine0_9hz-300x91.png";s:5:"width";i:300;s:6:"height";i:91;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:29:"readyex_sine0_9hz-500x152.png";s:5:"width";i:500;s:6:"height";i:152;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>readyex_sine1hz</title>
		<link>http://blog.demofox.org/readyex_sine1hz/</link>
		<pubDate>Wed, 10 Aug 2016 18:57:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/08/readyex_sine1hz.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4633</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 10:57:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 18:57:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[readyex_sine1hz]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/08/readyex_sine1hz.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/readyex_sine1hz.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:561;s:6:"height";i:171;s:4:"file";s:27:"2016/08/readyex_sine1hz.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"readyex_sine1hz-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"readyex_sine1hz-300x91.png";s:5:"width";i:300;s:6:"height";i:91;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"readyex_sine1hz-500x152.png";s:5:"width";i:500;s:6:"height";i:152;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dftidftprogram</title>
		<link>http://blog.demofox.org/dftidftprogram/</link>
		<pubDate>Thu, 11 Aug 2016 17:28:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/08/dftidftprogram.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4665</wp:post_id>
		<wp:post_date><![CDATA[2016-08-11 09:28:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-11 17:28:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dftidftprogram]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/08/dftidftprogram.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/08/dftidftprogram.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:593;s:6:"height";i:812;s:4:"file";s:26:"2016/08/dftidftprogram.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"dftidftprogram-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"dftidftprogram-219x300.png";s:5:"width";i:219;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"dftidftprogram-593x188.png";s:5:"width";i:593;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"dftidftprogram-593x188.png";s:5:"width";i:593;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"dftidftprogram-219x300.png";s:5:"width";i:219;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pinhole</title>
		<link>http://blog.demofox.org/pinhole/</link>
		<pubDate>Sun, 04 Sep 2016 22:23:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/pinhole.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4723</wp:post_id>
		<wp:post_date><![CDATA[2016-09-04 14:23:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-04 22:23:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pinhole]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/pinhole.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/pinhole.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:473;s:6:"height";i:165;s:4:"file";s:19:"2016/09/pinhole.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"pinhole-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"pinhole-300x105.png";s:5:"width";i:300;s:6:"height";i:105;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HeaderImage2</title>
		<link>http://blog.demofox.org/headerimage2/</link>
		<pubDate>Sat, 17 Sep 2016 21:12:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/HeaderImage2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4756</wp:post_id>
		<wp:post_date><![CDATA[2016-09-17 13:12:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-17 21:12:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[headerimage2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/HeaderImage2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/HeaderImage2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:512;s:4:"file";s:24:"2016/09/HeaderImage2.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"HeaderImage2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"HeaderImage2-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:24:"HeaderImage2-768x384.png";s:5:"width";i:768;s:6:"height";i:384;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:25:"HeaderImage2-1024x512.png";s:5:"width";i:1024;s:6:"height";i:512;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"HeaderImage2-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"HeaderImage2-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"HeaderImage2-500x250.png";s:5:"width";i:500;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>scene2-features</title>
		<link>http://blog.demofox.org/scene2-features/</link>
		<pubDate>Sat, 17 Sep 2016 21:43:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/scene2-features.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4763</wp:post_id>
		<wp:post_date><![CDATA[2016-09-17 13:43:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-17 21:43:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scene2-features]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/scene2-features.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/scene2-features.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:27:"2016/09/scene2-features.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"scene2-features-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"scene2-features-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"scene2-features-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:27:"scene2-features-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"scene2-features-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>debug-norm</title>
		<link>http://blog.demofox.org/debug-norm/</link>
		<pubDate>Sun, 18 Sep 2016 23:28:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/debug-norm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4832</wp:post_id>
		<wp:post_date><![CDATA[2016-09-18 15:28:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-18 23:28:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[debug-norm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/debug-norm.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/debug-norm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:22:"2016/09/debug-norm.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"debug-norm-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"debug-norm-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"debug-norm-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"debug-norm-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"debug-norm-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>debug-bounces</title>
		<link>http://blog.demofox.org/debug-bounces/</link>
		<pubDate>Sun, 18 Sep 2016 23:28:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/debug-bounces.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4833</wp:post_id>
		<wp:post_date><![CDATA[2016-09-18 15:28:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-18 23:28:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[debug-bounces]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/debug-bounces.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/debug-bounces.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:25:"2016/09/debug-bounces.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"debug-bounces-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"debug-bounces-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"debug-bounces-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"debug-bounces-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"debug-bounces-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bias1</title>
		<link>http://blog.demofox.org/bias1/</link>
		<pubDate>Tue, 20 Sep 2016 19:20:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/bias1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4838</wp:post_id>
		<wp:post_date><![CDATA[2016-09-20 11:20:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-20 19:20:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bias1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/bias1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/bias1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:17:"2016/09/bias1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"bias1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"bias1-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"bias1-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"bias1-512x188.png";s:5:"width";i:512;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:17:"bias1-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bias2</title>
		<link>http://blog.demofox.org/bias2/</link>
		<pubDate>Tue, 20 Sep 2016 19:20:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/bias2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4839</wp:post_id>
		<wp:post_date><![CDATA[2016-09-20 11:20:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-20 19:20:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bias2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/bias2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/bias2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:512;s:4:"file";s:17:"2016/09/bias2.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"bias2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"bias2-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"bias2-768x384.png";s:5:"width";i:768;s:6:"height";i:384;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:18:"bias2-1024x512.png";s:5:"width";i:1024;s:6:"height";i:512;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"bias2-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"bias2-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:17:"bias2-500x250.png";s:5:"width";i:500;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>scene23-2raw</title>
		<link>http://blog.demofox.org/scene23-2raw/</link>
		<pubDate>Tue, 20 Sep 2016 19:56:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/scene23-2raw.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4848</wp:post_id>
		<wp:post_date><![CDATA[2016-09-20 11:56:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-20 19:56:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scene23-2raw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/scene23-2raw.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/scene23-2raw.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:512;s:4:"file";s:24:"2016/09/scene23-2raw.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"scene23-2raw-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"scene23-2raw-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:24:"scene23-2raw-768x384.png";s:5:"width";i:768;s:6:"height";i:384;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:25:"scene23-2raw-1024x512.png";s:5:"width";i:1024;s:6:"height";i:512;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"scene23-2raw-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"scene23-2raw-1024x188.png";s:5:"width";i:1024;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:24:"scene23-2raw-500x250.png";s:5:"width";i:500;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>morganptquote</title>
		<link>http://blog.demofox.org/morganptquote/</link>
		<pubDate>Tue, 20 Sep 2016 20:08:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/morganptquote.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4850</wp:post_id>
		<wp:post_date><![CDATA[2016-09-20 12:08:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-20 20:08:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[morganptquote]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/morganptquote.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/morganptquote.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:638;s:6:"height";i:166;s:4:"file";s:25:"2016/09/morganptquote.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"morganptquote-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"morganptquote-300x78.png";s:5:"width";i:300;s:6:"height";i:78;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"morganptquote-500x130.png";s:5:"width";i:500;s:6:"height";i:130;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>scene0_spp2</title>
		<link>http://blog.demofox.org/scene0_spp2/</link>
		<pubDate>Wed, 21 Sep 2016 19:30:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/Scene0_spp2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4855</wp:post_id>
		<wp:post_date><![CDATA[2016-09-21 11:30:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-21 19:30:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scene0_spp2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/Scene0_spp2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/Scene0_spp2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:200;s:4:"file";s:23:"2016/09/Scene0_spp2.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"Scene0_spp2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"Scene0_spp2-300x94.png";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"Scene0_spp2-640x188.png";s:5:"width";i:640;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"Scene0_spp2-640x188.png";s:5:"width";i:640;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"Scene0_spp2-500x156.png";s:5:"width";i:500;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>scene1_spp</title>
		<link>http://blog.demofox.org/scene1_spp/</link>
		<pubDate>Wed, 21 Sep 2016 20:07:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/Scene1_spp.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4858</wp:post_id>
		<wp:post_date><![CDATA[2016-09-21 12:07:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-21 20:07:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scene1_spp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/Scene1_spp.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/Scene1_spp.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:200;s:4:"file";s:22:"2016/09/Scene1_spp.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"Scene1_spp-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"Scene1_spp-300x94.png";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"Scene1_spp-640x188.png";s:5:"width";i:640;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"Scene1_spp-640x188.png";s:5:"width";i:640;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"Scene1_spp-500x156.png";s:5:"width";i:500;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>scene2_spp</title>
		<link>http://blog.demofox.org/scene2_spp/</link>
		<pubDate>Wed, 21 Sep 2016 20:10:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/Scene2_spp.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4860</wp:post_id>
		<wp:post_date><![CDATA[2016-09-21 12:10:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-21 20:10:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scene2_spp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/Scene2_spp.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/Scene2_spp.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:200;s:4:"file";s:22:"2016/09/Scene2_spp.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"Scene2_spp-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"Scene2_spp-300x94.png";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"Scene2_spp-640x188.png";s:5:"width";i:640;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"Scene2_spp-640x188.png";s:5:"width";i:640;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"Scene2_spp-500x156.png";s:5:"width";i:500;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>scene3_spp</title>
		<link>http://blog.demofox.org/scene3_spp/</link>
		<pubDate>Wed, 21 Sep 2016 20:15:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/Scene3_spp.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4862</wp:post_id>
		<wp:post_date><![CDATA[2016-09-21 12:15:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-21 20:15:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scene3_spp]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/Scene3_spp.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/Scene3_spp.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:200;s:4:"file";s:22:"2016/09/Scene3_spp.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"Scene3_spp-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"Scene3_spp-300x94.png";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"Scene3_spp-640x188.png";s:5:"width";i:640;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"Scene3_spp-640x188.png";s:5:"width";i:640;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"Scene3_spp-500x156.png";s:5:"width";i:500;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ptblogpost1</title>
		<link>http://blog.demofox.org/ptblogpost1/</link>
		<pubDate>Thu, 22 Sep 2016 03:46:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/09/PTBlogPost1.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4896</wp:post_id>
		<wp:post_date><![CDATA[2016-09-21 19:46:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-22 03:46:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ptblogpost1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/09/PTBlogPost1.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/09/PTBlogPost1.zip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lefticustweet</title>
		<link>http://blog.demofox.org/lefticustweet/</link>
		<pubDate>Fri, 14 Oct 2016 16:25:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/10/lefticustweet.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5053</wp:post_id>
		<wp:post_date><![CDATA[2016-10-14 08:25:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-14 16:25:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lefticustweet]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/10/lefticustweet.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/lefticustweet.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:620;s:6:"height";i:286;s:4:"file";s:25:"2016/10/lefticustweet.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"lefticustweet-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"lefticustweet-300x138.png";s:5:"width";i:300;s:6:"height";i:138;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"lefticustweet-620x188.png";s:5:"width";i:620;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"lefticustweet-620x188.png";s:5:"width";i:620;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"lefticustweet-500x231.png";s:5:"width";i:500;s:6:"height";i:231;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>clang1</title>
		<link>http://blog.demofox.org/clang1/</link>
		<pubDate>Fri, 14 Oct 2016 16:33:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/10/clang1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5058</wp:post_id>
		<wp:post_date><![CDATA[2016-10-14 08:33:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-14 16:33:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[clang1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/10/clang1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/clang1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:872;s:6:"height";i:472;s:4:"file";s:18:"2016/10/clang1.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"clang1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"clang1-300x162.png";s:5:"width";i:300;s:6:"height";i:162;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"clang1-768x416.png";s:5:"width";i:768;s:6:"height";i:416;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"clang1-872x188.png";s:5:"width";i:872;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"clang1-872x188.png";s:5:"width";i:872;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"clang1-500x271.png";s:5:"width";i:500;s:6:"height";i:271;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>clang2</title>
		<link>http://blog.demofox.org/clang2/</link>
		<pubDate>Fri, 14 Oct 2016 16:35:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/10/clang2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5061</wp:post_id>
		<wp:post_date><![CDATA[2016-10-14 08:35:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-14 16:35:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[clang2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/10/clang2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/clang2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:876;s:6:"height";i:473;s:4:"file";s:18:"2016/10/clang2.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"clang2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"clang2-300x162.png";s:5:"width";i:300;s:6:"height";i:162;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"clang2-768x415.png";s:5:"width";i:768;s:6:"height";i:415;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"clang2-876x188.png";s:5:"width";i:876;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"clang2-876x188.png";s:5:"width";i:876;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"clang2-500x270.png";s:5:"width";i:500;s:6:"height";i:270;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>clang3</title>
		<link>http://blog.demofox.org/clang3/</link>
		<pubDate>Fri, 14 Oct 2016 16:52:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/10/clang3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5069</wp:post_id>
		<wp:post_date><![CDATA[2016-10-14 08:52:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-14 16:52:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[clang3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/10/clang3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/clang3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1127;s:6:"height";i:980;s:4:"file";s:18:"2016/10/clang3.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"clang3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"clang3-300x261.png";s:5:"width";i:300;s:6:"height";i:261;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"clang3-768x668.png";s:5:"width";i:768;s:6:"height";i:668;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:19:"clang3-1024x890.png";s:5:"width";i:1024;s:6:"height";i:890;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"clang3-1127x188.png";s:5:"width";i:1127;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"clang3-1127x188.png";s:5:"width";i:1127;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"clang3-345x300.png";s:5:"width";i:345;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lthe</title>
		<link>http://blog.demofox.org/lthe/</link>
		<pubDate>Thu, 20 Oct 2016 03:33:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/10/LTHE.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5093</wp:post_id>
		<wp:post_date><![CDATA[2016-10-19 19:33:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-20 03:33:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lthe]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/10/LTHE.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/10/LTHE.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:334;s:4:"file";s:16:"2016/10/LTHE.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"LTHE-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"LTHE-300x201.png";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"LTHE-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:16:"LTHE-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"LTHE-448x300.png";s:5:"width";i:448;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>curves</title>
		<link>http://blog.demofox.org/curves/</link>
		<pubDate>Thu, 08 Dec 2016 00:21:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/curves.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5299</wp:post_id>
		<wp:post_date><![CDATA[2016-12-07 16:21:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-08 00:21:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[curves]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/curves.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/curves.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:441;s:6:"height";i:263;s:4:"file";s:18:"2016/12/curves.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"curves-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"curves-300x179.png";s:5:"width";i:300;s:6:"height";i:179;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"curves-441x188.png";s:5:"width";i:441;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"curves-441x188.png";s:5:"width";i:441;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>curves2</title>
		<link>http://blog.demofox.org/curves2/</link>
		<pubDate>Thu, 08 Dec 2016 00:48:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/curves2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5307</wp:post_id>
		<wp:post_date><![CDATA[2016-12-07 16:48:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-08 00:48:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[curves2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/curves2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/curves2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:441;s:6:"height";i:257;s:4:"file";s:19:"2016/12/curves2.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"curves2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"curves2-300x175.png";s:5:"width";i:300;s:6:"height";i:175;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"curves2-441x188.png";s:5:"width";i:441;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"curves2-441x188.png";s:5:"width";i:441;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>turing</title>
		<link>http://blog.demofox.org/turing/</link>
		<pubDate>Thu, 08 Dec 2016 01:07:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/turing.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5311</wp:post_id>
		<wp:post_date><![CDATA[2016-12-07 17:07:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-08 01:07:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[turing]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/turing.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/turing.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:642;s:6:"height";i:530;s:4:"file";s:18:"2016/12/turing.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"turing-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"turing-300x248.png";s:5:"width";i:300;s:6:"height";i:248;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"turing-642x188.png";s:5:"width";i:642;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"turing-642x188.png";s:5:"width";i:642;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"turing-363x300.png";s:5:"width";i:363;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>diagram</title>
		<link>http://blog.demofox.org/diagram/</link>
		<pubDate>Thu, 08 Dec 2016 14:20:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/diagram.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5325</wp:post_id>
		<wp:post_date><![CDATA[2016-12-08 06:20:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-08 14:20:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[diagram]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/diagram.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/diagram.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:653;s:6:"height";i:330;s:4:"file";s:19:"2016/12/diagram.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"diagram-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"diagram-300x152.png";s:5:"width";i:300;s:6:"height";i:152;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"diagram-653x188.png";s:5:"width";i:653;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"diagram-653x188.png";s:5:"width";i:653;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"diagram-500x253.png";s:5:"width";i:500;s:6:"height";i:253;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cube1</title>
		<link>http://blog.demofox.org/cube1/</link>
		<pubDate>Sat, 10 Dec 2016 23:06:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/cube1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5391</wp:post_id>
		<wp:post_date><![CDATA[2016-12-10 15:06:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-10 23:06:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cube1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/cube1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/cube1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:17:"2016/12/cube1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"cube1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"cube1-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"cube1-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cube2</title>
		<link>http://blog.demofox.org/cube2/</link>
		<pubDate>Sat, 10 Dec 2016 23:11:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/cube2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5394</wp:post_id>
		<wp:post_date><![CDATA[2016-12-10 15:11:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-10 23:11:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cube2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/cube2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/cube2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:17:"2016/12/cube2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"cube2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"cube2-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"cube2-256x188.png";s:5:"width";i:256;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bezier1</title>
		<link>http://blog.demofox.org/bezier1/</link>
		<pubDate>Mon, 12 Dec 2016 18:24:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/Bezier1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5436</wp:post_id>
		<wp:post_date><![CDATA[2016-12-12 10:24:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-12 18:24:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bezier1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/Bezier1.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/Bezier1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:360;s:6:"height";i:150;s:4:"file";s:19:"2016/12/Bezier1.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"Bezier1-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:19:"Bezier1-300x125.gif";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>texture1d</title>
		<link>http://blog.demofox.org/texture1d/</link>
		<pubDate>Mon, 12 Dec 2016 18:30:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/texture1d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5438</wp:post_id>
		<wp:post_date><![CDATA[2016-12-12 10:30:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-12 18:30:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[texture1d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/texture1d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/texture1d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:221;s:6:"height";i:124;s:4:"file";s:21:"2016/12/texture1d.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"texture1d-150x124.png";s:5:"width";i:150;s:6:"height";i:124;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>texture2d</title>
		<link>http://blog.demofox.org/texture2d/</link>
		<pubDate>Mon, 12 Dec 2016 18:48:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/texture2d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5443</wp:post_id>
		<wp:post_date><![CDATA[2016-12-12 10:48:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-12 18:48:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[texture2d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/texture2d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/texture2d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:216;s:6:"height";i:205;s:4:"file";s:21:"2016/12/texture2d.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"texture2d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"texture2d-216x188.png";s:5:"width";i:216;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"texture2d-216x188.png";s:5:"width";i:216;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bezier2</title>
		<link>http://blog.demofox.org/bezier2-2/</link>
		<pubDate>Mon, 12 Dec 2016 18:50:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/bezier2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5444</wp:post_id>
		<wp:post_date><![CDATA[2016-12-12 10:50:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-12 18:50:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bezier2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/bezier2.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/bezier2.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:360;s:6:"height";i:150;s:4:"file";s:19:"2016/12/bezier2.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"bezier2-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:19:"bezier2-300x125.gif";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bezier3</title>
		<link>http://blog.demofox.org/bezier3-2/</link>
		<pubDate>Mon, 12 Dec 2016 18:59:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/bezier3.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5448</wp:post_id>
		<wp:post_date><![CDATA[2016-12-12 10:59:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-12 18:59:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bezier3-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/bezier3.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/bezier3.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:360;s:6:"height";i:150;s:4:"file";s:19:"2016/12/bezier3.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"bezier3-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:19:"bezier3-300x125.gif";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>texture3d</title>
		<link>http://blog.demofox.org/texture3d/</link>
		<pubDate>Mon, 12 Dec 2016 19:13:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/texture3d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5450</wp:post_id>
		<wp:post_date><![CDATA[2016-12-12 11:13:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-12 19:13:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[texture3d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/texture3d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/texture3d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:432;s:6:"height";i:410;s:4:"file";s:21:"2016/12/texture3d.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"texture3d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"texture3d-300x285.png";s:5:"width";i:300;s:6:"height";i:285;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"texture3d-432x188.png";s:5:"width";i:432;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"texture3d-432x188.png";s:5:"width";i:432;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"texture3d-316x300.png";s:5:"width";i:316;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bezier4</title>
		<link>http://blog.demofox.org/bezier4-2/</link>
		<pubDate>Mon, 12 Dec 2016 19:18:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/bezier4.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5453</wp:post_id>
		<wp:post_date><![CDATA[2016-12-12 11:18:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-12 19:18:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bezier4-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/bezier4.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/bezier4.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:360;s:6:"height";i:150;s:4:"file";s:19:"2016/12/bezier4.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"bezier4-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:19:"bezier4-300x125.gif";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>texture4d</title>
		<link>http://blog.demofox.org/texture4d/</link>
		<pubDate>Mon, 12 Dec 2016 19:31:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/texture4d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5455</wp:post_id>
		<wp:post_date><![CDATA[2016-12-12 11:31:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-12 19:31:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[texture4d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/texture4d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/texture4d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:864;s:6:"height";i:410;s:4:"file";s:21:"2016/12/texture4d.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"texture4d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"texture4d-300x142.png";s:5:"width";i:300;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"texture4d-768x364.png";s:5:"width";i:768;s:6:"height";i:364;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"texture4d-864x188.png";s:5:"width";i:864;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"texture4d-864x188.png";s:5:"width";i:864;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"texture4d-500x237.png";s:5:"width";i:500;s:6:"height";i:237;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>texture1drg</title>
		<link>http://blog.demofox.org/texture1drg/</link>
		<pubDate>Mon, 12 Dec 2016 19:45:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/texture1dRG.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5466</wp:post_id>
		<wp:post_date><![CDATA[2016-12-12 11:45:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-12 19:45:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[texture1drg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/texture1dRG.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/texture1dRG.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:221;s:6:"height";i:124;s:4:"file";s:23:"2016/12/texture1dRG.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"texture1dRG-150x124.png";s:5:"width";i:150;s:6:"height";i:124;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>texture1drgb</title>
		<link>http://blog.demofox.org/texture1drgb/</link>
		<pubDate>Mon, 12 Dec 2016 19:49:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/texture1dRGB.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5468</wp:post_id>
		<wp:post_date><![CDATA[2016-12-12 11:49:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-12 19:49:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[texture1drgb]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/texture1dRGB.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/texture1dRGB.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:221;s:6:"height";i:124;s:4:"file";s:24:"2016/12/texture1dRGB.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"texture1dRGB-150x124.png";s:5:"width";i:150;s:6:"height";i:124;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>teaser</title>
		<link>http://blog.demofox.org/teaser/</link>
		<pubDate>Fri, 16 Dec 2016 22:00:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/teaser.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5501</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 14:00:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 22:00:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[teaser]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/teaser.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/teaser.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:419;s:4:"file";s:18:"2016/12/teaser.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"teaser-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"teaser-300x157.png";s:5:"width";i:300;s:6:"height";i:157;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"teaser-768x402.png";s:5:"width";i:768;s:6:"height";i:402;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"teaser-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"teaser-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"teaser-500x262.png";s:5:"width";i:500;s:6:"height";i:262;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>surface33</title>
		<link>http://blog.demofox.org/surface33/</link>
		<pubDate>Fri, 16 Dec 2016 22:20:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/surface33.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5519</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 14:20:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 22:20:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[surface33]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/surface33.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/surface33.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:591;s:6:"height";i:617;s:4:"file";s:21:"2016/12/surface33.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"surface33-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"surface33-287x300.png";s:5:"width";i:287;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"surface33-591x188.png";s:5:"width";i:591;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"surface33-591x188.png";s:5:"width";i:591;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"surface33-287x300.png";s:5:"width";i:287;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>surface21</title>
		<link>http://blog.demofox.org/surface21/</link>
		<pubDate>Fri, 16 Dec 2016 22:26:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/surface21.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5522</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 14:26:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 22:26:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[surface21]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/surface21.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/surface21.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:642;s:6:"height";i:640;s:4:"file";s:21:"2016/12/surface21.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"surface21-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"surface21-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"surface21-642x188.png";s:5:"width";i:642;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"surface21-642x188.png";s:5:"width";i:642;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"surface21-301x300.png";s:5:"width";i:301;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>surface22</title>
		<link>http://blog.demofox.org/surface22/</link>
		<pubDate>Fri, 16 Dec 2016 22:27:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/surface22.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5523</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 14:27:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 22:27:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[surface22]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/surface22.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/surface22.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:611;s:6:"height";i:635;s:4:"file";s:21:"2016/12/surface22.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"surface22-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"surface22-289x300.png";s:5:"width";i:289;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"surface22-611x188.png";s:5:"width";i:611;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"surface22-611x188.png";s:5:"width";i:611;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"surface22-289x300.png";s:5:"width";i:289;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>volume111A</title>
		<link>http://blog.demofox.org/volume111a/</link>
		<pubDate>Fri, 16 Dec 2016 22:36:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/volume111A.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5532</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 14:36:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 22:36:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[volume111a]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/volume111A.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/volume111A.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:589;s:6:"height";i:604;s:4:"file";s:22:"2016/12/volume111A.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"volume111A-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"volume111A-293x300.png";s:5:"width";i:293;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"volume111A-589x188.png";s:5:"width";i:589;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"volume111A-589x188.png";s:5:"width";i:589;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"volume111A-293x300.png";s:5:"width";i:293;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>volume111B</title>
		<link>http://blog.demofox.org/volume111b/</link>
		<pubDate>Fri, 16 Dec 2016 22:36:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/volume111B.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5533</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 14:36:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 22:36:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[volume111b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/volume111B.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/volume111B.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:578;s:6:"height";i:603;s:4:"file";s:22:"2016/12/volume111B.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"volume111B-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"volume111B-288x300.png";s:5:"width";i:288;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"volume111B-578x188.png";s:5:"width";i:578;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"volume111B-578x188.png";s:5:"width";i:578;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"volume111B-288x300.png";s:5:"width";i:288;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>volume112</title>
		<link>http://blog.demofox.org/volume112/</link>
		<pubDate>Fri, 16 Dec 2016 22:39:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/volume112.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5535</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 14:39:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 22:39:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[volume112]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/volume112.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/volume112.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:593;s:6:"height";i:603;s:4:"file";s:21:"2016/12/volume112.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"volume112-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"volume112-295x300.png";s:5:"width";i:295;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"volume112-593x188.png";s:5:"width";i:593;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"volume112-593x188.png";s:5:"width";i:593;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"volume112-295x300.png";s:5:"width";i:295;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>volume221</title>
		<link>http://blog.demofox.org/volume221/</link>
		<pubDate>Fri, 16 Dec 2016 22:40:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/volume221.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5536</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 14:40:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 22:40:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[volume221]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/volume221.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/volume221.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:601;s:6:"height";i:609;s:4:"file";s:21:"2016/12/volume221.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"volume221-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"volume221-296x300.png";s:5:"width";i:296;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"volume221-601x188.png";s:5:"width";i:601;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"volume221-601x188.png";s:5:"width";i:601;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"volume221-296x300.png";s:5:"width";i:296;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>surface11B</title>
		<link>http://blog.demofox.org/surface11b/</link>
		<pubDate>Fri, 16 Dec 2016 22:50:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/surface11B.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5538</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 14:50:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 22:50:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[surface11b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/surface11B.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/surface11B.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:624;s:6:"height";i:597;s:4:"file";s:22:"2016/12/surface11B.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"surface11B-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"surface11B-300x287.png";s:5:"width";i:300;s:6:"height";i:287;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"surface11B-624x188.png";s:5:"width";i:624;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"surface11B-624x188.png";s:5:"width";i:624;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"surface11B-314x300.png";s:5:"width";i:314;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>answer</title>
		<link>http://blog.demofox.org/answer/</link>
		<pubDate>Thu, 22 Dec 2016 21:35:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/answer.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5562</wp:post_id>
		<wp:post_date><![CDATA[2016-12-22 13:35:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-22 21:35:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[answer]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/answer.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/answer.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:745;s:6:"height";i:326;s:4:"file";s:18:"2016/12/answer.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"answer-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"answer-300x131.png";s:5:"width";i:300;s:6:"height";i:131;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"answer-745x188.png";s:5:"width";i:745;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"answer-745x188.png";s:5:"width";i:745;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"answer-500x219.png";s:5:"width";i:500;s:6:"height";i:219;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>examplecode</title>
		<link>http://blog.demofox.org/examplecode/</link>
		<pubDate>Fri, 23 Dec 2016 00:03:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/examplecode.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5609</wp:post_id>
		<wp:post_date><![CDATA[2016-12-22 16:03:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-23 00:03:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[examplecode]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/examplecode.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/examplecode.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:472;s:6:"height";i:1096;s:4:"file";s:23:"2016/12/examplecode.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"examplecode-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"examplecode-129x300.png";s:5:"width";i:129;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:24:"examplecode-441x1024.png";s:5:"width";i:441;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"examplecode-472x188.png";s:5:"width";i:472;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"examplecode-472x188.png";s:5:"width";i:472;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"examplecode-129x300.png";s:5:"width";i:129;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>demo</title>
		<link>http://blog.demofox.org/demo/</link>
		<pubDate>Fri, 23 Dec 2016 00:49:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2016/12/demo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5637</wp:post_id>
		<wp:post_date><![CDATA[2016-12-22 16:49:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-23 00:49:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[demo]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2016/12/demo.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2016/12/demo.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1011;s:6:"height";i:512;s:4:"file";s:16:"2016/12/demo.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"demo-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"demo-300x152.png";s:5:"width";i:300;s:6:"height";i:152;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:16:"demo-768x389.png";s:5:"width";i:768;s:6:"height";i:389;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"demo-1011x188.png";s:5:"width";i:1011;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"demo-1011x188.png";s:5:"width";i:1011;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"demo-500x253.png";s:5:"width";i:500;s:6:"height";i:253;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>surface</title>
		<link>http://blog.demofox.org/surface/</link>
		<pubDate>Mon, 02 Jan 2017 22:00:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/01/surface.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5657</wp:post_id>
		<wp:post_date><![CDATA[2017-01-02 14:00:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-02 22:00:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[surface]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/01/surface.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:636;s:6:"height";i:668;s:4:"file";s:19:"2017/01/surface.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"surface-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"surface-286x300.png";s:5:"width";i:286;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"surface-636x188.png";s:5:"width";i:636;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"surface-636x188.png";s:5:"width";i:636;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"surface-286x300.png";s:5:"width";i:286;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/surface.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>example</title>
		<link>http://blog.demofox.org/example/</link>
		<pubDate>Mon, 02 Jan 2017 23:47:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/01/example.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5679</wp:post_id>
		<wp:post_date><![CDATA[2017-01-02 15:47:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-02 23:47:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/01/example.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/example.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:887;s:4:"file";s:19:"2017/01/example.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"example-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"example-169x300.png";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"example-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"example-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"example-169x300.png";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shadertoy</title>
		<link>http://blog.demofox.org/shadertoy-3/</link>
		<pubDate>Sun, 08 Jan 2017 22:40:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/01/shadertoy.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5701</wp:post_id>
		<wp:post_date><![CDATA[2017-01-08 14:40:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-08 22:40:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[shadertoy-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/01/shadertoy.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/shadertoy.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1299;s:6:"height";i:413;s:4:"file";s:21:"2017/01/shadertoy.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"shadertoy-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"shadertoy-300x95.png";s:5:"width";i:300;s:6:"height";i:95;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"shadertoy-768x244.png";s:5:"width";i:768;s:6:"height";i:244;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"shadertoy-1024x326.png";s:5:"width";i:1024;s:6:"height";i:326;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"shadertoy-1299x188.png";s:5:"width";i:1299;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"shadertoy-1299x188.png";s:5:"width";i:1299;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"shadertoy-500x159.png";s:5:"width";i:500;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>diffuse</title>
		<link>http://blog.demofox.org/diffuse/</link>
		<pubDate>Mon, 09 Jan 2017 00:09:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/01/diffuse.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5705</wp:post_id>
		<wp:post_date><![CDATA[2017-01-08 16:09:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-09 00:09:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[diffuse]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/01/diffuse.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/diffuse.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:793;s:6:"height";i:444;s:4:"file";s:19:"2017/01/diffuse.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"diffuse-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"diffuse-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"diffuse-768x430.png";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"diffuse-793x188.png";s:5:"width";i:793;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"diffuse-793x188.png";s:5:"width";i:793;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"diffuse-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>reflect</title>
		<link>http://blog.demofox.org/reflect/</link>
		<pubDate>Mon, 09 Jan 2017 00:23:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/01/reflect.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5710</wp:post_id>
		<wp:post_date><![CDATA[2017-01-08 16:23:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-09 00:23:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[reflect]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/01/reflect.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/reflect.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:794;s:6:"height";i:445;s:4:"file";s:19:"2017/01/reflect.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"reflect-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"reflect-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"reflect-768x430.png";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"reflect-794x188.png";s:5:"width";i:794;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"reflect-794x188.png";s:5:"width";i:794;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"reflect-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>transparent</title>
		<link>http://blog.demofox.org/transparent/</link>
		<pubDate>Mon, 09 Jan 2017 01:49:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/01/transparent.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5723</wp:post_id>
		<wp:post_date><![CDATA[2017-01-08 17:49:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-09 01:49:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[transparent]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/01/transparent.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/transparent.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:791;s:6:"height";i:443;s:4:"file";s:23:"2017/01/transparent.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"transparent-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"transparent-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:23:"transparent-768x430.png";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"transparent-791x188.png";s:5:"width";i:791;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"transparent-791x188.png";s:5:"width";i:791;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"transparent-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>refract</title>
		<link>http://blog.demofox.org/refract/</link>
		<pubDate>Mon, 09 Jan 2017 02:00:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/01/refract.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5725</wp:post_id>
		<wp:post_date><![CDATA[2017-01-08 18:00:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-09 02:00:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[refract]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/01/refract.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/refract.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:790;s:6:"height";i:441;s:4:"file";s:19:"2017/01/refract.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"refract-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"refract-300x167.png";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"refract-768x429.png";s:5:"width";i:768;s:6:"height";i:429;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"refract-790x188.png";s:5:"width";i:790;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"refract-790x188.png";s:5:"width";i:790;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"refract-500x279.png";s:5:"width";i:500;s:6:"height";i:279;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>fresnel</title>
		<link>http://blog.demofox.org/fresnel/</link>
		<pubDate>Mon, 09 Jan 2017 02:10:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/01/fresnel.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5727</wp:post_id>
		<wp:post_date><![CDATA[2017-01-08 18:10:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-09 02:10:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[fresnel]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/01/fresnel.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/fresnel.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:791;s:6:"height";i:443;s:4:"file";s:19:"2017/01/fresnel.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"fresnel-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"fresnel-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"fresnel-768x430.png";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"fresnel-791x188.png";s:5:"width";i:791;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"fresnel-791x188.png";s:5:"width";i:791;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"fresnel-500x280.png";s:5:"width";i:500;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TIR</title>
		<link>http://blog.demofox.org/tir/</link>
		<pubDate>Mon, 09 Jan 2017 02:21:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/01/TIR.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5730</wp:post_id>
		<wp:post_date><![CDATA[2017-01-08 18:21:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-09 02:21:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tir]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/01/TIR.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/TIR.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:786;s:6:"height";i:441;s:4:"file";s:15:"2017/01/TIR.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"TIR-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"TIR-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:15:"TIR-768x431.png";s:5:"width";i:768;s:6:"height";i:431;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"TIR-786x188.png";s:5:"width";i:786;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"TIR-786x188.png";s:5:"width";i:786;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:15:"TIR-500x281.png";s:5:"width";i:500;s:6:"height";i:281;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>beerslaw</title>
		<link>http://blog.demofox.org/beerslaw/</link>
		<pubDate>Mon, 09 Jan 2017 02:30:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/01/beerslaw.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5733</wp:post_id>
		<wp:post_date><![CDATA[2017-01-08 18:30:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-09 02:30:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[beerslaw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/01/beerslaw.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/01/beerslaw.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:787;s:6:"height";i:439;s:4:"file";s:20:"2017/01/beerslaw.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"beerslaw-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"beerslaw-300x167.png";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"beerslaw-768x428.png";s:5:"width";i:768;s:6:"height";i:428;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"beerslaw-787x188.png";s:5:"width";i:787;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"beerslaw-787x188.png";s:5:"width";i:787;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"beerslaw-500x279.png";s:5:"width";i:500;s:6:"height";i:279;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Neuron</title>
		<link>http://blog.demofox.org/neuron/</link>
		<pubDate>Sun, 05 Feb 2017 21:54:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/Neuron.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5810</wp:post_id>
		<wp:post_date><![CDATA[2017-02-05 13:54:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-05 21:54:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[neuron]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/Neuron.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/Neuron.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:238;s:6:"height";i:283;s:4:"file";s:18:"2017/02/Neuron.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"Neuron-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"Neuron-238x188.png";s:5:"width";i:238;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"Neuron-238x188.png";s:5:"width";i:238;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nnstep1</title>
		<link>http://blog.demofox.org/nnstep1/</link>
		<pubDate>Mon, 06 Feb 2017 18:05:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nnstep1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5851</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 10:05:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 18:05:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nnstep1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nnstep1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:19:"2017/02/nnstep1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nnstep1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nnstep1-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nnstep1-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nnstep1.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nnstep2</title>
		<link>http://blog.demofox.org/nnstep2/</link>
		<pubDate>Mon, 06 Feb 2017 18:26:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nnstep2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5854</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 10:26:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 18:26:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nnstep2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nnstep2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nnstep2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:19:"2017/02/nnstep2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nnstep2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nnstep2-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nnstep2-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nnstep3</title>
		<link>http://blog.demofox.org/nnstep3/</link>
		<pubDate>Mon, 06 Feb 2017 18:34:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nnstep3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5857</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 10:34:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 18:34:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nnstep3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nnstep3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nnstep3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:19:"2017/02/nnstep3.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nnstep3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nnstep3-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nnstep3-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nnstep4</title>
		<link>http://blog.demofox.org/nnstep4/</link>
		<pubDate>Mon, 06 Feb 2017 18:40:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nnstep4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5861</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 10:40:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 18:40:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nnstep4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nnstep4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nnstep4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:19:"2017/02/nnstep4.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nnstep4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nnstep4-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nnstep4-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nnstep5</title>
		<link>http://blog.demofox.org/nnstep5/</link>
		<pubDate>Mon, 06 Feb 2017 18:44:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nnstep5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5863</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 10:44:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 18:44:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nnstep5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nnstep5.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nnstep5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:19:"2017/02/nnstep5.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nnstep5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nnstep5-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nnstep5-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nnstep6</title>
		<link>http://blog.demofox.org/nnstep6/</link>
		<pubDate>Mon, 06 Feb 2017 18:48:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nnstep6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5865</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 10:48:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 18:48:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nnstep6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nnstep6.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nnstep6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:19:"2017/02/nnstep6.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nnstep6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nnstep6-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nnstep6-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nnidentity2</title>
		<link>http://blog.demofox.org/nnidentity2/</link>
		<pubDate>Mon, 06 Feb 2017 19:35:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nnidentity2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5878</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 11:35:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 19:35:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nnidentity2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nnidentity2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nnidentity2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:23:"2017/02/nnidentity2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"nnidentity2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"nnidentity2-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"nnidentity2-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nnrelu1</title>
		<link>http://blog.demofox.org/nnrelu1/</link>
		<pubDate>Mon, 06 Feb 2017 21:43:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nnrelu1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5884</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 13:43:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 21:43:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nnrelu1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nnrelu1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nnrelu1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:19:"2017/02/nnrelu1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nnrelu1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nnrelu1-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nnrelu1-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TanhReal[1]</title>
		<link>http://blog.demofox.org/tanhreal1/</link>
		<pubDate>Mon, 06 Feb 2017 22:13:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/TanhReal1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5894</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 14:13:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 22:13:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tanhreal1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/TanhReal1.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/TanhReal1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:360;s:6:"height";i:233;s:4:"file";s:21:"2017/02/TanhReal1.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"TanhReal1-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:21:"TanhReal1-300x194.gif";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"TanhReal1-360x188.gif";s:5:"width";i:360;s:6:"height";i:188;s:9:"mime-type";s:9:"image/gif";}s:13:"large-feature";a:4:{s:4:"file";s:21:"TanhReal1-360x188.gif";s:5:"width";i:360;s:6:"height";i:188;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SigmoidFunction_701[1]</title>
		<link>http://blog.demofox.org/sigmoidfunction_7011/</link>
		<pubDate>Mon, 06 Feb 2017 22:40:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/SigmoidFunction_7011.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5899</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 14:40:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 22:40:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sigmoidfunction_7011]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/SigmoidFunction_7011.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/SigmoidFunction_7011.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:257;s:6:"height";i:159;s:4:"file";s:32:"2017/02/SigmoidFunction_7011.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"SigmoidFunction_7011-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nntanh1</title>
		<link>http://blog.demofox.org/nntanh1/</link>
		<pubDate>Mon, 06 Feb 2017 23:55:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nntanh1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5909</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 15:55:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 23:55:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nntanh1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nntanh1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nntanh1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:19:"2017/02/nntanh1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nntanh1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nntanh1-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nntanh1-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nntanh2</title>
		<link>http://blog.demofox.org/nntanh2/</link>
		<pubDate>Mon, 06 Feb 2017 23:55:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nntanh2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5910</wp:post_id>
		<wp:post_date><![CDATA[2017-02-06 15:55:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-06 23:55:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nntanh2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nntanh2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nntanh2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:19:"2017/02/nntanh2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nntanh2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nntanh2-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nntanh2-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nnstep7</title>
		<link>http://blog.demofox.org/nnstep7/</link>
		<pubDate>Tue, 07 Feb 2017 17:24:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nnstep7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5916</wp:post_id>
		<wp:post_date><![CDATA[2017-02-07 09:24:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-07 17:24:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nnstep7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nnstep7.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nnstep7.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:19:"2017/02/nnstep7.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nnstep7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nnstep7-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nnstep7-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nnidentity1</title>
		<link>http://blog.demofox.org/nnidentity1/</link>
		<pubDate>Tue, 07 Feb 2017 17:25:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nnidentity1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5918</wp:post_id>
		<wp:post_date><![CDATA[2017-02-07 09:25:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-07 17:25:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nnidentity1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nnidentity1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nnidentity1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:23:"2017/02/nnidentity1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"nnidentity1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"nnidentity1-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"nnidentity1-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tease2</title>
		<link>http://blog.demofox.org/tease2/</link>
		<pubDate>Tue, 07 Feb 2017 20:06:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/tease2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5934</wp:post_id>
		<wp:post_date><![CDATA[2017-02-07 12:06:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-07 20:06:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tease2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/tease2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/tease2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:400;s:4:"file";s:18:"2017/02/tease2.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"tease2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"tease2-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"tease2-768x384.png";s:5:"width";i:768;s:6:"height";i:384;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"tease2-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:18:"tease2-800x188.png";s:5:"width";i:800;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:18:"tease2-500x250.png";s:5:"width";i:500;s:6:"height";i:250;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nn3d</title>
		<link>http://blog.demofox.org/nn3d/</link>
		<pubDate>Tue, 07 Feb 2017 20:07:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/nn3d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5936</wp:post_id>
		<wp:post_date><![CDATA[2017-02-07 12:07:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-07 20:07:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nn3d]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/nn3d.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/nn3d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:400;s:4:"file";s:16:"2017/02/nn3d.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"nn3d-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"nn3d-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"nn3d-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:16:"nn3d-400x188.png";s:5:"width";i:400;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"nn3d-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>reludiscrete</title>
		<link>http://blog.demofox.org/reludiscrete/</link>
		<pubDate>Tue, 07 Feb 2017 20:25:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/reludiscrete.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5942</wp:post_id>
		<wp:post_date><![CDATA[2017-02-07 12:25:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-07 20:25:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[reludiscrete]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/reludiscrete.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/reludiscrete.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:200;s:6:"height";i:200;s:4:"file";s:24:"2017/02/reludiscrete.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"reludiscrete-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"reludiscrete-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:24:"reludiscrete-200x188.png";s:5:"width";i:200;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>multivardualnums</title>
		<link>http://blog.demofox.org/multivardualnums/</link>
		<pubDate>Mon, 20 Feb 2017 20:54:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/02/multivardualnums.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5955</wp:post_id>
		<wp:post_date><![CDATA[2017-02-20 12:54:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-20 20:54:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[multivardualnums]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/02/multivardualnums.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/02/multivardualnums.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:659;s:6:"height";i:1042;s:4:"file";s:28:"2017/02/multivardualnums.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"multivardualnums-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"multivardualnums-190x300.png";s:5:"width";i:190;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:29:"multivardualnums-648x1024.png";s:5:"width";i:648;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:28:"multivardualnums-659x188.png";s:5:"width";i:659;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:28:"multivardualnums-659x188.png";s:5:"width";i:659;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:28:"multivardualnums-190x300.png";s:5:"width";i:190;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NN1</title>
		<link>http://blog.demofox.org/nn1/</link>
		<pubDate>Thu, 02 Mar 2017 23:42:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/NN1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6021</wp:post_id>
		<wp:post_date><![CDATA[2017-03-02 15:42:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-02 23:42:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nn1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/NN1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/NN1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:311;s:6:"height";i:276;s:4:"file";s:15:"2017/03/NN1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"NN1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"NN1-300x266.png";s:5:"width";i:300;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:15:"NN1-311x188.png";s:5:"width";i:311;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:15:"NN1-311x188.png";s:5:"width";i:311;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Example1</title>
		<link>http://blog.demofox.org/example1/</link>
		<pubDate>Mon, 06 Mar 2017 22:35:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/Example1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6092</wp:post_id>
		<wp:post_date><![CDATA[2017-03-06 14:35:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-06 22:35:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/Example1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/Example1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:587;s:6:"height";i:170;s:4:"file";s:20:"2017/03/Example1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"Example1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"Example1-300x87.png";s:5:"width";i:300;s:6:"height";i:87;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"Example1-500x145.png";s:5:"width";i:500;s:6:"height";i:145;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Example3</title>
		<link>http://blog.demofox.org/example3/</link>
		<pubDate>Tue, 07 Mar 2017 16:00:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/Example3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6116</wp:post_id>
		<wp:post_date><![CDATA[2017-03-07 08:00:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-07 16:00:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/Example3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/Example3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:623;s:6:"height";i:340;s:4:"file";s:20:"2017/03/Example3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"Example3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"Example3-300x164.png";s:5:"width";i:300;s:6:"height";i:164;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"Example3-623x188.png";s:5:"width";i:623;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"Example3-623x188.png";s:5:"width";i:623;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"Example3-500x273.png";s:5:"width";i:500;s:6:"height";i:273;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Example4</title>
		<link>http://blog.demofox.org/example4/</link>
		<pubDate>Wed, 08 Mar 2017 21:53:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/Example4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6147</wp:post_id>
		<wp:post_date><![CDATA[2017-03-08 13:53:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-08 21:53:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/Example4.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/Example4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:818;s:6:"height";i:340;s:4:"file";s:20:"2017/03/Example4.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"Example4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"Example4-300x125.png";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"Example4-768x319.png";s:5:"width";i:768;s:6:"height";i:319;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"Example4-818x188.png";s:5:"width";i:818;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:20:"Example4-818x188.png";s:5:"width";i:818;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:20:"Example4-500x208.png";s:5:"width";i:500;s:6:"height";i:208;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>example4error</title>
		<link>http://blog.demofox.org/example4error/</link>
		<pubDate>Thu, 09 Mar 2017 21:26:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/example4error.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6180</wp:post_id>
		<wp:post_date><![CDATA[2017-03-09 13:26:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-09 21:26:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example4error]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/example4error.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/example4error.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:908;s:6:"height";i:472;s:4:"file";s:25:"2017/03/example4error.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"example4error-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"example4error-300x156.png";s:5:"width";i:300;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:25:"example4error-768x399.png";s:5:"width";i:768;s:6:"height";i:399;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"example4error-908x188.png";s:5:"width";i:908;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"example4error-908x188.png";s:5:"width";i:908;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"example4error-500x260.png";s:5:"width";i:500;s:6:"height";i:260;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3dae4a000d4da699014800205f38d629[1]</title>
		<link>http://blog.demofox.org/3dae4a000d4da699014800205f38d6291/</link>
		<pubDate>Thu, 09 Mar 2017 21:43:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/3dae4a000d4da699014800205f38d6291.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6185</wp:post_id>
		<wp:post_date><![CDATA[2017-03-09 13:43:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-09 21:43:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[3dae4a000d4da699014800205f38d6291]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/3dae4a000d4da699014800205f38d6291.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/3dae4a000d4da699014800205f38d6291.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:475;s:4:"file";s:45:"2017/03/3dae4a000d4da699014800205f38d6291.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:45:"3dae4a000d4da699014800205f38d6291-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:45:"3dae4a000d4da699014800205f38d6291-300x238.jpg";s:5:"width";i:300;s:6:"height";i:238;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:45:"3dae4a000d4da699014800205f38d6291-600x188.jpg";s:5:"width";i:600;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"large-feature";a:4:{s:4:"file";s:45:"3dae4a000d4da699014800205f38d6291-600x188.jpg";s:5:"width";i:600;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:13:"small-feature";a:4:{s:4:"file";s:45:"3dae4a000d4da699014800205f38d6291-379x300.jpg";s:5:"width";i:379;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nngrads</title>
		<link>http://blog.demofox.org/nngrads/</link>
		<pubDate>Mon, 13 Mar 2017 16:29:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/nngrads.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6203</wp:post_id>
		<wp:post_date><![CDATA[2017-03-13 08:29:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-13 16:29:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nngrads]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/nngrads.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/nngrads.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:659;s:6:"height";i:435;s:4:"file";s:19:"2017/03/nngrads.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nngrads-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"nngrads-300x198.png";s:5:"width";i:300;s:6:"height";i:198;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"nngrads-659x188.png";s:5:"width";i:659;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"nngrads-659x188.png";s:5:"width";i:659;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"nngrads-454x300.png";s:5:"width";i:454;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mnist1error</title>
		<link>http://blog.demofox.org/mnist1error/</link>
		<pubDate>Wed, 15 Mar 2017 18:59:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/mnist1error.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6224</wp:post_id>
		<wp:post_date><![CDATA[2017-03-15 10:59:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-15 18:59:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mnist1error]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/mnist1error.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/mnist1error.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:859;s:6:"height";i:595;s:4:"file";s:23:"2017/03/mnist1error.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"mnist1error-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"mnist1error-300x208.png";s:5:"width";i:300;s:6:"height";i:208;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:23:"mnist1error-768x532.png";s:5:"width";i:768;s:6:"height";i:532;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"mnist1error-859x188.png";s:5:"width";i:859;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"mnist1error-859x188.png";s:5:"width";i:859;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"mnist1error-433x300.png";s:5:"width";i:433;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mnist</title>
		<link>http://blog.demofox.org/mnist/</link>
		<pubDate>Wed, 15 Mar 2017 19:11:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/mnist.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6227</wp:post_id>
		<wp:post_date><![CDATA[2017-03-15 11:11:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-15 19:11:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mnist]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/mnist.zip]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/mnist.zip]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>demo</title>
		<link>http://blog.demofox.org/demo-2/</link>
		<pubDate>Wed, 15 Mar 2017 19:21:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/demo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6231</wp:post_id>
		<wp:post_date><![CDATA[2017-03-15 11:21:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-15 19:21:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[demo-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/demo.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/demo.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:448;s:6:"height";i:359;s:4:"file";s:16:"2017/03/demo.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"demo-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"demo-300x240.png";s:5:"width";i:300;s:6:"height";i:240;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"demo-448x188.png";s:5:"width";i:448;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:16:"demo-448x188.png";s:5:"width";i:448;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:16:"demo-374x300.png";s:5:"width";i:374;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mnist_100_digits[1]</title>
		<link>http://blog.demofox.org/mnist_100_digits1/</link>
		<pubDate>Thu, 16 Mar 2017 18:47:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/03/mnist_100_digits1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6244</wp:post_id>
		<wp:post_date><![CDATA[2017-03-16 10:47:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-16 18:47:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mnist_100_digits1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/03/mnist_100_digits1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/03/mnist_100_digits1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:255;s:6:"height";i:204;s:4:"file";s:29:"2017/03/mnist_100_digits1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"mnist_100_digits1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:29:"mnist_100_digits1-255x188.png";s:5:"width";i:255;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:29:"mnist_100_digits1-255x188.png";s:5:"width";i:255;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2x3ABCDEF</title>
		<link>http://blog.demofox.org/2x3abcdef/</link>
		<pubDate>Fri, 14 Apr 2017 19:15:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/04/2x3ABCDEF.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6429</wp:post_id>
		<wp:post_date><![CDATA[2017-04-14 11:15:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-14 19:15:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2x3abcdef]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/04/2x3ABCDEF.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/04/2x3ABCDEF.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:317;s:6:"height";i:479;s:4:"file";s:21:"2017/04/2x3ABCDEF.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"2x3ABCDEF-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"2x3ABCDEF-199x300.png";s:5:"width";i:199;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"2x3ABCDEF-317x188.png";s:5:"width";i:317;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"2x3ABCDEF-317x188.png";s:5:"width";i:317;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"2x3ABCDEF-199x300.png";s:5:"width";i:199;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2x4ABCDEF</title>
		<link>http://blog.demofox.org/2x4abcdef/</link>
		<pubDate>Fri, 14 Apr 2017 19:15:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/04/2x4ABCDEF.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6430</wp:post_id>
		<wp:post_date><![CDATA[2017-04-14 11:15:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-14 19:15:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2x4abcdef]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/04/2x4ABCDEF.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/04/2x4ABCDEF.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:295;s:6:"height";i:532;s:4:"file";s:21:"2017/04/2x4ABCDEF.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"2x4ABCDEF-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"2x4ABCDEF-166x300.png";s:5:"width";i:166;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"2x4ABCDEF-295x188.png";s:5:"width";i:295;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"2x4ABCDEF-295x188.png";s:5:"width";i:295;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"2x4ABCDEF-166x300.png";s:5:"width";i:166;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3dold</title>
		<link>http://blog.demofox.org/3dold/</link>
		<pubDate>Sun, 30 Apr 2017 00:02:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/04/3dold.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6479</wp:post_id>
		<wp:post_date><![CDATA[2017-04-29 16:02:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-30 00:02:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[3dold]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/04/3dold.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/04/3dold.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:573;s:6:"height";i:293;s:4:"file";s:17:"2017/04/3dold.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"3dold-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"3dold-300x153.png";s:5:"width";i:300;s:6:"height";i:153;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"3dold-573x188.png";s:5:"width";i:573;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:17:"3dold-573x188.png";s:5:"width";i:573;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:17:"3dold-500x256.png";s:5:"width";i:500;s:6:"height";i:256;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2x2P0-3</title>
		<link>http://blog.demofox.org/2x2p0-3/</link>
		<pubDate>Fri, 05 May 2017 19:25:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/2x2P0-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6577</wp:post_id>
		<wp:post_date><![CDATA[2017-05-05 11:25:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-05 19:25:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2x2p0-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/2x2P0-3.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/2x2P0-3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:350;s:6:"height";i:345;s:4:"file";s:19:"2017/05/2x2P0-3.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"2x2P0-3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"2x2P0-3-300x296.png";s:5:"width";i:300;s:6:"height";i:296;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"2x2P0-3-350x188.png";s:5:"width";i:350;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:19:"2x2P0-3-350x188.png";s:5:"width";i:350;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:19:"2x2P0-3-304x300.png";s:5:"width";i:304;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2x3P00-21</title>
		<link>http://blog.demofox.org/2x3p00-21/</link>
		<pubDate>Fri, 05 May 2017 19:37:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/2x3P00-21.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6586</wp:post_id>
		<wp:post_date><![CDATA[2017-05-05 11:37:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-05 19:37:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2x3p00-21]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/2x3P00-21.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/2x3P00-21.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:317;s:6:"height";i:479;s:4:"file";s:21:"2017/05/2x3P00-21.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"2x3P00-21-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"2x3P00-21-199x300.png";s:5:"width";i:199;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"2x3P00-21-317x188.png";s:5:"width";i:317;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:21:"2x3P00-21-317x188.png";s:5:"width";i:317;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:21:"2x3P00-21-199x300.png";s:5:"width";i:199;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2x4P00-P31</title>
		<link>http://blog.demofox.org/2x4p00-p31/</link>
		<pubDate>Fri, 05 May 2017 19:45:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/2x4P00-P31.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6591</wp:post_id>
		<wp:post_date><![CDATA[2017-05-05 11:45:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-05 19:45:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2x4p00-p31]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/2x4P00-P31.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/2x4P00-P31.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:285;s:6:"height";i:572;s:4:"file";s:22:"2017/05/2x4P00-P31.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"2x4P00-P31-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"2x4P00-P31-149x300.png";s:5:"width";i:149;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"2x4P00-P31-285x188.png";s:5:"width";i:285;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:22:"2x4P00-P31-285x188.png";s:5:"width";i:285;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:22:"2x4P00-P31-149x300.png";s:5:"width";i:149;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2x3P00-21ZigZag</title>
		<link>http://blog.demofox.org/2x3p00-21zigzag/</link>
		<pubDate>Sat, 06 May 2017 14:10:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/2x3P00-21ZigZag.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6597</wp:post_id>
		<wp:post_date><![CDATA[2017-05-06 06:10:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-06 14:10:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2x3p00-21zigzag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/2x3P00-21ZigZag.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/2x3P00-21ZigZag.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:317;s:6:"height";i:479;s:4:"file";s:27:"2017/05/2x3P00-21ZigZag.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"2x3P00-21ZigZag-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"2x3P00-21ZigZag-199x300.png";s:5:"width";i:199;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"2x3P00-21ZigZag-317x188.png";s:5:"width";i:317;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:27:"2x3P00-21ZigZag-317x188.png";s:5:"width";i:317;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"2x3P00-21ZigZag-199x300.png";s:5:"width";i:199;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cryptography 101</title>
		<link>http://blog.demofox.org/cryptography-101/</link>
		<pubDate>Tue, 18 Sep 2012 06:06:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/cryptography-101/</guid>
		<description></description>
		<content:encoded><![CDATA[This is a series on the basics of cryptography, aimed at C++ programmers and other technical folk, or just the curious passer by (:

I recommend reading them in order because they build in complexity as you progress forward and they assume you read the previous ones.  Any questions, feedback, corrections of misinformation, please let me know!
<ul>
	<li><a href="http://blog.demofox.org/2012/09/12/cryptography-101-hashing/">Cryptography 101: Hashing</a> - A way of being able to compare data without knowing anything about the data items themselves</li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-one-time-pad/">Cryptography 101: Encryption - One Time Pad</a> - perhaps the only TRULY uncrackable encryption, when used correctly.</li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-symmetric-keys/">Cryptography 101: Encryption - Symmetric Keys</a> - password protecting data</li>
	<li><a href="http://blog.demofox.org/2012/09/16/cryptography-101-encryption-asymmetric-keys/">Cryptography 101: Encryption - Asymmetric Keys</a> - provide some level of proof of identity or provide targeted messaging.</li>
	<li><a href="http://blog.demofox.org/2012/09/17/encryption-101-realistic-security/">Cryptography 101: Realistic Security</a> - Don't get punched in the mouth!</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date><![CDATA[2012-09-17 22:06:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-18 06:06:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cryptography-101]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:comment>
			<wp:comment_id>567</wp:comment_id>
			<wp:comment_author><![CDATA[Fast &amp; Lightweight Random &#8220;Shuffle&#8221; Functionality | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2013/06/08/fast-lightweight-random-shuffle-functionality/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-09 02:02:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-09 10:02:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Cryptography 101 [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Anatomy of a Skeletal Animation System</title>
		<link>http://blog.demofox.org/anatomy-of-a-skeletal-animation-system/</link>
		<pubDate>Sat, 22 Sep 2012 07:04:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/anatomy-of-a-skeletal-animation-system/</guid>
		<description></description>
		<content:encoded><![CDATA[There is a lot of info out there about how to work with bone data, but very little info about how to make a modern, shippable animation system.  These articles aim to address that.  I hope you enjoy!

<ul>
<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-1/">Anatomy of a Skeletal Animation System part 1</a></li>
<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-2/">Anatomy of a Skeletal Animation System part 2</a></li>
<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-3/">Anatomy of a Skeletal Animation System part 3</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date><![CDATA[2012-09-21 23:04:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-22 07:04:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[anatomy-of-a-skeletal-animation-system]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:comment>
			<wp:comment_id>475</wp:comment_id>
			<wp:comment_author><![CDATA[Bias And Gain Are Your Friend | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-08 21:03:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-09 05:03:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Anatomy of a Skeletal Animation System [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DIY Synthesizer</title>
		<link>http://blog.demofox.org/diy-synthesizer/</link>
		<pubDate>Wed, 26 Sep 2012 02:18:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/diy-synthesizer/</guid>
		<description></description>
		<content:encoded><![CDATA[This is a tutorial aimed at showing C++ programmers how to program their own synthesizer.  The example code is written to be as straightforward and minimal as possible and require no external libraries.
<ul>
	<li><a href="http://blog.demofox.org/2012/05/14/diy-synthesizer-chapter-1-sound-output/"></a><a href="http://blog.demofox.org/2012/05/14/diy-synthesizer-chapter-1-sound-output/">DIY Synth 1:  Sound Output</a></li>
	<li><a href="http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/">DIY Synth 2:  Common Wave Forms</a></li>
	<li><a href="http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/">DIY Synth 3: Sampling, Mixing, and Band Limited Wave Forms</a></li>
	<li><a href="http://blog.demofox.org/2015/03/14/diy-synth-basic-drum/">DIY Synth: Basic Drum</a></li>
        <li><a href="http://blog.demofox.org/2015/03/16/diy-synth-flange-effect/">DIY Synth: Flange Effect</a></li>
        <li><a href="http://blog.demofox.org/2015/03/17/diy-synth-delay-effect-echo/">DIY Synth: Delay (Echo)</a></li>
        <li><a href="http://blog.demofox.org/2015/03/17/diy-synth-multitap-reverb/">DIY Synth: Multitap Reverb</a></li>
        <li><a href="http://blog.demofox.org/2015/03/23/diy-synth-convolution-reverb-1d-discrete-convolution-of-audio-samples/">DIY Synth: Convolution Reverb & 1D Discrete Convolution of Audio Samples</a></li>
</ul>

Other useful posts:
<ul>
<li><a href="http://blog.demofox.org/2015/04/14/decibels-db-and-amplitude/">Decibels (dB) and Amplitude</a></li>
</ul>

I did a presentation at work on audio synthesis for music.  Slide deck and real time synthesizer source code can be found at the link below:
<a href="http://blog.demofox.org/2016/07/01/intro-to-audio-synthesis-for-music-presentation/" target="_blank">Intro To Audio Synthesis For Music Presentation</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2012-09-25 18:18:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-26 02:18:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synthesizer]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Good Interview Questions as the Interviewer</title>
		<link>http://blog.demofox.org/?p=2657</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2657</guid>
		<description></description>
		<content:encoded><![CDATA[Everyone talks about good interview questions when you are the interviewer, but what about when you are in the role of the interviewee?

I'm not sure when I'll ever have to be an interviewee again (hopefully never!), but I think it's an interesting topic to chat about.

In game dev, general software dev and other trades, details of planning can be an integral part of what defines your experience at a company, perhaps even more so than the job description which may very well be out of date, or just generic boilerplate pulled out of a file.

Here are some questions I've pulled from my experiences in the past 14 years that ought to help illuminate that aspect.
<ol>
	<li>How are feature requests entered, how do they get a yes or no response, and then how do they translate into scheduled work that is actually performed?</li>
	<li>When it's decided that un-requested work needs to be done (an "internal" feature request), how does that translate into scheduled work that is actually performed?</li>
	<li>What process is used to be able to know whether or not the team is going to meet their deadlines, and what happens if it becomes apparent that deadlines are not going to be met?</li>
</ol>

<h2>Question 1</h2>

This shows you how this team interacts with its customers.  Who is responsible for making the decision about what is worked on and what isn't?  If it's you (the implementer), do you really have the autonomy to make those decisions?  What about when feature requests come in for which there is no person who has responsibility over that area, or the responsibility is ambiguous?

One of the possible outcomes when there is a weak answer to this question is that you could end up between a rock and a hard place of people making feature requests, and your team's management not wanting to actually devote resources to it, but not actually communicating that fact to the person making the request.  You end up shuttling info back and forth and being the rope in a tug of war contest.

Another possible outcome of a weak answer to this is that feature requests get entered, but only are they sometimes worked on.  Ill will can come up when people enter requests into the official feature request system, and then they can't rely on it ever actually getting done.

<h2>Question 2</h2>

This question further shows how planning and scheduling work internally.  Do internal tasks get trumped by bugs and feature requests that come up?

Are tasks ever planned, or do they just happen if there is time between other things?

Are tasks logged anywhere so they don't get forgotten?

<h2>Question 3</h2>

This question can tell you how much planning is really in place.  How do they find out they aren't going to meet a deadline.  Is it a couple days before when they realize there are too many bugs and needed features don't work?  Or is it well in advance when there is time to adjust things?

What is the response to threats to the schedule?  Is crunch time (overtime) to go to solution?  Does the date slip?  Do they move things to other milestones?

<h2>Answers / Others Questions?</h2>

If anyone feels like sharing the answers to these questions about where they work, or if you have any other good questions to ask as an interviewee, post a comment and let's get some discussion going (:

PS another great question I've heard in the past is to ask "What does success look like in this role?".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2657</wp:post_id>
		<wp:post_date><![CDATA[2015-06-30 11:48:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="gamedev-commentary"><![CDATA[Gamedev Commentary]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Univariate Bezier Rectangles: Distance from Point and Surface Normal</title>
		<link>http://blog.demofox.org/?p=2811</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2811</guid>
		<description></description>
		<content:encoded><![CDATA[In the last post, I showed some basics of Bezier Rectangles.  In this post I'm going to talk about how to calculate the gradient of a univariate Bezier rectangle (a Bezier rectangle who's control points only move on one axis) at a specific point so that it can be used to estimate distance (for ray marching / sphere tracing) or to find a surface normal to use for lighting equations.

I went over the gradient a bit in a previous post, so check that out if you have no clue what a gradient is: <a href="http://blog.demofox.org/2014/08/10/what-if-my-equation-doesnt-equal-zero/">What if My Equation DOESN’T Equal Zero??</a>

<h2>Getting The Gradient</h2>

To get the gradient of a function in the form $latex z=f(x,y)$ for some point $latex A$, you need to get the derivative at that point along the x axis, and the derivative at that point along the y axis.  These are actually the partial derivatives of x and y respectively, which is what we need to make our gradient vector function.

If you recall from last post, I mentioned that a Bezier rectangle is essentially just animating a curve's control points over one axis, and then evaluating the curve along the other axis.  That means that the two problems above are just that we need to find the Bezier curve on the x axis, and the Bezier curve on the y axis, and find the derivative of the curve at those points in time.

Calculating the derivative of a Bezier curve at a specific point turns out to be pretty easy.  The derivative of a degree $latex N$ Bezier curve is in fact just a degree $latex N-1$ Bezier curve!  There are one fewer control points on that derivative curve, and you can calculate each control point $latex Q_i$ like this:  $latex Q_i = P_{i+1} - P_i$.  You also need to multiply the result by the degree that the curve used to be (so, if it used to be cubic, multiply your quadratic curve's value by 3).

You can find more detailed info about that here: <a href="http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/Bezier/bezier-der.html" target="_blank">Derivatives of a Bézier Curve</a>.

<b>Calculating Y Axis Derivative</b>

In the last post we evaluated a point on the curve using code like this:

[code language="cpp"]
float QuadraticBezier (const TFloat3&amp; p, float t)
{
    float s = 1.0f - t;
    float s2 = s * s;
    float t2 = t * t;
 
    return
        p[0] * s2 +
        p[1] * 2.0f * s * t +
        p[2] * t2;
}
 
float BiquadraticBezierPatch (const TFloat3x3&amp; p, float x, float y)
{
    TFloat3 xValues;
    xValues[0] = QuadraticBezier(p[0], x);
    xValues[1] = QuadraticBezier(p[1], x);
    xValues[2] = QuadraticBezier(p[2], x);
    return QuadraticBezier(xValues, y);
}
[/code]

As you can see in the BiquadraticBezierPatch() function, we are animating our control points (p) across the x axis which leaves us with a curve that goes across the y axis.  We then evaluate that curve to get final point on the curve.

To get the y axis derivative, we are going to do the first part the same, animating the control points across the x axis, but then we are going to make a derivative curve and evaluate THAT instead to give us the y axis derivative, like the below:

[code language="cpp"]
float LinearBezier (const TFloat2&amp; p, float t)
{
    float s = 1.0f - t;
 
    return
        p[0] * s +
        p[1] * t;
}

float QuadraticBezier (const TFloat3&amp; p, float t)
{
    float s = 1.0f - t;
    float s2 = s * s;
    float t2 = t * t;
 
    return
        p[0] * s2 +
        p[1] * 2.0f * s * t +
        p[2] * t2;
}
 
float BiquadraticBezierPatch_DerivativeYAxis (const TFloat3x3&amp; p, float x, float y)
{
    TFloat3 xValues;
    xValues[0] = QuadraticBezier(p[0], x);
    xValues[1] = QuadraticBezier(p[1], x);
    xValues[2] = QuadraticBezier(p[2], x);

    TFloat2 derivativeCurve;
    derivativeCurve[0] = xValues[1] - xValues[0];
    derivativeCurve[1] = xValues[2] - xValues[1];
    return 2.0 * LinearBezier(derivativeCurve, y);
}
[/code]

<b>Calculating X Axis Derivative</b>

Calculating the derivative along the X axis is the same process, but you flip which axis you animate on.  The code for that is below:

[code language="cpp"]
float BiquadraticBezierPatch_DerivativeXAxis (const TFloat3x3&amp; p, float x, float y)
{
    TFloat3 yValues;
    yValues[0] = QuadraticBezier(TFloat3{p[0][0],p[1][0],p[2][0]}, y);
    yValues[1] = QuadraticBezier(TFloat3{p[0][1],p[1][1],p[2][1]}, y);
    yValues[2] = QuadraticBezier(TFloat3{p[0][2],p[1][2],p[2][2]}, y);

    TFloat2 derivativeCurve;
    derivativeCurve[0] = yValues[1] - yValues[0];
    derivativeCurve[1] = yValues[2] - yValues[1];
    return 2.0 * LinearBezier(derivativeCurve, x);
}
[/code]

<b>The Gradient</b>

Now that you have the x and y axis derivative values, the final gradient vector is $latex (dx,dz-1)$.

<h2>Surface Normal</h2>

When you are looking for the normal on the Bezier rectangle at point (x,y), calculating the gradient above and then normalizing it is all there is to it.  You are done!

Since this section is so short, another way to get the normal of any function $latex z=f(x,y)$ is to use the finite difference method, where you sample small offsets from the point you are looking to find the normal of, to get the derivative (change, or delta) on each axis.  This method also works with Bezier rectangles, but works in the general case as well which is neat. GLSL code below:

[code language="cpp"]
vec3 NormalAtPos( vec2 p )
{
    float eps = 0.01;
    vec3 n = vec3(HeightAtPos(vec2(p.x-eps,p.y)) - HeightAtPos(vec2(p.x+eps,p.y)),
                  HeightAtPos(vec2(p.x,p.y-eps)) - HeightAtPos(vec2(p.x,p.y+eps)),
                  2.0*eps);
    return normalize( n );
}
[/code]

The benefit to using the gradient in our case, instead of the generic central difference method above, is that it is fewer calculations to calculate.

In the central differences method for a bicubic patch, we'd have to evaluate the degree (3,3) patch 4 times to calculate our normal.

In our method, calculating the gradient only requires that we evaluate two different degree (3,2) patches, so it's simpler.

Also, if we used the gradient for distance estimation in ray marching, we may just do something like interpolate between the last two gradients calculated for those purposes, to get an approximated surface normal for very low cost.

<h2>Estimating Distance</h2>

When estimating distance from a point A to the closest point on the curve, we want to leave the gradient unnormalized because the length of that vector has meaning to us.



TODO: mention what to do with the z component of the point A.
TODO: make sure to refer to "some point" as A, not P, since thats also what we use for control points.
TODO: section on using gradient to estimate distance
TODO: section on using gradient as surface normal.  why multiply by -1?
TODO: make sure code samples above are correct and compile etc! Make them look more like eachother. maybe move to floats instead of TFloat3 or something?
TODO: why does the normal (gradient) need to be multiplied by -1?

<h2>Links</h2>

TODO: put "central differences" method info for normal on surface on here too!
TODO: some C++ code!

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2811</wp:post_id>
		<wp:post_date><![CDATA[2015-08-01 11:14:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bezier Curve Derivatives</title>
		<link>http://blog.demofox.org/?p=2863</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2863</guid>
		<description></description>
		<content:encoded><![CDATA[If you wanted to calculate the derivative (slope) of a Bezier curve at a specific point on the curve, you could use the finite differences info from the last post to be able to get an estimate.

The basic implementation of that would require you to evaluate the Bezier curve twice to be able to estimate a derivative.  A more efficient approach may not require any extra evaluations of the Bezier curve though, and may instead use something like backwards differencing to use the last calculated point to estimate the current derivative, if you were already evaluating several points on the curve in a loop.

Even in that second case though, the slope you get out is just an approximation.

If an approximation wasn't good enough for you, getting the exact derivative at a point on a Bezier curve is in fact really easy which is awesome.

Believe it or not, the derivative of a Bezier curve of degree N is just a Bezier curve of degree N-1, and the control points for that new curve are really easy to calculate.

<h2>Making the Derivative Curve</h2>

The formula for a Bezier curve of degree N is below.  Note that s is just 1-t, and is only used to make the equations easier to read.
$latex \\sum\\limits_{i=0}^n\\binom {n} {i}s^{n-i}t^iP_i$

The derivative of that formula is this!
$latex \\sum\\limits_{i=0}^m\\binom {m} {i}s^{m-i}t^iQ_i$

In the above equation, $latex m=n-1$ and $latex Q_i = n*(P_{i+1}-P_i)$.

That's all there is to it.  Let's get to some examples.

<h2>Examples</h2>

Let's start with a quadratic curve with control points 0.5, 1.5, 0.75.  The formula for that curve is below:

$latex f(t)=0.5*s^2+1.5*2st+0.75*t^2$

The derivative curve is going to be one degree lower, which means it will be a linear curve with two control points.  The first control point will be 2*(1.5-0.5) or 2.  The second control point will be 2*(0.75-1.5) or -1.5.  The formula for the derivative curve is then:

$latex f'(t)=2*s-1.5*t$

As another example, let's start with a cubic curve, with control points 1.0, 0.3, 0.8, 2.0.  The formula of the curve is:

$latex f(t)=1.0*s^3+0.3*s^2t+0.8*st^2+2.0*t^3$

The derivative of that is going to be a quadratic curve with control points:  3*(0.3-1.0),  3*(0.8-0.3), 3*(2.0-0.8). Or: -2.1, 1.5, 3.6.  The equation is then:
$latex f'(t)=-2.1*s^2+1.5*st+3.6*t^2$

<h2>Code</h2>

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;


const std::array&lt;float, 4&gt; c_controlPoints = { 0.9f, 0.3f, 0.7f, 0.2f };

const std::array&lt;float, 3&gt; c_derivativeControlPoints =
{
    3.0 * (c_controlPoints[1] - c_controlPoints[0]),
    3.0 * (c_controlPoints[2] - c_controlPoints[1]),
    3.0 * (c_controlPoints[3] - c_controlPoints[2])
};


void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

float QuadraticBezier(const std::array&lt;float, 3&gt;&amp; p, float t)
{
    float s = 1.0f - t;
    float s2 = s * s;
    float t2 = t * t;

    return
        p[0] * s2 +
        p[1] * 2.0f * s * t +
        p[2] * t2;
}

float CubicBezier(const std::array&lt;float, 4&gt;&amp; p, float t)
{
    float s = 1.0f - t;
    float s2 = s * s;
    float s3 = s * s * s;
    float t2 = t * t;
    float t3 = t * t * t;

    return
        p[0] * s3 +
        p[1] * 3.0f * s2 * t +
        p[2] * 3.0f * s * t2 +
        p[3] * t3;
}

int main(int argc, char **argv)
{

    const int c_numPoints = 15;
    for (int i = 0; i &lt; c_numPoints; ++i)
    {
        float percent = ((float)i) / ((float)c_numPoints - 1);
        printf(
            &quot;%0.2f: value: %0.2f  derivative: %0.2f\n&quot;,
            percent,
            CubicBezier(c_controlPoints, percent),
            QuadraticBezier(c_derivativeControlPoints, percent)
        );
    }
    printf(&quot;\n&quot;);

    WaitForEnter();
    return 0;
}
[/code]

TODO: program doesn't work right.  the examples are wrong too i think.  Investigate!
TODO: show output of program

TODO: mention partial derivatives for multivariate curves? not sure the details of that or if it's true.
TODO: make some code, and show the output

<h2>Links</h2>
<a href="http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/Bezier/bezier-der.html" target="_blank">Derivatives of a Bézier Curve</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2863</wp:post_id>
		<wp:post_date><![CDATA[2015-08-03 11:59:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solving Modulus Equations For Divisor</title>
		<link>http://blog.demofox.org/?p=3326</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3326</guid>
		<description></description>
		<content:encoded><![CDATA[This is a super quick post]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3326</wp:post_id>
		<wp:post_date><![CDATA[2015-09-16 09:55:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why fixing problems can have multiplicative</title>
		<link>http://blog.demofox.org/?p=3903</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3903</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3903</wp:post_id>
		<wp:post_date><![CDATA[2016-02-05 21:09:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Being an Effective Mentor</title>
		<link>http://blog.demofox.org/?p=3924</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3924</guid>
		<description></description>
		<content:encoded><![CDATA[This is not a technical post, but I am working on some neat technical stuff that I will be writing up soon. :P

This post is about how to succeed as a mentor both to experienced and inexperienced individuals.  This focuses mainly on the realm of professional computer programming, but these same principles apply to any sort of mentorship.  In fact, it was my martial arts teacher who taught me and my friends some of these concepts as we transitioned from students to instructors.

First, let's define the word mentor.  The merriam-webster dictionary gives a simple definition of <a href="http://www.merriam-webster.com/dictionary/mentor" target="_blank">mentor</a> as:

<blockquote>Someone who teaches or gives help and advice to a less experienced and often younger person.</blockquote>

It also gives another definition:

<blockquote>A trusted counselor or guide.</blockquote>

I prefer the second definition as it puts you in the right mindset.  Mentoring isn't about you being awesome, or being better or more experienced than someone else.  Mentoring is about you helping make sure that the other person is proficient and self sufficient.  Your success as a mentor is measured in their success when they are on their own.

In some situations you might find yourself having to mentor an equal, or someone with more experience, or even just someone who thinks that is true.  This can be common in software development - and game development especially - where people move between companies and projects more frequently.  These situations are usually where the more difficult problems come in.

<h2>The Fuel Tank Side A</h2>

The main concept I want to convey is that when mentoring another person, they essentially have a fuel tank, and it is your job to be mindful of the level of that fuel tank and manage it.  That sounds strange I'm sure, so read on and I'll explain.

Everyone has a certain level of criticism or "pushing" that they are willing to tolerate based on what they think is appropriate.  Whatever that level is, if you go beyond that limit, bad things start to happen.  These bad things could be feelings of resentment, feelings of inadequacy, feeling undervalued and similar.  Those feelings can then result in a person digging their heals in (pushing back on reasonable things because they feel pushed too far), or the person trying to assert some authority or expertise over something that may or may not be relevant (trying to show that they do know things and/or that they are in fact valuable), and it can also make a person just start to avoid you and do things without your help, sometimes making dangerous mistakes because that risk is less bad to them than dealing with you!

As an extreme example of this, imagine you are relatively new to a company and are getting a code review on a code change you want to commit.  You find the person with knowledge of this area of code and they agree to review your change.  Now, imagine that they start picking apart the grammar of your comments, forcing you to change punctuation and sentence structure, while giving no feedback about the code itself, where your areas of concern were.  Let's also say that they don't like how you named your variables, or how you used whitespace, even though you are acting within the guidelines of the engineering standards of the team.

Lets say that person is the only person that knows the area of the code you are working in.  Are you likely to go back to them for a code review?  Or do you think you'll avoid them if you can, and have someone else review your code?  After a few episodes of that, I bet you start avoiding that person as much as you possibly can.  You might lose out by not getting some of the knowledge they have to help you make a good decision - which is unfortunate - but weighing the options, it likely is the better move to preserve your sanity and willingness to stay with your employer.

Besides the above example, people with more experience tend to want to be pushed less and receive less criticism, and for good reason. They may very well have experience or knowledge relevant to what you are trying to help them with and so don't need their hand held as much as they just need some simple pointers of problems to watch out for.

Some people are also just less willing to be pushed, regardless of their experience level and that is ok too.

Part of being an effective mentor means knowing how much feedback and criticism you can give someone (and how much you SHOULD give them).  This is your "feedback budget" and if there isn't a whole lot, you have to carefully choose how to spend it.  I'll talk about some ways to increase your feedback budget further on.

Before moving on I also want to mention a phenomenon I've seen first hand on more than one occasion that illustrates another reason why it's so important to be a good mentor.  If a person is in a situation where they are being pushed too much (or pushed around in their own eyes), and they are unable to escape that situation (can't avoid the person doing the pushing), they will start showing the "negative effects" I mentioned above towards other people who are in no way related to the person doing the pushing.  They will start to boast to other people or inflate their own accomplishments, and treat other people in a less friendly way and maybe have a short temper and be a bit depressed generally.  It's basically that the fuel tank has gone negative, and they are filling it up in their interactions with other people.  You can see how putting the wrong individual in a position of authority or mentorship can start to cause negative effects to ripple across a team.

<h2>The Fuel Tank Side B</h2>

On the opposite side of the spectrum are people who have less experience and are open to anything and everything you have to teach them.

This is a bit of a different situation and not usually as difficult to manage, but still important to get right.

People in this situation will want to learn, will want to feel that they are learning and accomplishing things, and probably will want you to know it too.  When they hit difficult problems that they can't solve, their fuel tank empties a bit.  Too many failures and they will start having negative effects as well - like acting depressed and being unwilling to try new challenges out of fear of failure.

Another part of being an effective mentor means knowing how much challenge you can give someone (and how much they want).  This will naturally get bigger over time as they learn and grow, but again, this is a budget you have to keep an eye on, and you may need to have them work on lower priority items that can give them wins, instead of letting them just grind away on hard stuff until they quit.

In both cases, giving not enough help is dangerous because the person may fail too much and want to leave, or they may unknowingly make dangerous code.

Giving too much help is also dangerous for both cases, because the person may want you to back off (and want to leave if you don't), or they may become reliant on you.

<h2>Taking Less from the Tank: The Compliment Sandwich</h2>

People have egos, this is a fact of life and is a psychologically healthy thing.  People will protect those egos when they are threatened or "smooshed in".  The trick most of the time is figuring out how to give someone the help they need, without needlessly harming their ego.

One method for doing this is what is called the "compliment sandwich".  What you do here effectively is give them a GENUINE compliment about something they are doing right, give them the help, and then compliment them on how they did on the thing you gave them help with.

In coder terms, an example of this could be saying this during a code review:

<blockquote>I like how you designed this class.  The public interface is very intuitive for such a complex piece of functionality internally which will make it very easy to interface with and maintain.  I noticed though that the member variables don't have an m_ prefix on them, do you think you could add that since that is a part of our engineering standards?"</blockquote>

You should find something else to praise in that code review to complete the sandwhich in the short term.  For the longer term though, in a later code review if it's appropriate you might make special effort to remember and say:

<blockquote>I see that you put the m_ prefix on this time, awesome!</blockquote>

A counter example to the above would be saying something like this instead during the first code review:

<blockquote>You need to make sure and put an m_ prefix on all member variables. That's how we do things here.</blockquote>

<h2>Refilling the Tank With Victories</h2>

When the tank gets low, either because they didn't want your help but you gave it anyways (read: micromanaged), or because you gave them too many challenges and they are now discouraged, there are things you can do to help the situation.

------


TODO: handshake vs fighting stance
TODO: find their strengths to fill their tank.  compliment sandwhich
TODO: as hands off as you can be.
TODO: correct in small bites
TODO: less experienced = discouraged more easily by challenges, need to help more.
TODO; sometimes something is just too technical / requires too much pushing and you have to back off.
TODO: not your job to protect things from them or find problems with what they are doing.  your job to help them succeed.
TODO: very common to mess it up several times before getting it right.  Talk about when you were in power the first time.
TODO: take opportunities to show that you do respect the other person and value their knowledge. (watch out for big heads though)
TODO: you are essentially a mentor to any new person that comes in the door.  help as desired, but only that much.  If they don't want your help, and you haven't been told to help them out, back off.
TODO: better to have a mediocre black belt, than an awesome orange belt who quits.
TODO: sometimes people really just do have bad attitudes.
TODO: friendly comradare, trust, etc can make the tank grow as well. Some people are not socially motivated though, and won't really care about friendly chatting, but still trust and respect goes a long way.
TODO: get chanel to read it?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3924</wp:post_id>
		<wp:post_date><![CDATA[2016-02-17 13:30:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="people-skills"><![CDATA[People Skills]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.demofox.org/?p=3925</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3925</guid>
		<description></description>
		<content:encoded><![CDATA[d]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3925</wp:post_id>
		<wp:post_date><![CDATA[2016-02-17 09:14:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
	</item>
	<item>
		<title>Advice: I Want To Be A Graphics or Game Programmer, What Now?</title>
		<link>http://blog.demofox.org/?p=5189</link>
		<pubDate>Sun, 20 Nov 2016 23:09:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5189</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>The most important part of reaching a goal is defining the details of what you want to achieve. Otherwise you are just wandering.</blockquote>

Stephanie Hurlburt (<a target="_blank" href="https://twitter.com/sehurlburt">twitter:@sehurlburt</a>) recently made a call on twitter to ask who was willing to mentor people.  She had a large enough response that she ended up making a web page listing all the people who responded with their specialties and what they were willing to help with.  Here is that list: <a target="_blank" href="http://stephaniehurlburt.com/blog/2016/11/14/list-of-engineers-willing-to-mentor-you">List of Engineers Willing to Mentor You</a>

I've had around 10 people contact me as a result and am writing up this page to share the answers I gave to common questions, to help other people who may be too afraid to speak up or whatever else.

By the way, I am a single individual with my own opinions and perspectives.  While I have 15 years of experience at 7 different studios, my opinions are not the end all be all, nor are they always the most accurate!  Your mileage may vary, but hopefully this information helps you more than leads you astray.

I think the #1 help I've been able to provide most people is to help them clarify what their goal actually is.  With a more clearly defined goal, the way forward is often pretty clear.

SO firstly, what do you want to do?

<h1>I Want to be an Independent Game Developer!</h1>

If you want to make games independently, work on them by yourself or with friends, and release them to the public, there is a lot of upside to that.

For starters, you don't have to convince anyone to give you a chance.  Go make your game!

Do you feel like you don't know enough?  Believe it or not, there are a lot of super famous musicians who couldn't read sheet music - including Michael Jackson and the Beattles - yet that is one of the first things all musicians learn when studying music (more info: <a target="_blank" href="http://screenertv.com/celebs/lionel-richie-dave-grohl-the-beatles-13-artists-who-cant-read-music-and-why-thats-okay/">Lionel Richie, Dave Grohl, The Beatles: 12 artists who can’t read music and why that’s okay</a>).

I bring that up to say:  Go make your game. Anyone can learn to be a game programmer if they put enough time into it, but the vision of what you want to create is what's special.

I work at Blizzard, known for making some of the best games of all time, and the first core tenant of our company is "Gameplay First".  I work there, so trust me when I say the success isn't due to amazing technology or engineers.  It's the designers, the artists, the musicians.  The people with the great ideas, and the intricate worlds in their head.  Your dreams are what are important.

<h1>I Have a career doing X, is it too late to switch to games?</h1>

No, it's not too late.  It may not be easy, but it isn't too late.

Charles Bukowski didn't start writing til he was 49, yet became pretty famous. Nothing is final til the fat lady sings.  Make the switch if it's what you really want.

<a target="_blank" href="https://litreactor.com/columns/10-authors-who-prove-its-never-too-late-to-start-writing">Five Authors Who Prove It's Never Too Late To Start Writing</a>

<h1>How did you get into games?</h1>

I'm going to be honest about where I came from because I think it's important to show the details of the path I took.  We all have to find our own way in life.  This is the path I took.

I am a self taught game programmer that now has 15 years professional experience, and am working at Blizzard as a senior engine / graphics programmer.

I started learning qbasic in middle school and took an AP computer science class in high school where i learned about data structures and algorithms.  I got a perfect score on the AP test, despite taking the 2nd year AP CS class as my first programming course. It was a hard, hard, class though. It was like coding boot camp.

I also took an AP calculus class and absorbed some of that, but my math skills aren't that great comparatively.  It's an area I have to work harder in.

During high school, an uncle of mine set me up with a C++ compiler and gave me some books to start learning from.  He really set me on the path to success and I am super thankful to him for that.

Those days were a bit turbulent for me, as my mother died of cancer in my junior year.

I dropped out of high school in my senior year (1999), went to continuation school for a while, dropped out of that and ended up taking the high school equivalency test.

I did take an assembly / machine language course in community college (and then dropped out again), but that was the extent of my formal training.

From there, I worked at a retail store for 4 years, and then got a job with a more distant uncle who had a very small 3 man software company.  I spent 4 years there, learning about databases and web technology, while also applying my C++ and CS knowledge to do things like make source control software for us (client/server) since it was before the time that source control was very popular.

After that, I worked for just short of a year at DC Shoes (a sub company of quicksilver) continuing to work on web dev and business tech.

I was then able to get a job working at inXile and worked on a Wii, PC, DS game called "Line Rider".  It was a great studio with some great people and great management.  There was a lot of crunch - like i had to work 60-80 hour weeks for something like 9 months straight! - but there was a lot of great opportunity there as well.  I sometimes wish i could go back in time and apply then what I know now.  We would not have crunched so hard, we would have worked with well defined goals, and the code would have ran a lot better, while the game would also have had some way better features (;

After shipping that game, Midway made an offer to move me up to Seattle in late 2008 to work on an unreal open world game of theirs called "This is Vegas".  I learned a ton there and ended up becoming the skeletal animation programmer after a bit, and learned a lot about skeletal animation.

2008-2012 was super turbulent due to the global financial crisis so it went fast but here's the basic happenings:
<ul>
	<li>Midway went out of business and our studio was bought by Warner Bros.</li>
	<li>I was moved to the Monolith studio and shipped a PC/XBOX/PS3 game "Gotham City Impostors".  I did engine, gameplay, skeletal animation programming and was the online engineer to do client side work, and also work with a 3rd party provider to get the game talking bidirectionally to a web service.</li>
	<li>Layoffs at monolith forced me to work at fuel cell, where I shipped the PC port of insanely twisted shadow planet.  A small studio but such great guys.  I really enjoyed my time there.</li>
	<li>Layoffs there led me to work at a disney studio to work on "club penguin". I figured I'd try mobile dev, and it was paying quite a bit.  Turned out to be aweful so i quit after a month! (They went out of business shortly after haha)</li>
	<li>I went back to Monolith to work on a project that I actually pitched before I left the prior time!  I think other people pitched similar, so it wasn't just my idea.</li>
	<li>The project got cancelled and then layoffs were coming again so i went to Z2Live (now Z2) to do mobile games again.  I had some friends working there who I worked with at Midway and Warner Bros so I figured I'd give it a try.  It was a great company, but still, the mobile dev was not something I was enjoying a whole lot.  The tech challenges and code quality was low, and I felt like I wasn't able to either make any meaningful changes to improve things, or do anything that would challenge or interest me.  I was doing both client and server side work.</li>
	<li>I applied to Blizzard in 2012 and got an in person interview with the Diablo team.  I ended up interviewing with the Starcraft 2 team since I was down, and it was SC2 that ended up hiring me.  SC2 then became the SC2 and Heroes team, and that's where I'm at to this day.  I was hired for gameplay, moved to engine where my work included audio programming and streaming (downloading), and now I am a graphics programmer on the graphics team.</li>
</ul>

If you are wondering, Blizzard is a great place to work and yes, you will love it.  It's super stable, not a lot of crunch (for the teams I'm on) and people first and foremost care about making great games.  People join and don't leave, and we are constantly celebrating 5, 10, 15, 20+ year anniversaries.   It's a great place to work, but I recommend getting experience elsewhere first so you can get an idea how the outside world works before joining somewhere that you will never leave.

My one regret about joining Blizzard is that I assumed they all must be super heroes.  Because of that, despite the fact that I had 11 years of experience which included a couple lead and senior engineering titles, I accepted a demotion to mid level engineer and a significant pay cut.  It was "rectified" in about 1.5 years, but I've seen newly hired fresh grads come in at the same title and get promoted in the same time frame, so I am a bit salty about that.  In simple terms it is saying "Your previous experience counts for absolutely zero", which is pretty insulting and would be taken as egotism, except that other people don't always have that same experience as they are hired in from the outside.

Perhaps I interview poorly, or maybe they were expecting me to negotiate, but I bring this up only to say - don't short change yourself.  Don't assume that people are amazing just because a game is successful, or because they are in games and you are not.

Have confidence, and go after jobs you don't think you are qualified for (;

TODO: gather items from twitter chats
TODO: make the list of questions at the top, with anchor links to the question itself?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5189</wp:post_id>
		<wp:post_date><![CDATA[2016-11-20 15:09:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-11-20 23:09:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[__trashed]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="gamedev-commentary"><![CDATA[Gamedev Commentary]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Analytic Gradients, Normals and Distance Estimates of Explicit Bezier Surfaces.</title>
		<link>http://blog.demofox.org/?p=5791</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5791</guid>
		<description></description>
		<content:encoded><![CDATA[Ray marching can be an effective technique for rendering a variety of 3d objects that would be much harder and slower with either ray tracing or rasterization.  Interestingly, you can look at ray tracing as an analytical solution to a ray vs object test, where ray marching is a numerical solution to a ray vs object test.

Details of ray marching: <a href="http://9bitscience.blogspot.com/2013/07/raymarching-distance-fields_14.html" target="_blank"/>9Bit Science: Raymarching Distance Fields</a>

A favorite primitive of mine to render via raymarching is the bivariate function, which has a form like the below, and is just a mathematically defined height field:
$latex z=f(x,y)$

In particular, I'm a fan of explicit Bezier surfaces, which use Bernstein polynomials in two dimensions on the surface.  Below is an explicit Bezier surface which is cubic on the x and y axis, making an order (3,3) surface. (Image taken from an interactive demo i made: <a href="http://demofox.org/TextureSamplerSurface.html" target="_blank">Analytical Surfaces Evaluated by the GPU Texture Sampler</a>)

<img src="https://demofox2.files.wordpress.com/2016/12/surface33.png"/>

One of the main reasons I like Bezier surfaces compared to b-spline or nurbs surfaces is that the math is simpler, meaning you can do more with them, and you can do it more quickly in general.

Unfortunately Bezier curves and surfaces in general can be difficult to work with because they are parameterized by "time".  Below is the formula for a two dimensional quadratic Bezier curve parameterized by time t.  A, B and C are two dimensional control points of the curve.
$latex x = f(t) = A_x(1-t)^2 + 2B_x(1-t)t + C_xt^2 \\\\
y = g(t) = A_y(1-t)^2 + 2B_y(1-t)t + Cyt^2$

You can simplify this by parameterizing a curve on x instead of t to get a one dimensional or explicit Bezier curve. A, B, and C are now one dimensional control points (scalars).
$latex y = A(1-x)^2 + 2B(1-x)x + Cx^2$

That simplifies the math quite a bit but comes at the cost of only being able to move control points on a single axis, instead of being able to move them two dimensionally.  If you are ok with that restriction, it can be a good trade off.

Below is the formula for an order (1,1) explicit Bezier surface which makes a 3d object, but has control points which can only move up and down.
TODO: bilinear surface equation in bernstein form. Or maybe Biquadratic?

TODO: section on making formulas for Bezier rectangles in Bernstein form.
TODO: section on calculating gradient
TODO: talk about numerical gradient calculation.
TODO: show how to come up with formula for analytical gradient calculation.
TODO: talk about how gradient is also surface normal when you have an intersection.
TODO:: Mention that gradients can be used to get a distance estimation, so can help control step size to take larger steps when possible: http://www.iquilezles.org/www/articles/distance/distance.htm


TODO: maybe ditch all the above explanations and keep it simple and to the point.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5791</wp:post_id>
		<wp:post_date><![CDATA[2017-01-25 07:24:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1485398975;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4072;}i:1;a:1:{s:2:"id";i:910;}i:2;a:1:{s:2:"id";i:1037;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2x4P00-31ZigZag</title>
		<link>http://blog.demofox.org/2x4p00-31zigzag/</link>
		<pubDate>Sat, 06 May 2017 14:17:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/2x4P00-31ZigZag.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6600</wp:post_id>
		<wp:post_date><![CDATA[2017-05-06 06:17:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-06 14:17:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2x4p00-31zigzag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/2x4P00-31ZigZag.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/2x4P00-31ZigZag.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:238;s:6:"height";i:438;s:4:"file";s:27:"2017/05/2x4P00-31ZigZag.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"2x4P00-31ZigZag-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"2x4P00-31ZigZag-163x300.png";s:5:"width";i:163;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"2x4P00-31ZigZag-238x188.png";s:5:"width";i:238;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:27:"2x4P00-31ZigZag-238x188.png";s:5:"width";i:238;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"2x4P00-31ZigZag-163x300.png";s:5:"width";i:163;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3dP000-P111</title>
		<link>http://blog.demofox.org/3dp000-p111/</link>
		<pubDate>Sat, 06 May 2017 14:28:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/3dP000-P111.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6606</wp:post_id>
		<wp:post_date><![CDATA[2017-05-06 06:28:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-06 14:28:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[3dp000-p111]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/3dP000-P111.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/3dP000-P111.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:573;s:6:"height";i:293;s:4:"file";s:23:"2017/05/3dP000-P111.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"3dP000-P111-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"3dP000-P111-300x153.png";s:5:"width";i:300;s:6:"height";i:153;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"3dP000-P111-573x188.png";s:5:"width";i:573;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"3dP000-P111-573x188.png";s:5:"width";i:573;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:23:"3dP000-P111-500x256.png";s:5:"width";i:500;s:6:"height";i:256;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2x3x2_P000-121</title>
		<link>http://blog.demofox.org/2x3x2_p000-121/</link>
		<pubDate>Sat, 06 May 2017 14:35:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/2x3x2_P000-121.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6608</wp:post_id>
		<wp:post_date><![CDATA[2017-05-06 06:35:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-06 14:35:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2x3x2_p000-121]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/2x3x2_P000-121.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:509;s:6:"height";i:332;s:4:"file";s:26:"2017/05/2x3x2_P000-121.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"2x3x2_P000-121-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"2x3x2_P000-121-300x196.png";s:5:"width";i:300;s:6:"height";i:196;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"2x3x2_P000-121-509x188.png";s:5:"width";i:509;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:26:"2x3x2_P000-121-509x188.png";s:5:"width";i:509;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:26:"2x3x2_P000-121-460x300.png";s:5:"width";i:460;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/2x3x2_P000-121.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2x1P0-P1new</title>
		<link>http://blog.demofox.org/2x1p0-p1new/</link>
		<pubDate>Sat, 06 May 2017 20:31:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/2x1P0-P1new.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6619</wp:post_id>
		<wp:post_date><![CDATA[2017-05-06 12:31:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-06 20:31:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2x1p0-p1new]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/2x1P0-P1new.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/2x1P0-P1new.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:368;s:6:"height";i:196;s:4:"file";s:23:"2017/05/2x1P0-P1new.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"2x1P0-P1new-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"2x1P0-P1new-300x160.png";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"2x1P0-P1new-368x188.png";s:5:"width";i:368;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:23:"2x1P0-P1new-368x188.png";s:5:"width";i:368;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3dP000-P111Dual</title>
		<link>http://blog.demofox.org/3dp000-p111dual/</link>
		<pubDate>Sun, 07 May 2017 02:42:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/3dP000-P111Dual.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6660</wp:post_id>
		<wp:post_date><![CDATA[2017-05-06 18:42:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-07 02:42:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[3dp000-p111dual]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/3dP000-P111Dual.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/3dP000-P111Dual.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:573;s:6:"height";i:293;s:4:"file";s:27:"2017/05/3dP000-P111Dual.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"3dP000-P111Dual-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"3dP000-P111Dual-300x153.png";s:5:"width";i:300;s:6:"height";i:153;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"3dP000-P111Dual-573x188.png";s:5:"width";i:573;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:27:"3dP000-P111Dual-573x188.png";s:5:"width";i:573;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:27:"3dP000-P111Dual-500x256.png";s:5:"width";i:500;s:6:"height";i:256;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2x3x2_P000-121ZigZag</title>
		<link>http://blog.demofox.org/2x3x2_p000-121zigzag/</link>
		<pubDate>Sun, 07 May 2017 23:11:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/2x3x2_P000-121ZigZag.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6676</wp:post_id>
		<wp:post_date><![CDATA[2017-05-07 15:11:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-07 23:11:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2x3x2_p000-121zigzag]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/2x3x2_P000-121ZigZag.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/2x3x2_P000-121ZigZag.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:509;s:6:"height";i:332;s:4:"file";s:32:"2017/05/2x3x2_P000-121ZigZag.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"2x3x2_P000-121ZigZag-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"2x3x2_P000-121ZigZag-300x196.png";s:5:"width";i:300;s:6:"height";i:196;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:32:"2x3x2_P000-121ZigZag-509x188.png";s:5:"width";i:509;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:32:"2x3x2_P000-121ZigZag-509x188.png";s:5:"width";i:509;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:32:"2x3x2_P000-121ZigZag-460x300.png";s:5:"width";i:460;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>programoutput</title>
		<link>http://blog.demofox.org/programoutput/</link>
		<pubDate>Sun, 07 May 2017 23:47:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://demofox2.files.wordpress.com/2017/05/programoutput.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6690</wp:post_id>
		<wp:post_date><![CDATA[2017-05-07 15:47:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-07 23:47:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[programoutput]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://demofox2.files.wordpress.com/2017/05/programoutput.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2017/05/programoutput.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:334;s:4:"file";s:25:"2017/05/programoutput.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"programoutput-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"programoutput-300x201.png";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"programoutput-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"large-feature";a:4:{s:4:"file";s:25:"programoutput-499x188.png";s:5:"width";i:499;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}s:13:"small-feature";a:4:{s:4:"file";s:25:"programoutput-448x300.png";s:5:"width";i:448;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>When Random Numbers Are Too Random: Low Discrepancy Sequences</title>
		<link>http://blog.demofox.org/?p=6708</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=6708</guid>
		<description></description>
		<content:encoded><![CDATA[Random numbers can be very useful in graphics and game development, but they can have a pesky and sometimes undesirable habit of clumping together.





Uniformly distributed random numbers (white noise) can be quite useful in graphics and gamedev but they have a pesky habit of clumping together.  This can be a problem when you want randomness but you want to have more even coverage over the sample space (for instance, this comes up in path tracing because it comes up in monte carlo integration).

At the bottom of this post is the C++ code that generated the images in this post.  It uses only standard includes (except windows.h for bitmap headers), is a single file, and doesn't link to anything, so you should be able to take the code snippets and start using these techniques right away.

50 uniformly distributed random numbers generated with std::mt19937:

<img src="https://demofox2.files.wordpress.com/2017/05/UniformRandom1D_.png"/>

50 evenly spaced non random numbers:

<img src="https://demofox2.files.wordpress.com/2017/05/Uniform1D_.png"/>

If you find yourself in this situation of wanting at least some randomness, but you want better coverage than plain vanilla random numbers, as you might guess, you do have some options!

<h1>Van der Corput Sequence</h1>

The <a href="https://en.wikipedia.org/wiki/Van_der_Corput_sequence" target="_blank">Van der Corput sequence</a> is a one dimensional "low discrepancy sequence", meaning basically that the numbers generated have a good spread.  The sequence still looks somewhat random though so you can get some of the benefits of both randomness and evenly spaced samples.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6708</wp:post_id>
		<wp:post_date><![CDATA[2017-05-19 11:35:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495330702;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1803;}i:1;a:1:{s:2:"id";i:576;}i:2;a:1:{s:2:"id";i:49;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MoriRT: Pixel and Geometry Caching to Aid Real Time Raytracing</title>
		<link>http://blog.demofox.org/2012/05/03/morirt-pixel-and-geometry-caching-to-aid-real-time-raytracing/</link>
		<pubDate>Fri, 04 May 2012 06:53:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/05/03/morirt-pixel-and-geometry-caching-to-aid-real-time-raytracing/</guid>
		<description></description>
		<content:encoded><![CDATA[About half a year ago, some really intriguing ideas came to me out of the blue dealing with ways to speed up raytracing.  My plan was to create a couple games, showing off these techniques, and after some curiosity was piqued, write an article up talking about how it worked to share it with others in case they found it useful.

For those of you who don't know what raytracing is, check out this wikipedia article:

<a href="http://en.wikipedia.org/wiki/Ray_tracing_(graphics)">http://en.wikipedia.org/wiki/Ray_tracing_(graphics)</a>

Due to some distractions and technical setbacks unrelated to the raytracing itself, I've only gotten one small game working with these techniques.  One of the distractions is that I implemented the game using google's native client (NaCl) and for some reason so far unknown to me, it doesn't work on some people's machines which is very annoying!  I plan to get a mac mini in the next couple months to try and repro / solve the problem.

Check out the game if you want to.  Open this link in google chrome to give it a play:

<a href="https://chrome.google.com/webstore/detail/kknobginfngkgcagcfhfpnnlflhkdmol?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/kknobginfngkgcagcfhfpnnlflhkdmol?utm_source=chrome-ntp-icon</a>

The sections of this article are:
<ol>
	<li>Limitations</li>
	<li>Geometry Caching</li>
	<li>Pixel Caching</li>
	<li>Future Work</li>
	<li>Compatible Game Ideas</li>
</ol>
<h2> Limitations</h2>

Admittedly, these techniques have some pretty big limitations.  I've explained my techniques to quite a few fellow game devs and when I mention the limitations, the first reaction people give me is the same one you are probably going to have, which is "oh... well THAT'S dumb!".  Usually after explaining it a bit more, people perk up again, realizing that you can still work within the limitations to make some neat things.   So please hold off judgement until checking out the rest of the article! (:

The big fat, unashamed limitations are:
<ul>
	<li>The camera can't move (*)</li>
	<li>Objects in the scene shouldn't move too much, at least not all at the same time</li>
</ul>
(* there is a possible exception to the camera not moving limitation in the "Future Work" section)

So.... what the heck kind of games can you make with that?  We'll get to that later on, but here's some things these techniques are good at:
<ul>
	<li>Changing light color and intensity is relatively inexpensive</li>
	<li>Changing object color and animating textures is inexpensive</li>
	<li>These techniques don't break the parallel-izable nature of raytracing.  Use all those CPU and GPU cores to your heart's content!</li>
</ul>
Seems a bit dodgy I'm sure, but read on.

<h2>Geometry Caching</h2>

The first technique is geometry caching.

The idea behind geometry caching is:  If no objects have moved since the last frame, why should we test which objects each ray hits?  It's a costly part of the ray tracing, and we already KNOW that we are going to get the same results as last frame, so why even bother?  Let's just use the info we calculated last frame instead.

Also, if some objects HAVE moved, but we know that the moving objects don't affect all rays, we can just recalculate the rays that have been affected, without needing to recalculate all rays.

Just because we know the collision points for rays doesn't mean that we can just skip rendering all together though.  Several things that can make us still need to re-render a ray include:  Animating textures, objects changing colors, lights dimming, lights changing color.  When these things happen, we can re-render a ray much less expensively than normal (just recalculate lighting and shading and such), so they are comparatively inexpensive operations compared to objects actually moving around.

How I handle geometry caching is give each ray (primary and otherwise) a unique ID, and I have a dynamic array that holds the collision info for each ID.

In the part of the code that actually casts a single ray, i pass the ID and a flag saying whether it's allowed to use the geometry cache.  If it isn't allowed to use the geometry cache, or there is no entry in the cache for the ID, the code calculates intersection info and puts it into the geometry cache.

It then uses the geometry cache information (whether it was re-calculated, or was usable as is) and applies phong shading, does texture lookups, recurses for ray refraction and reflection, and does the other things to figure out the color of the pixel.

In my first implementation of the geometry cache, it was very fast to render with once it was filled in, but it was really expensive to invalidate individual cache items.  If an object moved and a couple hundred geometry cache items needed to be marked as dirty, it was a really computationally expensive operation!

A better option, the one i use now, involves both a 2d grid (for the screen pixels) and a 3d grid (to hold the geometry of the world).

Breaking the screen into a grid, when each ray is cast into the world, I'm able to tell the ray what screen cell it belongs to.   This way, as a ray traverses the 3d grid holding the world geometry, it's able to add itself each world grid maintains to keep track of which rays pass through that 3d cell (keeping just the unique values of course!).  Child rays know what screen cell they are in by getting that value from their parent.

If an object moves in the world, you can make a union of which world cells it occupied before it moved, and which world cells it occupies after the move.  From there, you can make a union of which screen cells sent rays into that world cell.  The last step is to mark all those screen cells as "geometry dirty" so that next frame, the rays in those cells are disallowed from using the geometry cache data, and instead will re-calculate new intersection info.

This method makes it so potentially a lot of rays re-calcuate their intersection data that don't really need to, but by tuning the size of the screen and world grids, you can find a good happy medium for your use cases.

If you have an idea to better maintain the geometry cache, feel free to post a comment about it!

<h2>Pixel Caching</h2>

The second technique is pixel caching which is a fancy way of saying "don't redraw pixels that we don't have to".  The less rays you have to cast, the faster your scene will render.

The first challenge to tackle in this problem is how do you know which pixels will be affected when an object changes color?  That is solved by the same mechanism that tells us when geometry cache data is invalidated.

When an object changes color (or has some other non-geometry change), you just get the list of world cells the object resides in, and then get the union of screen cells that sent rays through those world cells.

When you have that list, instead of marking the screen cell "geometry dirty", you mark it as "pixel dirty".

When rendering the screen cells, any screen cell that isn't marked as dirty in either way can be completely skipped.  Rendering it is a no-op because it would be the same pixels as last time! (:

This is the reason why you want to minimize geometry changes (objects moving, rotating, resizing, etc) and if you have to,  rely instead on animating textures, object colors, and lighting colors / intensities.

<h2>Future Work</h2>

Here's a smattering of ideas for future work that I think ought to bear fruit:
<ul>
	<li>Replace the screen and/or world grid with better performing data structures</li>
	<li>Pre-compute (a pack time process) the primary rays and subsequent rays of static geometry and don't store static geometry in the world grid, but store it in something else instead like perhaps a BSP tree.  This way, at run time, if a ray misses all objects in the dynamic geometry world grid, it can just use the info from the pre-computed static geometry, no matter how complex the static geometry is.  If something DOES hit a dynamic object however, you'll have to test subsequent rays against both the dynamic object world grid, and the data structure holding the info about the static geometry but hopefully it'll be a net win in general.</li>
	<li>Investigate to see how to integrate this with photon mapping techniques and data structures.  Photon mapping is essentially ray tracing from the opposite direction (from light to camera, instead of from camera to light).  Going the opposite direction, there are some things it's really good at - like caustics - which ray tracing alone just isn't suited for: <a href="http://en.wikipedia.org/wiki/Photon_mapping">http://en.wikipedia.org/wiki/Photon_mapping</a></li>
	<li>In a real game, some things in the world will be obscured by the UI overlays.  There might be an oportunity in some places to "early out" when rendering a single ray if it was obscured by UI.  It would complicate caching those since an individual ray could remain dirty while the screen cell itself was marked as clean.</li>
	<li>Orthographic camera:  If the camera is orthographic, that means you could pan the camera without invalidating the pixel and geometry cache.  This would allow the techniques to be used for a side scrolling game, overhead view game, and things of that nature - so long as orthographic projection looks good enough for the needs of the game.  I think if you got creative, it could end up looking pretty nice.</li>
	<li>Screen space effects: enhance the raytracing visuals with screen space particles and such.  Could also keep a "Z-Buffer" by having a buffer that holds the time each ray took to hit the first object.  This would allow more advanced effects.</li>
	<li>Interlaced rendering: to halve the rendering time, every frame could render every other horizontal line.  Un-dirtying a screen cell would take 2 frames but this ought to be a pretty straight forward and decent win if losing a little bit of quality is ok.</li>
	<li>red/blue 3d glasses mode:  This is actually a feature of my snake game but figured i'd call it out.  It works by rendering the scene twice which is costly (each "camera" has it's own geometry and pixel cache at least).  If keeping the "Z-Buffer" as mentioned above, there might be a way to fake it more cheaply but not sure.</li>
</ul>
<h2>Compatible Game Ideas</h2>

Despite the limitations, I've been keeping a list of games that would be compatible with these ideas.  Here's the highlights of that list!
<ul>
	<li>Pinball:  Only flippers, and the area around the ball would actually have geometry changes, limiting geometry cache invalidating.  Could do periodic, cycling color / lighting animations on other parts of the board to spice the board up in the "non active" areas.</li>
	<li>Marble Madness Clone: Using an orthographic camera, to allow camera paning, a player could control a glass or mirrored ball through a maze with dangerous traps and time limits.  Marble Madness had very few moving objects and was more about the static geometry so there'd probably be a lot of mileage here.  You could also have animated textures for pools of acid so that they didn't impact the geometry cache.</li>
	<li>Zelda 1 and other overhead view type games: Using ortho camera to allow panning, or in the case of Zelda 1, have each "room" be a static camera.  You'd have to keep re-rendering down somehow by minimizing enemy count, while still making it challenging.  Could be difficult.</li>
	<li>Metroidvania: side scroller with ortho camera to allow panning.  Could walk behind glass pillars and waterfalls for cool refractive effects.</li>
	<li>Monkey Island type game: LOTS of static geometry in a game like that which would be nice.</li>
	<li>Arkanoid type game: static camera, make use of screen space effects for break bricking particles etc</li>
	<li>Mystery game: Static scenes where you can use a magnifying glass to LITERALLY view things better (magnification due to refraction, just like in real life) to find clues and solve the mystery.  Move from screen to screen to find new clues and find people to talk to, progress the storyline etc.</li>
	<li>Puzzle Game: could possibly do a traditional "block based" puzzle game like puzzle fighters, tetris, etc.</li>
	<li>Physics based puzzle game: You set up pieces on a board (only one object moves at once! your active piece!) then press "play".  Hopefully it'd be something like a ball goes through your contraption which remains mostly motionless and you beat the level if you get the ball in the hole or something.</li>
	<li>Somehow work optics into gameplay... maybe a puzzle game based on lasers and lights or something</li>
	<li>Pool and board games: as always, gotta have a chess game with insane, state of the art graphics hehe</li>
	<li>mini golf: A fixed camera when you are taking your shot, with a minimum of moving objects (windmills, the player, etc).  When you hit the ball, it rolls, and when it stops, the camera teleports to the new location.</li>
	<li>Security gaurd game:  Have several raytraced viewports which are played up to be security camera feeds.  Could have scenes unfold in one feed at a time to keep screen pixel redraw low.</li>
	<li>Turn based overhead view game:  Ortho camera for panning, and since it's turn based, you can probably keep object movement down to one at a time.</li>
</ul>
Lastly, here's a video describing this stuff in action.  When you view the video, the orange squares are screen tiles that are completely clean (no rendering required, they are a no-op).  Purple squares are screen tiles that were able to use the geometry cache.   Where you don't see any squares at all, it had to re-render the screen tile from scratch and wasn't able to make use of either caching feature.

<iframe src="http://www.youtube.com/embed/gDQjt79og9I?hd=1" width="420" height="315" frameborder="0"></iframe>

Feedback and comments welcomed!  I'd be really interested too in hearing if anyone actually uses this for anything or tries to implement in on their own.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2012-05-03 22:53:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-04 06:53:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[morirt-pixel-and-geometry-caching-to-aid-real-time-raytracing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495609757;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1447;}i:1;a:1:{s:2:"id";i:1127;}i:2;a:1:{s:2:"id";i:2405;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[puggles]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kenandkaren777@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.37.169.210]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-05-04 09:47:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-05-04 17:47:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[nice blog! interesting info about ray tracing. thinking about games that could use these techniques, there are several games i've played on kongregate that might work nicely with rt2 (real time ray tracing). games like the switch series, achievement unlocked (and it's spawn), and a bunch of puzzle games would look awesome with rt effects.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[207.170.199.15]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-05-04 12:19:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-05-04 20:19:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So true about kongregate!  I have a ton of specific games on my "future game ideas" that i want to base future games on using this tech, and seriously 90% of them are from kongregate hehe.

Chanel was playing my snake game w/ her laptop unplugged from the wall and of course, since it uses all available cores, the fans spun up and her battery drained to nothing in no time flat.

She was saying (in not so many words) it is dumb to make such a power hogging game for the casual space - which is completely true - but i consider these games more "oddities" than trying to appeal to the casual, low powered machine crowd.  I want people to say "how the heck is this game raytraced in real time from inside my web browser? that can't be possible" haha...

Thanks for checking my article out (:

I'm still working out the bugs of the blog and will try to make it so comments dont need to be approved to go up, and try and lessen other "bariers to entry" for posting comments (while hopefully keeping out the spammers hehe)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DIY Synth 1: Sound Output</title>
		<link>http://blog.demofox.org/2012/05/14/diy-synthesizer-chapter-1-sound-output/</link>
		<pubDate>Tue, 15 May 2012 07:35:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/05/14/diy-synthesizer-chapter-1-sound-output/</guid>
		<description></description>
		<content:encoded><![CDATA[This is a part of the <a href="http://blog.demofox.org/diy-synthesizer/" target="_blank">DIY Synthesizer</a> series of posts where each post is roughly built upon the knowledge of the previous posts. If you are lost, check the earlier posts!

This is the first in a series of tutorials on how to make your own software synthesizer.

These tutorials are aimed at C++ programmers, and the example code is meant to be as easy to understand as possible and have as few dependencies as possible.  The code ought to compile and run for you no matter what system or compiler you are using with minimal if any changes required.

You can download the full source for this chapter here: <a href="https://demofox2.files.wordpress.com/2012/05/ch1cpp.txt" title="DIY Synthesizer Chapter 1 Source Code">DIY Synthesizer Chapter 1 Source Code</a>
<h2>Wave File Format</h2>
Since making sound come out of computer speakers varies a lot between different systems, we'll start out just writing a .wave file.

If you want to jump into doing real time audio, i recommend portaudio (<a href="http://www.portaudio.com/">http://www.portaudio.com/</a>) , and i also recomend libsndfile for reading and writing other audio file formats(<a href="http://www.mega-nerd.com/libsndfile/">http://www.mega-nerd.com/libsndfile/</a>).

I found these 2 links really helpful in understanding the wave file format:
<ul>
	<li><a href="http://www.piclist.com/techref/io/serial/midi/wave.html">http://www.piclist.com/techref/io/serial/midi/wave.html</a></li>
	<li><a href="https://ccrma.stanford.edu/courses/422/projects/WaveFormat/">https://ccrma.stanford.edu/courses/422/projects/WaveFormat/</a></li>
</ul>
There's a lot of optional parts of a wave file header, but we are only going to focus on the bare minimum required to get the job done.  Here's what our wave file header struct looks like:

<code>//this struct is the minimal required header data for a wav file
struct SMinimalWaveFileHeader
{
<span class="Apple-tab-span" style="white-space: pre">	</span>//the main chunk
<span class="Apple-tab-span" style="white-space: pre">	</span>unsigned char m_szChunkID[4];
<span class="Apple-tab-span" style="white-space: pre">	</span>uint32		  m_nChunkSize;
<span class="Apple-tab-span" style="white-space: pre">	</span>unsigned char m_szFormat[4];</code>

<code><span class="Apple-tab-span" style="white-space: pre">	</span>//sub chunk 1 "fmt "
<span class="Apple-tab-span" style="white-space: pre">	</span>unsigned char m_szSubChunk1ID[4];
<span class="Apple-tab-span" style="white-space: pre">	</span>uint32		  m_nSubChunk1Size;
<span class="Apple-tab-span" style="white-space: pre">	</span>uint16		  m_nAudioFormat;
<span class="Apple-tab-span" style="white-space: pre">	</span>uint16		  m_nNumChannels;
<span class="Apple-tab-span" style="white-space: pre">	</span>uint32		  m_nSampleRate;
<span class="Apple-tab-span" style="white-space: pre">	</span>uint32		  m_nByteRate;
<span class="Apple-tab-span" style="white-space: pre">	</span>uint16		  m_nBlockAlign;
<span class="Apple-tab-span" style="white-space: pre">	</span>uint16		  m_nBitsPerSample;</code>

<code><span class="Apple-tab-span" style="white-space: pre">	</span>//sub chunk 2 "data"
<span class="Apple-tab-span" style="white-space: pre">	</span>unsigned char m_szSubChunk2ID[4];
<span class="Apple-tab-span" style="white-space: pre">	</span>uint32		  m_nSubChunk2Size;</code>

<code> </code><code></code><code></code><code><span class="Apple-tab-span" style="white-space: pre">	</span>//then comes the data!
};
</code>

And boringly, here's the function that fills out the struct and writes it to disk:
<code>
bool WriteWaveFile(const char *szFileName, void *pData, int32 nDataSize, int16 nNumChannels, int32 nSampleRate, int32 nBitsPerSample)
{
<span class="Apple-tab-span" style="white-space: pre">	</span>//open the file if we can
<span class="Apple-tab-span" style="white-space: pre">	</span>FILE *File = fopen(szFileName,"w+b");
<span class="Apple-tab-span" style="white-space: pre">	</span>if(!File)
<span class="Apple-tab-span" style="white-space: pre">	</span>{
<span class="Apple-tab-span" style="white-space: pre">		</span>return false;
<span class="Apple-tab-span" style="white-space: pre">	</span>}</code>

<code><span class="Apple-tab-span" style="white-space: pre">	</span>SMinimalWaveFileHeader waveHeader;</code>

<code><span class="Apple-tab-span" style="white-space: pre">	</span>//fill out the main chunk
<span class="Apple-tab-span" style="white-space: pre">	</span>memcpy(waveHeader.m_szChunkID,"RIFF",4);
<span class="Apple-tab-span" style="white-space: pre">	</span>waveHeader.m_nChunkSize = nDataSize + 36;
<span class="Apple-tab-span" style="white-space: pre">	</span>memcpy(waveHeader.m_szFormat,"WAVE",4);</code>

<code><span class="Apple-tab-span" style="white-space: pre">	</span>//fill out sub chunk 1 "fmt "
<span class="Apple-tab-span" style="white-space: pre">	</span>memcpy(waveHeader.m_szSubChunk1ID,"fmt ",4);
<span class="Apple-tab-span" style="white-space: pre">	</span>waveHeader.m_nSubChunk1Size = 16;
<span class="Apple-tab-span" style="white-space: pre">	</span>waveHeader.m_nAudioFormat = 1;
<span class="Apple-tab-span" style="white-space: pre">	</span>waveHeader.m_nNumChannels = nNumChannels;
<span class="Apple-tab-span" style="white-space: pre">	</span>waveHeader.m_nSampleRate = nSampleRate;
<span class="Apple-tab-span" style="white-space: pre">	</span>waveHeader.m_nByteRate = nSampleRate * nNumChannels * nBitsPerSample / 8;
<span class="Apple-tab-span" style="white-space: pre">	</span>waveHeader.m_nBlockAlign = nNumChannels * nBitsPerSample / 8;
<span class="Apple-tab-span" style="white-space: pre">	</span>waveHeader.m_nBitsPerSample = nBitsPerSample;</code>

<code><span class="Apple-tab-span" style="white-space: pre">	</span>//fill out sub chunk 2 "data"
<span class="Apple-tab-span" style="white-space: pre">	</span>memcpy(waveHeader.m_szSubChunk2ID,"data",4);
<span class="Apple-tab-span" style="white-space: pre">	</span>waveHeader.m_nSubChunk2Size = nDataSize;</code>

<code><span class="Apple-tab-span" style="white-space: pre">	</span>//write the header
<span class="Apple-tab-span" style="white-space: pre">	</span>fwrite(&amp;waveHeader,sizeof(SMinimalWaveFileHeader),1,File);</code>

<code><span class="Apple-tab-span" style="white-space: pre">	</span>//write the wave data itself
<span class="Apple-tab-span" style="white-space: pre">	</span>fwrite(pData,nDataSize,1,File);</code>

<code> </code><code></code><code></code><code></code><code></code><code></code><code></code><code><span class="Apple-tab-span" style="white-space: pre">	</span>//close the file and return success
<span class="Apple-tab-span" style="white-space: pre">	</span>fclose(File);
<span class="Apple-tab-span" style="white-space: pre">	</span>return true;
}
</code>

Nothing too crazy or all that interesting, but it gets the job done.  Again, check out those links above if you are interested in the details of why things are written the way they are, or what other options there are.
<h2>Generating a Mono Wave File</h2>
Now, finally something interesting, we are going to generate some audio data and make a real wave file!

Since they are easy to generate, we'll use a sawtooth wave for our sound.  For more information about sawtooth waves, check out this wikipedia page: <a href="http://en.wikipedia.org/wiki/Sawtooth_wave">http://en.wikipedia.org/wiki/Sawtooth_wave</a>.

<code>int nSampleRate = 44100;
int nNumSeconds = 4;
int nNumChannels = 1;
</code>

The sample rate defines how many samples of audio data there are per second.  A stream of audio data is nothing more than a stream of numbers, and each number is a single audio sample, so the sample rate is just how many numbers there are per second of audio data.  The less numbers you use, the less "horizontal resolution" your sound file has, or, the less times the wave data can change in amplitude per second.

The sample rate also defines the maximum frequency you can store in the audio stream.  The maximum frequency you can store is half of the sample rate.  In other words, with a 44100 sample rate, the maximum frequency you can store is 22,050hz.   The maximum audible frequency for the human ear is about 20,000hz so using a sample rate of 44100 ought to be pretty good for most needs (you might need to go higher, for complex technical reasons, but this is info enough for now!).  Here's some interesting info about audio frequencies: <a href="http://en.wikipedia.org/wiki/Audio_frequency">http://en.wikipedia.org/wiki/Audio_frequency</a>

The number of seconds is how long (in seconds) the wave goes on for, and the number of channels is how many audio channels there are.  Since this is a mono sound, there is only one audio channel.
<code>
int nNumSamples = nSampleRate * nNumChannels * nNumSeconds;
int32 *pData = new int32[nNumSamples];
</code>

Here we calculate how many actual audio samples there are and then allocate space to hold the audio data.  We are using 32 bit integers, but you could also use 16 bit integers.  The number of bits in your audio samples indicates the vertical resolution of your audio data, or how many unique values there are.  in 16 bit ints, there are 65536 different values, and in 32 bits there are 4.2 billion different values.  If you think about your data as plots on a graph (essentially, what it is, where X is time and Y is wave amplitude) the more bits per sample, and the higher the sample rate, the closer your graph can be to whatever real values you are trying to use (such as a sine wave).  Less bits and a lower sample rate mean it's farther away from the real data you are trying to model, which will cause the audio to sound less correct.

<code> int32 nValue = 0;
for(int nIndex = 0; nIndex &lt; nNumSamples; ++nIndex)
{
<span class="Apple-tab-span" style="white-space: pre">	</span>nValue += 8000000;
<span class="Apple-tab-span" style="white-space: pre">	</span>pData[nIndex] = nValue;
}
</code>

Here we are actually creating our wave data.  We are using the fact that if you have an int near the maximum value you can store, and then add some more, it will wrap around to the minimum value the int can store.  If you look at this on a graph, it looks like a saw tooth wave, ie we are creating a saw tooth wave!  Normally you wouldn't create them this way because the way we are doing it is harsh on the ear, and introduces something called aliasing (<a href="http://en.wikipedia.org/wiki/Aliasing">http://en.wikipedia.org/wiki/Aliasing</a>).  In a later tutorial we'll see how to create a band limited saw tooth wave to make higher quality sound, but for now this will work file!

you can change how much is added to nValue to change the frequency of the resulting wave.  Add a smaller number to make it a lower frequency, add a higher number to make it a higher frequency.  We'll get into the math of more finely controlling frequency in another chapter so you can actually match your waves to notes you watch to hit.

<code> WriteWaveFile("outmono.wav",pData,nNumSamples * sizeof(pData[0]),nNumChannels,nSampleRate,sizeof(pData[0])*8);</code>

delete[] pData;
Lastly we write our wave file and free our memory.

Tada!  All done, we have a sawtooth mono wave file written out, give it a listen!

<a href="https://demofox2.files.wordpress.com/2012/05/outmono.wav" title="DIY Synthesizer Chapter 1: outmono.wav">DIY Synthesizer Chapter 1: outmono.wav</a>
<h2>Writing a Stereo File</h2>
The only thing that has really changed in the stereo file is that there are 2 channels instead of 1, and how we generate the audio data is slightly different.  Since there are 2 channels, one for left, one for right, there is actually double the audio data for the same sample rate and time length wave file, since it needs a full set of data for each channel.

The audio data itself is interleaved, meaning that the first audio sample is for the left channel, the second sample is for the right channel, the third sample is for the left channel, and so on.

Here's how the audio is generated:

<code> int32 nValue1 = 0;
int32 nValue2 = 0;
for(int nIndex = 0; nIndex &lt; nNumSamples; nIndex += 2)
{
<span class="Apple-tab-span" style="white-space: pre">	</span>nValue1 += 8000000;
<span class="Apple-tab-span" style="white-space: pre">	</span>nValue2 += 12000000;
<span class="Apple-tab-span" style="white-space: pre">	</span>pData[nIndex] = nValue1;    //left channel
<span class="Apple-tab-span" style="white-space: pre">	</span>pData[nIndex+1] = nValue2;  //right channel
}
</code>

Note that for the right channel we write a different frequency wave.  I did this so that you can tell the difference between this and the mono file.  Play around with the values and try muting one channel or the other to convince yourself that it really is a stereo file!

<a href="https://demofox2.files.wordpress.com/2012/05/outstereo.wav" title="DIY Synthesizer Chapter 1: outstereo.wav">DIY Synthesizer Chapter 1: outstereo.wav</a>
<h2>Until Next Time...</h2>
That's all for chapter 1, thanks for reading.

Next up we'll talk about the basic wave forms - sine, square, saw, square, and noise - and we'll talk more about frequency and oscillators.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2012-05-14 23:35:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-15 07:35:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synthesizer-chapter-1-sound-output]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/outstereo.wav
1411244
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/outmono.wav
705644
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495610236;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:31;}i:1;a:1:{s:2:"id";i:7;}i:2;a:1:{s:2:"id";i:2001;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>478</wp:comment_id>
			<wp:comment_author><![CDATA[DIY Synth 2: Common Wave Forms | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-08 21:17:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-09 05:17:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; DIY Synth 1: Sound Output DIY Synth 3: Sampling, Mixing, and Band Limited Wave Forms &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DIY Synth 2: Common Wave Forms</title>
		<link>http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/</link>
		<pubDate>Sat, 19 May 2012 20:28:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/05/19/diy-synthesizer-chapter-2-common-wave-forms/</guid>
		<description></description>
		<content:encoded><![CDATA[This is a part of the <a href="http://blog.demofox.org/diy-synthesizer/" target="_blank">DIY Synthesizer</a> series of posts where each post is roughly built upon the knowledge of the previous posts. If you are lost, check the earlier posts!

This is the second chapter in a series of tutorials about programming your own synthesizer

In this chapter we'll talk about oscillators, and some common basic wave forms: Sine, Square, Saw, Triangle and Noise.

By the end, you should have enough knowledge to make some basic electronic melodies.

You can download the full source for this chapter here:  <a href="https://demofox2.files.wordpress.com/2012/05/maincpp.txt" title="DIY Synthesizer: Chapter 2 Source Code">DIY Synthesizer: Chapter 2 Source Code</a>
<h2>The Sine Wave</h2>
The sine wave is the basis of lots of things in audio synthesis.  It can be used on it's own to make sound, multiple sine waves can be combined to make other more complex wave forms (as we'll see in the next chapter) and it's also the basis of a lot of DSP theory and audio analysis.  For instance, there is something called Fourier Analysis where you can analyze some audio data and it will tell you what audio frequencies are in that sound data, and how strong each is (useful for advanced synthesis and digital signal processing aka DSP).  The math of how to get that information is based on some simple properties of sine waves.  More info can be found here: <a href="http://en.wikipedia.org/wiki/Fourier_analysis">http://en.wikipedia.org/wiki/Fourier_analysis</a>.

If we want to use a sine wave in our audio data, the first problem we hit is that sine has a value from -1 to 1, but our audio data from the last chapter is stored in a 32 bit int, which has a range of -2,147,483,648 to 2,147,483,647, and is unable to store fractional numbers.

The solution is to just map -1 to -2,147,483,648, and 1 to 2,147,483,647 and all the numbers in between represent fractional numbers between -1 and 1.  0.25 for instance would become 536,870,911.

If instead of 32 bits, we wanted to store the data in 16 bits, or 8 bits, we could do that as well.  After generating our floating point audio data, we just convert it differently to get to those 16 bits and 8 bits.  16 bits have a range of -32,768 to 32,767 so 0.25 would convert to 8191.  In 8 bits, wave files want UNSIGNED 8 bit numbers, so the range is 0 to 255.   In that case,  0.25 would become 158.

Note, in the code for this chapter, i modified WriteWaveFile to do this conversion for us so going forward we can work with floating point numbers only and not worry about bits per sample until we want to write the wave file.  When you call the function, you have to give it a template parameter specifying what TYPE you want to use for your samples.  The three supported types are uint8, int16 and int32.  For simple wave forms like those we are working with today, there is no audible difference between the 3, so all the samples just make 16 bit wave files.

So, we bust out some math and figure out here's how to generate a sine wave, respecting the sample rate and frequency we want to use:
<code>
//make a naive sine wave
for(int nIndex = 0; nIndex &lt; nNumSamples; ++nIndex)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>pData[nIndex] = sin((float)nIndex * 2 * (float)M_PI * fFrequency / (float)nSampleRate);
}
WriteWaveFile&lt;int16&gt;("sinenaive.wav",pData,nNumSamples,nNumChannels,nSampleRate);
</code>

That does work, and if you listen to the wave file, it does sound correct:
<a href="https://demofox2.files.wordpress.com/2012/05/sinenaive.wav" title="Naive Sine Wave Generation">Naive Sine Wave Generation</a>

It even looks correct:
<a href="https://demofox2.files.wordpress.com/2012/05/sinenaive.png" title="Naive Sine Wave"><img src="https://demofox2.files.wordpress.com/2012/05/sinenaive.png" alt="Naive Sine Wave" /></a>

There is a subtle problem when generating the sine wave that way though which we will talk about next.
<h2>Popping aka Discontinuity</h2>
The problem with how we generated the wave file only becomes apparent when we try to play two tones right next to each other, like in the following code segment:
<code>
//make a discontinuitous (popping) sine wave
for(int nIndex = 0; nIndex &lt; nNumSamples; ++nIndex)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>if(nIndex &lt; nNumSamples / 2)
<span style="white-space: pre" class="Apple-tab-span">	</span>{
<span style="white-space: pre" class="Apple-tab-span">		</span>float fCurrentFrequency = CalcFrequency(3,3);
<span style="white-space: pre" class="Apple-tab-span">		</span>pData[nIndex] = sin((float)nIndex * 2 * (float)M_PI * fCurrentFrequency / (float)nSampleRate);
<span style="white-space: pre" class="Apple-tab-span">	</span>}
<span style="white-space: pre" class="Apple-tab-span">	</span>else
<span style="white-space: pre" class="Apple-tab-span">	</span>{
<span style="white-space: pre" class="Apple-tab-span">		</span>float fCurrentFrequency = CalcFrequency(3,4);
<span style="white-space: pre" class="Apple-tab-span">		</span>pData[nIndex] = sin((float)nIndex * 2 * (float)M_PI * fCurrentFrequency / (float)nSampleRate);
<span style="white-space: pre" class="Apple-tab-span">	</span>}
}
WriteWaveFile&lt;int16&gt;("sinediscon.wav",pData,nNumSamples,nNumChannels,nSampleRate);<span style="white-space: pre" class="Apple-tab-span">	</span> </code>

Quick note about a new function shown here, called CalcFrequency.  I made that function so that you pass the note you want, and the octave you want, and it will return the frequency for that note.  For instance, to get middle C aka C4 (the tone all these samples use), you use CalcFrequency(3,3), which returns approximately 261.626.

Listen to the wave file generated and you can hear a popping noise where the tone changes from one frequency to the next: <a href="https://demofox2.files.wordpress.com/2012/05/sinediscon.wav" title="Discontinuous Sine Wave">Discontinuous Sine Wave</a>

So why is this?  The reason is because how we are generating our sine waves makes a discontinuity where the 2 wave files change.

Here you can see the point that the frequencies change and how a pretty small discontinuity can make a pretty big impact on your sound!  The sound you are hearing has an official name, called a "pop" (DSP / synth / other audio people will talk about popping in their audio, and discontinuity is the reason for it)

<a href="https://demofox2.files.wordpress.com/2012/05/sinediscon.png" title="Sine Wave Popping"><img src="https://demofox2.files.wordpress.com/2012/05/sinediscon.png" alt="Sine Wave Popping" /></a>

So how do we fix it?  Instead of making the sine wave be rigidly based on time, where for each point, we calculate the sine value with no regard to previous values, we use a "Free Spinning Oscillator".

That is a fancy way of saying we just have a variable keep track of the current PHASE (angle) that we are at in the sine wave for the current sample, and to get the next sample, we advance our phase based on the frequency at the time.  Basically our oscillator is a wheel that spins freely, and our current frequency just says how fast to turn the wheel (from wherever it is now) to get the value for the next sample.

Here's what the looks like in code:

<code>
//make a continuous sine wave that changes frequencies
for(int nIndex = 0; nIndex &lt; nNumSamples; ++nIndex)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>if(nIndex &lt; nNumSamples / 2)
<span style="white-space: pre" class="Apple-tab-span">	</span>{
<span style="white-space: pre" class="Apple-tab-span">		</span>float fCurrentFrequency = CalcFrequency(3,3);
<span style="white-space: pre" class="Apple-tab-span">			</span>fPhase += 2 * (float)M_PI * fCurrentFrequency/(float)nSampleRate;</code>

<code><span style="white-space: pre" class="Apple-tab-span">		</span>while(fPhase &gt;= 2 * (float)M_PI)
<span style="white-space: pre" class="Apple-tab-span">			</span>fPhase -= 2 * (float)M_PI;</code>

<code><span style="white-space: pre" class="Apple-tab-span">		</span>while(fPhase &lt; 0)
<span style="white-space: pre" class="Apple-tab-span">			</span>fPhase += 2 * (float)M_PI;</code>

<code><span style="white-space: pre" class="Apple-tab-span">		</span>pData[nIndex] = sin(fPhase);
<span style="white-space: pre" class="Apple-tab-span">	</span>}
<span style="white-space: pre" class="Apple-tab-span">	</span>else
<span style="white-space: pre" class="Apple-tab-span">	</span>{
<span style="white-space: pre" class="Apple-tab-span">		</span>float fCurrentFrequency = CalcFrequency(3,4);
<span style="white-space: pre" class="Apple-tab-span">		</span>fPhase += 2 * (float)M_PI * fCurrentFrequency/(float)nSampleRate;</code>

<code><span style="white-space: pre" class="Apple-tab-span">		</span>while(fPhase &gt;= 2 * (float)M_PI)
<span style="white-space: pre" class="Apple-tab-span">			</span>fPhase -= 2 * (float)M_PI;</code>

<code><span style="white-space: pre" class="Apple-tab-span">		</span>while(fPhase &lt; 0)
<span style="white-space: pre" class="Apple-tab-span">			</span>fPhase += 2 * (float)M_PI;</code>

<code></code><code></code><code></code><code></code><code></code><code></code><code><span style="white-space: pre" class="Apple-tab-span">		</span>pData[nIndex] = sin(fPhase);
<span style="white-space: pre" class="Apple-tab-span">	</span>}
}
WriteWaveFile&lt;int16&gt;("sinecon.wav",pData,nNumSamples,nNumChannels,nSampleRate);
</code>

Note that we keep the phase between 0 and 2 * PI.  There's no mathematical reason for needing to do this, but in floating point math, if you let a value get too large, it starts to lose precision.  That means, that if you made a wave file that lasted a long time, the audio would start to degrade the longer it played.  I also use a while loop instead of a regular if statement, because if someone uses very large frequencies, you can pass 2 * PI a couple of times in a single sample.  Also, i check that it's above zero, because it is valid to use negative frequency values!  All stuff to be mindful of when making your own synth programs (:

Here's what the generated wave file sounds like, notice the smooth transition between the two notes:
<a href="https://demofox2.files.wordpress.com/2012/05/sinecon.wav" title="Continuous sine wave">Continuous Sine Wave</a>

And here's what it looks like visually where the wave changes frequency, which you can see is nice and smooth (the bottom wave).  The top wave is the popping sine wave image again at the same point in time for reference.  On the smooth wave it isn't even visually noticeable that the frequency has changed.

<a href="https://demofox2.files.wordpress.com/2012/05/sinegood.png" title="Continuous Frequency Change"><img src="https://demofox2.files.wordpress.com/2012/05/sinegood.png" alt="Continuous Frequency Change" /></a>

One last word on this... popping is actually sometimes desired and can help make up a part of a good sound.  For instance, some percussion sounds can make use of popping to sound more appropriate!
<h2>Sine Wave Oscillator</h2>
For our final incarnation of a sine wave oscillator, here's a nice simple helper function:
<code>
float AdvanceOscilator_Sine(float &amp;fPhase, float fFrequency, float fSampleRate)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>fPhase += 2 * (float)M_PI * fFrequency/fSampleRate;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>while(fPhase &gt;= 2 * (float)M_PI)
<span style="white-space: pre" class="Apple-tab-span">		</span>fPhase -= 2 * (float)M_PI;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>while(fPhase &lt; 0)
<span style="white-space: pre" class="Apple-tab-span">		</span>fPhase += 2 * (float)M_PI;</code>

<code></code><code></code><code></code><code><span style="white-space: pre" class="Apple-tab-span">	</span>return sin(fPhase);
}
</code>

You pass that function your current phase, the frequency you want, and the sample rate, and it will advance your phase, and return the value for your next audio sample.

Here's an example of how to use it:
<code>
//make a sine wave
for(int nIndex = 0; nIndex &lt; nNumSamples; ++nIndex)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>pData[nIndex] = AdvanceOscilator_Sine(fPhase,fFrequency,(float)nSampleRate);
}
WriteWaveFile&lt;int16&gt;("sine.wav",pData,nNumSamples,nNumChannels,nSampleRate);
</code>

Here's what it sounds like (nothing new at this point!):
<a href="https://demofox2.files.wordpress.com/2012/05/sine.wav" title="Vanilla Sine Wave">Vanilla Sine Wave</a>
<h2>Wave Amplitude, Volume and Clipping</h2>
You can adjust the AMPLITUDE of any wave form by multiplying each sample by a value.  Values greater than one increase the amplitude, making it louder, values less than one decrease the amplitude, making it quieter, and negative values flip the wave over, but also have the ability to make it quieter or louder.

One place people use negative amplitudes (volumes) is for noise cancellation.  If you have a complex sound that has some noise in it, but you know the source of the noise, you can take that noice, multiply it by -1 to get a volume of -1, and ADD IT (or MIX IT) into the more complex sound, effectively removing the noise from the sound.  There are other uses too but this is one concrete, real world example.

This code sample generates a quieter wave file:
<code>
//make a quieter sine wave
for(int nIndex = 0; nIndex &lt; nNumSamples; ++nIndex)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>pData[nIndex] = AdvanceOscilator_Sine(fPhase,fFrequency,(float)nSampleRate) * 0.4f;
}
WriteWaveFile&lt;int16&gt;("sinequiet.wav",pData,nNumSamples,nNumChannels,nSampleRate);
</code>

And here's what that sounds like:
<a href="https://demofox2.files.wordpress.com/2012/05/sinequiet.wav" title="Vanilla Sine Wave - Quiet">Vanilla Sine Wave - Quiet</a>

And here's what that looks like:
<a href="https://demofox2.files.wordpress.com/2012/05/sinequiet.png" title="Sine Quiet"><img src="https://demofox2.files.wordpress.com/2012/05/sinequiet.png" alt="Sine Quiet" /></a>

If you recall though, when we write a wave file, we map -1 to the smallest int number we can store, and 1 to the highest int number we can store.  What happens if we make something too loud, so that it goes above 1.0 or below -1.0?

One way to fix this would be to "Normalize" the sound data.  To normalize it, you would loop through each sample in the stream and find the highest absolute value sample.  For instance if you had 3 samples: 1.0, -1.2, 0.8,  the highest absolute sample value would be 1.2.

Once you have this value, you loop through the samples in the stream and divide by this number.  After you do this, every sample in the stream will be within the range -1 to 1.  Note that if you had any data that would be clipping, this process has the side effect of making your entire stream quieter since it reduces the amplitude of every sample.  If you didn't have any clipping data, this process has the side effect of making your entire stream louder because it increases the amplitude of every sample.

Another way to deal with it is to just clamp the values to the -1, 1 range.  In the case of a sine wave, that means we chop off the top and/or the bottom of the wave and there's just a flat plateau where the numbers went out of range.

This is called clipping, and along with popping are 2 of the main problems people have with audio quality degradation.  Aliasing is a third, and is something we address in the next chapter by the way! (<a href="http://en.wikipedia.org/wiki/Aliasing">http://en.wikipedia.org/wiki/Aliasing</a>)

Here's some code for generating a clipping sine wave:
<code>
//make a clipping sine wave
for(int nIndex = 0; nIndex &lt; nNumSamples; ++nIndex)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>pData[nIndex] = AdvanceOscilator_Sine(fPhase,fFrequency,(float)nSampleRate) * 1.4f;
}
WriteWaveFile&lt;int16&gt;("sineclip.wav",pData,nNumSamples,nNumChannels,nSampleRate);
</code>

And here's what it sounds like:
<a href="https://demofox2.files.wordpress.com/2012/05/sineclip.wav" title="Vanilla Sine Wave - Clipping">Vanilla Sine Wave - Clipping</a>

Also, here's what it looks like:
<a href="https://demofox2.files.wordpress.com/2012/05/sineclip.png" title="Clipping Sine Wave"><img src="https://demofox2.files.wordpress.com/2012/05/sineclip.png" alt="Clipping Sine Wave" /></a>

Note that in this case, it doesn't necessarily sound BAD compared to a regular, non clipping sine wave, but it does sound different.  That might be a good thing, or a bad thing, depending on your intentions.  With more complex sounds, like voice, or acoustic music, this will usually make it sound terrible.  Audio engineers have to carefully control the levels (volumes) of the channels being mixed (added) together to make sure the resulting output doesn't go outside of the valid range and cause clipping.  Also, in analog hardware, going out of range can cause damage to the devices if they aren't built to protect themselves from it!

In the case of real time synthesis, as you might imagine, normalizing wave data is impossible to do because it requires that you know all the sound data up front to be able to normalize the data.  In real time applications, besides just making sure the levels keep everything in range, you also have the option of using a compressor which sort of dynamically normalizes on the fly.  Check this out for more information: <a href="http://en.wikipedia.org/wiki/Dynamic_range_compression">http://en.wikipedia.org/wiki/Dynamic_range_compression</a>
<h2>Square Wave Oscillator</h2>
Here's the code for the square wave oscillator:
<code>
float AdvanceOscilator_Square(float &amp;fPhase, float fFrequency, float fSampleRate)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>fPhase += fFrequency/fSampleRate;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>while(fPhase &gt; 1.0f)
<span style="white-space: pre" class="Apple-tab-span">		</span>fPhase -= 1.0f;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>while(fPhase &lt; 0.0f)
<span style="white-space: pre" class="Apple-tab-span">		</span>fPhase += 1.0f;</code>

<code></code><code></code><code></code><code><span style="white-space: pre" class="Apple-tab-span">	</span>if(fPhase &lt;= 0.5f)
<span style="white-space: pre" class="Apple-tab-span">		</span>return -1.0f;
<span style="white-space: pre" class="Apple-tab-span">	</span>else
<span style="white-space: pre" class="Apple-tab-span">		</span>return 1.0f;
}
</code>

Note that we are using the phase as if it's a percentage, instead of an angle.  Since we are using it differently, that means if you switch from sine wave to square wave, there will be a discontinuity (a pop).  However, in practice this happens anyways almost all the time because unless you change from sine to square at the very top or bottom of the sine wave, there will be discontinuity anyways.  In reality, this really doesn't matter, but you could "fix" it to switch only on those boundaries, or you could use "cross fading" or "blending" to fade one wave out (decrease amplitude from 1 to 0), while bringing the new wave in (increase amplitude from 0 to 1), adding them together to get the output.  Doing so will make a smooth transition but adds some complexity, and square waves by nature constantly pop anyways - it's what gives them their sound!

Here's what a square wave sounds like and looks like:
<a href="https://demofox2.files.wordpress.com/2012/05/square.wav" title="Square Wave">Square Wave</a>
<a href="https://demofox2.files.wordpress.com/2012/05/square.png" title="Square Wave"><img src="https://demofox2.files.wordpress.com/2012/05/square.png" alt="Square Wave" /></a>
<h2>Saw Wave Oscillator</h2>
We used the saw wave in chapter one.  Here's the code for a saw wave oscillator:
<code>
float AdvanceOscilator_Saw(float &amp;fPhase, float fFrequency, float fSampleRate)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>fPhase += fFrequency/fSampleRate;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>while(fPhase &gt; 1.0f)
<span style="white-space: pre" class="Apple-tab-span">		</span>fPhase -= 1.0f;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>while(fPhase &lt; 0.0f)
<span style="white-space: pre" class="Apple-tab-span">		</span>fPhase += 1.0f;</code>

<code></code><code></code><code></code><code><span style="white-space: pre" class="Apple-tab-span">	</span>return (fPhase * 2.0f) - 1.0f;
}
</code>

Here's what a saw wave looks and sounds like:
<a href="https://demofox2.files.wordpress.com/2012/05/saw.wav" title="Saw Wave Audio">Saw Wave</a>
<a href="https://demofox2.files.wordpress.com/2012/05/saw.png" title="Saw Wave"><img src="https://demofox2.files.wordpress.com/2012/05/saw.png" alt="Saw Wave" /></a>

Note that sometimes saw waves point the other direction and the "drop off" is on the left instead of on the right, and the rest of the way descends instead of rises but as far as I have seen, there is no audible or practical difference.
<h2>Triangle Wave Oscillator</h2>
A lot of synths don't even bother with a triangle wave, and those that do, are just for approximations of a sine wave.  A triangle wave sounds a lot like a sine wave and looks a bit like it too.

Here's the code for a triangle wave oscillator:
<code>
float AdvanceOscilator_Triangle(float &amp;fPhase, float fFrequency, float fSampleRate)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>fPhase += fFrequency/fSampleRate;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>while(fPhase &gt; 1.0f)
<span style="white-space: pre" class="Apple-tab-span">		</span>fPhase -= 1.0f;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>while(fPhase &lt; 0.0f)
<span style="white-space: pre" class="Apple-tab-span">		</span>fPhase += 1.0f;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>float fRet;
<span style="white-space: pre" class="Apple-tab-span">	</span>if(fPhase &lt;= 0.5f)
<span style="white-space: pre" class="Apple-tab-span">		</span>fRet=fPhase*2;
<span style="white-space: pre" class="Apple-tab-span">	</span>else
<span style="white-space: pre" class="Apple-tab-span">		</span>fRet=(1.0f - fPhase)*2;</code>

<code></code><code></code><code></code><code></code><code><span style="white-space: pre" class="Apple-tab-span">	</span>return (fRet * 2.0f) - 1.0f;
}
</code>

Here's what it looks and sounds like:
<a href="https://demofox2.files.wordpress.com/2012/05/triangle.wav" title="Triangle Wave">Triangle Wave</a>
<a href="https://demofox2.files.wordpress.com/2012/05/triangle.png" title="Triangle Wave"><img src="https://demofox2.files.wordpress.com/2012/05/triangle.png" alt="Triangle Wave" /></a>
<h2>Noise Oscillator</h2>
Believe it or not, even static has it's place too.  It's used sometimes for percussion (put an envelope around some static to make a "clap" sound), it can be used as a low frequency oscillator aka LFO (the old "hold and sample" type stuff) and other things as well.  Static is just random audio samples.

The code for a noise oscillator is slightly different than the others.  You have to pass it the last sample generated (you can pass 0 if it's the first sample) and it will continue returning that last value until it's time to generate a new random number.  It determines when it's time based on the frequency you pass in.  A higher frequency mean more random numbers will be chosen in the same amount of audio data while a lower frequency means that fewer random numbers will be chosen.

At lower frequencies (like in the sample), it kind of sounds like an explosion or rocket ship sound effect from the 80s which is fun :P

Here's the code:
<code>
float AdvanceOscilator_Noise(float &amp;fPhase, float fFrequency, float fSampleRate, float fLastValue)
{
<span style="white-space: pre" class="Apple-tab-span">	</span>unsigned int nLastSeed = (unsigned int)fPhase;
<span style="white-space: pre" class="Apple-tab-span">	</span>fPhase += fFrequency/fSampleRate;
<span style="white-space: pre" class="Apple-tab-span">	</span>unsigned int nSeed = (unsigned int)fPhase;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>while(fPhase &gt; 2.0f)
<span style="white-space: pre" class="Apple-tab-span">		</span>fPhase -= 1.0f;</code>

<code><span style="white-space: pre" class="Apple-tab-span">	</span>if(nSeed != nLastSeed)
<span style="white-space: pre" class="Apple-tab-span">	</span>{
<span style="white-space: pre" class="Apple-tab-span">		</span>float fValue = ((float)rand()) / ((float)RAND_MAX);
<span style="white-space: pre" class="Apple-tab-span">		</span>fValue = (fValue * 2.0f) - 1.0f;</code>

<code><span style="white-space: pre" class="Apple-tab-span">		</span>//uncomment the below to make it slightly more intense
<span style="white-space: pre" class="Apple-tab-span">		</span>/*
<span style="white-space: pre" class="Apple-tab-span">		</span>if(fValue &lt; 0)
<span style="white-space: pre" class="Apple-tab-span">			</span>fValue = -1.0f;
<span style="white-space: pre" class="Apple-tab-span">		</span>else
<span style="white-space: pre" class="Apple-tab-span">			</span>fValue = 1.0f;
<span style="white-space: pre" class="Apple-tab-span">		</span>*/</code>

<code></code><code></code><code></code><code></code><code><span style="white-space: pre" class="Apple-tab-span">		</span>return fValue;
<span style="white-space: pre" class="Apple-tab-span">	</span>}
<span style="white-space: pre" class="Apple-tab-span">	</span>else
<span style="white-space: pre" class="Apple-tab-span">	</span>{
<span style="white-space: pre" class="Apple-tab-span">		</span>return fLastValue;
<span style="white-space: pre" class="Apple-tab-span">	</span>}
}
</code>

Here's what it looks and sounds like:
<a href="https://demofox2.files.wordpress.com/2012/05/noise.wav" title="Noise Audio">Noise</a>
<a href="https://demofox2.files.wordpress.com/2012/05/noise.png" title="Noise Audio"><img src="https://demofox2.files.wordpress.com/2012/05/noise.png" alt="Noise Audio" /></a>

I think it kind of looks like the Arizona desert :P

As a quick aside, i have the random numbers as random floating point numbers (they can be anything between -1.0 and 1.0).  Another way to generate noise is to make it so it will choose only EITHER -1 or 1 and nothing in between.  It gives a slightly harsher sound.  The code to do that is in the oscillator if you want to try it out, it's just commented out.  There are other ways to generate noise too (check out "pink noise" <a href="http://en.wikipedia.org/wiki/Pink_noise">http://en.wikipedia.org/wiki/Pink_noise</a>) but this ought to be good enough for our immediate needs!
<h2>More Exotic Wave Forms</h2>
Two other oscillators I've used on occasion is the squared sine wave and the rectangle wave.

To create a "squared sine wave" all you need to do is multiply each sample by itself (square the audio sample).  This makes a wave form that is similar to sine waves, but a little bit different, and sounds a bit different too.

A rectangle wave is created by making it so the wave spends either more or less time in the "up" or "down" part of the wave.  Instead of it being 50% of the time in "up", and 50% of the time in "down" you can make it so it spends 80% of the time in up, and 20% of the time in down.  It makes it sound quite a bit different, and the more different the percentages are, the "brighter" it sounds.

Also, you can add multiple wave form samples together to get more interesting wave forms (like adding a triangle and a square wave of the same frequency together, and reducing the amplitude to avoid clipping).  That's called additive synthesis and we'll talk more about that next chapter, including how to make more correct wave forms using sine waves to avoid aliasing.

You can also multiply wave forms together to create other, more interesting waves.  Strictly speaking this is called AM synthesis (amplitude modulation synthesis) which is also sometimes known as ring modulation when done a certain way.

As you can see, there are a lot of different ways to create oscillators, and the wave forms are just limited by your imagination.  Play around and try to make your own oscillators and experiment!
<h2>Final Samples</h2>
Now we have the simple basics down for being able to create music.  here's a small "song" that is generated in the sample code:
<a href="https://demofox2.files.wordpress.com/2012/05/songnopop.wav" title="Simple Song">Simple Song</a>

And just to re-inforce how important keeping your wave data continuous is, here's the same wave file, but about 0.75 seconds in a put a SINGLE -1.0 sample where it doesn't belong.  a single sample wrong when there's 44100 samples per second and look how much it affects the audio.
<a href="https://demofox2.files.wordpress.com/2012/05/song.wav" title="Simple Song With Pop">Simple Song With Pop</a>
<h2>Until Next Time...</h2>
Next up we will talk about "aliasing" and how to avoid it, making much better sounding saw, square and triangle waves that are less harsh on the ears.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date><![CDATA[2012-05-19 12:28:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-05-19 20:28:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synthesizer-chapter-2-common-wave-forms]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/noise.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/sineclip.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/sinequiet.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/song.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/songnopop.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/triangle.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/saw.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/square.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/sine.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/sinecon.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/sinediscon.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/05/sinenaive.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495521062;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:31;}i:1;a:1:{s:2:"id";i:3;}i:2;a:1:{s:2:"id";i:2001;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>479</wp:comment_id>
			<wp:comment_author><![CDATA[DIY Synth 1: Sound Output | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2012/05/14/diy-synthesizer-chapter-1-sound-output/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-08 21:23:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-09 05:23:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; MoriRT: Pixel and Geometry Caching to Aid Real Time Raytracing DIY Synth 2: Common Wave Forms &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>DIY Synth 3:  Sampling, Mixing, and Band Limited Wave Forms</title>
		<link>http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/</link>
		<pubDate>Tue, 19 Jun 2012 05:07:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/</guid>
		<description></description>
		<content:encoded><![CDATA[This is a part of the <a href="http://blog.demofox.org/diy-synthesizer/" target="_blank">DIY Synthesizer</a> series of posts where each post is roughly built upon the knowledge of the previous posts. If you are lost, check the earlier posts!

This it the third installment of a series of tutorials on how to program your own synthesizer.

In this chapter we'll continue on from the last chapter, and talk about a way to generate simple wave forms that don't have aliasing problems.  We'll also talk about sampling, mixing and end with a somewhat realistic song made with samples and our very own platform independent synthesizer code.

You can download the full source code and source wave files from the link below.  The code got a bit more complex so there's a zip file instead of a stand alone main.cpp.   Also, it's not the cleanest, best organized code in the world - sorry about that! - but hopefully it'll be ok for the purposes of this tutorial (:

<a href="https://demofox2.files.wordpress.com/2012/06/diysynth3.zip" title="DIY Synthesizer: Chapter 3 Source Code">DIY Synthesizer: Chapter 3 Source Code</a>

If you don't want to wait til the end of the chapter to hear the sample song, check it out here:

<a href="https://demofox2.files.wordpress.com/2012/06/lamentoftimcurry.mp3" title="The Lament Of Tim Curry">The Lament Of Tim Curry</a>
<h2>Aliasing</h2>
As mentioned in the previous tutorial, the wave forms we were generating have aliasing problems.  Aliasing is an audio artifact where unintended audio frequencies appear in audio data due to trying to encode frequencies that are too high for the sample rate.  Wikipedia describes Aliasing pretty well, check it out for more info: <a href="http://en.wikipedia.org/wiki/Aliasing">Aliasing</a>.

Sound is pressure waves conducted in the air, and at the core, audio engineers and mathematicians like to think of all sound as being made up of sine waves at different frequencies and amplitudes (volumes).

If you have a smooth / bumpy wave form, you could picture building it up with sine waves pretty easily.

If on the other hand, you have something with sharp corners, like a saw wave, a triangle wave or a square wave, it gets more difficult.

In fact, to make a "perfect corner" out of sine waves, it would take an infinite amount of sine waves of ever diminishing frequency and amplitude to get the perfectly sharp corner.

In chapter one I briefly mentioned that the maximum frequency you can store in audio data is half the sample rate.  This frequency is called the Nyquist frequency and you can read more about it here: <a href="http://en.wikipedia.org/wiki/Nyquist_frequency">Nyquist Frequency</a> and here: <a href="http://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem">Nyquist-Shannon sampling theorem</a>.

Aliasing occurs whenever you try to store a frequency higher than the nyquist frequency.  When you do that, your audio data is not what it ought to be (a higher frequency actually appears to be a lower frequency), causing audio artifacts.  If you've ever seen a car's wheels spinning too slowly or backwards in a tv commercial, that is the exact same problem.

So, when making a "perfect corner" on a saw, triangle, or square wave, and having to use infinitely high frequencies to make that corner, you can bet that an infinite frequency is above Nyquist, and that it will cause some aliasing.

So, to make band limited wave forms for saw, square, and triangle, we just add together the sine waves UP TO nyquist, and then stop, instead of continuing on to infinity (which would also take far too long to calculate hehe).  That makes a much cleaner, smoother sound, that is a lot easier on the ears.

A friend of mine who wishes to remain nameless has been a good sport in listening to my audio tracks over the years and for a long, long time she would complain that my songs hurt her ears.  I tried putting reverb and flange on my songs to try to mellow them out, and that helped a little, but even then, it still hurt her ears.  After I started using band limited wave forms, my songs stopped hurting her ears and my tones started sounding a lot smoother and richer, and more "professional".

So, if you don't want people's ears to bleed when they hear your tunes, I recommend band limited wave forms!
<h2>Band Limited Sine Wave</h2>
The sine wave does not have a band limited form, since since itself IS bandlimited by definition.  So, a band limited sine wave is just the sine wave itself.

Onto the next!
<h2>Band Limited Saw Wave</h2>
Wikipedia has a great article <a href="http://en.wikipedia.org/wiki/Sawtooth_wave">Sawtooth wave</a> which says:
<blockquote>A sawtooth wave's sound is harsh and clear and its spectrum contains both even and odd harmonics of the fundamental frequency. Because it contains all the integer harmonics, it is one of the best waveforms to use for synthesizing musical sounds, particularly bowed string instruments like violins and cellos, using subtractive synthesis.</blockquote>
What they mean by that (and what the heavy math formulas on that page say) is that if you have a saw wave of frequency 100,  that means it contains a sine wave of frequency 100 (1 * fundamental frequency), another of frequency 200 (2 * fundamental frequency), another of 300 (3 * fundamental frequency) and so on into infinity.

The amplitude (volume) of each sine wave (harmonic) is 1 over the harmonic number.  So in our example, the sine wave at frequency 100 has an amplitude of 1 (1/1).  The sine wave at frequency 200 has an amplitude of 0.5 (1/2), the sine wave at frequency 300 has an amplitude of 0.333 (1/3) and so on into infinity.

After that you'll need to multiply your sample by 2 / PI to get back to a normalized amplitude.

There's a function in the sample code called AdvanceOscilator_Saw_BandLimited() that you can use to generate a band limited saw wave sample.  It has an optional parameter where you can tell it how many harmonics to use, but if you omit that parameter, it'll use as many as it can without going over Nyquist.

Here's how a band limited saw wave looks and sounds compared to a non band limited saw wave, like the ones we created in the last chapter.

<a href="https://demofox2.files.wordpress.com/2012/06/saw.wav" title="Chapter 3 Saw">Chapter 3 Saw</a>

<a href="https://demofox2.files.wordpress.com/2012/06/sawbl.wav" title="Chapter 3 Saw Band Limited">Chapter 3 Saw Band Limited</a>

<a href="https://demofox2.files.wordpress.com/2012/06/ch3blsaw.png" title="Chapter 3 Saw Wave"><img src="https://demofox2.files.wordpress.com/2012/06/ch3blsaw.png" alt="Chapter 3 Saw Wave" /></a>
<h2>Band Limited Square Wave</h2>
Wikipedia has a good article on square wave's too here: <a href="http://en.wikipedia.org/wiki/Square_wave">Square Wave</a> which says:
<blockquote>Note that the square wave contains only odd-integer harmonic frequencies (of the form 2π(2k-1)f), in contrast to the sawtooth wave and real-world signals, which contain all integer harmonics.</blockquote>
What this means is that if you were trying to make a square wave at frequency 100, unlike a saw wave which has sine waves at frequencies 100, 200, 300, 400 and so on, a square wave is made up of sine waves of frequencies 100, 300, 500 and 700.

Like the saw wave, however, the amplitude of each frequency is the reciprocal of the multiple of the frequency.  So, the sine wave at frequency 100 has an amplitude of 1/1, the sine wave at frequency 300 has an amplitude of 1/3, the sine wave at frequency 500 has an amplitude of 1/5.

After that, you need to multiply by 4/PI to get back to a normalized amplitude.

The function to generate this wave form in the sample code is called AdvanceOscilator_Square_BandLimited().

Here's how a band limited square wave looks and sounds compared to a non band limited square wave, like the ones we created in the last chapter.

<a href="https://demofox2.files.wordpress.com/2012/06/square.wav" title="Chapter 3 Square">Chapter 3 Square</a>

<a href="https://demofox2.files.wordpress.com/2012/06/squarebl.wav" title="Chapter 3 Square Band Limited">Chapter 3 Square Band Limited</a>

<a href="https://demofox2.files.wordpress.com/2012/06/ch3square.png" title="Chapter 3 square Wave"><img src="https://demofox2.files.wordpress.com/2012/06/ch3square.png" alt="Chapter 3 square Wave" /> </a>
<h2>Band Limited Triangle Wave</h2>
The triangle wave is often used as a cheap approximation of a sine wave so it's kind of funny making a more expensive (computationally) version of a triangle wave out of sine waves.

The wikipedia article for the triangle wave is here: <a href="http://en.wikipedia.org/wiki/Triangle_wave">Triangle Wave</a> and it says:
<blockquote>It is possible to approximate a triangle wave with additive synthesis by adding odd harmonics of the fundamental, multiplying every (4n−1)th harmonic by −1 (or changing its phase by π), and rolling off the harmonics by the inverse square of their relative frequency to the fundamental.</blockquote>
Ok so in English what that means is that a triangle wave is a lot like a square wave, but every other harmonic, we subtract, instead of adding it.  Also, instead of the amplitude (volume) of a sine wave being the reciprocal of the multiple of the frequency, the amplitude is the reciprocal of the SQUARE of the multiple of the frequency.

So that means for a 100hz frequency triangle wave, we would...

make a sine wave of 100hz at 1/1 amplitude
Subtract a sine wave of 300hz at 1/9 amplitude
Add a sine wave of 500hz at 1/25 amplitude
Subtract a sine wave of 700hz at 1/49 amplitude

and so on til infinity (or Nyquist frequency)

After that you multiply by 8 / PI*PI to get back to a normalized amplitude.

The function to generate this wave form in the sample code is called AdvanceOscilator_Triangle_BandLimited().

Here's how a band limited triangle wave looks and sounds compared to a non band limited triangle wave, like the ones we created in the last chapter.

<a href="https://demofox2.files.wordpress.com/2012/06/triangle.wav" title="Chapter 3 Triangle">Chapter 3 Triangle</a>

<a href="https://demofox2.files.wordpress.com/2012/06/trianglebl.wav" title="Chapter 3 Triangle Band Limited">Chapter 3 Triangle Band Limited</a>

<a href="https://demofox2.files.wordpress.com/2012/06/ch3triangle.png" title="Chapter 3 Triangle Wave"><img src="https://demofox2.files.wordpress.com/2012/06/ch3triangle.png" alt="Chapter 3 Triangle Wave" /></a>
<h2>Band Limited Noise</h2>
In the last chapter we also talked about the "noise" wave form and I briefly mentioned that it had it's uses - such as in percussion sounds.

Is it possible to make a band limited version?  It is, but I'm not sure if it's really useful for anything, other than a strange sound (but then again, strange sounds is what synth is all about right?)

A quick aside - In this chapter so far, we've actually been talking about "Additive Synthesis" which is the process of adding multiple noises together to get an interesting result.  Specifically, we've been adding sine waves together to get band limited forms of a saw wave, a square wave and a triangle wave.  There is something else called "Subtractive Synthesis" where you carve away sounds with filters (such as a low pass filter, a high pass filter, a band pass filter, etc) to get your sound.  Another way to generate band limited wave forms is to make a pure, non band limited wave form, and then use a high pass filter to cut out the high frequencies of the sound (the ones generating the aliasing sounds).

In practice, it sounds the same either way you generate it.  Subtractive synthesis is just another way to approach the problem of aliasing and synth in general.  In fact, when you down sample a sound file (take it from a higher sample rate to a lower sample rate), you should apply a low pass filter first to get rid of any frequencies that would cause aliasing in the lower sample rate.

Anyways, to generate band limited noise, I figured I'd just make a sine wave that changes it's frequency once every 4000 samples (at a sample rate of 44,100, that means it changes it's frequency 10 times a second).

Here's what that looks and sounds like:

<a href="https://demofox2.files.wordpress.com/2012/06/randombeeps.wav" title="Chapter 3 Random Beeps">Chapter 3 Random Beeps</a>

<a href="https://demofox2.files.wordpress.com/2012/06/ch3beeps.png" title="Chapter 3 Beeps"><img src="https://demofox2.files.wordpress.com/2012/06/ch3beeps.png" alt="Chapter 3 Beeps" /></a>

Interesting audio, and band limited, but not quite noise, so here is the same thing, switching frequency every 40 samples instead of every 4000 samples.  That's about 1000 times a second .

<a href="https://demofox2.files.wordpress.com/2012/06/noisebl.wav" title="Chapter 3 Noise Wave">Chapter 3 Noise Wave</a>

<a href="https://demofox2.files.wordpress.com/2012/06/ch3noise.png" title="Chapter 3 Noise"><img src="https://demofox2.files.wordpress.com/2012/06/ch3noise.png" alt="Chapter 3 Noise" /></a>

It is technically noise, and it is band limited, but it sounds weird.  Like a tape player on fast forward or water flowing quickly or something.

I didn't make a function to generate that wave form, but the sample code does it "manually" if you want to make your own function.
<h2>Chapter 3 Song</h2>
So this chapter has a somewhat passable song as a culmination of the info from the tutorials so far.  You can check it out at the bottom of this article, but I wanted to give a quick overview of some other things that went into making it.

The song loads some sound files to use as samples.  It loads 3 percussion sounds for the drum parts, and two sound clips from a favorite movie of mine called "Legend" - starring Tim Curry as the devil, Mia Sara as a princess and Tom Cruise as a naturalist wildman who is friends with fairies and elves.  It's a really great movie i really recommend checking it out!

Anyways, it MIXES these sound effects with our generated synth tones by just adding the various sound sources together.  Mixing sounds is literally just adding them together.

When it loads up the wave files, it RESAMPLES them if necessary, meaning that if the sound file has a lower sample rate than the sound we want to render, it interpolates samples to make a higher sample rate.  If the sound file loaded has a higher sample rate than the sound we want to render, it drops samples to make a lower sample rate.  Check out the code for the details of how it does this, but it's really simple and pretty much works how you'd expect it to.  Note that if you down sample audio, you normally want to put it through a low pass filter to cut out any frequencies which would be above Nyquist, but my resampling code doesn't handle that.  It just aliases if there's a frequency that is too high for the sake of simplicity.

Another thing that happens when it loads each wave file is that it converts it to mono or stereo if needed, to match the format of the sound we want to render.  To convert from mono to stereo, it just duplicates the mono channel for the left and right channels, and to convert from stereo to mono, it just mixes (adds!) the left and right channel data together to get the mono channel data.  Intuition might tell you that adding the left and right channels together would make it louder, even maybe twice as loud, but in practice that doesn't happen.  Sounds mix together pretty darn well without getting way loud, especially if they are "real life" sounds (not synthesized wave forms) and not played at the exact same time.  Basically, the peaks (positive numbers) and valleys (negative numbers) in sound sources tend to cancel each other out and keep things in normal range.

Lastly, when loading a wave file, it normalizes the audio data so that our synth and the audio samples are all working in the same amplitude ranges of -1 to 1.  When normalizing, it also "re-centers" the audio data.  That is to say, if audio data was really quiet, but was always above the zero axis, it would move the data down to be centered on the zero axis before normalizing to make sure and maximize loudness.

In reality, we'd want to re-center the left and right channels individually, but I just do them together.  Also, you might want to normalize individual sections of the audio data at a time instead of normalizing the entire thing as one big chunk at the end.  There are a lot of good techniques and algorithms out there to do this, but this functionality is often called a compressor (to give you a place to start your research).

Note, you could easily play sound files backwards to see if they sync up with the wizard of oz, or give you instructions for some tasty brownies, but I didn't do that in this example code, I leave that up to you!

If you want to be able to read and write other sound formats besides wav files, you might check out libsndfile.  I use it in my own projects and it works pretty nicely!  You can find it at: <a href="http://www.mega-nerd.com/libsndfile/">libsndfile</a>
<h2>The Lament Of Tim Curry</h2>
Without further ado, here's this chapter's sample song.  The full source code and source wave files is in this chapter's source code zip file.  Check it out with headphones for a neat effect, the bass line floats between the left and right channels.  Enjoy!  And go watch Legend if you haven't seen it before!

<a href="https://demofox2.files.wordpress.com/2012/06/lamentoftimcurry.mp3" title="The Lament Of Tim Curry">The Lament Of Tim Curry</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date><![CDATA[2012-06-18 21:07:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-06-19 05:07:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synth-3-sampling-mixing-and-band-limited-wave-forms]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/06/noisebl.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/06/sawbl.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/06/saw.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/06/randombeeps.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/06/trianglebl.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/06/triangle.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/06/squarebl.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/06/square.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2012/06/lamentoftimcurry.mp3
3669577
audio/mpeg
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495580239;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3;}i:1;a:1:{s:2:"id";i:7;}i:2;a:1:{s:2:"id";i:2001;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Recording lagless demo videos of a laggy game</title>
		<link>http://blog.demofox.org/2012/09/09/recording-perfectly-lagless-audio-synchronized-video-of-your-game/</link>
		<pubDate>Mon, 10 Sep 2012 05:02:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/09/recording-perfectly-lagless-audio-synchronized-video-of-your-game/</guid>
		<description></description>
		<content:encoded><![CDATA[Often times when developing a game, you'll want to record a demo video to show to a publisher, show at E3, post on kickstarter, youtube, or other places to help generate interest or gain funding to keep your project going.

Unfortunately, the point in time that you need a video is often in the beginning of the project, when your game probably doesn't run very fast, or might have performance spikes, making it difficult to get a high quality video capture.

Many times, developers will have to have a performance push to get the game up to speed for a demo video, spending time on "demo hacks", which are often just throw away code for after the video is made.  I've been through a couple of these myself and they are not fun, but they are an unfortunate necessity.

This article will explain a fairly simple technique for getting a full speed recording of your game engine with perfectly synchronized sound, no matter what speed your game actually runs at, saving you time and effort, not having to waste time on demo hacks just to get a presentable video.

Playable demos are a whole other beast,  and you are on your own there, but if a video will suit your needs, you've come to the right place!

I've used this technique myself in a couple different games during development, and in fact included it as a feature of one PC game I shipped in the past, called "Line Rider 2:Unbound", so this is also a technique for adding video recording to any game you might want to add it to.
<h2>Out of the box solutions</h2>
There are various "out of the box" ways to record a video of your game, but they have some downsides which make them not so attractive.

For instance, you can get <a href="http://www.fraps.com/">fraps</a> which will record any application's audio and video and you could use that to record a video of your game.  The downside here is that if your game lags, so does the video, so we still have that problem.  Also, the act of recording competes with your game for resources, causing your game to run at an even lower FPS and making an even worse video.  Fraps is also limited to specific platforms, and you may be working on an unsupported platform.

lastly, if you want to include this feature of video recording in a shipped product, you will have to license fraps for that use, which may be prohibitive to your project's budget.

Other video recording software has the same or similar issues.
<h2>Rolling your own - Video</h2>
Making your own video recorder built into your game has some real easy to hit pitfalls that I want to talk about.

When considering only the video portion (not audio yet), our aim is to write all the frames to disk as individual image files (such as png, or raw uncompressed image files), and then after recording is done, use something like <a href="http://ffmpeg.org/">ffmpeg</a> to combine the frames into a video.  Writing a compressed image file (such as png or jpg) for each frame may save disk space, but may take longer for your computer to be able to process and write to disk.  You will likely find that a raw file format is more performant, at the cost of increase disk space usage, but hard drives are cheap these days and everyone has huge ones.  Also, at this point you probably want to use lossless image compression (such as png, or a raw image file) for your screen captures so that you don't have compression artifacts in your screen captures.  When you make a final video, you may choose a more highly compressed video format, and it may introduce it's own artifacts, but you want to keep your source files as clean as possible so that you don't introduce UNNECESSARY artifacts too early in the process.

If you dump each rendered frame to disk, the disk i/o can drag your game's frame rate down to a crawl.  You might think about having the disk write happen on another thread so the game isn't limited by the disk i/o, but then you'll have to keep a buffer of previous frames which will grow and grow and grow (since you are making frames faster than it can write to disk) until you run out of memory.  It's a losing battle for longer videos.

You could get a faster drive, configure a striped raid array, use a ram disk, or things like that, but why fix with hardware what you can fix in software?  Save yourself and your company some cash.

Similarly to the fraps problem, when you record video, that will likely affect the frame rate of your game as well, making it run slower, making a lower quality video because frames will be skipped - assuming you are using variable frame rate logic - making it so that you either have to have a "laggy" looking video as output, or your video will actually appear to speed up in the places that you encountered lag while recording, which is very odd looking and definitely not demoable.

The solution (which might be really obvious to the astute reader) is to make your game run your game's logic at a fixed rate, instead of making it be based on frame time.  For instance, instead of measuring the time between frames and using that delta to control logic (making things move farther when more time has passed etc), you just make your game act as if the same amount of time has always passed between your frames, such as ~16ms for a 60fps recording, or ~33ms for a 30fps recording.  IMPORTANT: make it only behave this way when in "recording mode".  You don't need to sacrifice variable frame rate logic just to get the ability to record nice videos.  Also, 30fps is fine for a video.  The more FPS your video has, the larger the video file will be.  Movie and TVs are something like 24 fps, so you don't need a 60 fps video for your game demo, 30 or less is just fine.

This way, it doesn't matter how long it took to render each frame, the game will generate a sequence of frames at whatever frame rate you would like your video to be in.  While recording the demo video, the game may run slowly, and be difficult to control if it's REALLY laggy, but at least the output video will be smooth and perfectly lagless.   Later in this article I present a possible solution to the problem of difficulty playing the game while recording.

Are we done at this point?  NO!  We haven't talked at all about audio, and as it turns out our audio is in a very odd state going this route.
<h2>Rolling your own - Audio</h2>
From the section above, we have a nice lagless video stream, but if we just recorded audio as it went, the audio would be out of sync with the frames.  This is because we recorded audio in real time, but we recorded the frames in variable time.

You could try to sync the audio in the right places with each frame, but then you'd have to speed up and slow down portions of your audio to hit the right frame numbers, which would make your audio sound really weird as it sped up and slowed down and changed pitch.

Definitely not demoable!  So what's the solution?

The solution is that while you are recording your video frames, you also make an audio timeline of what audio was triggered at which frame numbers.

For instance, if on frame 20, the player swung his sword and on frame 25 hit an exploding barrel, causing it to explode, your timeline would say "at frame 20, play the sword swing sound effect. at frame 25, play the exploding barrel sound effect".

I've found it really easy to capture an audio timeline by hooking into your game or engine's audio system itself, capturing all sound events.  It usually is not very difficult to implement this part.

After you have recorded all of your video frames, and have an audio timeline, the next step is to re-create the audio from the timeline, which means you need a way of doing "offline" audio mixing.

If you are using an audio library, check the documentation to see if it has an offline mode, many of them do, including the ever popular <a href="http://www.fmod.org/">fmod</a>.  If your audio library can't do it for you, there are various command line tools and audio libraries out there that can do this for you.  I believe portaudio (port mixer?) can do this for you, and also another open sourced program called <a href="http://sox.sourceforge.net/">sox</a>.

What you need to do is render each item in the audio timeline onto a cumulative audio stream.  If your video were a 30fps video, and a 500ms sound effect happened at frame 93, that means that you know this sound effect started at 3.1 seconds in (frame 93 * 33.33 miliseconds per frame) and lasts until 3.6 seconds (since it's 500ms long).   So, you'd mix that into the output audio stream at the appropriate point in time, and then rinse and repeat with the rest of the audio timeline items until you had the full audio stream for the video.

When you are done with this stage, you have your video frames and your audio stream.  With your video creation software (such as ffmpeg) you can combine these into a single video file which shows your game running perfectly at whatever frame rate you specified, and with perfectly synchronized audio.  It's a beautiful thing and definitely ready to demo to get some funding.
<h2>Recap</h2>
To recap, the steps for creating a perfect video recording of your game are:
<ol>
	<li>When in recording mode, make your game run at a fixed frame rate - no matter how long it really was between frames, lie to your game and tell it that 33.33ms have passed each frame for 30fps video or 16ms for 60fps video (or whatever other frame rate you want to run at)</li>
	<li>Write each rendered frame to disk as an uncompressed or lossless compression graphics file.</li>
	<li>While rendering each frame, build up a timeline of audio events that you can use to re-create the audio later.</li>
	<li>After all the frames are captured, render your audio timeline into an audio stream.</li>
	<li>After you have your audio stream and each video frame, use software such as ffmpeg to combine them into a perfect, lagless video.</li>
	<li>BLOW THE SOCKS OFF OF INVESTORS AND SECURE SOME FUNDING!</li>
</ol>
<h2>Bonus Points - Or making this feature a shippable feature of your game for players to use</h2>
At this point, the final product (the video) is as nice as it can possibly be.  However, the process of actually recording the video can be cumbersome because even though you are making a nice and smooth 30fps video, during recording it may be running at 2fps (depending on your machine) making it very difficult to control the game.  Also, in the final video it will appear that the user is traversing menus, inputting commands, and reacting at superhuman speeds.

A good way to handle this is instead of recording during play, what you do is record all the input that happens during the recording process.  This way you have an input timeline that is tied to frame numbers, the same way the audio timeline is tied to frame numbers.

When the recording process is done, you then put up a nice dialog for the end user saying something like "Rendering video please wait...." with a progress bar, and then re-simulate the user input that occurred during the recording phase, and render all those frames to disk (well, screen capture them as image files just like usual, just dont display them to the end user).

Since building an input timeline is relatively cheap computationally, you should have no slow down during the "recording" phase of the video while you (or the end user) is actually playing the game.

The "Gotcha" here is that your game needs to be deterministic for fixed rate time steps (or at least everything that really matters needs to be deterministic, maybe not particles or something) which can potentially be a bit tricky, but the upside is if you actually make this happen, you can record light weight playbacks as "videos" and have users share these feaux-videos with each other to watch playbacks of gameplay that other players had.  When you want to export these playbacks as real videos, you can put it through the regular video recording steps and spit out a full mpeg, suitable for sharing, uploading to youtube (from within the app perhaps even?) just like normal.  But, until you need to use the video outside of your application, you have very small files users can share with each other to view "videos" of in game gameplay.

Final tip: if doing this in windows, I've found that in recent versions of windows, doing  the screen capture using GDI functions instead of DirectX is actually WAY faster so use that if you can.  I'm thinking this must be because windows already has a screen cap in memory to show those little icons when you mouse over the minimized application or something.
<h2>That's all folks!</h2>
That's all there is to it.  With luck this will save some fellow engineers from having to crunch up some "demo hacks" to get performance up for an E3 demo video or the like.  If you have any questions or comments, drop me a line (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date><![CDATA[2012-09-09 21:02:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-10 05:02:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[recording-perfectly-lagless-audio-synchronized-video-of-your-game]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495386390;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:54;}i:1;a:1:{s:2:"id";i:5202;}i:2;a:1:{s:2:"id";i:3077;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cryptography 101: Hashing</title>
		<link>http://blog.demofox.org/2012/09/12/cryptography-101-hashing/</link>
		<pubDate>Thu, 13 Sep 2012 06:04:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/12/cryptography-101-hashing/</guid>
		<description></description>
		<content:encoded><![CDATA[Welcome to the first article in a series aimed to teach the basics of cryptography:
<ul>
	<li><a href="http://blog.demofox.org/2012/09/12/cryptography-101-hashing/">Cryptography 101: Hashing</a></li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-one-time-pad/">Cryptography 101: Encryption - One Time Pad</a></li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-symmetric-keys/">Cryptography 101: Encryption - Symmetric Keys</a></li>
	<li><a href="http://blog.demofox.org/2012/09/16/cryptography-101-encryption-asymmetric-keys/">Cryptography 101: Encryption - Asymmetric Keys</a></li>
	<li><a href="http://blog.demofox.org/2012/09/17/encryption-101-realistic-security/">Cryptography 101: Realistic Security</a></li>
</ul>
In this digital age, cryptography is more important than ever.  It's used to protect financial transactions, ensure the anonymity of political dissidents, protect private conversations, help prevent cheating in video games and many other things as well.

<strong>DISCLAIMER</strong>: These articles are meant for educational purposes only.  The methods explained here are meant only to illustrate the basic concepts of cryptography and may or may not be suitable in real world applications.  For serious applications such as financial transactions, I recommend hiring security professionals and also getting a lawyer involved.  Use this info and code at your own risk, I claim no responsibility!

If you want more in depth information about cryptography than these introductory articles provide, I highly recommend a book called <a href="http://www.amazon.com/Applied-Cryptography-Protocols-Algorithms-Edition/dp/0471117099/ref=sr_1_1?ie=UTF8&amp;qid=1347738044&amp;sr=8-1&amp;keywords=applied+cryptography">Applied Cryptography</a> by Bruce Schneier.  That book literally almost didn't get published because the NSA didn't want the info getting out into the public.  Yay for the 1st amendment!
<h2>Hashing in Computer Science</h2>
You may be familiar with the term "hashing" from computer science.  In computer science, a hash function is a function which takes input data, preforms some operations on it and spits out some (usually) smaller output data that can be used more or less as a unique identifier for the input data.

Common uses of hashing include:
<ul>
	<li>Hashing the contents of large files to be able to compare the hashes to quickly know if they are the same or different, instead of having to compare the files byte by byte.  This is especially useful when comparing files over a network connection.</li>
	<li>Hashing peices of data which are difficult or time consuming to compare (such as strings) and using the hashed value as a "look up key" within a database or array or list, so that you can look up items very quickly by their hash, instead of having to do more expensive string compares (or whatever other more complex comparison and lookup methods).</li>
</ul>
More info is available here: <a href="http://en.wikipedia.org/wiki/Hash_function">http://en.wikipedia.org/wiki/Hash_function</a>
<h2>Hashing in Cryptography</h2>
As you can probably guess, since hashing makes large pieces of data (such as entire files) into small pieces of data (often only a handful of bytes large), there are many pieces of larger source data that can result in the same smaller hashed data.  When this happens, it's called a hash collision and a good hash function will do it's best to minimize collisions for optimal performance.  The more output bits you have, the more "space" you have before a collision is unavoidable.

Often times, a good hashing algorithm will have 2 properties to minimize collisions...
<ol>
	<li>Small changes in input give large changes in output.  In other words, it's very sensitive to initial conditions and so is a chaotic function (<a href="http://en.wikipedia.org/wiki/Chaos_theory">http://en.wikipedia.org/wiki/Chaos_theory</a>)</li>
	<li>If you give it a set of well distributed random inputs, it should give a well distributed set of random outputs.  Heck, if you give it any set of (varying) inputs, it should give a well distributed set of random outputs ideally.  By random i mean no discernible patterns.</li>
</ol>
If these things aren't true, the hashed output can give clues as to the nature of the input, or, it can make it easier to provide input that hashes to the same output (which is the main way to attack hash based security).

For instance, if your hashing algorithm made an 8 bit hash (very small!) that always (or often) set the 7th and 8th bits to 1, that means effectively you really have a 6 bit hash, because 2 of the bits are almost always the same. In general, more bits means more security, since it's harder to get a hash collision on purpose.

Quick aside, can you think of something else with these properties?  Some deterministic algorithm that spits out chaotic, well distributed, seemingly random numbers based on (perhaps) non random input?  How about a pseudo random number generator?  There is a lot of crossover between these two types of algorithms and I find it pretty neat that they are working towards almost the same goals, but that they are used for such different things.

Also as you might guess, hashes are one way.  If you are given hashed data, it's difficult or impossible to work backwards and get the source data back again.  In fact, you often hear hash functions referred to as "one way hash functions" because of this.  This is important because in cryptographical uses you want a hash to reveal as little information about the source data as possible.
<h2>Example Uses of Cryptographic Hashing</h2>
Here's two examples of places where hashing comes in handy.  One is for protecting passwords, and the other is for protecting save game data of video games.
<h4>Protecting Passwords</h4>
For protecting passwords, many times when you have a large online service such as facebook, youtube, etc, there will be a central database (cluster) storing everyone's account information, including their passwords.

If someone were to hack a server and get access to the user database table, they would have everyone's username and password and the users would be screwed.

A way that people address this is to store the HASH of a each password in the database table instead of the password itself.  When people log in, the server takes the password that it received from the user, puts it through the hash algorithm, and compares it to the hash stored in the database.  If the hashes match, they know (can assume with a good level of certainty) that the user is who they claim to be.  However, if this server gets hacked and the database is compromised, the attacker won't have the passwords, they will only have the hashed passwords.  The attacker will have to try and brute force the hashes, which is essentially the same as having to brute force the password - except that they can do it on their own computer in their own time of course, which makes it easier and untraceable unfortunately.  Hopefully if this happens, the service can tell their users to change their passwords before the attacker is able to crack many of the logins.
<h4>Protecting Save Game Data</h4>
For protecting save game data, hashes are used in conjunction with encryption to prevent both read and write access to the save game data.

To write this protected save game data, you first hash the unencrypted save game data, and write that to the front of the file.  Next, you encrypt the save game data and write that after the hash.

When reading save game data, you read in both the hash and the encrypted save game data.  Next you unencrypt the save game data and hash it.  Then, you can compare the hash you made with the hash stored in the file and if they don't match, you know that someone tried to tamper with the file and you can consider it invalid / corrupt.

Also, since the save game data is encrypted, it's difficult for a user to read the data in your save game data.  Thus you protect the file from both reading and writing.

It's possible that the person could modify the data in such a way that it will unencrypt and then hash to the same hash value stored in the beginning of the file, but it's extremely unlikely, and also even less unlikely that doing so will result in something favorable for the attacker.  They can't even be sure they are increasing a value thanks to the encryption function scrambling the data completely.
<h2>Hashing Algorithm Overview</h2>
In a nutshell, besides all the stuff we talked about above, a hashing algorithm is just a deterministic algorithm (meaning it acts the same way every time, no randomness) that takes some input, chews it up, and spits out some (often) smaller piece of data to represent it.  When chewing it up, it can do things that are destructive to the data (such as integer division, which loses precision) and isn't just limited to non destructive operations like encryption algorithms are (non destruction operations can be reversed, such as XOR, addition, subtraction, bit rotations).

As an extra piece of security, people often "SALT" their hashes which means they hash some constant before hashing whatever data they want to hash.  This constant is called the salt and you can think of it kind of like a password.  This way, even if someone knows what algorithm you are using to hash data (such as the popular MD5 or SHA-1 hash functions), you'd also have to know the salt used to more effectively attack the system.  It's a little extra bit of security, which is always nice.
<h2>Example Hash Function</h2>
Here's an example hash function in C++.   Again, note that this is not really fit for real world use or important situations, it's just for educational purposes.  You'd want to do more "chewing" and use different operations, bit rotations to make sure all the bits got "hit" by the xor's, etc.  Check out some more complex, real world hashing algorithms for more info!
<code>
//assuming sizeof(int) == 4
typedef unsigned int uint32;

//Takes a pointer and length so you can hash binary data as well as text
//note that this function as is won't give the same answers on machines with different endian-ness
uint32 Calculate4ByteHash(const unsigned char *pData, int nDataLength, const unsigned char *pSalt, int nSaltLength)
{
&nbsp;&nbsp;//setup some variables
&nbsp;&nbsp;uint32 nHash = 0;
&nbsp;&nbsp;unsigned char *pHashPointer = (unsigned char *)&nHash;

&nbsp;&nbsp;//salt the hash
&nbsp;&nbsp;for(int nIndex = 0; nIndex < nSaltLength; ++nIndex)
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;pHashPointer[nIndex%4] = pHashPointer[nIndex%4] ^ pSalt[nIndex];
&nbsp;&nbsp;}

&nbsp;&nbsp;//hash the data
&nbsp;&nbsp;for(int nIndex = 0; nIndex < nDataLength; ++nIndex)
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;pHashPointer[nIndex%4] = pHashPointer[nIndex%4] ^ pData[nIndex];
&nbsp;&nbsp;}

&nbsp;&nbsp;return nHash;
}
</code>
<h2>Rainbow Tables</h2>
Assuming the algorithm meets the critera above, the only real way to attack something secured by hashing (besides asking the nice receptionist for the secret info while batting your eyelashes) is to brute force hash a bunch of values until you find something that gives the same hash as what you are looking for.

Unfortunately, there are something called "Rainbow Tables" where people have gone through and created tables of unique hashes and "source data" that results in those hash values for common algorithms.  This way, if for instance, an attacker saw that a hashed value was "3", and he knew you were using the MD5 algorithm, he could look at an MD5 rainbow table to find the value he could put into your system to result in a hash value of "3" and thus he'd gain some ground at attacking your security.

Of course, if you salt your hash, he would have to find out your salt value too and perhaps salting would invalidate the rainbow table entirely (depending on the algorithms used).  Also, the more bits your output hash contains, the larger a rainbow table would have to be, so if you really wanna screw with would be attackers, make your output bit count larger - it makes their job exponentially harder! (:
<h2>Popular Hashing Algorithms</h2>
Two common hashing algorithms used for various real world applications are <a href="http://en.wikipedia.org/wiki/MD5">MD5</a> and <a href="http://en.wikipedia.org/wiki/SHA-1">SHA-1</a>.  You've probably seen them around, especially if you've used open sourced software.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date><![CDATA[2012-09-12 22:04:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-13 06:04:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cryptography-101-hashing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495508622;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:52;}i:1;a:1:{s:2:"id";i:50;}i:2;a:1:{s:2:"id";i:51;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>476</wp:comment_id>
			<wp:comment_author><![CDATA[Cryptography 101: Encryption &#8211; Symmetric Keys | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2012/09/15/cryptography-101-encryption-symmetric-keys/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-08 21:06:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-09 05:06:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Cryptography 101: Hashing [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Cryptography 101: Encryption - One Time Pad</title>
		<link>http://blog.demofox.org/2012/09/15/cryptography-101-encryption-one-time-pad/</link>
		<pubDate>Sat, 15 Sep 2012 19:11:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/15/cryptography-101-encryption-one-time-pad/</guid>
		<description></description>
		<content:encoded><![CDATA[This is the second article in a series on the basics of cryptography:
<ul>
	<li><a href="http://blog.demofox.org/2012/09/12/cryptography-101-hashing/">Cryptography 101: Hashing</a></li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-one-time-pad/">Cryptography 101: Encryption - One Time Pad</a></li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-symmetric-keys/">Cryptography 101: Encryption - Symmetric Keys</a></li>
	<li><a href="http://blog.demofox.org/2012/09/16/cryptography-101-encryption-asymmetric-keys/">Cryptography 101: Encryption - Asymmetric Keys</a></li>
	<li><a href="http://blog.demofox.org/2012/09/17/encryption-101-realistic-security/">Cryptography 101: Realistic Security</a></li>
</ul>
<strong>DISCLAIMER</strong>: These articles are meant for educational purposes only.  The methods explained here are meant only to illustrate the basic concepts of cryptography and may or may not be suitable in real world applications.  For serious applications such as financial transactions, I recommend hiring security professionals and also getting a lawyer involved.  Use this info and code at your own risk, I claim no responsibility!

If you want more in depth information about cryptography than these introductory articles provide, I highly recommend a book called <a href="http://www.amazon.com/Applied-Cryptography-Protocols-Algorithms-Edition/dp/0471117099/ref=sr_1_1?ie=UTF8&amp;qid=1347738044&amp;sr=8-1&amp;keywords=applied+cryptography">Applied Cryptography</a> by Bruce Schneier. That book literally almost didnt get published because the NSA didnt want the info getting out into the public. Yay for the 1st amendment!
<h2>Plaintext, Ciphertext and Keys</h2>
When talking about encryption, you'll often hear two terms:  Plaintext and Ciphertext.

The plaintext is the unencrypted data and may be either text or binary data.

Ciphertext is the encrypted data.

Ideally, the ciphertext will give no information about the nature of the plaintext that created it, other than perhaps the size of the plaintext itself.  Good ciphertext will look indistinguishable from random numbers, both by the human eye and mathematically.

This is because the point of encryption is to hide any patterns in the data, and good encryption will hide all discernible patterns.  The only possible exception to this would be if the encryption process made ciphertext with misleading patterns that didn't give any information about the plaintext.  I'm not sure if this comes up in practice, but it definitely could.

Another term you'll hear often is "Keys".  A key is just the data that you encrypt or unencrypt data with.  You can think of it as the password.
<h2>The One Time Pad</h2>
The one time pad is an extremely simple, yet secure way of encrypting data.

It is so simple that it only uses the xor operation, and is so secure that the ciphertext is literally uncrackable if done correctly.

The downside is that it requires a lot of pre-shared data which gets used up as you encrypt data.  When you run out, you have to share more of this data if you want to keep communicating with that person.

This pre-shared data is the key used for encryption and unencryption.
<h2>Implementing</h2>
To use a one time pad, you first gather a large amount of random data and share that with the person you want to communicate securely with.  This is the one time pad itself and you'll want one byte of random data for each byte of information you want to send to that person.  This step is also the crux of the security.  You need to make sure that nobody else is able to get the one time pad except your intended target, and you also need to ensure that you have high quality random data (more on that later on).

To encrypt data, you take one byte from the one time pad for each byte of data you want to encrypt and XOR them together.  When you are done, you throw away the used bytes of the one time pad and never use them again.

Then, you send the ciphertext to the person you already pre-shared the one time pad data with.

To decrypt the data, that person xors each byte of the encrypted data with a byte of the one time pad, and they also throw away each byte used of the one time pad just like you did.

When they are done decrypting, they will have the plaintext data, and their one time pad will be in the same state that yours is in (ie their next number will be your next number).

From here you can rinse and repeat until you run out of one time pad data.

Super simple, and as long as nobody else has your one time pad data, and your one time pad data is truly random, nobody will be able to crack your ciphertext and get the plaintext.
<h2>The Importance of Randomness</h2>
Besides securely transmitting the random data,the other crux of the security i mentioned was the quality of the random numbers in your one time pad.

The reason this is important is because if the numbers aren't truly random, there will be patterns in the data.  If there are patterns in the data, people can possibly discover those patterns, thus being able to separate the plaintext from the key and unencrypting some or all of your data.

Randomness comes up EVERYWHERE in cryptography, both in input and output to cryptographic algorithms.  Because of this, truly random data is often somewhat of a commodity to cryptographers.  Since re-using random data means that its slightly less secure (would be attackers have a pattern to gain knowledge with if you re-use your random numbers!), it's also a consumable commodity!

In fact, there are famous books that are nothing but hundreds and hundreds of pages of random numbers generated from various real world sources - such as taking the wind speed over time in Juneau, Alaska and multiplying it by static gathered from a radio antenna which is tuned to dead air.  Using real world data like that, people can be relatively sure that the data doesn't have any discernible patterns.  They just have to watch out for those pesky physicists unlocking the nature of the universe and finding the patterns in the background radiation :P

I'm not even joking about these books by the way, check this out, here's one such book!
<a href="http://www.amazon.com/Million-Random-Digits-Normal-Deviates/dp/0833030477/ref=sr_1_2?ie=UTF8&amp;qid=1347733652&amp;sr=8-2&amp;keywords=random+number+book">A Million Random Digits with 100,000 Normal Deviates</a>

Using random numbers from a published book makes your random numbers slightly less random (since other people have the book too, and attackers may notice it on your bookshelf or something), but so long as you don't just use the numbers of the first or last pages (or anything else predictable), and the book actually contains high quality random numbers, it ought to be fine.

you can also BUY large amounts of high quality random data online from places like <a href="http://www.random.org/">random.org</a>.

The astute reader might ask "Why don't i just use a pseudo random number generator on each side and never run out of one time pad data?".

Well, if someone knows the PRNG you are using, and your seed, they would be able to unencrypt your data just like your intended target can.

<a>HOWEVER, this kind of setup can be appropriate sometimes if you know the risks and are ok with them.  Check out this wikipedia page for more information:
</a><a href="http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator">Cryptographically Secure Pseudorandom Number Generator</a>
<h2>Specific Attack Against Randomness</h2>
As an extreme example, lets say that instead of random numbers, your one time pad data is all 0xFFFFFFFF and that you are using it to encrypt a text file (say, this article for instance).

When you encrypted your data by XORing each byte against 255 (0xFF), all the bits of each byte would be flipped from 0 to 1 or 1 to 0.

While it's true that it would make the data un readable, and seemingly random, garbage data to the human eye, mathematically it's a very different story.

If someone were analyzing your ciphertext, they would first notice that the byte value 154 (which looks like Ü and has a binary value of 10011010) occurs in the ciphertext roughly the same amount that the letter 'e' appears in the typical english language text document.  This would be astute because that value of 154 is just the flipped bits of 'e' which has a byte value of 105 and a binary value of 1100101 (the binary bits are just flipped due to the XOR against 0xFF).

Then, they may notice the same for other letters... that some other value occurs as often as you'd expect an 'o' to appear in english, or an 'm' etc.

Pretty soon they have a clear picture that this is english plaintext, and they can start replacing letters with what they seem like they should be statistically (for the statistically significant letters).

After that, they have some of your plain text, and figuring out the rest is similar to playing sudoku... figuring out which letters fit where, based on how words are spelled, and then doing a find / replace in the entire document for each letter you figure out.

In the end, they have your plaintext and your encryption failed you.

This is an extreme case that is really simple to break, but hopefully you can see that if you even use slightly lower quality random numbers (such as the built in rand() function of C++, whether or not you use srand(time(0)) or not!) that you open yourself up to attack and it can compromise your whole communication stream.
<h2>Requiring Less Pre-Shared Data</h2>
You can modify the one time pad algorithm to use less pre-shared data if you are ok with the changes in your security profile (your data may be weaker against some attacks, stronger against others).

There are many ways to skin a cat but I'll just talk about a couple.

One way would be to generate more random data from the random data you do have.  For instance, if you and the person you are pre-sharing data with agree on a protocol of MD5 hashing every 100 bytes of one time pad data to generate more random bytes that you can interleave with your one time pad data, you would have a way of generating 16% more one time pad data than what you gathered or shared with the other person.  (16% more because MD5 hashes of 100 byte blocks spit out 16 byte hashes of seemingly random numbers - see the previous article on hashing for more information!).

However, doing this obviously makes the "random" data *somewhat* lower quality since there is a pattern to some of the random data.  As non obvious as that pattern may be, if someone were to do fancy mathematical analysis of the data, this sort of technique may cause patterns to crop up which lead to a "chink in the armor" giving the attacker a foothold in recovering all or some of the plaintext.

Another way of making your one time pad go farther is instead of XORing the one time pad data against the plaintext and ciphertext to encrypt and unencrypt, you can use the one time pad to give you the keys (passwords) to encrypt / decrypt each communication.

For instance, if you and the person you are communicating with agree in advance on a symmetric key encryption algorithm (more on this topic in the next article!) that takes a 16 byte encryption key, you could use every 16 byte block of one time pad data for an entire single message no matter how large the message is.

For instance, you could encrypt 2GB of data using the first 16 bytes of a one time pad, send that to the person, then you encrypt 500MB with the next 16 bytes and send that to the person.

You've effectively used 32 bytes of your one time pad to encrypt 2.5GB of data, which is a crazy good ratio compared to the traditional one time pad protocol which would have required 2.5GB of pre-shared one time pad random data.

If you go this route, your ciphertext now becomes vulnerable to whatever attacks your symmetric key encryption algorithm are vulnerable to though.  If the algorithm you are using turns out to have a serious flaw that mathematicians find out about (such as there's a really easy way to recover the plaintext - this happens fairly often believe it or not!), your whole communication channel is screwed, whereas with the one time pad, it's just the quality of your random numbers, and the security of your pre-shared data that define the security.  So, there are definitely pros and cons to weigh.
<h2>Other Weaknesses</h2>
There are a lot of ways to attack each cryptographic technique, and if you are serious about cryptography you really need to read up on a lot of things and be extremely clever, thinking of every possible situation that anyone else might think of.

Security is hard because often times you have a limited amount of time to implement your security (because you need to ship your software or open your service to the public SOME DAY), and there are most certainly more attackers than there are security professionals on your team, and they have all the time in the world to search for what you've missed!  Just as there is no rest for the wicked, the same too is true for security professionals.

I mentioned that the quality of your random numbers and the security of your pre-shared data was the lynchpin of protecting against people getting your plaintext from your cyphertext, but there is another way to attack the communication channel as well.

Namely, if someone were to intercept a message between you and your target person, they may not be able to get your plaintext out, but if they can keep that message from getting to your target, and do so in a way that you aren't aware of this, they can completely break your communication channel.

The reason for this is that doing this makes the one time pads of you and your target person get out of sync when you throw away one time pad data that the target person did not throw away.  This means that the random numbers you are using to encrypt your data is not the same numbers your target person is decrypting data with, so they will get garbage, random data as output and not be able to recover the plaintext.

A malicious person in the middle was able to thwart your ability to communicate securely!

Also, if a person was able to modify the ORDER that the target person got the encrypted messages in, they would be able to break the channel that way as well (at least temporarily) since it would make the recieving person unencrypt the messages with the wrong pieces of data.  The next message the person got would be unencryptable in this case though, since the same number of bytes were used up by the out of order messages as if they had come in the right order.

This is not the traditional <a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">man in the middle</a> attack, but it is definitely *A* man in the middle attack.

As with so many things, there are often strange, non obvious connections between different subjects.  Case in point, one way to protect against these sort of attacks of lost or re-ordered messages would be to implement the sorts of algorithms used in network programming (like those used in TCP/IP) that ensure "guaranteed" and "in order" communication between two computers or individuals.

Going this route, just like how computers on the internet can know when they got message B but haven't received message A yet, or that when they sent a message to another person that it never got there, you too would be able to know if a message got to the target, and they would be able to know if they have received messages out of order or not.
<h2>Until Next Time!</h2>
That's the essence of the one time pad and I hope you found it interesting!

Next Up I'll be talking about symmetric key algorithms which are the more traditional way of encrypting where you use a password to protect data.

For those interested in cracking encrypted data (which technically is against the <a href="http://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act">DMCA</a> these days, but used to be a common academic activity, and a way of weeding out insecure algorithms), here's a nice morsel for you.  It's hexadecimal encoded encrypted data.  Every 2 hex characters equals one byte of encrypted data.  If you use the information from the article, you ought to be able to crack it (there's an easy way and a hard way).

And no, cracking the encrypted data below is not even technically against the law, I'm giving you explicit permission to crack it if you can (:

b699df86908adf9c9e91df8d9a9e9bdf8b97968cd3df889e86df8b90df9890dedfdfb79e899adf86
908adf8b97908a98978bdf9e9d908a8bdf8b9e94969198df8a8fdf9c8d868f8b90988d9e8f9786df
8f8d90999a8c8c9690919e939386c0c0dfdfb79a8d9ad88cdf8c90929adf9c909093df8c9c969a91
9c9adfd0df929e8b97df86908a8b8a9d9adf9c979e91919a938cdf99908ddf86908a8ddf9a919590
86929a918bdedfdfb29e8b97c5978b8b8fc5d0d0888888d186908a8b8a9d9ad19c9092d08a8c9a8d
d0918a929d9a8d8f9796939adfdfaf97868c969c8cc5978b8b8fc5d0d0888888d186908a8b8a9d9a
d19c9092d08a8c9a8dd08c96878b868c86929d90938cdfdfbc979a92968c8b8d86c5978b8b8fc5d0
d0888888d186908a8b8a9d9ad19c9092d08a8c9a8dd08f9a8d96909b969c89969b9a908cd1dfdfbb
8d908fdf929adf9edf9396919adf9699df86908adf889e918bdf8b90df939a8bdf929adf94919088
df8b979e8bdf86908adf9b9a9c968f979a8d9a9bdf9286df8b9a878bdedfdfb6d892df9c8a8d9690
8a8cdf88979e8bdf929a8b97909b8cdf86908adf9a919b9a9bdf8a8fdf8a8c969198df8b90df9996
988a8d9adf968bdf908a8bdedf9e939e91d1889093999abf98929e9693d19c9092d1dfdfab979adf
92908d9adf8b9a878bdf8b979a8d9adf968cdf979a8d9ad3df8b979adf9a9e8c969a8ddf968bdf88
969393df9d9adf8b90df9b9a9c8d868f8bd3df9e8cdf8b979a8d9adf88969393df9d9adf92908d9a
df939a8b8b9a8d8cdf9e919bdf8b979a86df88969393df9d9adf9c93908c9a8ddf8b90df8b979adf
9e899a8d9e989adf9b968c8b8d969d8a8b969091df9099df8b979adf9a919893968c97df939e9198
8a9e989ad3df8c90df979a8d9ad88cdf8c90929adf92908d9adf93909198df8b9a878bdf8b90df97
9a938fdf8f9a908f939adf908a8bd1dfdfbc9091988d9e8b8a939e8b9690918cdf9e989e9691df90
91df94969c94969198df8c90929adf929e95908ddf9d8a8b8bde]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date><![CDATA[2012-09-15 11:11:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-15 19:11:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cryptography-101-encryption-one-time-pad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495703147;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:52;}i:1;a:1:{s:2:"id";i:50;}i:2;a:1:{s:2:"id";i:51;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>477</wp:comment_id>
			<wp:comment_author><![CDATA[Cryptography 101: Hashing | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2012/09/12/cryptography-101-hashing/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-08 21:07:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-09 05:07:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Recording lagless demo videos of a laggy game Cryptography 101: Encryption &#8211; One Time Pad &rarr; [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Cryptography 101: Encryption - Symmetric Keys</title>
		<link>http://blog.demofox.org/2012/09/15/cryptography-101-encryption-symmetric-keys/</link>
		<pubDate>Sat, 15 Sep 2012 23:26:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/15/cryptography-101-encryption-symmetric-keys/</guid>
		<description></description>
		<content:encoded><![CDATA[This is the third article in a series on the basics of cryptography:
<ul>
	<li><a href="http://blog.demofox.org/2012/09/12/cryptography-101-hashing/">Cryptography 101: Hashing</a></li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-one-time-pad/">Cryptography 101: Encryption - One Time Pad</a></li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-symmetric-keys/">Cryptography 101: Encryption - Symmetric Keys</a></li>
	<li><a href="http://blog.demofox.org/2012/09/16/cryptography-101-encryption-asymmetric-keys/">Cryptography 101: Encryption - Asymmetric Keys</a></li>
	<li><a href="http://blog.demofox.org/2012/09/17/encryption-101-realistic-security/">Cryptography 101: Realistic Security</a></li>
</ul>
<strong>DISCLAIMER</strong>: These articles are meant for educational purposes only.  The methods explained here are meant only to illustrate the basic concepts of cryptography and may or may not be suitable in real world applications.  For serious applications such as financial transactions, I recommend hiring security professionals and also getting a lawyer involved.  Use this info and code at your own risk, I claim no responsibility!

If you want more in depth information about cryptography than these introductory articles provide, I highly recommend a book called <a href="http://www.amazon.com/Applied-Cryptography-Protocols-Algorithms-Edition/dp/0471117099/ref=sr_1_1?ie=UTF8&amp;qid=1347738044&amp;sr=8-1&amp;keywords=applied+cryptography">Applied Cryptography</a> by Bruce Schneier. That book literally almost didnt get published because the NSA didnt want the info getting out into the public. Yay for the 1st amendment!
<h2>Symmetric Key Encryption</h2>
Symmetric key encryption is a fancy name for the type of encryption you are probably most familiar with, which is using a password to scramble and unscramble data to make sure only certain people can see it.

This is in contrast to asymmetric key encryption, where you have two passwords; one for encrypting and one for decrypting (The next article is going to be on asymmetric key encryption).
<h2>Security</h2>
There are numerous  symmetric key encryption algorithms out there but they all have one thing in common:  their security relies on only the right people having the password, and the assumption that the best way attackers have for getting the plaintext from the ciphertext is to guess the password via brute force.

In good (modern) algorithms, people say things like "on average it will take geological or astronomical amounts of time to guess a password with the computing technology of today and the projected future" so they are reasonably sure people won't be able to brute force the password in any useful amount of time.

Quantum computers give some forms of cryptography a scare though, because there is something called <a href="http://en.wikipedia.org/wiki/Simon's_algorithm">Simon's Algorithm</a> which is a quantum computing algorithm that can brute force search ANYTHING with exponentially fewer operations than classical computing.  This means it can brute force guess passwords of an encryption algorithm a lot faster than a normal computer.  At the time of writing this, I think the record for quantum computing power is something like having 4 cubits work together to do some simple math operation (like multiplication).  We could be on the precipice of disaster regarding cryptography, but luckily there are encryption algorithms that take the same amount of time, or longer, for quantum computing to solve, so it isn't all doom and gloom.

When decrypting data with either symetric or asymetric key encryption, there is no built in way to know if you had the right password or not.  You can know by looking at the recovered plaintext and seeing if you got junk out, or meaningful data, but if you don't know what the data out is supposed to be exactly, or what it's supposed to look like, there's no way to know if decrypted it correctly.  This makes it so sometimes it can be difficult for attackers to even KNOW if they have guessed the right password or not, which is good for us folk trying to protect data.

Just like a good hashing algorithm, small changes in input should ideally yield large changes in output, which makes it a <a href="http://en.wikipedia.org/wiki/Chaos_theory">Chaotic Function</a> and makes it so the cipher text gives as little information about the plaintext as possible.

Sometimes people will use multiple encryption algorithms on a piece of data in the hopes of making it harder to crack, which sometimes works, but can also be fairly dangerous.

To understand the danger, consider how every program, no matter how complex, is essentially a traditional algebraic function (with perhaps lots and lots and lots of terms).  For encryption, the input is the plain text and key, and the output is the cipher text.

Now, just like in junior high and high school, sometimes when you plug one function into another like f(g(x)) and preform algebraic substitution, terms from f and g maybe cancel out.  You may end up with a function that is less complex than either f(x) or g(x), or it just may be less complex for certain values of x.  An attacker could exploit these attacks to their advantage and it might be easier for them to recover some or all of the plaintext because you used two encryption algorithms instead of one.

On the other hand, using multiple algorithms, or the same algorithm multiple times (perhaps with different keys) can also make it a lot more secure.  It's just something to be mindful of.

Clever programmers and mathematicians sometime come up with encryption techniques where attacking the algorithm itself is the literal equivalent of having to solve famous unsolved math problems from the ages.  These often seem really secure because for some of these problems, the best and brightest minds in all of history have been fighting with the problems for hundreds or thousands of years and making no progress.

Every now and then, some smarty figures one of these out though, and suddenly, encryption algorithms based on it become essentially worthless.

Another common way that people attack ciphertext is via something called a "known plaintext attack".  What this means is that if the attacker knows any part of the plaintext before it became ciphertext, they can sometimes leverage that knowledge to know a bit more about the key or algorithm used to encrypt the data.  That simplifies their work and makes it more likely that they can get the plaintext back without having to revert to brute force.

One really common way this comes up is if people do something like compress their data before encrypting, or they encrypt known file types like executables, word processing documents, image files etc.

The reason for this is because in all of those file types, there is a standard, well known header that those files have, which allow other programs to use them.  That header data is known plaintext and can be used by an attacker to get more information how to recover the plaintext.

For all the clever people out there trying to make encryption based on super advanced mathematics, in the end, some of the very most secure algorithms out there are based on very simple computing operations such as addition, subtraction, bit rotation, and XOR.

As an example, there is an algorithm called RC5 which only uses those basic operations (you can find the source code for it easily!) and yet is extremely secure.  The makers of RC5 published their source code, and encrypted some data with various key sizes (7 byte, 8 byte and 9 byte) in 1994, and it took something like 5 years for the first one to be cracked (via brute force), 10 years for the second, and they project that cracking the third will take 200 more years.  More information available here: <a href="http://en.wikipedia.org/wiki/RC5">RC5</a>
<h2>Algorithm Components</h2>
A symmetric key algorithm is any deterministic algorithm where given a key, has the ability to obfuscate (hide / scramble) data, and then later given the same key, has the ability to undo the operations that it did to get the original data back.

Since all operations have to be reversible, that limits you to non destructive operations.  XOR isn't destructive, because A XOR B XOR B = A.  Addition and subtraction isn't destructive, because A + B - B = A (even true when you wrap around the max size of your integer).  Division is destructive however, because when you divide on a computer, you have finite precision (even with floating point numbers) which means you can never fully recover the origional data when trying to undo a division with a multiplication.  Bit rotation is another operation that isn't destructive.  NOT isn't destructive, but AND and OR are destructive.  Another operation that isn't destructive is moving bytes around, since you could just do the moves again in reverse order to get the original data back.

As simple as all this sounds, these are essentially the building blocks of all encryption algorithms.
<h2>Example Algorithm</h2>
Here's an example algorithm that you could use to encrypt and unencrypt data.  I don't do any byte swapping (moving bytes around), or bit rotation, but those would be some good ways to improve it.
<code>
//Takes a pointer and length so you can encrypt binary data as well as text
//the pOutData parameter should point to memory that is the same size as pData
//If bEncrypt is true, it will encrypt data.  If bEncrypt is false, it will decrypt data.
void EncryptData(const unsigned char *pData, int nDataLength, unsigned char *pOutData, const unsigned char *pKey, int nKeyLength, bool bEncrypt)
{
&nbsp;&nbsp;int nKeyIndex = 0;
&nbsp;&nbsp;unsigned char nRunningSum = 0;
&nbsp;&nbsp;for(int nDataIndex = 0; nDataIndex < nDataLength; ++nDataIndex)
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//update our running sum
&nbsp;&nbsp;&nbsp;&nbsp;nRunningSum += pKey[nKeyIndex % nKeyLength];

&nbsp;&nbsp;&nbsp;&nbsp;//get our current byte of plaintext or ciphertext
&nbsp;&nbsp;&nbsp;&nbsp;unsigned char nDataByte = pData[nDataIndex];

&nbsp;&nbsp;&nbsp;&nbsp;//to decrypt, it subtracts a running sum of the key then xors against the current key byte
&nbsp;&nbsp;&nbsp;&nbsp;if(!bEncrypt)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nDataByte -= nRunningSum;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//do our xor, whether we are encrypting or decrypting
&nbsp;&nbsp;&nbsp;&nbsp;nDataByte = nDataByte ^ pKey[nKeyIndex % nKeyLength];

&nbsp;&nbsp;&nbsp;&nbsp;//to encrypt, it xors against the current key byte and then adds a running sum of the key
&nbsp;&nbsp;&nbsp;&nbsp;if(bEncrypt)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nDataByte += nRunningSum;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//set the output data byte
&nbsp;&nbsp;&nbsp;&nbsp;pOutData[nDataIndex] = nDataByte;

&nbsp;&nbsp;&nbsp;&nbsp;//move to the next byte in the key
&nbsp;&nbsp;&nbsp;&nbsp;nKeyIndex++;
&nbsp;&nbsp;}&nbsp;&nbsp;
}
</code>
Also, here's some example code of how to use this function:
<code>
void DemoEncryption()
{
&nbsp;&nbsp;//our key and plain text
&nbsp;&nbsp;const char *pKey = "MyKeyIsFairlyLongButThatIsJustFine!124351 seven";
&nbsp;&nbsp;const char *pPlainText = "This is some plaintext, how do you do?";

&nbsp;&nbsp;//allocate space for our cipher text and recovered plain text
&nbsp;&nbsp;unsigned char *pCipherText = new unsigned char[strlen(pPlainText)];
&nbsp;&nbsp;unsigned char *pRecoveredPlainText = new unsigned char [strlen(pPlainText)+1];

&nbsp;&nbsp;//print out our plain text
&nbsp;&nbsp;printf("%s\n\n",pPlainText);

&nbsp;&nbsp;//encrypt the plain text
&nbsp;&nbsp;EncryptData((unsigned char *)pPlainText,strlen(pPlainText),pCipherText,(unsigned char *)pKey,strlen(pKey),true);

&nbsp;&nbsp;//print out the cipher text as hex digits
&nbsp;&nbsp;for(int nIndex = 0; nIndex < strlen(pPlainText); ++nIndex)
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;printf("%0.2x",pCipherText[nIndex]);
&nbsp;&nbsp;}
&nbsp;&nbsp;printf("\n\n");
&nbsp;&nbsp;
&nbsp;&nbsp;//decrypt the cipher text to recover the plain text
&nbsp;&nbsp;EncryptData(pCipherText,strlen(pPlainText),pRecoveredPlainText,(unsigned char *)pKey,strlen(pKey),false);

&nbsp;&nbsp;//print out the recovered plain text after we null terminate it
&nbsp;&nbsp;pRecoveredPlainText[strlen(pPlainText)]=0;
&nbsp;&nbsp;printf("%s\n\n",pRecoveredPlainText);

&nbsp;&nbsp;//free the memory we allocated
&nbsp;&nbsp;delete[] pCipherText;
&nbsp;&nbsp;delete[] pRecoveredPlainText;
}
</code>
<h2>Common Algorithms</h2>
Some commonly used symmetric key encryption algorithms in use today are <a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES</a>, <a href="http://en.wikipedia.org/wiki/Blowfish_(cipher)">Blowfish</a> and <a href="http://en.wikipedia.org/wiki/Triple_DES">3DES</a>.
<h2>Until Next Time!</h2>
That's it for symmetric key algorithms, next up I'll be talking about asymmetric key algorithms, which have some pretty interesting uses.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date><![CDATA[2012-09-15 15:26:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-15 23:26:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cryptography-101-encryption-symmetric-keys]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494955438;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:52;}i:1;a:1:{s:2:"id";i:51;}i:2;a:1:{s:2:"id";i:48;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cryptography 101: Encryption - Asymmetric Keys</title>
		<link>http://blog.demofox.org/2012/09/16/cryptography-101-encryption-asymmetric-keys/</link>
		<pubDate>Sun, 16 Sep 2012 22:26:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/16/cryptography-101-encryption-asymmetric-keys/</guid>
		<description></description>
		<content:encoded><![CDATA[This is the fourth article in a series on the basics of cryptography:
<ul>
	<li><a href="http://blog.demofox.org/2012/09/12/cryptography-101-hashing/">Cryptography 101: Hashing</a></li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-one-time-pad/">Cryptography 101: Encryption - One Time Pad</a></li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-symmetric-keys/">Cryptography 101: Encryption - Symmetric Keys</a></li>
	<li><a href="http://blog.demofox.org/2012/09/16/cryptography-101-encryption-asymmetric-keys/">Cryptography 101: Encryption - Asymmetric Keys</a></li>
	<li><a href="http://blog.demofox.org/2012/09/17/encryption-101-realistic-security/">Cryptography 101: Realistic Security</a></li>
</ul>
<strong>DISCLAIMER</strong>: These articles are meant for educational purposes only.  The methods explained here are meant only to illustrate the basic concepts of cryptography and may or may not be suitable in real world applications.  For serious applications such as financial transactions, I recommend hiring security professionals and also getting a lawyer involved.  Use this info and code at your own risk, I claim no responsibility!

If you want more in depth information about cryptography than these introductory articles provide, I highly recommend a book called <a href="http://www.amazon.com/Applied-Cryptography-Protocols-Algorithms-Edition/dp/0471117099/ref=sr_1_1?ie=UTF8&amp;qid=1347738044&amp;sr=8-1&amp;keywords=applied+cryptography">Applied Cryptography</a> by Bruce Schneier. That book literally almost didnt get published because the NSA didnt want the info getting out into the public. Yay for the 1st amendment!
<h2>Asymmetric Key Encryption (Public and Private Keys)</h2>
Unlike symmetric key encryption, which uses the same key for encryption and decryption, Asymmetric key encryption uses one key for encryption and a different key for decryption.

This probably sounds strange why you would want to have two passwords, but the reason is that you keep one for yourself, and give the other one out to another individual or a group.

Because you keep one to yourself (private) and give the other out (public) these are called public and private keys, and this technique is called Public Key Cryptography.

Depending on which key you keep private (the encryption or decryption key), you can get different effects.
<h2>Usage Pattern 1 - Private Encryption, Public Decryption</h2>
If you keep the encryption key secret, but publish the decryption key out to the public (or to a group of people, or to another individual), what that means is that you can encrypt data which can be read by anyone.  What is useful about this is that they have to use your public key to decrypt the data, so they know it was encrypted with your private key, which means they can be reasonably sure that you were the one that wrote the message.  You have effectively cryptographically signed your message so that people know it was in fact you that sent that message.

People use this technique all the time in computers, this is how you can verify that something is from a legitamate source, regardless of if we are talking about a web page (HTTPS), a valid device driver (digitally signed device drivers), or other things of that nature.

Another neat thing about this usage pattern is that getting creative, you can also be ensured that the message or data hasn't been tampered with.

For instance, let's say you were making a computer operating system where you only allowed the computer to run trusted (signed executables).

Re-visiting a technique mentioned in the first article in this series on hashing, a "signed executable" might look like the below:
<ul>
	<li>[Cryptographic Hash of Unencrypted Executable Data]</li>
	<li>[Encrypted Executable Data]</li>
</ul>
So, you as the "central signing authority" for the operating system would receive programs from people wanting to release software on your operating system.

First, you would put the software through it's paces via analysis and testing to make sure  the program worked as intended, was up to the level of quality you wanted software on your OS to be, followed any specific rules about how the software should behave and interact with the rest of the operating system, and also you would make sure the software wasn't malicious.  Also, you would have to make sure the software wasn't insecure in any ways that could compromise the rest of your security (for instance, if it had a <a href="http://en.wikipedia.org/wiki/Buffer_overflow">Buffer Overflow</a>, that could let attackers run arbitrary, unsigned code on your operating system, causing viruses to spread and other malicious things).

Once the program is verified safe, next up you would make the hash of the unencrypted program, write that to a file, then  encrypt the program with your private key and write that to the file after the hash.

You now have a trusted / signed executable to distribute.

When a user downloads this executable from your application store and tries to run it, the operating system could take the following measures to verify that the executable was trusted and unaltered from the time of it's signing:
<ol>
	<li>Unencrypt the executable using the public key.</li>
	<li>Hash the unencrypted data and ensure that it matches the hash at the beginning of the file.</li>
</ol>
If the hashes match, you know that the executable was indeed signed by the central authority, and that it has not been altered in any way since it's signing.  Therefore, it is safe to run!

I am pretty sure variations of this sort of algorithm are used by things such as the xbox, playstation and iphone / ipad devices.
<h2>Usage Pattern 2 - Public Encryption, Private Decryption</h2>
The other way to use asymmetric key encryption is to publicize the encryption key, but keep the decryption key private.

What this allows is for anyone to encrypt a message that only you can read.

One thing you could do with this is would be to be able to communicate securely with people if all you had was public communication.

For instance you could post to a public forum saying "This message is for Jesse", and then put the encrypted data after that.

Since only Jesse knows his private key, and thus only Jesse can decrypt the data, only Jesse will be able to read your message, even though it is visible to everyone.

Despite this, there are still several unknowns in this particular communication, including:
<ol>
	<li>Jesse doesn't know that you really are who you say you are</li>
	<li>You don't know that Jesse got the message</li>
	<li>Jesse doesn't really know that the message wasn't tampered with (well... if it's a text message you are sending, and jesse unencrypts it and it's garbage, he knows that the message was tampered with, but if the expected data was not so obvious when it was wrong, he may not be able to know that the message hadnt been tampered with).</li>
</ol>
But those problems, and others, are solvable, which leads to our next point...
<h2>Cryptographic Protocols</h2>
A neat thing about cryptographic techniques like this one, symmetric key cryptography, and hashing is that they are basically just building blocks that you can stack together in different ways to be able to do useful and interesting things.

Once you learn some of the basic building blocks of cryptography (what this cryptography 101 series of articles is supposed to be all about), you can then learn more about how to put those building blocks together to preform useful tasks.  The recipes for preforming these useful tasks are called <a href="http://en.wikipedia.org/wiki/Cryptographic_protocol">Cryptographic Protocols</a> and they can (and often should) contain more than just cryptographic techniques.

In the first usage pattern, I showed how combining asymmetric key encryption with hashing can provide you with a system for creating and verifying trusted executables.  That series of steps for creating and using trusted executables was a cryptographic protocol that contained important steps even beyond just encryption and hashing - such as verifying that the executable was not malicious or insecure.  Leaving those steps out creates a big security hole, so they are very important to the overall protocol.

For the second usage pattern, here's some cryptographic protocols to solve the problems i called out:
<ol>
	<li>To solve the issue of Jesse not being sure that you are who you say you are, you could take the encrypted message you created, and sign it with your own private key (of which the decryption key is public... this is usage pattern 1).  This way, when Jesse gets the encrypted message from you, he first unencrypts it with your public key, and then unencrypts it with his own private key.  If the message comes out as garbage in the end, he knows that one of the two steps failed.  Specifically, either it wasn't YOU who sent the message, OR, you used the wrong public key when signing a message to send to him.  Jesse doesn't know which step went wrong, but he does know the message is invalid one way or another.</li>
	<li>To solve the problem of you not knowing that Jesse got the message, you could tell Jesse in the encrypted message "Jesse, if you get this message, respond by sending me back an encrypted message that says 'the password is forty two'".   Then, if Jesse got the message, he could encrypt a message saying "the password is forty two" using your public key, and then post it on the board again for you to unencrypt with your private key and see that he got receipt of your message.  While it's true that anyone is able to encrypt messages meant for you, and so anyone could have written that message, there is some level of security there because the specific message you said to send was encrypted in such a way that only Jesse could have read it.  This way, you can be reasonably sure that Jesse got the note.</li>
	<li>To solve the issue of Jesse not knowing if the message was tampered with at all or not (in the case that it's hard to tell if you got the right data out or not), one way would be to just put a hash of the unencrypted data on the front of the message.  You'd have to agree with Jesse in advance on the protocol, but using the hash again, it would let Jesse know that the data hadn't been tampered with.</li>
</ol>
<h2>Generation of Key Pairs and Algorithm</h2>
By the very nature that these keys work in tandem means that they are somehow linked together mathematically.

I was trying to think of a really simple way to show how public and private keys work together and how they are linked, with a minimal piece of sample code. I thought i had figured out a simplified way, but unfortunately it turned out I was mistaken and my method didn't work at all.

So, I have to refer you to this page which is pretty darn helpful for understanding how the real thing works with RSA, but unfortunately it doesn't explain the full nitty gritty of WHY it works to my liking.  Still a very good read though: <a href="http://sergematovic.tripod.com/rsa1.html">http://sergematovic.tripod.com/rsa1.html</a>
<h2>Common Algorithms</h2>
Some commonly used Public Key Encryption algorithms are <a href="http://en.wikipedia.org/wiki/Secure_Shell">SSH</a>, <a href="http://en.wikipedia.org/wiki/Internet_Key_Exchange">IKE</a> and apparently even <a href="http://en.wikipedia.org/wiki/Bitcoin">Bitcoins</a> use it!.
<h2>Oops!</h2>
After I wrote up this article, my friend Patrick corrected me saying that the process i described is not the usual process for digitally signing data.  He said:
<blockquote> You got signing a little mixed up for asymmetric.  Traditionally the process is:
1. Alice creates a public and private key pair.
2. Alice shares her public key with the world.
3. Alice never shares her private key.
4. Bob can now encrypt messages using Alice's public key and only Alice can unencrypt them using her private key.
5.  Alice can take a hash of something she wants people to verify as coming from her.  Alice then signs that hash with her private key.  Now Bob can verify the item coming from Alice by taking the hash of the data and comparing it against the hash in the signature using Alice's public key.

Some additional reference:
<a href="http://www.rsa.com/rsalabs/node.asp?id=2182﻿">RSA Labs Digital Signing Explanation</a></blockquote>
There are two reasons that I can think of why that process is better that the one I described:
<ol>
	<li>You can sign data without obfuscating it via encryption.</li>
	<li>Public key encryption takes a lot of processing power apparently, so you want to minimize how much data you encrypt with it.  This method encrypts a far smaller (and constant) amount of data.</li>
</ol>

Thanks for the correction Patrick!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2012-09-16 14:26:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-16 22:26:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cryptography-101-encryption-asymmetric-keys]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494659998;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:52;}i:1;a:1:{s:2:"id";i:50;}i:2;a:1:{s:2:"id";i:48;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Encryption 101: Realistic Security</title>
		<link>http://blog.demofox.org/2012/09/17/encryption-101-realistic-security/</link>
		<pubDate>Tue, 18 Sep 2012 05:47:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/17/encryption-101-realistic-security/</guid>
		<description></description>
		<content:encoded><![CDATA[This is the fifth article in a series on the basics of cryptography:
<ul>
	<li><a href="http://blog.demofox.org/2012/09/12/cryptography-101-hashing/">Cryptography 101: Hashing</a></li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-one-time-pad/">Cryptography 101: Encryption - One Time Pad</a></li>
	<li><a href="http://blog.demofox.org/2012/09/15/cryptography-101-encryption-symmetric-keys/">Cryptography 101: Encryption - Symmetric Keys</a></li>
	<li><a href="http://blog.demofox.org/2012/09/16/cryptography-101-encryption-asymmetric-keys/">Cryptography 101: Encryption - Asymmetric Keys</a></li>
	<li><a href="http://blog.demofox.org/2012/09/17/encryption-101-realistic-security/">Cryptography 101: Realistic Security</a></li>
</ul>
<strong>DISCLAIMER</strong>: These articles are meant for educational purposes only.  The methods explained here are meant only to illustrate the basic concepts of cryptography and may or may not be suitable in real world applications.  For serious applications such as financial transactions, I recommend hiring security professionals and also getting a lawyer involved.  Use this info and code at your own risk, I claim no responsibility!

If you want more in depth information about cryptography than these introductory articles provide, I highly recommend a book called <a href="http://www.amazon.com/Applied-Cryptography-Protocols-Algorithms-Edition/dp/0471117099/ref=sr_1_1?ie=UTF8&amp;qid=1347738044&amp;sr=8-1&amp;keywords=applied+cryptography">Applied Cryptography</a> by Bruce Schneier. That book literally almost didnt get published because the NSA didnt want the info getting out into the public. Yay for the 1st amendment!
<h2>Realistic Security</h2>
"Everyone has a plan 'till they get punched in the mouth." -- Mike Tyson

Cryptography is really awesome, and as a friend of mine said today  (BOOOOOORIIIIIIIS your grandma is calling you!) , there's a certain mathematical purity to it that's really appealing.

However, in most security systems, cryptography is not the bottleneck.  There's often way easier things to attack and often you just need to defeat the weakest link in the chain to break open the whole thing.

A popular and successful method of attacking secure systems is something called <a href="http://en.wikipedia.org/wiki/Social_engineering_(security)">Social Engineering</a> which you see a lot of in movies like "mission impossible" and "sneakers".

Social engineering is when you chat up the receptionist and get her to give you info she really ought not to give out, or when you call a company claiming to be maintenance and asking for the door code to get in after hours.  Often much easier than trying to factor gigantic primes or the like :P

Beyond social engineering, there is also physical security to watch out for.  I attended <a href="http://en.wikipedia.org/wiki/DEF_CON">DEF CON</a> in vegas for a few years with my good buddy <a href="http://laggod.org/blog/">LagGod</a> and learned some really interesting things.  DEF CON has gotten pretty packed in recent years but i highly recommend going if you are at all interested in security.  Lots of really talented people on both sides of the fence (attackers aka black hats, and defenders aka white hats) and even some feds and random technophiles thrown in.  Here's two really memorable security lessons I learned at those conferences that really put security into perspective for me.
<h2>Hacking Into a Wifi Network the Easy Way</h2>
Note: this no longer works as advertised, thanks to advancements in wifi security technology, but the principles are still interesting and could work in other situations you may find yourself in.  Also, it's good to know weakness of systems past and present to better protect other systems.  Otherwise, only the criminals have guns and we are all screwed :P

Ok so lets say that you want to hack into a company's network, and lets say that they have a wireless router where when you first try to access it, you are presented with a web browser login screen to type in your username and password.

How wifi networks used to work is that if you were trying to connect to a wifi network, it would pick the router that had the strongest signal that was broadcasting the network id that you wanted to connect to.

What this means is that you as a hacker could drive into the parking lot of a company and broadcast their network id with a really strong signal.  Then, when people tried to use their network, the traffic would be directed to your machine.

If you saved the html of their login page before turning on your fake network, you would be able to present a web page to the people hitting your network that looked exactly like the login page they were used to seeing, except that you could take all those usernames and passwords they entered, and log them to a text file!

After you've harvested a few logins, you turn off your network and then log into theirs.  Thanks for the logins d00ds!

I'm not sure how they solved this problem, but you could probably do something with public key encryption to make sure that everyone who is broadcasting a network id is actually legitimately part of that wireless network.
<h2>Defeating Biometrics</h2>
Again this is somewhat dated info, but it's still pretty interesting, and possibly useful for other situations.

It used to be that finger print scanners were a lot simpler (some cheap ones might still be).  It used to be that if you mashed a gummy bear onto a finger print scanner, that the scanner would pick up the oily fingerprint of the last person that used it, which surely is a valid user, and so, the door would open, the laptop would unlock, or whatever else.

They fixed that problem by having it detect heat, listen for a heartbeat, and probably lots of other secret or publicized ways, but it used to work pretty regularly!

Something else to say about biometrics is that despite the complexity of the actions they preform, I've been told that often times there is just a single wire going into them, and a single wire going out of them.  For all those fancy actions, all the thing does in the end is complete a circuit of two wires.  If you really need to get in somewhere, you are likely able to smash open the box and connect the wires, circumventing the "infallible" biometrics reader.
<h2>Final Notes on Security</h2>
Here are some final words on security.
<ul>
	<li> There is no such thing as perfect security, there is only good enough security.  The only way to get perfect security is to lock your computer in a safe and drop it into the Marianas Trench (although I hear you have to watch out for James Cameron these days).</li>
	<li>Good enough security often means just making sure you aren't the low hanging fruit.  If you are more difficult to attack than your peers, you are safer than they are.  if you and someone else are running from a lion, you don't need to outrun the lion, you just need to ourtun the other guy!</li>
	<li>If your security is based on the fact that your algorithm is secret, that is called "Security Through Obscurity" and is really weak security.  You should assume your attacker knows the details of everything for better security.  Also, secret algorithms don't get peer reviewed, so weak techniques don't get weeded out.  Don't forget that people STILL haven't cracked the 72 bit RC5 message.  A single message with a 9 byte key, published in the mid 90s, attacked by distributed computer networks, and still, it hasn't been cracked despite the algorithm being publicly available.  That is some good security right there.</li>
</ul>
I went to a talk at either DEF CON, or San Diego's Toorcon (sorry, can't remember which) where the author Bruce Schneier (who is mentioned in the disclaimer / header of these articles) gave a talk after he had just published a book as a sequel to Applied Cryptography.  He said something like "Throw away the other book... physical security is the only thing you really need to be worried about."

BTW Bruce, if you are reading this, thanks for that first book anyways man, you rock (:

... and let me know if i misquoted you :P

Thanks for reading!  Now go forth and cryptophy.  HACK THE PLANET!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2012-09-17 21:47:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-18 05:47:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[encryption-101-realistic-security]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495338990;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:50;}i:1;a:1:{s:2:"id";i:51;}i:2;a:1:{s:2:"id";i:48;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Anatomy of a Skeletal Animation System Part 1</title>
		<link>http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-1/</link>
		<pubDate>Sat, 22 Sep 2012 04:28:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-1/</guid>
		<description></description>
		<content:encoded><![CDATA[This is part one of "Anatomy of a Skeletal Animation System"
<ul>
	<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-1/">Anatomy of a Skeletal Animation System part 1</a></li>
	<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-2/">Anatomy of a Skeletal Animation System part 2</a></li>
	<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-3/">Anatomy of a Skeletal Animation System part 3</a></li>
</ul>
There is quite a bit of information out there on the basics of skeletal animation, including how to export and read animation and model data, how to animate bones and thus transform a mesh, how to blend bone data together and other related animation topics.

However, there is a lot less information out there about how to set up a system to use these techniques in a realistic way, such as you might find in your average modern 3d video game.

I myself have been an animation programmer on a few games including an open world unreal engine game called "This is Vegas" (unfortunately cancelled due to Midway going bankrupt) and also a multiplayer only first person shooter called "Gotham City Impostors" which was released earlier this year for PC, 360 and PS3.  The info I'm presenting is based on experience developing those games, as well as info i gathered from other developers or read about in books or online.

In this article I'm going to assume you already know how to get animation bone data into memory, how to use that animation data to animate models (meshes), and also how to blend animation bone data together.  I'm going to start off with the most simple animation system possible and slowly introduce features until we end up at something that would be fully featured for a typical modern game.

The "next generation" of skeletal animation seems like it's going to be heavily based on parametric animation, and while we will TOUCH on the basics of parametric animation, we won't dig into it very much beyond that.   If you are making a next gen AAA title, parametric animation may possibly be for you (and maybe not), but with the rise of 3d in flash, the rise of mobile games, and also indie game development, I think traditional pose driven skeletal animation is here to stay at least for a while.

Depending on the needs of your project, and how high a quality bar you want vs how much CPU time you want to spend on animation, some of these features may not be appropriate.  Feel free to take what is useful to you, and leave what isn't.  Every game is different.
<h2>Animation Controller v1 - Super Simple</h2>
The simplest point we will start out is that if you have a mesh with an animation controller on it (to control what animations should play on it and such), it has these features:
<ul>
	<li>If you tell it to play a looping animation, it will continue playing that looping animation forever.</li>
	<li>If you tell it to play a non looping animation, it will play the animation and have some way of notifying you when the animation is done.  This is either by having it call a callback when it's done, or by setting some flag on itself saying that the animation is done (won't ever get set on a looping animation)</li>
	<li>You should be able to tell it a playback multiplier to play the animation at, such as if you tell it to play at 3.0, it will play 3 times as fast, or if you tell it to play at 0.5, it will play half as fast and look like slow motion.</li>
	<li>If you tell it to play an animation while another animation is playing, it will instantly stop the animation it's playing and start playing the new animation.</li>
</ul>
With this simple animation system, we could conceivably make a game that has animated characters.

That being said, the animation system is lacking in a few ways:
<ol>
	<li> You can only play full body animations, meaning if you want the lower body to look like it's jumping, and the upper body to look like it's firing a rifle, you have to make an animation that looks like that.  If you want the same thing, but you want the lower body to look like it's standing around while the upper body is firing a rifle, you have to make an entirely different animation that looks like that!  The permutations of actions can get quite large and you have to decide in advance which animation you want to use.  That is, when the player is jumping, they cant change their mind that they suddenly want to start shooting.</li>
	<li>When you switch animations, there is visible "popping".  Popping is when a bone goes from doing one thing to doing something else instantly.  It looks like the bone teleported and is very visible to players.  It looks buggy and unpolished.</li>
	<li>If you are doing something like having the player throw a grenade, you have no way of knowing when to actually spawn the grenade model, and where to spawn it.  You could "hard code" it to spawn at the same place relative to the player each time, when the animation stops playing, but that is pretty hackish and not very maintainable.</li>
</ol>
Lets start off by working on solving problem #3 of not being able to specify where to spawn a grenade or when to spawn it.
<h2>Keyframe Strings</h2>
To solve the problem of WHEN to spawn it, a feature common to nearly all animation systems is the ability to put game engine events on animation key frames.

This way, when the arm is at the correct position in the throw animation, someone would be able to put an event like "throw grenade" on that animation key.  When the animation reaches that animation frame, it sends the message to the game engine, which can then create a grenade (with any specified parameters to the event).

Often times I've seen this implemented as an actual string that is associated with an animation key frame.  The strings might be things like:

Playsound Laugh.wav   <em>(to play a sound to go along with the animation)</em>

SpawnPhysicsProjectile  Grenade.mdl 0 0 5   <em>(to spawn a projectile with the specified mesh and velocity vector)</em>

FootFallSound <em>(This would tell the engine to play a footstep sound, based on the material the player was standing on, such as a metalic sound if on metal, or a duller thud if walking on dirt)</em>

You could also use it to hide and show attachments or a myriad of other things.  Basically you can use it for anything that you want to be tied to an animation.

Usually you'll want some kind of editor for animators and other content creators to be able to associate these key strings with specific key frames.   If they have to work with a text file where they have to hand enter times and key strings associated with those times, it's going to be really tedious and they are going to be sad.  Also, it will be very error prone which makes everyone sad when it generates more bugs than it needs to, slowing down dev time.

On the topic of creating unnecessary bugs, while i've often seen keystrings implemented as actual strings, it's actually a lot less error prone if you have some kind of structured input system in your key string editor.

For instance, instead of them typing a command name and supplying any required parameters, it would be a lot better for them to have to choose a key string command from a drop down list.  When they choose one, it should display any parameters that might be needed, and have some way of validating that their input is valid.

This editor should be tightly coupled with your game engine.  Example ways for doing this including having a shared header file that defines all key string commands and what parameters they require, or having the key string editor load a game dll to get at the data that way.

If you have to manually maintain the tool to match game code, it will often get out of sync and cause you pain you don't need.  Avoiding that pain means you can work on developing more features instead of fighting reoccurring bugs, and means QA can focus on finding harder to find bugs.  In the end it means a better product which is great for the company, your continued paycheck, and the player's experience.

Some other potential bugs can come up with key frames that I don't have a good answer for, it's just something you have to mindful of.

One of these bugs is that when an animation is interrupted, a key frame might not get hit when you expect a key frame to get hit.  For instance if an animation attaches something to a players hand, and at the end of the animation hides that attached object, if you interrupt the animation midway through, it won't get hidden and the attachment will be stuck to the hand as the player does other things - which looks very weird.  Your best bet is to design things in such a way that if key strings are missed, it isn't a problem.  Not always possible with all features unfortunately though...

Another problem that comes up when you have more advanced anim systems is that you may be blending out an animation which is no longer relevant, but while it is blending out, it hits a key frame.  For instance if you a player is holstering a weapon, but blending out a fire animation that got interupted, you may get a "firegun" key string command, when you really don't want it because it's not relevant anymore.  Sometimes you would want a key string to fire in that case though, so there is no real global solution to the problem that I'm aware of.
<h2>Sockets</h2>
Now that we have a way of knowing WHEN to spawn a grenade in a grenade throw animation, we don't know WHERE to spawn it.  This is where sockets come in - no I'm not talking about TCP/IP or UDP sockets!

A seemingly obvious solution is probably to say which bone to spawn the grenade on in the "throw grenade" animation key string.    An issue here though is that maybe if you spawn it right on the "rhand" bone, it might clip through the hand (inter-penetrate the hand) and look sloppy.  Also, for other use cases, you might want to attach something where there isn't a bone nearby.

Another seemingly obvious solution might be to add extra bones to the animation data that aren't tied to any real geometry.  This way, you can use the bones to attach things to, or spawn things at, but they aren't tied to any real model geometry so you can make them move however you want.

The problem with this solution is that you are paying the cost of animating those bones even if you aren't using them for anything.  Enter sockets!

Sockets are a transformation (translation and rotation) away from a specified bone.  They are usually only calculated on demand so that when you aren't using them, you don't pay a price for having them.

This way, sockets act as very cheap attachment / reference points on a model during animations to attach other models to (such as capes, helmets, guns, grenades).

When a key string command takes a socket or bone as a parameter, you should have it accept either a bone or a socket.  They should be usable interchangeably, because sometimes you really do want to attach something to a bone, and you shouldn't make an animator make an extra socket just to make it match a bone.

We now have a way of specifying WHEN to spawn a grenade (via a key string), and also WHERE to spawn it (specifying a socket to spawn it at as a parameter to the key string command).
<h2>Animation Controller v2 - Blending</h2>
I mentioned popping earlier and said it was caused by a bone changing where it is or how it's moving by a drastic amount in a single frame.  If you've read my DIY Synth articles, you probably remember how important in audio programming it is to make sure that your sound data stays continuous.   The same is true of animation data, you have to make sure that bone motion / position stays continuous always, or else you'll get popping.

Just like in audio programming, you use envelopes to help keep things continuous when you add a new animation into the mix, or remove an old animation.

For instance, If a model is playing one animation and you tell it to play another, the new animation should start at a blend weight of 0.0 and slowly increase while the old animation decreases from a blend weight of 1.0 down to 0.0.  This gives you a nice smooth blend between two animations and works for MOST animations (more on that in a second).

Typically, when crossfading from one animation to another, the magic number is to blend over 0.2 seconds, but certain uses may warrant a longer or shorter blend time.  You might also blend out the old animation at a different rate than you blend in the new animation.  Give your animators the option to choose so they can do whatever they need.  They will be happy that they have the control, and you will be happy that you don't have to one off program things all the time for them.  Everyone wins!

What happens if you want to play an animation while an animation blend is in progress already?  0.2 seconds of blend time sounds like a short amount of time, but this actually comes up ALL THE TIME.

There are two ways to deal with this issue that I'm going to talk about.

The first way to deal with this problem is to keep a list of all the animations that are currently playing, so that if you tell the animation controller to play a bunch of different animations really quickly, it will end up sampling a bunch of different animations as various  ones blend out, and the final one is blending in.  This can result in A LOT of animation sampling which can take a serious toll on your game's performance.  I encountered a bug on a game I worked on once that caused around 100 animations to be getting sampled on a single model for several frames due to this problem and it made the game tank HARD.

The second way to deal with this, and how I like to implement it usually, is to make it so only two animations can play at once (a main animation and a blend animation) and you have another field on the animation controller which says what the next animation  to blend in is.

Going this route, when you say to play a new animation while a blend is in progress, it goes into the "next animation" field.  When the current blend is done, that next animation will blend in and the last one will blend out.

If there is already another animation in the "next animation field", it's replaced and it's never seen.

This way, only two animations will be sampled / blended at a time maximum, yet you will get a perfectly smooth blending between animations, and the controls will still feel fairly snappy, although there may be a noticeable delay in control response if animations change a lot really often.  You'll have to make a judgement call about the needs of your game.

Lastly, I said blending works nicely for most animations but not all.  One exception to this rule is when you try to blend different lower body animations together, such as trying to blend a walk animation and a run animation together.  Often times, the feet will be in different places and when you blend them, it makes the feet look like they are doing a little stuttering dance and it looks ugly.  I'll talk about getting around this specific problem in the next part, but as a preview, the short version of the solution is to make sure the feet are in the same positions at the same time for the two animations.
<h2>End of Part 1</h2>
At this point we have a fairly nice animation system but it isn't quite ready yet.  The most glaring problem we have is that we can only play full body animations still, which is not acceptable.  A real animation system NEEDS to be able to play different animations on different sets of bones independently.

We'll tackle that problem, and others, in part 2.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2012-09-21 20:28:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-22 04:28:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[anatomy-of-a-skeletal-animation-system-part-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="skeletal-animation"><![CDATA[Skeletal Animation]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495710825;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:55;}i:1;a:1:{s:2:"id";i:57;}i:2;a:1:{s:2:"id";i:59;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Anatomy of a Skeletal Animation System Part 2</title>
		<link>http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-2/</link>
		<pubDate>Sat, 22 Sep 2012 06:12:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-2/</guid>
		<description></description>
		<content:encoded><![CDATA[This is part two of "Anatomy of a Skeletal Animation System"
<ul>
	<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-1/">Anatomy of a Skeletal Animation System part 1</a></li>
	<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-2/">Anatomy of a Skeletal Animation System part 2</a></li>
	<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-3/">Anatomy of a Skeletal Animation System part 3</a></li>
</ul>
<h2>Animation Controller v3 - Bone Groups</h2>
In part 1, we talked about how to make a skeletal animation system that was able to play smooth, non popping animations on a model, it could communicate back to the engine to play sound effects, spawn objects in specific spots, and many other things as well.  What it could not do however, was play a different animation on the upper body and lower body.

To solve this, instead of having a single animation controller for our model, we need to have multiple animation controllers, where each controller controls a specific set of bones.  Note that multiple controllers should be able to affect the same set of bones, and in the end result, a bone's position is made up by blending the data from all animation controllers that affect it.

Each animation controller should have a blend weight so that it can be blended in and out to keep animation motion smooth and continuous, and also the blend weighting allows you to turn on and off specific animation controllers as needed.

Some great example uses for this are...
<ul>
	<li>Having a seperate animation controller for the upper and lower body so that they can work independently (the lower body can look like it's jumping, without having to care if the upper body is firing a gun or not).</li>
	<li>Having a seperate full body animation controller that affects all bones.  In most situations, this animation controller would be off, but in the rare cases that you want to play a full body animation, you turn this one on and play an animation on it.</li>
	<li>Having a facial animation anim controller that only turns on if the camera is close enough to a characters's face.  This way, if you look closely at another player, you can see their face moving, but if you are far away from them, the game engine doesn't bother animating the facial bones since you can't see them very well anyways.</li>
</ul>
The order that these animation controllers are evaluated should be explicit (instead of left up to load order or things like that).  You want to be very clear about which animation controllers over-ride which other animation controllers for the case of having multiple on at the same time, affecting the same bones.

For the sake of efficiency, when trying to blend the animation data together from each animation controller that affects that bone, you should start at the last fully weight (100% weight) anim controller in the anim controller list.  This way, you don't bother evaluating animations for anim controllers that are just going to be completely masked out by other animation controllers.

If there is no full weight anim controller in the list that affects the specific bone, initialize the bone data to the "T-Pose" animation position before blending the other anim controller bone data on top of it.

We now have a very robust animation system, but it isn't quite there yet.  Interacting with this animation system from game code means you having to tell specific game controllers when to play specific animations.   This is quite cumbersome and not very maintainable.  Ideally, the animation logic would be separated from the game play logic.  Besides making the code more maintainable, this means that non animation programmers will be able to write game play code that interacts with the animation system which is a big win for everyone.  Fewer development bottlenecks.
<h2>Animation Selection</h2>
There are two good techniques i've seen for separating the logic and preforming animation selection for you.

The first way is via "animation properties" and the second way is by using an animation state machine.  There are pros and cons to each.
<h4>Animation Properties</h4>
For the animation properties method, you essentially have a list of enums that describe the player's state.  These enums include things such as being able to say whether the player is crouched or standing, whether the player is unarmed, holding a pistol, or holding a rifle, or even how injured the player is (not injured, somewhat injured, or near death).

The game play code would be in charge of making sure these enums were set to the right values, and the animation controller(s) would use these values to determine the appropriate animations to play.

For instance, the game code may set the enum values to this:
<ul>
	<li>WeaponType = Rifle <em>(vs Unarmed, Pistol, etc)</em></li>
	<li>WeaponAction = Idle <em>(vs Firing, Reloading, etc)</em></li>
	<li>PlayerHealth = NearDeath<em> (vs healthy, injured, etc)</em></li>
	<li>MovementType = WalkForward <em>(vs Idle, Running, LungeRight, etc)</em></li>
</ul>
From here, the animation system takes over.

The lower body animation controller perhaps only cares about "MovementType" and "PlayerHealth".  It notices that the player is walking forward (WalkForward) and that they have very low health (NearDeath).  From this, it uses a table that animators created in advance that says for this combination of animation properties, the lower body animation controller should play the "WalkNearDeathFwd" animation.  So, the lower body animation controller obliges and plays that animation for the lower body bones.

The upper body animation controller perhaps just cares about WeaponAction, WeaponType and PlayerHealth.  It notices that the player has a rifle, they aren't shooting it, and they have very low health.  From this, the upper body animation controller looks into it's animation properties table and sees that it should play the "RifleIdleInjured" animation, so it plays that animation on the upper body bones.

The logic of game play and animation are completely seperate, and the animators have a lot of control over what animations to play in which situations.

Once again, you'd want an editor of some sort for animators to set up these animation properties tables so that it's easier for them to work with, it verifies the data to reduce the bug count, and everyone wins.

Your tool also ought to pack each animation properties table (upper body, lower body, facial animation, full body animation, etc) into some run-time friendly structure, such as perhaps a balanced decision tree to facilitate quick lookups based on animation properties.
<h4>Animation State Machine</h4>
Another way to handle animation selection is to have the animation controllers run animation state machines, having the game code send animation events to the state machines.  Each state of the state machine corresponds to a specific animation.

When the player presses the crouch button for instance, it could send an event to all of the animation controllers saying so, maybe ACTION_BEGINCROUCH.

Depending on the logic of the state that each anim controller state machine is in, it may respond to that event, or ignore it.

The upper body anim controller may be in the "Idle" state.  The logic for the idle state says that it doesn't do anything if it recieves the ACTION_BEGINCROUCH event, so it does nothing and keeps doing the animation it was doing before.

The lower body anim controller may also be in a state named "Idle".  The logic for the lower body idle state says that if it recieves the ACTION_BEGINCROUCH event, that it should transition to the "StartCrouch" state.  So, it transitions to that state which says to play the "CrouchBegin" animation (also says to ignore all incoming events perhaps), and when that animation is done, it should automatically transition to the "CrouchIdle" state, which it does, and that state says to play the "Crouching" animation, so it does that, waiting for various events to happen, including an ACTION_ENDCROUCH event to be sent from game code when the player lets go of the crouch button.

The interesting thing about the anim state machine is that it gives content creators a lot more control over the actual control of the player himself (they can say when the player is allowed to crouch for instance!) which can be either a good or bad thing, depending on your needs, use cases and skill sets of your content creators.

Going this route, you are going to want a full on state machine editor for content people to be able to set up states, the rules for state switching, and they should be able to see a model and simulate state switches to see how things look.  If you DO make such an editor, it's also a great place to allow them to define and edit bone groups.  You might even be able to combine it with the key string editor and make a one stop shop editor for animation (and beyond).
<h2>Animation Controller v4 - Animation Blend Trees</h2>
At this point, our animation system is in pretty good shape, but we can do a bit better before calling it shippable.

The thing we can do to really spruce it up is instead of dealing with individual animations (for blending, animation selection, etc), is to replace them with animation blend trees like the below:

<img src="https://demofox2.files.wordpress.com/2012/09/animtree.png" alt="Animtree" />

In the animation blend tree above, you can see that it's playing two animations (FireGun and GunSight) and blending them together to create the final bone data.

As you can imagine, you might have different nodes that preformed different functionality which would result in lots of different kinds of animations using the same animation blend tree.

You will be in good shape if you make a nice animation blend tree editor where a content creator can create an animation blend tree, set parameters on animation blend tree nodes, and preview their work within that editor to be able to quickly iterate on their changes.  Again, without this tool, everyone's lives will be quite a bit harder, and a little less happy so it's in your interest to invest the effort!

Some really useful animation nodes for use in the blend trees might include:
<ul>
	<li>PlayAnimation - definitely needed!</li>
	<li>AnimationSequence - This node has N number of "children" and will play each child in order from 1 to N in a sequence.  You may optionally specify (in the editor) that you want the children chosen at random and you specify a weighting to each child for the random choosing.  This is useful for "idle animations" so that periodically an idle character will do silly things.</li>
	<li>AimGrid - this animation node uses the player data to see yaw and pitch of the player's aim.  It uses this information to figure out how to blend between a grid of 9 animations of the player pointing in the main directions to give a proper resulting aim.  This node has 9 children, which specify the animations that specify the following aiming animations: Up Left, Up, Up Right, Left, Forward, Right, Down Left, Down, Down Right.  Note that since this is a generalized anim blend tree, these child nodes can be ANY type of animation node, they aren't required to be a "PlayAnimation" node.  This in essence is the basis of parametric animation (which i mentioned at the beginning of part 1), so this is a way to get some parametric animation into your system without having to go full bore on it.</li>
	<li>IK / FK Nodes - get full or partial ragdoll on your model.  Also get it to do IK solving to position hands correctly for specified targets and such.</li>
	<li>BlendBySpeed - You give N number of children, and movement speeds for each child.  This animation node will choose the correct animation, or blend between the correct animations, based on the current traveling speed of the player.  This way you get a smooth blend between walk, run and sprint animations and the player can move at whatever speed they ought to (perhaps the speed is defined by the pathing system, or the player's input).  To solve the problem of feet "dancing" as they blend, you need to make sure the footfalls happen on the same time (in %) on each animation that will blend together.  This way, the animations don't fight eachother, and the feet will appear to move properly.</li>
	<li>BlendByHealth - if you want the player to walk differently when they are injured, this node could be used to specify various walk animations with matching health levels so that it will blend between them (for upper or lower body or whatever else) as is appropriate for the player's current health level.</li>
	<li>Additive Blending - to get gun recoils and such</li>
</ul>
As you can see, animation blend trees have quite a bit of power.  They are also very technical which means engineers may need to help out content folk in making good trees to resolve some edge case bugs.  In my experience, animators are often very technical folk themselves, so can do quite a bit on their own generally.

Combine anim blend trees with the animation selection systems (FSM or anim properties) and the ability to smoothly blend an animation controller between it's internal animations (or anim trees) it's playing and you have a really robust, high quality animation system.

Often time with this work flow, an animator will just say "hey i need an anim node which can do X", so an animation engineer creates the node and the animators start using it to do interesting things.  No need for an engineer to be deeply involved in the process of making the animation work like the animator wants, or having to worry about triggering it in the right situations etc.

Sure there will be bugs, and some things will be more complex than this, but by and large, it's a very low hassle system that very much empowers content creators, and removes engineers from needing to be involved in most changes - which is a beautiful thing.
<h2>End of Part 2</h2>
This is the end of part 2.  In the next and final part, we'll talk about a few other miscellaneous features and optimizations.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date><![CDATA[2012-09-21 22:12:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-22 06:12:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[anatomy-of-a-skeletal-animation-system-part-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="skeletal-animation"><![CDATA[Skeletal Animation]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495713652;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:54;}i:1;a:1:{s:2:"id";i:57;}i:2;a:1:{s:2:"id";i:59;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Anatomy of a Skeletal Animation System Part 3</title>
		<link>http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-3/</link>
		<pubDate>Sat, 22 Sep 2012 06:51:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-3/</guid>
		<description></description>
		<content:encoded><![CDATA[This is part three of "Anatomy of a Skeletal Animation System"
<ul>
	<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-1/">Anatomy of a Skeletal Animation System part 1</a></li>
	<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-2/">Anatomy of a Skeletal Animation System part 2</a></li>
	<li><a href="http://blog.demofox.org/2012/09/21/anatomy-of-a-skeletal-animation-system-part-3/">Anatomy of a Skeletal Animation System part 3</a></li>
</ul>
<h2>Animation System Optimizations and Features</h2>
Here are some various animation system optimizations and techniques that you might find useful...
<h3>Multithreaded Animation Blending</h3>
If you are even mildly comfortable writing multithreaded code, this one is fairly easy to implement.

Basically every animated model that needs an update goes into a queue every frame.  (Things that haven't been on screen for a little while could be exempt from the list so you don't waste time on things that aren't being rendered)

At some point in your main loop, you do the animation sampling / anim blend tree blending / etc work to come up with the final bone group.  You do this by grabbing the first model in the queue, processing it, then moving to the next model.

Your main loop doesn't continue until all of the models have been processed.

Now, imagine that you had other worker threads also grabbing models from the queue and processing them, and that the main thread will wait to continue the main loop until the queue was empty and all models had been processed.

TA-DA!  You are done and have multithreaded animation blending.  It can help A LOT, depending on how many hardware threads you have available for helping work.
<h3>Bias / Gain Curves in Anim Blends</h3>
With normal animation blending, it's a linear crossfade from one animation to another.

Sometimes, an animator can make things look nicer if they have the option of doing non linear crossfading.   One nice option for doing this is exposing a bias and gain parameter to the blend in / out parameters.

Bias and gain are great ways of letting content creators create non linear curves for a variety of uses.  Ken Perlin did a lot of work in this area, but in "Game Programming Gems 2", a guy named Cristophe Schlick presented some simplified, quick equations to calculate approximations of bias and gain.

I highly recommend checking that out and using them for this, and everything else in your game. Using bias and gain you can do things like have your camera move from point A to point B, but start out fast and slow down as it gets closer to B, giving it a nice organic feel to it, instead of a rigid lerp.  With bias and gain you pass in a % and get out a different %.  Real simple to use and extremely useful in every part of your game just about.

Here's an interactive demonstration of the bias/gain functions I made.  The source code for the functions are there too:
<a href="http://demofox.org/biasgain.html">HTML5 Bias and Gain</a>

<h3>Round Robin Anim Evaluation</h3>
There are some situations when you don't need every model to have perfectly up to date animation data every single frame.  One example of this is if you are simulating the game world on a server, where skeletal animation data doesn't need to be perfectly up to date since network latency already makes it somewhat innacurate.

In these cases, one thing you could do is split the list of models you need to update into perhaps 4 different lists.  Then, each frame, you only process one of the 4 lists, thus reducing your animation CPU load down to 25% of what it was.  Quick and easy way to save some real CPU time quickly if you don't need the most up to date animation data all the time.
<h3>Pose Sharing</h3>
Sometimes you have a lot of different models where many of the models are preforming the same animations - such as if you have a crowd of people in a crowded area.

One way to deal with this is to let some of the people doing the same animations SHARE their computed animation data.

If you are in a crowd, and there's lots of different looking people walking all sorts of different directions, you aren't going to easily notice that there are people who are using the exact same bone data, but facing different directions.

Going this route, if you have a group of 4 let's say that all share the same bone data, you only need to calculate it for one person, and the rest of the group uses the data already calculated.

Less animations to sample and blend so you gain some CPU back.
<h3>Skeleton LODing</h3>
As things get farther away, or smaller, the smaller details are less noticeable.  Because of this, you can "remove" bones from a skeleton as a model is farther away.  I mentioned this briefly with facial animations, but the same is true of arm bones, leg bones, hand bones, etc.

You just have to make sure your anim system is able to handle LODing out bones gracefully (no popping) and efficiently (no excessive processing to get a lower LOD skeleton, it should just be a flag on the bones or something).
<h2>Runtime Debugging Essentials</h2>
Here are some debugging tools that I've found essential in debugging day to day animation bugs (popping, twitching, incorrect animations, etc).
<h3>Real Time Info On Screen</h3>
You really need the ability to show some kind of status on screen for a specified model.  The info should show what animations are playing on which animation controllers, the current time of the animation controller, the playback rate of the controller, the state of the state machine, etc.

Using this, when you see a pop, you might see that for a fraction of a second, that an animation switches from one animation to another, then back to the first.   From there you can go on debugging it further.
<h3>Timeline Log</h3>
Sometimes it's useful to be able to turn on animation logging for a specified model.  This way, you can generally log more info than you can on the screen in real time, and can also take your sweet time looking at very small intervals of time to see what went wrong and why.

Very useful.
<h3>Show the Bones</h3>
Sometimes you really just need to be able to look at the skeleton to see an issue more clearly, or be able to determine if the problem is with a model or the animation data.

Having a way to turn on bone rendering such that it draws 2d (unprojected) lines on the screen showing the bones of a specified model is very useful.  Also sometimes it's nice to be able to see the bones of all the animation data that went into the final blended pose, instead of just seeing the final blended pose.
<h3>Control Time Itself!</h3>
Lastly, sometimes it's really useful to be able to slow down time to see a problem in greater detail.  Rarely, it's also useful to be able to speed up time.  Having the ability to do both while the game running can be a really big help.
<h2>That's All She Wrote</h2>
That, and MURDER I mean.

I hope you enjoyed these articles on the anatomy of a skeletal animation system.  Drop me a line or post a comment if you have any questions or comments (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2012-09-21 22:51:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-22 06:51:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[anatomy-of-a-skeletal-animation-system-part-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="skeletal-animation"><![CDATA[Skeletal Animation]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495713652;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:54;}i:1;a:1:{s:2:"id";i:55;}i:2;a:1:{s:2:"id";i:59;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bias And Gain Are Your Friend</title>
		<link>http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/</link>
		<pubDate>Tue, 25 Sep 2012 06:36:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/</guid>
		<description></description>
		<content:encoded><![CDATA[Often times in game development, you have situations where you want an object to move from one place to another, you want something to grow or shrink from one size to another, you want a color to change from A to B, or any other one of the myriad tasks where you want to do something from A to B over time (or over distance).

That's pretty abstract but let's take some examples:
<ol>
	<li>You want to move a camera along a straight line from A to B</li>
	<li>You want to raise the lighting from dark to bright in a room</li>
	<li>When the player clicks an icon, you want to grow a window from small to big</li>
	<li>You want to cross fade one skeletal animation to another via the blend weights of the animations (an example from my <a href="http://blog.demofox.org/anatomy-of-a-skeletal-animation-system/">Anatomy of a Skeletal Animation System</a> articles)</li>
	<li>You want to use a gradient in a shader for some effect.</li>
</ol>
When you are doing these things, it's real easy to take a percent based on time or distance and just use that percent raw to make a linear effect.   Often times a linear effect just isn't good enough though because it looks or feels mechanical instead of organic, and unpolished.

Often times the way these things are softened and made more organic is by giving a content creator a curve editor so that they can soften the edges, speed up or slow down the processes over time or distance.

Many game engines don't come with curve editors that can be easily used for these purposes, and other times you just want to deal with it in code for one reason or another, so don't have the luxury of giving a content creator carte blanche with a curve editor.

There are a couple techniques for handling these situations but I want to talk to you about 2 of my favorite techniques, which are Ken Perlin's bias and gain functions.  I actually use Christophe Schlick's faster approximation functions (as seen in game programming gems 2), but the end result is the same thing.

If you want to skip ahead and see these things in action, I made an interactive demonstration about these functions, check em out! <a href="http://demofox.org/biasgain.html">HTML5 Bias and gain</a>
<h2>Bias - Not as in bigotry</h2>
The bias function takes in a number between 0 and 1 as input (I like to think of this as the percent) and also takes a number between 0 and 1 as the "tuning parameter" which defines how the function will bend your curve.

With a value of 0.5, the percent you put in is the percent you get out (so is linear), but if you put in a number &gt; 0.5 or &lt; 0.5, that's when the interesting things happen.

Shown here are graphs of the bias function with parameters of 0.5, 0.25, 0.75 and 0.97:

<img src="https://demofox2.files.wordpress.com/2012/09/bias05.png" alt="Bias 0.5" /> <img src="https://demofox2.files.wordpress.com/2012/09/bias025.png" alt="Bias 0.25" /><img src="https://demofox2.files.wordpress.com/2012/09/bias075.png" alt="Bias 0.75" /><img src="https://demofox2.files.wordpress.com/2012/09/bias097.png" alt="Bias 0.97" />

In javascript, the code for bias looks like this:

<code>
function GetBias(time,bias)
{
&nbsp;&nbsp;return (time / ((((1.0/bias) - 2.0)*(1.0 - time))+1.0));
}
</code>
<h2>Gain - Not as in my weight during the holidays</h2>
The gain function is like bias in that it takes in both a 0 to 1 input (I think of this as the percent as well) and also takes a number between 0 and 1 as the "tuning parameter".

Again, with a value of 0.5, the percent you put in is the percent you get out (again, this makes it linear) but if you put in other numbers, you get interesting curves.

Here are graphs of the gain function with the same parameters of 0.5, 0.25, 0.75 and 0.97:

<img src="https://demofox2.files.wordpress.com/2012/09/gain05.png" alt="gain 0.5" /><img src="https://demofox2.files.wordpress.com/2012/09/gain025.png" alt="Gain 0.25" /><img src="https://demofox2.files.wordpress.com/2012/09/gain075.png" alt="Gain 0.75" /><img src="https://demofox2.files.wordpress.com/2012/09/gain097.png" alt="Gain 0.97" />

In javascript, the code for gain looks like the below.  You might notice it makes use of the GetBias function.  Gain is just bias and reflected bias.

<code>
function GetGain(time,gain)
{
&nbsp;&nbsp;if(time < 0.5)
&nbsp;&nbsp;&nbsp;&nbsp;return GetBias(time * 2.0,gain)/2.0;
&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;return GetBias(time * 2.0 - 1.0,1.0 - gain)/2.0 + 0.5;
}
</code>
<h2>That's It!</h2>
Well that's about it, pretty straightforward stuff.  Wherever you find yourself using a percent in your code, you can try passing it through a bias / gain function (and optionally exposing the tuning parameter to content creators) and see if you can make things feel a little more organic and polished.

Sometimes its the little things that make the biggest difference!

One again, the link to the interactive example of these things is at:
<a href="http://demofox.org/biasgain.html">HTML5 Bias and Gain</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date><![CDATA[2012-09-24 22:36:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-25 06:36:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bias-and-gain-are-your-friend]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495691460;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:54;}i:1;a:1:{s:2:"id";i:57;}i:2;a:1:{s:2:"id";i:55;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to Render the Mandelbrot Set</title>
		<link>http://blog.demofox.org/2012/09/25/how-to-render-the-mandelbrot-set/</link>
		<pubDate>Wed, 26 Sep 2012 03:57:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/09/25/how-to-render-the-mandelbrot-set/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://demofox.org/Mandelbrot/"><img src="https://demofox2.files.wordpress.com/2012/09/mandelbrot.png" alt="mandelbrot set" /></a>

The Mandelbrot set is a beautiful creation of mathematics discovered by a French-American mathematician named <a href="http://en.wikipedia.org/wiki/Beno%C3%AEt_Mandelbrot">Benoit Mandelbrot</a>.  it is also a fractal, meaning that it's infinitely detailed and that it's self-similar and made up of smaller versions of itself.

Wikipedia does a better job of explaining the history and the background more than I do so please check out this link for more info!

<a href="http://en.wikipedia.org/wiki/Mandelbrot_set">Mandelbrot Set</a>

I also wrote an HTML5 powered mandelbrot set viewer that you can use to explore the fractal and manipulate colors to create your own mathematical works of art.

<a href="http://demofox.org/Mandelbrot/">HTML5 Mandelbrot Explorer</a>

In this article I'm going to explain how to render a Mandelbrot set yourself.  It's going to be from a programming slant more than a mathematical slant so if you want the raw unadulterated math, I recommend checking out Wikipedia or other sources.
<h2>Rendering the Mandelbrot Set</h2>
The first step is to have some way to draw individual pixels on a canvas of some sort.  It doesn't matter what method you go with, it just matters that you are able to draw pixels somehow.

Various ways include:
<ul>
	<li>direct pixel accesss in HTML5 (what my Mandelbrot Explorer uses)</li>
	<li>drawing pixels into an image file</li>
	<li>using DirectX or OpenGL to render it to a 2d screen buffer.</li>
	<li>using graph paper, a calculator and some colored pencils to create it by hand (Possible, but ouch! Send me a picture if you actually do this! hehe)</li>
</ul>
<h2>Viewport</h2>
Now that you have a rectangle that you are able to render pixels to, we need to define a viewport.

In the Mandelbrot Set image at the top of this article, my rectangle is about 500x500 pixels big, and the x axis ranges from -2.5 to 2.5 and the y axis also ranges from -2.5 to 2.5.

I like to define my viewport in terms of the center point, and the width and height, so our viewports parameters are a center point of (0,0) and width and height of 5.

We have now established the parameters of our viewport!

We now need to iterate through each pixel in our rectangle and do the following steps for each...
<h2>Pixel Space to Viewport Space</h2>
The first thing we need to do is convert from pixel coordinates to viewport coordinates.

How we do that is like this:
ViewportX = ViewportMinX + (PixelX / PixelWidth) * ViewportWidth
ViewportY = ViewportMinY + (PixelY / PixelHeight) * ViewportHeight

After we have converted our pixel's location from pixel space to viewport space, we are ready to do some math.
<h2>The Magical Mandelbrot Function</h2>
Like I mentioned earlier, the Mandelbrot set is a work of mathematical art.  The function itself isn't very complex but it involves imaginary numbers.  To calculate the Mandelbrot set itself, you plug the viewport location of the pixel into the function.  After that, you take the output of the function and plug it back into the input of the function.  You continue this until the output of the function goes above some value (the common value to use is 2.  You'll see me compare against 4 because I'm comparing squared numbers).  If the output goes above the threshold, it has essentially "escaped".

There are pixels which may take a very very very large amount of iterations to escape, and as far as I know, they haven't proven that all values will escape (I could be wrong though), so besides waiting for the function to "escape", you should also set a maximum iteration count to keep it from iterating forever (or for a very long time).

The number of iterations it took to escape is what you use to set the pixel color for that pixel.

Here is some code (pseudo javascript) to show you the details of that process:

[code language="cpp"]
var g_maxIterations = 255; //TODO: set this to however many iterations you want to allow maximum
var currentX;  //TODO: need to set this to the viewport X location of the current pixel
var currentY;  //TODO: need to set this to the viewport Y location of the current pixel

var z = 0;
var zi = 0;
var inset = true;
var numInterations = 0;

var newz;
var newzi;

for(indexIter=0; indexIter<g_maxIterations; ++indexIter)
{
	newz = (z*z)-(zi*zi) + currentX;
	newzi = 2*z*zi + currentY;
	z = newz;
	zi = newzi;

	if(((z*z)+(zi*zi)) > 4)
	{
		inset = false;
		numInterations = indexIter;
		indexIter = g_maxIterations;
	}
}

if (inset)
{
	//we never escaped, this pixel is the default color
	//TODO: render a default color pixel
}
else
{ 
	//we escaped!  numInterations is how many iterations it took
	//TODO: convert iterations to a color and render the pixel
}
[/code]
<h2>Colorizing The Pixel</h2>
There are several ways you could turn an iteration count into a color for a pixel.  There are some ways listed below, but this is definitely not an exhaustive list!  Play around with your own techniques and see what sort of interesting things you can create!
<ul>
	<li>Make a maximum iteration time of 255.  Make your output image be an 8bit greyscale (or color palleted) image, taking the iteration count and writing that out raw as the output color.</li>
	<li>Make several ranges of iteration values (for instance... 0-255, 256-511, 512-767, etc) where you define a full RGB color at each edge of the value ranges.  From there, figure out where your iteration count falls within the value ranges, and do a lerp between the color to the left and the color to the right based on your distance in the specific value range.  This way, you have smoothly blending color gradients and can go well beyond 255 maximum iterations.  I use a variation of this in my HTML5 Mandelbrot Explorer.</li>
	<li>Use arbitrary math functions to figure out the RGB of each pixel.  Such as R = Iterations % 256, G = (Iterations * 3) % 256, B = (Iterations * 7 + 39) % 256.</li>
</ul>
After you have the color for your pixel, you are done.  Render that pixel, then move to the next until you have rendered them all.
<h2>Zooming and Panning (Scrolling)</h2>
By virtue of setting up a viewport as a centerpoint and a width and height, and making the code use that information to convert from pixel space to viewport space, we have made it really simple to implement zooming and panning.

To zoom in, just set your viewport width and height to be smaller (like divide them by 2 for instance).   To zoom out, set your viewport width and height to be larger.  You want to make sure and keep the same aspect ratio (width / height) in your viewport as your rendering rectangle to avoid distortion though, so be careful.   OR, you may want the distortion... it's up to you (:

To pan the screen, or scroll it left, right, up or down, you just change the centerpoint to be more to the left, the right, higher, or lower.

Very simple, but it is really fun to scroll around and zoom in and out on the fractal to discover new and interesting features to share with your friends.

If you zoom in far enough, you might notice that at some point you have vertical or horizontal lines instead of the fractal shape, and that if you zoom in a little bit more, you'll get a solid color.

You might ask yourself "Hey, I thought he said fractals were infinitely detailed?"

Well they are infinitely detailed, and in theory you could zoom in FOREVER and always see more and more things, but computers themselves don't have infinite precision (it would take a computer infinitely large to let you zoom in infinitely), and you are just seeing the edge of the precision of your computer.

If you are using a language like C++, you can change your code to use doubles instead of floats to get a little more breathing room, or another option is to use a scientific mathematics library that is capable of a lot more precision than floats or doubles.
<h2>That's All!</h2>
That's really all there is to it, not that complex is it?

As I keep mentioning, I made something that allows you to explore the Mandelbrot Set in your browser.  You can find that here: <a href="http://demofox.org/Mandelbrot/">Mandelbrot Explorer</a>

Anyways, if you have any questions or comments or want to share some screenshots of creations you made, drop me a line or leave a comment in the comments section with a link to your creation for other people to check out too!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2012-09-25 19:57:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-26 03:57:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-render-the-mandelbrot-set]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fractals"><![CDATA[Fractals]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495578359;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1325;}i:1;a:1:{s:2:"id";i:2754;}i:2;a:1:{s:2:"id";i:78;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>B.A.M. Neural Networks</title>
		<link>http://blog.demofox.org/2012/10/23/bam-neural-networks/</link>
		<pubDate>Wed, 24 Oct 2012 05:10:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/10/23/bam-neural-networks/</guid>
		<description></description>
		<content:encoded><![CDATA[Neural networks (officially "Artificial Neural Networks") are computer simulations of neurons.  Simulating neurons in software allows programs to do things that you would normally need a human brain to do, such as recognizing patterns, learning over time, or making non-obvious decisions based on complex data.

Simulating neurons is not enough to create human levels of intelligence however.  Last I heard, someone could make toddler level intelligence via neural networks, but even that is somewhat misleading since toddlers can walk, use vocal chords, swim and understand complex emotions, while the neural network could do none of those things.

Despite the limitations of neural networks, there are quite a number of practical uses of artificial neural networks in the real world.  These uses include...
<ul>
	<li>Helping missiles identify enemy tanks or combatants on the battlefield</li>
	<li>Helping to predict stock market trends (It's rumored that several top traders have proprietary neural networks which help them preform better)</li>
	<li>OCR (turning scanned images into text documents based on the text in the image)</li>
	<li>General machine vision (like, for robots or security systems)</li>
	<li>Controlling complex machinery at speeds a human wouldn't be able to keep up with</li>
	<li>Facial recognition in computers</li>
	<li>Diagnosing medical conditions</li>
</ul>
I was reading an article in Scientific American recently about how a girl in high school trained a neural network to recognize certain types of cancer with 99% accuracy.   She trained a neural network to analyze the results of a non-invasive cancer test which up til then had been too unreliable to use in any realistic situation.  Her neural network learned some hidden pattern in the data that we have not yet discovered or understood.

Just like in that example, you can feed a network complex data for it to look for patterns in, but unfortunately it won't be able to explain to you what it learned, or what it looks for when trying to recognize patterns.  It can learn, but it can't tell you what it learned.

My friend Doug often tells a funny story where this didn't work out so well.  I'm not sure if it's true exactly as told or not, but it definitely is plausible.  Apparently the US army for whatever reason was training a neural network to recognize tanks in the battlefield (surely for a missile or perhaps some kind of recon drone).

They fed the network hundreds or thousands of photos which either contained a tank or did not.  While they fed each picture to the neural network, they also told it "yes this photo contains a tank" or "no, this photo does not contain a tank" so that it was able to infer what it was that people were trying to teach it.

The network learned well, and with their sample photos, it was getting a very high rate of correct answers about whether a tank was there or not.

However, when they deployed this to the battle field (or perhaps, just a realistic live test run), it failed miserably and was getting near 0% accuracy.

Since the network wasn't able to explain it's thought process, the people involved were forced to try and deduce what the problem was and eventually they noticed a pattern....

The photoshoots apparently happened on 2 seperate days... on the first day they took pictures of tanks, and the second day they took pictures without tanks.  The unfortunate truth is that it was overcast on the first day, but clear skies and sunny on the second, which means.... the neural network learned to distinguish between a sunny day and an overcast day, not whether nor not there were tanks present!

A pretty funny story, but it shows the importance of giving good, realistic data to your network to learn from, or else you can run into silly problems like that!
<h2>Types of Neural Networks</h2>
There are a lot of different types of neural networks that have different properties and so thus are useful in different situations.

Some of the main types of flavors are...
<ul>
	<li>Supervised learning - Just like in the tank example above, you give information to the neural network to learn, and you also tell it the information it should learn from each peice of data (ie... here's a picture, it DOES contain a tank).</li>
	<li>Unsupervised learning  - These work by finding natural groupings of input data.  You can then look at the groupings (or ask it to group more data) and can gain information about the nature of the data itself.  This is often used for data mining, having the neural network pick out interesting correlations in the data that a human might not figure out.</li>
	<li>Some networks are static once they are created and are unable to learn further.</li>
	<li>Other networks are able to continuously learn as they get more and more data.</li>
</ul>
<h2>Local Minima vs Global Minimum</h2>
Just like a human brain, a neural network is not infallible.  It can often think that is has found an answer, or something of interest, when in fact it hasn't.

Similarly, we as humans can sometimes think we've found a solution to a problem, and then someone comes along and says "You forgot to consider this part of it!" and suddenly you realize your solution is not the right answer and it's back to the drawing board.

A neural network can have the same issue believe it or not.  This can come from the fact that it wasn't provided with good enough data to learn from, or, just because!  Just like humans, it can either just learn something wrong, or be incorrect about an answer.

If you think of a problem space as a graph, you can think of the lowest point on the graph being the optimal solution.  How neural networks work is by starting at some point on the graph (often chosen randomly) and then traveling downhill til it finds the bottom of a dip.

This works great if you happen to find the lowest dip in the graph (also called the global minimum), but if you find a dip that isn't the lowest, you have effectively become trapped in a local minima, and end up with the wrong answer, or an imperfect understanding of the problem space.

<img src="https://demofox2.files.wordpress.com/2012/09/minima.png" alt="minima" />

There are ways of dealing with this problem luckily.  One way is that if you find a minima, remember where it was at, but then choose another random point on the graph and try again to see if you find a deeper minima.  Rinse and repeat until you are reasonably satisfied with the results.

Have you ever been stuck trying to figure something out and forgotten about it (or went to sleep), only to come back to it later and find the answer.  I personally attribute that phenomenon to this "randomization" effect.  I don't know the results of studies to this effect, but if you stop thinking about something for a while, then come back to it, you often see it from a different angle (essentially starting at a different spot on the problem space graph) and can sometimes figure out a better solution, or a deeper understanding of the problem (pun intended!)

Anyways, for normal problem spaces, they probably aren't going to be just 2d like the above, but are perhaps 3d, 4d, or even higher dimensions.  In the end though, the neural network still is just trying to find the deepest valley it can find by essentially traveling downhill.

Now that you know the basics of neural networks, let's get onto the implementation of one type of neural network!
<h2>Bidirectional Associative Memory (AKA BAM)</h2>
Bidrectional associative memory is perhaps the easiest useful neural network to create.  All you need is the ability to multiply vectors by other vectors, multiply vectors by matrices, and add matrices together.  If you know how to do those 3 things, you will be able to program your own neural network very quickly and easily.

In fact, I learned about this guy when I was 14 or so, and was able to implement a simple OCR system using microsoft excel (seriously!) :P

The main point of BAM is to act as memory, where you can teach it to associate several patterns together.  This way, if you teach it to associate a pattern A with a pattern B, when you give it A again, it will spit out B.  Since it's bidirectional, you can also give it pattern B and it will spit out pattern A in response.  You can teach it several pattern pairs to associate, and can even corrupt some of the data, and it will give you what it thinks is the best match for the data you gave it.  Just like a human brain, it sort of uses it's best judgement and can say "umm... i think you meant pattern D but I'm not quite sure".

Besides associating different patterns, you can also associate patterns with themselves (such as associating pattern A with pattern A and pattern B with pattern B).  If you do this, you are able to put in possibly corrupted data and it will give you what it thinks the data really is.  This way, if you have data that is noisy because it came over the radio, or because you scanned a document with a low quality scanner, it will be able to see through the noise and pick out the correct data (hopefully) in the same way a human could.  There are limits to this of course though, just like sometimes we can't make out messy handwriting sometimes.

While BAM is useful, even in some realistic uses of neural networks, it also is a little bit limited compared to more sophisticated neural network implementations.
<ul>
	<li>BAM is fairly limited in how many patterns you can teach it</li>
	<li>You have to teach it in advance via supervised learning.  No further learning happens after it's created.</li>
	<li>It's fairly strict in it's mapping from input to output.  This means if you use it to recognize written or typed letters, it will be thrown off by variations in handwriting or different fonts.</li>
</ul>
That being said, it's still pretty cool, and lots of fun to play with.
<h2>Creating a BAM Network</h2>
Creating a BAM network is pretty straight forward.  It has M input bits (you decide how many that is) and N output bits (again, you decide how many that is).

Once you have all of your input / output data pairs, the first step is to convert all the zeros in your pattern pairs to -1's.   Where 0's and 1's is called binary, this form of -1's and 1's is called "unipolar".

Then, for each pattern you multiply the input pattern vector, by the transpose of the output pattern vector (turn it on it's side) so that when you multiply them together, you get a matrix that is MxN in size.

Continue this for each data pair so that you end up with one matrix per data pair.

Then, add all the matrices together so that you end up with a final matrix.  This is your trained neural network!

In the BAM neural network, the neural topology is that there are M input neurons and N output neurons, with no neurons in between.    The more neurons you have in your network, the more data the neural network is able to store, and the more distinctions between different types of data it's able to make.  The fact that there are only 2 layers of neurons in BAM is part of the reason for it's limitations.

For more information about why 2 layers of neurons are limited in their learning, I recommend searching for information on the perceptron xor problem and linear separability.  A 2 layer network is inherently incapable of preforming (and perhaps "understanding") xor!
<h2>Using a BAM Network</h2>
To use a neural network, you take an input vector (in binary) of size M and multiply it by the matrix.  This will result in a vector of size N that it made up numbers which may be positive, negative, or zero.  Convert all positive numbers to 1 and all negative numbers to 0, and you'll end up with the N sized output pattern that the neural network associated with.

Dealing with zeros is sort of up to your own discretion unfortunately.  I've seen some people say that zeros should be treated as 1's, other people say that zeros should be treated as 0's, and other people have other rules such as "if it's zero, set it to whatever that bit output the last time you had it output something" which IMO is a pretty odd way to deal with it.  I think this is an unfortunate flaw in how the BAM network works, but you can also chalk this up to the network being uncertain of the result, which it basically is.

Since BAM networks are bidirectional, you can also take the transpose of your matrix (turn it on it's side) and then multiply it by a vector sized N to get a vector of size M as output, which is the vector associated with your N sized input vector.  So, it works both ways; you can put in an input pattern and get an output pattern out, or you can put in an output pattern and get an input pattern back.

Don't forget... you can also associate patterns with themselves if you want it to do "pattern recognition" instead of "pattern association".
<h2>Example</h2>
Let's say we want to have an input size of 6 bits and an output size of 4 bits and that we have these 2 data pairs that we want to associate in the neural network:
<ol>
	<li>101011 &lt;-&gt; 0010</li>
	<li>110010 &lt;-&gt; 0101</li>
</ol>
The first step is to convert all zeros to -1's.  Doing so our data pairs become this:
<ol>
	<li>1 -1 1 -1 1 1 &lt;-&gt; -1 -1 1 -1</li>
	<li>1 1 -1 -1 1 -1 &lt;-&gt; -1 1 -1 1</li>
</ol>
The next step is to multiply the input patterns with the output patterns to make a 6x3 matrix for each pattern pair.

First Pair:
1   * [-1 -1 1 -1]
-1
1
-1
1
1

=

-1 -1 1 -1
1 1 -1 1
-1 -1 1 -1
1 1 -1 1
-1 -1 1 -1
-1 -1 1 -1

Second Pair:
1  * [-1 1 -1 1]
1
-1
-1
1
-1

=

-1 1 -1 1
-1 1 -1 1
1 -1 1 -1
1 -1 1 -1
-1 1 -1 1
1 -1 1 -1

Next up, you add all the matrices together to get the final trained neural network:

-1 -1 1 -1
1 1 -1 1
-1 -1 1 -1
1 1 -1 1
-1 -1 1 -1
-1 -1 1 -1

+

-1 1 -1 1
-1 1 -1 1
1 -1 1 -1
1 -1 1 -1
-1 1 -1 1
1 -1 1 -1

=

-2 0 0 0
0 2 -2 2
0 -2 2 -2
2 0 0 0
-2 0 0 0
0 -2 2 -2

Now that we have our trained neural network, let's plug in our first input pattern to make sure we get our first output pattern

-2 0 0 0
0 2 -2 2
0 -2 2 -2
2 0 0 0
-2 0 0 0
0 -2 2 -2

*

1
0
1
0
1
1

=

-4 -4 4 -4

When we convert negatives to zeros, and positives to ones we get:

0 0 1 0

Which is the first output pattern.  It recalled our pattern correctly!

Next, let's put the second output pattern into the transposed matrix to see if we can go the opposite direction and recall the second input pattern.

-2  0  0  2 -2  0
0  2 -2  0  0 -2
0 -2  2  0  0  2
0  2 -2  0  0  2

*

0
1
0
1

=

0 4 -4 0 0 0

Converting that to binary by turning negatives into zeros, and non negatives into ones, and zeros into question marks we get:

? 1 0 ? ? ?

The pattern it was supposed to recall is:

1 1 0 0 1 0

The two bits that it did recall are correct, but as you can see it only recalled 2 of the 6 bits.  Not very good!

With just two patterns, the network was unable to recall some of the info it was trained with.

Normally BAM isn't this bad, it looks like I just chose some unfortunate input / output pairs.  If you encounter problems with a network recalling data, sometimes adding more neurons (larger input or output patterns) can help, but sometimes that will be ineffective too.  Like i mentioned earlier, a neural network that has only 2 neuron layers - like BAM does - is incapable of learning XOR, no matter how many input or output neurons you have, so these types of networks are somewhat limited.
<h2>Using for OCR</h2>
If you wanted to use a BAM network for being able to recognize drawn or written letters, one way to do so would be to say "we are going to store our letters in an 8x8 black and white grid".

That means that you have a grid of binary (black / white) that is 8x8.  Another way to represent the grid of binary would be just to have 64 bits in a row.

So, for the letters you want to train the network to recognize, you would just draw out your letters in an 8x8 grid, take each letter as it's 64 bits, and associate each letter with itself.

Your network matrix will be 64x64 but will be able to do simple OCR on 8x8 black and white images.

Often times, images will come to you in color, or not in 8x8 resolution, but what neural network engineers often do in this situation is they will process the images in advance to make them black and white, and 8x8, before feeding them into the neural network.

Now, you are able to feed characters into your neural network and it will attempt to correct any corruption in the image, and return to you an 8x8 image of what it think you entered.

Instead of associating a letter's image with itself, you can also associate it with a number (say, the ascii code?) so that when you put in the image of a character, it will spit out the number corresponding to the closest match it can find instead of the raw character image itself.
<h2>That's All!</h2>
BAM is a nice introductory neural network that nearly anyone can implement.  It may be limited in some ways, but it actually is used in the real world for some applications.

In the future I'll write about some more advanced neural networks, but until then, I hope you found this informative, or at least interesting! (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date><![CDATA[2012-10-23 21:10:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-10-24 05:10:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bam-neural-networks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="neural-networks"><![CDATA[Neural Networks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495705592;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5803;}i:1;a:1:{s:2:"id";i:5999;}i:2;a:1:{s:2:"id";i:6208;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mechanical Computer Quest Part I</title>
		<link>http://blog.demofox.org/2012/11/28/mechanical-computer-quest-part-i/</link>
		<pubDate>Thu, 29 Nov 2012 07:20:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/2012/11/28/mechanical-computer-quest-part-i/</guid>
		<description></description>
		<content:encoded><![CDATA[For years I've been wanting to make mechanical logic gates that i could put together into mechanical logic circuits.  I want to do this mostly for novelty purposes, but I also think it could be leveraged into either an entertaining learning device, or some sort of game or puzzle.

Since I'm a software engineer, one of the main problems I've had is my inability to manifest my ideas in a physical way.  Thanks to some modern technology, I think I might be able to partner up with my good buddy Eric and finally make this idea into a reality!

I'm sure some of the things I'm trying to figure out are solved problems, but I want to try and figure it out as much as I can before researching the right way to do it hehe.

Here is some basic background knowledge relating to what I'm trying to achieve, as well as my plans for moving forward.
<h2>Logic Gate Basics</h2>
Logic gates are the basic building blocks of logic circuits and computers.  You can put them together in various ways to make lots of different things happen such as adding or multiplying numbers together, or comparing two numbers to see which is bigger.

The basic logic gates themselves take in either 1 or 2 inputs, and give one output.  The inputs and outputs are binary where each one is either a one or a zero.

The 3 basic textbook logic gates are AND, OR and NOT.

AND: this takes in two inputs and gives one output.  If both inputs are 1, it gives a 1 as output, else it gives a 0 as output.

0 AND 0 = 0
0 AND 1 = 0
1 AND 0 = 0
1 AND 1 = 1

OR: this takes in two inputs and gives one output.  If either input is 1, it gives a 1 as output.  If the inputs are both 0, it gives a 0 as output.

0 OR 0 = 0
0 OR 1 = 1
1 OR 0 = 1
1 OR 1 = 1

NOT: this takes in one input and gives one output. If you give it a 1, it gives out a 0.  If you give it a 0, it gives out a 1.

NOT 0 = 1
NOT 1 = 0

If you are able to do these 3 things, and combine them together arbitrarily, that is considered "Turing Complete".  That basically means it's capable of doing anything a computer can do, but check out this wikipedia page for more information <a href="http://en.wikipedia.org/wiki/Turing_completeness">http://en.wikipedia.org/wiki/Turing_completeness</a>.
<h2>Mechanical Logic Gates</h2>
To make mechanical versions of these things I was thinking of having each logic gate a self contained object that had sticks for input and output.  If a stick was pushed "up" it would be a 1, if a stick wasn't pushed up, it would be a 0.

I then set out to make a wooden prototype of each gate to make sure I had the basic designs worked out.
<h3>NOT</h3>
To make a NOT gate, you would have a box with an input stick going into it and an output stick coming out of it.  If you pushed the input stick up, the output stick would go down.

If you pulled the input stick back down, the output stick would go up again.

I made one of these out of wood by making a box with two sticks going into it, that inside were attached with a cross peice that could rotate but not move.

This way, when you push up the input stick, the crosspeice rotates and the output stick goes down.  When you pull down the input stick, the reverse happens.

It worked fairly decently.

<img src="https://demofox2.files.wordpress.com/2012/11/notgate.png" alt="NotGate" />
<h3>OR</h3>
To make an OR gate, I made a box with two input sticks going in and one output stick coming out.  I had the output stick attached to a cross peice that rested above the input sticks.  This way, when you pushed either input stick up, the output stick would be pushed up.

<show></show>

One thing I didn't like about this design was that it relied on gravity to reset the output after changing the input pins.  I'd prefer the mechanical logic gates made as few assumptions about their environment as possible so that there are less points of failure.  That way, the mechanical computer would work in space, or on it's side, etc.  A spring could be used, but springs wear out and that's just another moving part that can fail.

It wasn't 100% ideal but it worked "ok".

<img src="https://demofox2.files.wordpress.com/2012/11/orgate.png" alt="OrGate" />
<h3>AND</h3>
To make an AND gate, if you push up one input pin, nothing should happen to the output pin and it should remain at zero.  If you push up both input pins, the output pin should then push up.

The best way i could think of how to do this was to have the output pin rest on a slack string.  The string should be slack just enough such that if you push up one input pin, it takes the slack out of the string and rests against the bottom of the output pin.  If you push up the second pin, it should make the output pin raise up to the full output pin level.

Unfortunately I never got this working correctly - I'm really bad at making things, I told you! haha.

I wasn't a fan of the string since it was a finicky, error prone part of the design that could easily fail.

Also, you would need to attach the string ends to the side of the box or something to make sure that as you raised both pins, you didn't just re-introduce the slack in the string between the sticks.  It sounds in my head like it would work, but again, unfortunately I'm a SOFTWARE engineer and this is not really my forte so I'm not sure hehe.

<img src="https://demofox2.files.wordpress.com/2012/11/andgate.png" alt="AndGate" />
<h2>Connecting Logic Gates, Metrics and Physical Requirements</h2>
So, assuming the mechanical logic gates actually work like they should, there are still some problems to solve, as well as some in general design requirements about how these gates need to work.
<ol>
	<li><span style="font-size: 1em; line-height: 1.3em">Gate pins have to be able to connect to eachother somehow.  An input pin needs to be able to connect to an output pin in a rigid way such that if one moves, the other one moves as well.  </span><span style="font-size: 1em; line-height: 1.3em; color: #cccccc">It would be nice if there was a way for the peices to easily snap together and easily be taken apart again.  During normal use they should stay snapped though obviously!</span></li>
	<li><span style="font-size: 1em; line-height: 1.3em">The difference between zero and one needs to be standardized.  For instance, the difference between a pin being pushed out and pushed in could be one inch, and all logic </span><span style="font-size: 1em; line-height: 1.3em">gates and all logic gate configurations need to obey this measurement in both their input and output pins.  </span><span style="font-size: 1em; line-height: 1.3em; color: #cccccc">Some metric needs to be decided on when prototypes start getting designed.</span></li>
	<li><span style="font-size: 1em; line-height: 1.3em">The different logic gates should be the same dimensions (or compatible dimensions) so that you dont end up with a situation where you are trying to connect two logic gates together but can't because there is a gap between them.  </span><span style="font-size: 1em; line-height: 1.3em; color: #cccccc">We'll have to figure out the metrics when prototypes start getting designed.</span></li>
	<li><span style="font-size: 1em; line-height: 1.3em">If i have a gate which takes two inputs, changing one input value should not change the other input value.  For example, if in the OR gate, the input pins were rigidly attached to the cross bar, pushing up a pin on either side would cause the other input pin to also change from 0 to 1.  </span><span style="font-size: 1em; line-height: 1.3em; color: #cccccc">Gates will have to be designed so that this is true.</span></li>
	<li><span style="font-size: 1em; line-height: 1.3em">It would be nice if the gates were set up such that you could see their internals working.  This is just for fun to be able to see the computations at work.  </span><span style="font-size: 1em; line-height: 1.3em; color: #cccccc">We'll see if we can make this happen when making prototypes.</span></li>
	<li><span style="font-size: 1em; line-height: 1.3em">The gates should be as simple as possible, and manufacturing should be simple.  each gate should be made of similar basic building blocks with as simple design and as few  moving parts as possible.  </span><span style="font-size: 1em; line-height: 1.3em; color: #cccccc">We'll have to keep the design simple when making prototypes.  I want to stay away from strings, springs, wheels etc.  Nothing that wears out quickly or has any significant fail rate.</span></li>
	<li><span style="font-size: 1em; line-height: 1.3em">When you push a pin up that results in a cascading change across several other gates, friction / resistance shouldn't be so hard that it gets unreasonably hard to push a pin up, or cause damage to the gates themselves when they are used reasonably.  </span><span style="font-size: 1em; line-height: 1.3em; color: #cccccc">Hopefully this will be true if we use a light but strong material.</span></li>
	<li><span style="font-size: 1em; line-height: 1.3em">It would be nice if gates liked to rest at whatever setting they were at (1 or 0), as opposed to easily sliding between values (0.8 for instance), or some gates having a tendancy to want to rest at zero instead of one.  </span><span style="font-size: 1em; line-height: 1.3em; color: #cccccc">I'm not sure if we are good enough engineers to make this happen haha... we may just have to say that these mechanical gates have to operate on their sides or something unfortunately...We'll have to see!</span></li>
	<li><span style="font-size: 1em; line-height: 1.3em">Changing the input pins should be action enough to change the output pins of each gate.  What i mean is that if you had one of your OR inputs as a 1, making it so the output is 1, when you pull down the input pin back to 0, the output pin should also move back to 0, and not require any extra action, such as pushing down the output pin manually.  </span><span style="font-size: 1em; line-height: 1.3em; color: #cccccc">Just something to be thinking about in the design.</span></li>
</ol>
<h2>NOR and NAND Logic Gates</h2>
There are actually a couple other ways to make logic circuits besides using AND, OR and NOT.

There is something called a "Universal Gate", which is just a logic gate that can be combined with itself in various ways to make the functionality of AND, OR and NOT (and thus others such as XOR, XNOR, and everything else).

The two universal gates are NOR and NAND.  Here are the truth tables:

0 NOR 0 = 1
0 NOR 1 = 0
1 NOR 0 = 0
1 NOR 1 = 0

0 NAND 0 = 1
0 NAND 1 = 1
1 NAND 0 = 1
1 NAND 1 = 0

For more information on how these gates are universal, check out these Wikipedia pages!

<a href="http://en.wikipedia.org/wiki/NOR_logic">http://en.wikipedia.org/wiki/NOR_logic</a>

<a href="http://en.wikipedia.org/wiki/NAND_logic">http://en.wikipedia.org/wiki/NAND_logic</a>

While figuring out how to make a NOR or NAND mechanically would solve my problem of not having a working design for the AND gate, it goes against one of my design goals, which is to be able to give someone AND, OR and NOT building blocks to put together and so learn logic circuits physically the same way they are shown in text books and online.

One possibility would be to take NANDs or NORs and put them together to make AND, OR and NOT gates that came pre-assembled, but that goes against my design goal of keeping things as simple as possible with as few moving parts as possible.  It would also add needless visual complexity to the computations, which might LOOK NEAT, but would just add confusion to what was going on.

I haven't yet decided on a solution to these issues.
<h2>Manufacture</h2>
For manufacturing, I wanted to work with my friend Eric to get some 3d models made up and get them printed up into 3d objects by <a href="http://www.shapeways.com/">http://www.shapeways.com/</a>.

I'm sure it'll take multiple iterations to get it right, but this seems like a pretty nice solution.

After we have proven our idea on a small scale, maybe in the future we'll be able to do something like get a kick starter project together to make some kind of mechanical logic gate set you can buy, or some sort of board or puzzle game.
<h2>Next Steps</h2>
For the next step, I want to think about our logic gate options a bit more, talk to Eric about them, and try and get some prototypes modeled and printed out.

I'll post an update when we make some progress (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date><![CDATA[2012-11-28 23:20:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-29 07:20:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mechanical-computer-quest-part-i]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495503977;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3349;}i:1;a:1:{s:2:"id";i:3334;}i:2;a:1:{s:2:"id";i:4281;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>397</wp:comment_id>
			<wp:comment_author><![CDATA[Jonny D]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[grimfang4@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[70.20.45.125]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-01 19:42:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-02 03:42:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I tried to think of the logic gate designs before reading yours, so here's my AND:

Instead of a string, use a lever that pivots on the end of the output pin.  When one input is true, the lever rotates to a diagonal orientation.  When both inputs are true, the output pin is forced up by the balanced, horizontal lever.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>229</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>405</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-02 18:36:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-03 02:36:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting Jonny.  I'm trying to picture that, do you have a diagram or anything?  It sounds a lot more reliable than a string (:]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>397</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>455</wp:comment_id>
			<wp:comment_author><![CDATA[Jonny D]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[grimfang4@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[71.181.119.231]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-06 12:23:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-06 20:23:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Here's one based on your OR gate diagram.  Do whatever with it.
http://www.dinomage.com/open/andgate2.png]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>405</wp:comment_parent>
			<wp:comment_user_id>229</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>459</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-06 19:33:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-07 03:33:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Dude!! (:]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>455</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Permutation Programming Without Maintenance Nightmares</title>
		<link>http://blog.demofox.org/2013/05/01/permutation-programming-without-maintenance-nightmares/</link>
		<pubDate>Wed, 01 May 2013 23:30:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[Example Code: <a href="https://demofox2.files.wordpress.com/2013/05/TemplateSlots_cpp.txt">TemplateSlots.cpp</a>

When writing real time software, we sometimes hit situations where we have code that needs to be lightning fast, but also needs to be configurable to change how it behaves.

For instance, if you are writing something that renders 3d graphics (either traditional rasterized 3d graphics, or raytraced 3d graphics) you might be forced to put an if statement in a deep inner loop saying "is this object textured? Does this object have emissive lighting? If so, call the appropriate functions".  Or, in the case of something like DSP / Audio processing, you might have an if statement saying "do we need to increase the amplitude of our samples?  if so do that".

Depending on your use case, this can result in tens of thousands of checks per second or more, which can impact performance quite a bit.

This puts us in a pickle between two extremes:
<ol>
	<li>We can decide to live with the the checks to see which functionality is enabled.  The end result is code that is easy to maintain, but it comes at a cost in execution speed.</li>
	<li>We can hand craft each permutation of functionality needed, and call the correct function based on parameters in an outer loop. For example, in an outer loop, we call a function like "RenderPolygonNoTextureYesEmissive".  This means that we copy / paste a lot of code and change small pieces of each function to act like it should for the specific permutation.  This results in form fitted code that can be a lot faster, but will be harder to maintain.</li>
</ol>
Someone might look at the above and say "#1 makes slower code that is easier to maintain?  Programmers need to stop being lazy and just go with #2 so that it's faster at runtime".  When code is easier to maintain though, it means that programmers can spend less time working on bugs and features in this code, freeing them up to work on other things, and also it means that there will be less bugs in the code to begin with.  Making code that's easier to maintain is a decision that affects team productivity and the business as a whole, so it isn't something we can very easily dismiss, even at the cost of runtime performance.

Quick aside: there are features in modern CPUs like branch prediction, as well as features in modern compilers / linkers / optimizers that can mitigate some of this stuff, but they can't always, and if you rely on the behavior of a specific compiler or CPU, you'll have code maintenance problems when you have to start supporting a different compiler or CPU.  Console and mobile processors are very different beasts than desktop processors for example, which can make relying on assumptions like this a big problem.

One common solution to the code permutation problem is to generate code for all the permutations needed to get the speed of solution #2, but have that code generated based on a few core pieces of code to get the maintainability of solution #1.   People can do this with clever macro usage, or even actually generate code using a custom build step while compiling.

In the graphics world, it's fairly common that AAA game engines actually have a shader permutation compiler built into the engine to handle this exact problem.  The situation there is a little bit different because shaders aren't written in C++, but it's the same basic problem.

I'm going to show a variation to the code generation solution using templates, template parameters, and inline functions.

Before we get into it I want to note two important things:
<ul>
	<li>All observations I make about function inlining and optimizations preformed by the compiler were made using Microsoft Visual Studio 2010 using the default settings for a release built console application.  Your mileage may vary!</li>
	<li>The example code attached to this post works as a makeshift compressor and limiter.  That DSP code is just there as an example of using this technique and this should in no way be used as a lesson on how to write a compressor or limiter.  Many features are missing and major shortcuts have been taken to keep the code simple!</li>
</ul>
<h2>OOPS!</h2>
After posting this, a friend pointed out two things to me that I want to share...
<ol>
	<li>Apparently this technique is already well known and used.  It's called "traits" and it's talked about in the book <a href="http://www.amazon.com/Modern-Design-Generic-Programming-Patterns/dp/0201704315">Modern C++ Design</a> by Andrei Alexandrescu.</li>
	<li>The sample code doesn't seem to compile in llvm or clang.  I don't have easy access to those guys so... sorry about that.</li>
</ol>


<h2>Inline Functions - The Silent Killer</h2>
Ok, I'm joking, inline functions aren't the #1 cause of death for males between the age of 23 and 25.

When people talk about using inline functions, they always seem to only talk about how inline functions remove the overhead of the function call, setting up the stack for the local parameters, the cost of the return, and any object copies that might have happened for the parameters or return value.

A far less talked about feature of inline functions is that it promotes the function code to be a full sibling to the calling code in the eyes of the optimizer.

If your inlined function checks a boolean parameter to take different action whether it's true or false, and you call that inlined function using a compile time constant for that parameter (ie just pass "true" , not a variable), that means that the optimizer has the opportunity to completely get rid of the branch of code that will never get executed and get rid of the if statement all together.  The optimizer just ditched the inner loop "if check" we talked about earlier that was happening tens of thousands of times a second.

If you call the same inlined function in another place, passing a boolean variable for the parameter, that other location will keep the if statement intact and will act as you would expect.

This is the first step in our battle against code permutations - inline functions can be used to write code once that shrink wraps itself to whatever your specific use cases may be!

This also gives the optimizer the ability to combine various pieces of  code together in clever ways, especially if you call multiple inline functions and it has more code to work with.
<h2>Not All Unicorns and Lollipops - Code Bloat and Cache Misses</h2>
Inline functions do come at a cost though and are not a magical solution to every problem.  Most notably, inline functions bloat the size of your compiled code.  For most people, code size on disk isn't really a huge problem because hard drives are huge and loading an exe sized file into ram is not going to be a problem for normal cases.

The problem with increasing code size mainly comes up when dealing with the instruction cache.

Processors have built in cache memory that they can read and write to super quickly, but the cache memory can only hold so much data.  Whenever the processor needs to read something from RAM that isn't in the cache, it has to load it from RAM into the cache, and then it can read it.  This is called a cache miss and can a major source of performance problems.  Desktop CPUs can get around this problem by doing other things while waiting for the data to come in (<a href="http://en.wikipedia.org/wiki/Out-of-order_execution">http://en.wikipedia.org/wiki/Out-of-order_execution</a>), but other processors like consoles and mobile devices aren't able to do that, so they just sit there stalled while waiting for the memory to come back.  Very slow!

To minimize cache misses, you should set up your code and data structures so that they don't have to jump around in memory a lot, which can cause the CPU to have to load and unload the same peices of RAM into the cache needlessly.

Another thing you can do to minimize cache misses is to try to make your data as small as possible by storing less data or using smaller data types.  This way, the CPU is able to hold more meaningful data in it's cache at a time, which means less RAM access needed.

These techniques also apply to your program itself inside the instruction cache.  If you have code that jumps around a lot (e.g. gotos that jump really far away for those that use gotos, or excessive function calls), that can cause the CPU to have to excessively load different parts of your program from RAM into it's cache which can be a costly operation.   Also just like with data, if you keep your code smaller, the CPU will be able to hold more meaningful data in the cache at a time and have to hit RAM less.

Lastly, if you ever make a for or while loop that is too large to fit in the instruction cache, that means that you can get a cache miss each time you iterate through the loop!  Making functions inlined, especially if they are called multiple times inside of the loop, can cause the contents of a loop to become larger and cause this problem.

In the end though, if you'd like you can just mark your functions as inline and let the compiler decide if it would like to actually inline them or not since it's just a hint.  A lot of the times the compiler ought to make decent choices for you, but of course you are free to go down into this rabbit hole as you want.  Since the compiler doesn't actually understand your algorithm, you can certainly do better than it can in some situations and make better trade offs. In MSVC there is an option to disallow the compiler from going against your wishes for inlining a function if you want to go this route. Other compilers probably have similar options.
<h2>The Main Course - Templated Classes With Worker Slots</h2>
Now that you see how inline functions can be used to write custom fitting code permutations for you, you can use this to your advantage by having the class or function that does your work take a template parameter for each piece of configurable work that you would like it to do.

You might define a class like this:

[code language="cpp"]
template &lt;class EmissiveLighter, class Texturer&gt;
class CRenderer
{
public:
	static void Render(const CSomeDummyParams &amp;params)
	{
		// render
		...
		// now apply emissive lighting and texture
		EmissiveLighter::ApplyEmissive(params);
		Texturer::ApplyTexture(params);
	}
};
[/code]

Then, you might define "Slot Classes" like the below

[code language="cpp"]
//do nothing for emissive lighting and pay no runtime cost for using this
class EmissiveLighter_None
{
public:
	static inline void ApplyEmissive(const CSomeDummyParams &amp;) {}
};

//apply the emissive color defined in the params struct
//Note, we are using templates but not interfaces so the parameter declarations can change to suit our needs
class EmissiveLighter_Params
{
public:
	static inline void ApplyEmissive(CSomeDummyParams &amp;params)
	{
		params.m_outColor += params.m_emissive;
	}
};
[/code]

Now, you can call the render function and supply what operations you want to use for each slot and it will generate the form fitted permutations for you.

[code language="cpp"]
// no emissive lighting, no texture
Render&lt;
	EmissiveLighter_None,
	Texturer_None&gt;
	::Render(params);

// emissive lighting from params, no texture
Render&lt;
	EmissiveLighter_Params,
	Texturer_None&gt;
	::Render(params);

// emissive lighting from params, texture from params
Render&lt;
	EmissiveLighter_Params,
	Texturer_Params&gt;
	::Render(params);

// emissive lighting from params, use procedural noise texture generator
Render&lt;
	EmissiveLighter_Params,
	Texturer_ProceduralNoise&gt;
	::Render(params);
[/code]

Also, a quick note... templates also cause code bloat like inline functions do, because behind the scenes, it will create a different class for each permutation of template parameters that you actually use.  Just something to be wary of!
<h2>Why No Interface Classes?</h2>
You might be saying "you know, you could make an interface class with pure virtuals to make sure that your slot classes implemented the required functions in the required ways.  That would increase type safety and such".

That is definitely true, but in this case I think there is actually good value in NOT making interface classes that the various slot classes derive from.

To see what I mean, check out the difference between the two emissive lighter classes i defined.  One takes the params parameter as a const reference, and the other takes it as a non const reference.  This lets you decide what you want to do with the parameters on an implementation by implementation basis.

This lets you give further optimization hints to the compiler, allowing you to define unused parameters as const refs.

It lets you further "shrink wrap" the code to suit your specific needs in each permutation, and you still get a lot of compile time protection when you use the type in a template.
<h2>Last Words</h2>
If you go this route, it definitely could make some issues more difficult to debug, especially if you stray from the straight and narrow usage. For instance, you might make the EmissiveLighter_Params set some value on the params that the Texturer_Params uses because Texturer_Params assumes that emissive will always use params too when texture params is used. If you switch the emissive to something else but leave the texturer alone, the texturer could stop working and it could be hard to realize why. My advice if using this technique is to make each slot class as isolated as possible and make as few assumptions as possible about other slots. Also make sure and name slot classes so that it's very obvious what they do from the name and make sure they don't do anything other than the name implies. If they do anything else, change the name to reflect that! Don't worry about not being able to share calculations between slot classes to improve efficiency either... since they ought to all be inlined, the optimizer ought to be able to combine some of that and increase re-use for you when it's appropriate.

When using this in the real world, you might have to come up with some sort of "multiplexer" function where you pass it your variable parameters and it will return a function pointer to the specific function you ought to use.  A function pointer points at the function in the specific template instantiation asked for, so getting a function pointer back would be enough to translate your parameters into the right template instantiation to use. I'm not sure of a way to do this other than a bunch of embeded switch statements but I'll be thinking about it and report back or write a new article if I come up with an interesting way to do that. The main problem there comes in mapping run time dynamic values to compile time static values.

Since this technique is using template classes and/or template functions you might be able to do some interesting things with template specialization, partial template specialization and template parameter deduction.

For instance, you could introduce SSE calls if you have to process more than a specific amount of data, but just do simple loops if doing less than that.

I made some example code that goes into this stuff in some more depth and has a few interesting techniques I didn't go over in the article.

The example source code makes frequent use of casting like "(DataType)0.5" but don't worry, those ought to be compile time operations for all basic types and have no runtime cost (verified in my compiler anyways)

Example Code: <a href="https://demofox2.files.wordpress.com/2013/05/TemplateSlots_cpp.txt">TemplateSlots.cpp</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date><![CDATA[2013-05-01 15:30:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-01 23:30:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[permutation-programming-without-maintenance-nightmares]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494671206;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2;}i:1;a:1:{s:2:"id";i:5116;}i:2;a:1:{s:2:"id";i:4744;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>391</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.197.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-01 16:48:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-02 00:48:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I thought that you were going to dive into C++ 11's template meta programming.  In short it's awesome.  By doing a lot of operator overloading in templates and type deductions the compiler can do.  Check out http://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Core-C-#tab_sortBy_sequential for some well done talks.

Something like:
	template  struct is_container_helper
	{
		template  static std::true_type f(typename U::const_iterator *);
		template  static std::false_type f(...);

		typedef decltype(f(0)) type;
	};
	template 
	struct is_container : public is_container_helper::type
	{
	};

Can be used to determine if T has an iterator which then can be passed into another template call which branches passed upon if the value was std::true_type or std::false_type

such as:
	template 
	void SerializeToXML(std::ostream&amp; output, const T&amp; t)
	{
		SerializeToXMLInternal(output, t, typename is_container::type());
	};

then the SerializeToXMLInternal has two different implementations:
	template 
	void SerializeToXMLInternal(std::ostream&amp; output, const T&amp; t, std::true_type /*container*/);
	template 
	void SerializeToXMLInternal(std::ostream&amp; output, const T&amp; t, std::false_type /*container*/);

and the correct function will be called based upon if T has an iterator and then all that extraneous stuff melts away as syntax sugar during compile.

The real hitch is that you have to know what type you're iterating over before you enter the loop(s) so that you can use the correct template arguement (and they should all be the same type).

The downsides:  It's still new tech and while some compilers have recently started stating that they're C++11 feature complete that doesn't mean that they all agree on the feature definitions.  Also most compilers don't support all the features yet and they tend to support different sub sets.  The template meta programming tends to get really hard to read, there's a certain "Here be dragons" to writing and reading compile warnings but that would be isolated to where the template type deductions actually occur.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>392</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-01 16:51:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-02 00:51:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's rad Patrick, I'll have to check that stuff out, it really looks interesting!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>391</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>393</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.197.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-01 16:51:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-02 00:51:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[and it looks like all my angle brackets were eaten... Every template declaration was template [typename T] and the SerializeToXMLInternal(output, t, typename is_container::type());
should be
SerializeToXMLInternal(output, t, typename is_container[T]::type());]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>391</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Macro Lists For The Win</title>
		<link>http://blog.demofox.org/2013/05/03/macro-lists-for-the-win/</link>
		<pubDate>Sat, 04 May 2013 02:32:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[Around 6 years ago I was introduced to a programming technique that really blew my mind.  John, My boss at the time and the tech director at inXile, had written it as part of the code base for the commercial version of a game called Line Rider and I believe he said he first heard about the technique from a friend at Sony.

Since seeing it at inXile, I've seen the same technique or variations on it at several places including Monolith and Blizzard, and have had the opportunity to use it on quite a few occasions myself.

What is this technique?  I'm not sure if it has an actual name but I refer to it as "Macro Lists" and it's a good tool towards achieving the DRY principle (don't repeat yourself - <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">http://en.wikipedia.org/wiki/Don't_repeat_yourself</a>)

Macro lists are often useful when you find yourself copy / pasting code just to change a couple things, and have multiple places you need to update whenever you need to add a new entry into the mix.

For example, let's say that you have a class to store how much of each resource that a player has and lets say you start out with two resources - gold and wood.

To implement this, you might write some code like this:

[code language="cpp"]
enum EResource
{
	eResourceGold,
	eResourceWood,
};

class CResourceHolder
{
public:
	CResourceHolder()
	{
		m_resources[eResourceGold] = 100.0f;
		m_resources[eResourceWood] = 0.0f;
	}

	float GetGold() const
		{ return m_resources[eResourceGold ]; }
	void SetGold(float amount)
		{ m_resources[eResourceGold ] = amount; }

	float GetWood() const
		{ return m_resources[eResourceWood]; }
	void SetWood(float amount)
		{ m_resources[eResourceWood] = amount; }
private:
	float m_resources[2];
};
[/code]

That seems pretty reasonable right?

Now let's say that you (or someone else who doesn't know the code) wants to add another resource type.  What do you need to do to add a new resource?
<ol>
	<li>Add a new enum value to the enum</li>
	<li>Initialize the new value in the array to zero</li>
	<li>Make a Get and Set function for the resource</li>
	<li>Increase the array size of m_resources to hold the new value</li>
</ol>

If #1 or #3 are forgotten, it will probably be really obvious and it'll be fixed right away.  If #2 or #4 are missed though, you are going to have some bugs that might potentially be very hard to track down because they won't happen all the time, and they may only happen in release, or only when doing some very specific steps that don't seem to have anything to do with the resource code.

Kind of a pain right?  As the code gets more mature and more features are added, there will likely be other places that need to be updated too that will easily be forgotten.  Also, when this sort of stuff comes up, people tend to copy/paste existing patterns and then change what needs to be changed - which can be really dangerous if people forget to change some of the values which need to be changed.

Luckily macro lists can help out here to ensure that it's IMPOSSIBLE for you, or anyone else, to forget the steps of what to change.  Macro lists make it impossible to forget because they do the work for you!

Check out this code to see what I mean.  It took me a little bit to wrap my head around how this technique worked when I first saw it, so don't get discouraged if you have trouble wrapping your head around it as well.

[code language="cpp"]
#define RESOURCE_LIST \
	RESOURCE_ENTRY(Gold, 100.0) \
	RESOURCE_ENTRY(Wood, 0)

// make the enum
#define RESOURCE_ENTRY(resource, startingValue) \
	eResource#resource,
enum EResource
{
	eResourceUnknown = -1,
	RESOURCE_LIST
	eResourceCount,
	eResourcefirst = 0
};
#undef RESOURCE_ENTRY

class CResourceHolder
{
public:
	CResourceHolder()
	{
		// initialize to starting values
		#define RESOURCE_ENTRY(resource, startingValue) \
			m_resources[eResource#resource] = startingValue;
		RESOURCE_LIST
		#undef RESOURCE_ENTRY
	}

// make a Get and Set for each resource
#define RESOURCE_ENTRY(resource, startingValue) \
	float Get#resource() const \
	{return m_resources[eResource#resource];} \
	void Set#resource(float amount) \
	{m_resources[eResource#resource] = amount;} \
RESOURCE_LIST
#undef RESOURCE_ENTRY

private:
	// ensure that our array is always the right size
	float m_resources[eResourceCount];
};
[/code]

In the above code, the steps mentioned before happen automatically.  When you want to add a resource, all you have to do is add an entry to the RESOURCE_LIST and it does the rest for you.  You can't forget any of the steps, and as people add new features, they can work with the macro list to make sure people in the future can add resources without having to worry about the details.

<h2>Include File Variation</h2>

If you used the above technique a lot in your code base, you could imagine that someone might name their macros the same things you named yours which could lead to a naming conflict.

Keeping the "global macro namespace" as clean as possible is a good practice to follow and there's a variation of the macro list technique that doesn't pollute the global macro namespace like the above.

Basically, you put your macro list in a header file, and then include that header file every place you would normally put a RESOURCE_LIST.

Here's the same example broken up that way.  First is ResourceList.h:

[code language="cpp"]
///////////////////////////////////
//	RESOURCE_ENTRY(ResourceName, StartingValue)
//
//	ResourceName - the name of the resource
//	StartingValue - what to start the resource at
//
RESOURCE_ENTRY(Gold, 100.0)
RESOURCE_ENTRY(Wood, 0)
///////////////////////////////////
[/code]

And now here is CResourceHolder.h:

[code language="cpp"]
///////////////////////////////////
// make the enum
#define RESOURCE_ENTRY(resource, startingValue) \
	eResource#resource,
enum EResource
{
	eResourceUnknown = -1,
	#include "ResourceList.h"
	eResourceCount,
	eResourcefirst = 0
};
#undef RESOURCE_ENTRY

class CResourceHolder
{
public:
	CResourceHolder()
	{
		// initialize to starting values
		#define RESOURCE_ENTRY(resource, startingValue) \
			m_resources[eResource#resource] = startingValue;
		#include "ResourceList.h"
		#undef RESOURCE_ENTRY
	}

// make a Get and Set for each resource
#define RESOURCE_ENTRY(resource, startingValue) \
	float Get#resource() const \
	{return m_resources[eResource#resource];} \
	void Set#resource(float amount) \
	{m_resources[eResource#resource] = amount;}
#include "ResourceList.h"
#undef RESOURCE_ENTRY

private:
	// ensure that our array is always the right size
	float m_resources[eResourceCount];
};
[/code]

<h2>The Downside of Macro Lists</h2>

So, while doing the above makes code a lot easier to maintain and less error prone, it comes at a cost.

Most notably is it can be really difficult to figure out what code the macros will expand to, and it can be difficult to alter the functionality of the macros.  A way to lessen this problem is that you can tell most compilers to make a file that shows what your code looks like after the preprocessor is done with it.  It can still be difficult even with this feature, but it does help a lot.

When you have compiler errors due to macros, because perhaps you forgot a parameter, or it's the wrong type, the compiler errors can be pretty difficult to understand sometimes.

Another problem with macros is that I don't know of any debuggers that will let you step through macro code, so in a lot of ways it's a black box while you are debugging, which sucks if that code malfunctions.  If you keep your functionality simple, straightfoward and format it cleanly, you ought not to hit many of these problems though.

Instead of using macro lists, some people prefer to put their data into something like an xml or json data file, and then as a custom build step, use XSLT or the like to convert that data into some code, just like the C++ preprocessor would.  The benefit here is that you can see the resulting code and step through it while debugging, but of course the downside is it can be more difficult for someone else to get set up to be able to compile your code.

<h2>To Be Continued...</h2>

Macro lists are great, but what if you want your lists to have sublists?  For instance, what if you wanted to define network messages for your game in a format like this, and have it automatically expand into full fledged classes to be able to ensure that message parsing and data serialization was always done in a consistent way to minimize bugs and maximize efficiency (less code to write and less testing to do)?

As you might have noticed, macro lists can take parameters to help them be flexible (like, the starting value of the resources... you could add more parameters if you wanted to), but, a macro list can't contain another macro list.  At least not how the above implementations work.

I'm going to show you how to tackle this problem in the next post, so stay tuned! (:
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date><![CDATA[2013-05-03 18:32:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-04 02:32:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[macro-lists-for-the-win]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495154214;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:194;}i:1;a:1:{s:2:"id";i:262;}i:2;a:1:{s:2:"id";i:650;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Macro Lists For The Win - Side B</title>
		<link>http://blog.demofox.org/2013/05/07/macro-lists-for-the-win-side-b/</link>
		<pubDate>Wed, 08 May 2013 03:26:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=194</guid>
		<description></description>
		<content:encoded><![CDATA[Example Code: <a href="https://demofox2.files.wordpress.com/2013/05/Code_050713.zip">Code_050713.zip</a>

In the previous post I talked about how you can use macro lists to solve the problem of wanting to generate a bunch of code based on the same set of data.  This was useful for doing things like defining a list of resources a player could accumulate, and then being able to generate code to store and manipulate each resource type.  You only had to update the resource list to add a new resource and the rest of the code would almost magically generate itself.

What if you wanted the reverse though?  What if you had a fixed set of code that you want to apply to a bunch of different sets of data?  This post is going to show you a way to do that.

In the example code, we are going to make a way to define several lists of items, and expand each list into an enum that also has a ToString and FromString function associated with it.

Another usage case for this technique might be to define lists of data fields, and expand each list into a data structure that contains serialization and deserialization functions.  This would allow you to make data structures that could be saved and loaded to disk, or to sent and received over a network connection, just by defining what data fields they contained.

I haven't yet seen this technique in the wild, and it kind of makes me wonder why since they are just two sides of the same coin.

<h2>GameEnums.h</h2>

In the last post, our data was always the same and we just applied it to different code.  To do this, we had the code in one .h and the data in another .h that would get included multiple times.  This allowed us to define different pieces of code in one .h, then include the other .h file to apply the fixed data to each piece of code.

In this post, it's going to be the exact opposite.  Our code will always stay the same and we will apply it to different data so our data will be in one .h and the code will be in another .h that gets included multiple times.

Here's GameEnums.h:

[code language="cpp"]
//////////////////////
//     EDamageType
//////////////////////
#define ENUMNAME DamageType
#define ENUMLIST \
	ENUMENTRY(Normal) \
	ENUMENTRY(Electricity) \
	ENUMENTRY(Fire) \
	ENUMENTRY(BluntForce)

#include "EnumBuilder.h"
//////////////////////
//     EDeathType
//////////////////////
#define ENUMNAME DeathType
#define ENUMLIST \
	ENUMENTRY(Normal) \
	ENUMENTRY(Electrocuted) \
	ENUMENTRY(Incinerated) \
	ENUMENTRY(Smashed)

#include "EnumBuilder.h"
//////////////////////
//     EFruit
//////////////////////
#define ENUMNAME Fruit
#define ENUMLIST \
	ENUMENTRY(Apple) \
	ENUMENTRY(Banana) \
	ENUMENTRY(Orange) \
	ENUMENTRY(Kiwi)

#include "EnumBuilder.h"
//////////////////////
//     EPlayers
//////////////////////
#define ENUMNAME Player
#define ENUMLIST \
	ENUMENTRY(1) \
	ENUMENTRY(2) \
	ENUMENTRY(3) \
	ENUMENTRY(4)

#include "EnumBuilder.h"
[/code]

<h2>EnumBuilder.h</h2>

This header file is where the real magic is; it's responsible for taking the previously defined ENUMNAME and ENUMLIST macros as input, and turning them into an enum and the string functions.  Here it is:

[code language="cpp"]
#include <string.h> // for _stricmp, for the enum Fromstring function

// this EB_COMBINETEXT macro works in visual studio 2010.  No promises anywhere else.
// Check out the boost preprocessor library if this doesn't work for you.
// BOOST_PP_CAT provides the same functionality, but ought to work on all compilers!
#define EB_COMBINETEXT(a, b) EB_COMBINETEXT_INTERNAL(a, b)
#define EB_COMBINETEXT_INTERNAL(a, b) a ## b

// make the enum E<ENUMNAME>
#define ENUMENTRY(EnumValue) EB_COMBINETEXT(e, EB_COMBINETEXT(ENUMNAME, EnumValue)),
enum EB_COMBINETEXT(E,ENUMNAME) {
	EB_COMBINETEXT(EB_COMBINETEXT(e, ENUMNAME), Unknown) = -1,
	ENUMLIST
	EB_COMBINETEXT(EB_COMBINETEXT(e, ENUMNAME), Count),
	EB_COMBINETEXT(EB_COMBINETEXT(e, ENUMNAME), First) = 0,
	EB_COMBINETEXT(EB_COMBINETEXT(e, ENUMNAME), Last) = EB_COMBINETEXT(EB_COMBINETEXT(e, ENUMNAME), Count) - 1
};
#undef ENUMENTRY

// make the E<ENUMNAME>ToString function
const char *EB_COMBINETEXT(EB_COMBINETEXT(E,ENUMNAME), ToString)(EB_COMBINETEXT(E,ENUMNAME) value)
{
	switch(value)
	{
		#define ENUMENTRY(EnumValue) \
			case EB_COMBINETEXT(e, EB_COMBINETEXT(ENUMNAME, EnumValue)): \
			return #EnumValue;
		ENUMLIST
		#undef ENUMENTRY
	}
	return "Unknown";
}

// make the E<ENUMNAME>FromString function
EB_COMBINETEXT(E,ENUMNAME) EB_COMBINETEXT(EB_COMBINETEXT(E,ENUMNAME), FromString)(const char *value)
{
	#define ENUMENTRY(EnumValue) \
	if(!_stricmp(value,#EnumValue)) \
		return EB_COMBINETEXT(e, EB_COMBINETEXT(ENUMNAME, EnumValue));
	ENUMLIST
	#undef ENUMENTRY
	return EB_COMBINETEXT(EB_COMBINETEXT(e, ENUMNAME), Unknown);
}

// clean up
#undef EB_COMBINETEXT
#undef EB_COMBINETEXT_INTERNAL

// these were defined by the caller but clean them up for convinience
#undef ENUMNAME
#undef ENUMLIST
[/code]

<h2>Main.cpp</h2>

Now, here's how you can actually use this stuff!

[code language="cpp"]
#include "GameEnums.h"

int main(int argc, char* argv[])
{
	EDamageType damageType = eDamageTypeBluntForce;
	EDeathType deathType = EDeathTypeFromString("smashed");
	EFruit fruit = eFruitLast;
	EPlayer player = EPlayerFromString(EPlayerToString(ePlayer1));
	return 0;
}
[/code]

<h2>Combining the files</h2>
As a quick aside, in both this and the last post, I separated the code and data files.  This is probably how you would normally want to do things because it'll usually be cleaner, but it isn't required.  Here's a cool technique I came across today...

Here's Macro.cpp:
[code language="cpp"]
#ifdef MACROHEADER
	// Put your header stuff here
#else
	// Put cpp type stuff here

	// Include the "header"
	#define MACROHEADER
	#include "Macro.cpp"
	#undef MACROHEADER
#endif
[/code]

If you ever really just want to combine all your code and data into a single file and not muddy up a directory or project with more files, this technique can help you do that.  IMO you really ought to just use separate files, but I wanted to share this for when there are exceptions to that rule (as there always seem to be for every rule!)

<h2>Being Data Driven</h2>
After my last post, a fellow game developer friend of mine pointed out..

<blockquote>
I hope that one day we hurl C++ into a raging sea of fire.

I do like this technique, in theory at least, but whenever I feel like it's the right solution, a voice in the back of my head yells that I'm digging too greedily and too deeply and should step back for a second and consider what design choices have lead me to this point.

And I think that usually that introspection ends up at the intersection of "we're not data-driven enough but want to be" and "we decided to use C++ for our engine."

-- jsola
</blockquote>

He does have a point.  For instance, in the case of our resource list from last post, it would be better if you had some "source data", such as an xml file, listing all the resources a player could have.  The game should load that data in on startup and make a dynamic array, etc to handle those resources.  When you had game actions that added or subtracted specific resources from a player, the details of which resources got modified, and by how much, should also be specified in data.

When you save or pack your data, or at runtime (as your situation calls for), it can verify that your data is well formed and makes sure that if a data field is meant to specify a resource type, that it actually corresponds to an actual resource type listed in the list of resources.

That is closer to the ideal situation when making a game - especially when making larger games with a lot of people.

But there are still some good usage cases for this kind of macro magic (and template metaprogramming as well). For instance, maybe you use macros to define your data schemas so that your application can be data driven in the first place - I've done that on several projects myself and have seen other well respected people do it as well.  So, add these things to your toolbox I say, because you never know when you might need them!

<h2>Next Post...</h2>
The next post will be what i promised at the end of the last one.  I'm going to talk about a way to define a list of lists and then be able to expand that list of lists in a single go, instead of having to do a file include for each list individually.

Example Code: <a href="https://demofox2.files.wordpress.com/2013/05/Code_050713.zip">Code_050713.zip</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date><![CDATA[2013-05-07 19:26:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-08 03:26:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[macro-lists-for-the-win-side-b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495220688;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:159;}i:1;a:1:{s:2:"id";i:262;}i:2;a:1:{s:2:"id";i:5116;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lists of Macro Lists</title>
		<link>http://blog.demofox.org/2013/05/11/lists-of-macro-lists/</link>
		<pubDate>Sun, 12 May 2013 01:23:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=262</guid>
		<description></description>
		<content:encoded><![CDATA[Example Code: <a href="https://demofox2.files.wordpress.com/2013/05/Code_051113.zip">Code_051113</a>

In the two previous posts I showed some ways to use macro lists that I've found useful in the past.  A downside to those methods though was that you had to manually expand / use each macro list individually.  Whenever you have to do extra steps that are always the same, you have a possible point of failure in your code / development process that doesn't need to be there (when you forget to do the step that's always the same).

Wouldn't it be great if you could make a list of macro lists, such as a list of enums that each had their own enum values, and say "expand all of these into all the enums described, with to and from string conversion functions" and it would do it?

How about describing a bunch of events that can happen in your game, specifying what data fields the events should have, what their types and default values are, as well as whether they are optional and required - and it would build full on classes or structs based on your settings to facilitate strongly typed, compile time protected message and event passing that also supported inheritance and custom dynamic cast functionality?

The example code for this post shows you how to do both of those things.

<h2>Boost Preprocessor Library (BOOST_PP)</h2>

I had to pull out the "big guns" for making this example work, specifically the boost preprocessor library.  Yes it's true that anything the boost preprocessor library can do, you can also do yourself without the boost preprocessor library.  However, the neat thing about using the boost preprocessor library is that there are variations in the behaviors of the preprocessors for different compilers, and boost abstracts that away from you so that you know if you use their functions, they ought to work and behave the same way on other compilers.  That's a bunch of compatibility headaches that you don't have to worry about.

The boost preprocessor library has a very developer friendly license too.  It's very similar to the zlib / mit license which in effect says "don't call us and we won't call you".  You can use it commercially for free, without having to give them any credit for anything, and also you aren't required under any circumstances to link dynamically to avoid having to make your code open sourced (a problem you commonly hit with some other software licenses).  That being said, there are a couple small requirements about keeping the license file in tact when redistributing the source code of their library etc so have a look at the license just to make sure you dot all your i's and cross all your t's, but if you work somewhere that is hesitant to use open sourced software for legal reasons (I have worked at my share of those places), the license is literally the same as zlib and i'll bet your project is already using zlib, or one of the libraries you are using is internally using zlib.  So seriously... there ought not be any problems with using boost_pp in your code, unless your legal department is retarded (again, something i've experienced in times past LOL).

Best of all, the boost preprocessory library is SUPER EASY to download, integrate into your project and start using.  I've included a version in the sample code.  It's just a folder with some headers in it.  The sample code #include's some of those header files and it works.  No other setup needed.  You didn't even need to build boost or link to it or anything crazy like that.  SUPER EASY, don't be afraid of boost_pp!  <a href="http://www.boost.org/">Boost.org</a>

FWIW I had my doubts about boost_pp too, but a fellow game dev friend of mine turned me onto it and I'm really glad he did.  As they say, T-Law is the law.

<h2>Main.cpp - What our program is able to do in the end</h2>

Here's the main.cpp file to show the capabilities of our sample code.  Note specifically the custom dynamic cast functions, enum to/from string functions, and the CGameEvent objects.  The constructors to the CGameEvent objects have required parameters for all required fields, and defaulted, optional parameters for all of the optional fields of the defined message.

[code language="cpp"]
#include "GameEvents.h"

int main(int argc, char **argv)
{
	// make some test events
	CGameEventPlayerDamaged damaged(ePlayer1, 5.0f, eDamageTypeElectricity);
	CGameEventPlayerDeath death(ePlayer1, eDeathTypeElectrocution);

	// get base class pointers to them
	CGameEvent *gameEvent1 = &damaged;
	CGameEvent *gameEvent2 = &death;

	// do a dynamic cast on the 1st game event (the damaged event)
	// test1a will be non null, and test1b will be null
	CGameEventPlayerDamaged *test1a = gameEvent1->GetAs<CGameEventPlayerDamaged>();
	CGameEventPlayerDeath *test1b = gameEvent1->GetAs<CGameEventPlayerDeath>();

	// do a dynamic cast on the 2nd game event (the death event)
	// test2a will be null, test2b will be non null
	CGameEventPlayerDamaged *test2a = gameEvent2->GetAs<CGameEventPlayerDamaged>();
	CGameEventPlayerDeath *test2b = gameEvent2->GetAs<CGameEventPlayerDeath>();

	// set and get some values using the accessors
	damaged.SetIsFatal(!damaged.GetIsFatal());
	damaged.SetDamageTaken(damaged.DefaultDamageTaken());
	damaged.SetAttackerPlayerID(EPlayerFromString(EPlayerToString(ePlayer2)));
	death.SetDeathType(EDeathTypeFromString("drowned"));

	return 0;
}
[/code]

<h2>GameEvents.h</h2>

This is the file where the game events are defined.  For each event, you specify the data type, the field name, the default value, and whether the field is required or optional.  Note that you must specify all required field before all optional fields.  It's possible that there's a way to make it so you don't have to do that, but I couldn't figure out a way.  Note that if you mess that up, you'll get a compile error.

Optional / required settings for fields are enforced by the constructor in each game event class.

[code language="cpp"]
//=====================================================================================
//
//	GameEvents.h
//
//	Define game events here.  They are expanded into full classes for each event.
//
//=====================================================================================

// include our enums so we can use them in our event definitions.
#include "GameEnums.h"

// Note that we could also use complex structures, even other events in our event
// definitions.  Also, this code could be expanded to allow you to define inheritance
// for each event.  So for instance, the PlayerDeath event could inherit the
// PlayerDamaged event if you wanted it to, and it would contain all of the same fields
// that the PlayerDamaged event had.  It might get a bit tricky making the constructor
// though.

#define EventList \
/*===================================================================================*/ \
/*                                   Settings                                        */ \
/*===================================================================================*/ \
(GameEvent) /*Event Prefix*/ \
( \
/*===================================================================================*/ \
/*                                  PlayerDamaged                                    */ \
/*===================================================================================*/ \
( \
	(PlayerDamaged) \
	( \
		((EPlayer)     (VictimPlayerID)   (ePlayerUnknown)    (ELB_REQUIRED)) \
		((float)       (DamageTaken)      (0.0f)              (ELB_REQUIRED)) \
		((EDamageType) (DamageType)       (eDamageTypeNormal) (ELB_OPTIONAL)) \
		((EPlayer)     (AttackerPlayerID) (ePlayerUnknown)    (ELB_OPTIONAL)) \
		((bool)        (IsFatal)          (false)             (ELB_OPTIONAL)) \
	) \
) \
/*===================================================================================*/ \
/*                                  PlayerDeath                                      */ \
/*===================================================================================*/ \
( \
	(PlayerDeath) \
	( \
		((EPlayer)    (VictimPlayerID) (ePlayerUnknown)   (ELB_REQUIRED)) \
		((EDeathType) (DeathType)      (eDeathTypeNormal) (ELB_OPTIONAL)) \
	) \
) \
/*===================================================================================*/ \
) \
/*===================================================================================*/ \

// build our event classes
#include "EventListBuilder.h"
[/code]

<h2>GameEnums.h</h2>

Here's where game enums are defined.  Note that it makes an enum per entry here, but it also makes ToString and FromString functions for each enum type.

[code language="cpp"]
//=====================================================================================
//
//	GameEnums.h
//
//	Game enums are defined here
//=====================================================================================

#define EnumList \
/*===================================================================================*/ \
/*                                  EDeathType                                       */ \
/*===================================================================================*/ \
( \
	(DeathType) \
	( \
		(Normal) \
		(Incineration) \
		(Electrocution) \
		(Drowned) \
		(Crushed) \
		(Telefrag) \
	) \
) \
/*===================================================================================*/ \
/*                                  EDamageType                                      */ \
/*===================================================================================*/ \
( \
	(DamageType) \
	( \
		(Normal) \
		(Fire) \
		(Electricity) \
		(Ice) \
		(Arcane) \
	) \
) \
/*===================================================================================*/ \
/*                                    EPlayer                                        */ \
/*===================================================================================*/ \
( \
	(Player) \
	( \
		(1) \
		(2) \
		(3) \
		(4) \
	) \
) \
/*===================================================================================*/ \

#include "EnumBuilder.h"
[/code]

<h2>EnumBuilder.h</h2>

The simpler of the two files used to generate code from our data, here's EnumBuilder.h.

Note that I use both BOOST_PP_SEQ_FOR_EACH as well as BOOST_PP_SEQ_FOR_EACH_I.  The reason for that is because with BOOST_PP you are unable to do nested for loops.  However, if you use two different looping methods, it works just fine.  So... i use FOR_EACH for one level of looping, and FOR_EACH_I for another level of looping.  I'm not sure if you could do 3 or more levels of looping by switching between which loop method you use or not.

[code language="cpp"]
//=====================================================================================
//
//	EnumBuilder.h
//
//  Define "EnumList" and then include this header file to expand it into an enum and
//  also provide ToString and FromString functions.
//
//  Here's an example of what EnumList might look like
//
//	#define EnumList \
//  ( \
//		(FruitType) \
//		( \
//			(Apple) \
//			(Pear) \
//			(Banana) \
//			(Orange) \
//		) \
//	) \
//  ( \
//		(VegieType) \
//		( \
//			(Potato) \
//			(Broccoli) \
//		) \
//  ) \
//
//  The first entry is the name of the enum, and then after that are the enum values.
//  You can define as many enums as you would like I believe.  Boost might have an
//  internal limit, but I'm not sure...
//
//  The above would make two enums like below:
//
//  enum EFruitType
//  {
//		eFruitTypeUnknown = -1,
//
//		eFruitTypeApple,
//		eFruitTypePear,
//		eFruitTypeBanana,
//		eFruitTypeOrange,
//
//		eFruitTypeCount,
//		eFruitTypeFirst = 0
//	};
//
//  enum EVegieType
//  {
//		eVegieTypeUnknown = -1,
//
//		eVegieTypePotato,
//		eVegieTypeBroccoli,
//
//		eVegieTypeCount,
//		eVegieTypeFirst = 0
//  };
//
//  It will also make these functions:
//
//  const char *EFruitTypeToString( EFruitType value );
//  EFruitType EFruitTypeFromString( const char *value );
//
//  const char *EVegieTypeToString( EVegieType value );
//  EVegieType EVegieTypeFromString( const char *value );
//
//=====================================================================================

#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/seq/for_each.hpp>
#include <boost/preprocessor/seq/for_each_i.hpp>
#include <string.h>

//=====================================================================================

// define an enum value
#define ENB_ENUMVALUE(depth, enumName, enumItem) \
	BOOST_PP_CAT(e, BOOST_PP_CAT(enumName, enumItem)), \

// convert something to a string
#define ENB_TOSTRING(x) #x

// ToString() enum case
#define ENB_TOSTRINGCASE(depth, enumName, enumItem) \
	case BOOST_PP_CAT(e, BOOST_PP_CAT(enumName, enumItem)): return ENB_TOSTRING(enumItem);

// FromString() string test
#define ENB_FROMSTRINGTEST(depth, enumName, enumItem) \
	if (!stricmp(ENB_TOSTRING(enumItem), value)) \
		return BOOST_PP_CAT(e, BOOST_PP_CAT(enumName, enumItem));

// define the enum, including an "unknown" value at -1, and also "first" and "count"
// values which are useful for iterating through enum values
#define ENB_MAKEENUM(depth, data, index, enumList) \
	enum BOOST_PP_CAT(E,BOOST_PP_SEQ_ELEM(0, enumList)) \
	{ \
		BOOST_PP_CAT(BOOST_PP_CAT(e,BOOST_PP_SEQ_ELEM(0, enumList)),Unknown) = -1, \
		BOOST_PP_SEQ_FOR_EACH(ENB_ENUMVALUE, BOOST_PP_SEQ_ELEM(0, enumList), BOOST_PP_SEQ_ELEM(1, enumList)) \
		BOOST_PP_CAT(BOOST_PP_CAT(e,BOOST_PP_SEQ_ELEM(0, enumList)),Count), \
		BOOST_PP_CAT(BOOST_PP_CAT(e,BOOST_PP_SEQ_ELEM(0, enumList)),First) = 0, \
	}; \

// make the <EnumName>ToString function
#define ENB_MAKETOSTRING(depth, data, index, enumList) \
	const char *BOOST_PP_CAT(BOOST_PP_CAT(E,BOOST_PP_SEQ_ELEM(0, enumList)),ToString) (BOOST_PP_CAT(E,BOOST_PP_SEQ_ELEM(0, enumList)) value) \
	{ \
		switch(value) \
		{ \
			BOOST_PP_SEQ_FOR_EACH(ENB_TOSTRINGCASE, BOOST_PP_SEQ_ELEM(0, enumList), BOOST_PP_SEQ_ELEM(1, enumList)) \
		} \
		/* error case */ \
		return "Unknown"; \
	}

// make the <EnumName>FromString function
#define ENB_MAKEFROMSTRING(depth, data, index, enumList) \
	BOOST_PP_CAT(E,BOOST_PP_SEQ_ELEM(0, enumList)) BOOST_PP_CAT(BOOST_PP_CAT(E,BOOST_PP_SEQ_ELEM(0, enumList)),FromString) (const char *value) \
	{ \
		BOOST_PP_SEQ_FOR_EACH(ENB_FROMSTRINGTEST, BOOST_PP_SEQ_ELEM(0, enumList), BOOST_PP_SEQ_ELEM(1, enumList)) \
		/* error case */ \
		return BOOST_PP_CAT(BOOST_PP_CAT(e,BOOST_PP_SEQ_ELEM(0, enumList)),Unknown); \
	}

//=====================================================================================

// make all of the enums
BOOST_PP_SEQ_FOR_EACH_I(ENB_MAKEENUM, _, EnumList)

// make the ToString functions
BOOST_PP_SEQ_FOR_EACH_I(ENB_MAKETOSTRING, _, EnumList)

// make the FromString functions
BOOST_PP_SEQ_FOR_EACH_I(ENB_MAKEFROMSTRING, _, EnumList)

//=====================================================================================

// don't pollute other code with our macros
#undef ENB_ENUMVALUE
#undef ENB_TOSTRING
#undef ENB_TOSTRINGCASE
#undef ENB_FROMSTRINGTEST
#undef ENB_MAKEENUM
#undef ENB_MAKETOSTRING
#undef ENB_MAKEFROMSTRING

// this was defined by the caller but clean it up here for convinience
#undef EnumList
[/code]

<h2>EventListBuilder.h</h2>

Here's the code that expands an event list into classes with constructors, accessors and dynamic casting functionality:

[code language="cpp"]
//=====================================================================================
//
//	EventListBuilder.h
//
//  Define "EventList" and then include this header file to expand it into classes
//
//  The EventList schema is:
//
//  (ExpansionPrefix)
//  (Events)
//
//  ExpansionPrefix - a prefix added to every event name in the group
//  Events          - the list of events, see the schema below
//
//	The Events schema is:
//
//	(EventName)
//	(
//		((type)(Name)(Default)(Required))
//	)
//
//	EventName - The name of the event. A "C" and the expansion prefix are added
//				to the front when making it into a class.
//
//	Type	  - The data type of the field.  Make sure the data type is "viewable"
//				before including EventListBuilder.h
//
//	Name	  - The name of the data field, used to name member vars and accessors
//
//	Default   - The default value of the field.
//
//	Required  - Specifies whether a value must be provided when creating a new event
//				of this type or not.  If optional fiels are not provided, the default
//				value will be used.  ELB_OPTIONAL / ELB_REQUIRED
//
//  Note: All required parameters must come before all optional parameters
//
//  Example EventList:
//
//  #define EventList \
//		(InputEvent) \
//      ( \
//        ( \
//          (ButtonPress) \
//          ( \
//				((EButtonId) (ButtonId) (eButtonInvalid) (ELB_REQUIRED)) \
//				((bool)      (Pressed)  (true)           (ELB_REQUIRED)) \
//          ) \
//        ) \
//        ( \
//          (AnalogStick) \
//          ( \
//				((float)          (PosX)          (0.0f)              (ELB_REQUIRED)) \
//				((float)          (PosY)          (0.0f)              (ELB_REQUIRED)) \
//				((EAnalogStickId) (AnalogStickId) (eAnalogStickMouse) (ELB_OPTIONAL)) \
//          ) \
//        ) \
//      )
//
//	The above example will make two event classes with getters/setters for members
//  and a constructor on each class which has optional and required parameters as
//  specified in the EventList data.
//
//    CInputEventButtonPress
//      EButtonId ButtonId - the button that generated the event
//      bool Pressed       - whether the button was pressed or released
//
//    CInputEventAnalogStick
//      float PosX                   - X position of the stick
//      float PosY                   - Y position of the stick
//      EAnalogStickId AnalogStickId - optional parameter to specify which stick.
//									   defaults to "mouse"
//
//=====================================================================================

#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/control/if.hpp>
#include <boost/preprocessor/seq/for_each.hpp>
#include <boost/preprocessor/seq/for_each_i.hpp>

//=====================================================================================
// Define the base class
// C<ExpansionPrefix>
// 
// It has a templated GetAs function that works like a dynamic cast and lets you ask
// the event type too.
//=====================================================================================
#define ELB_DEFINEBASECLASS(expansionSettings) \
	class BOOST_PP_CAT(C, expansionSettings) \
	{ \
	public: \
		/* Constructor */ \
		BOOST_PP_CAT(C, expansionSettings) (BOOST_PP_CAT(E,expansionSettings) eventType) \
		{ \
			m_eventType = eventType; \
		} \
		\
		/* EventType() */ \
		BOOST_PP_CAT(E,expansionSettings) EventType() const {return m_eventType;} \
		\
		/* GetAs() */ \
		template <class EventClass> \
		EventClass *GetAs() \
		{ \
			if (m_eventType == EventClass::StaticEventType()) \
				return (EventClass *)this; \
			else \
				return 0; \
		} \
	private: \
		BOOST_PP_CAT(E,expansionSettings) m_eventType; \
	};

//=====================================================================================
// Define the class
// C<ExpansionPrefix><Eventname>
//
// It has getters and setters for each data member defined and the construct handles
// initialization of members to defaults and enforces required data fields.
//=====================================================================================
#define ELB_DEFINECLASS(depth, expansionSettings, classData) \
	class BOOST_PP_CAT(C, BOOST_PP_CAT(expansionSettings, BOOST_PP_SEQ_ELEM(0, classData))) \
	: public BOOST_PP_CAT(C, expansionSettings) \
	{ \
	public: \
		/* Constructor */ \
		BOOST_PP_CAT(C, BOOST_PP_CAT(expansionSettings, BOOST_PP_SEQ_ELEM(0, classData))) \
		( \
			BOOST_PP_SEQ_FOR_EACH_I(ELB_CONSTRUCTPARAMS, _, BOOST_PP_SEQ_ELEM(1, classData)) \
			void *dummyParamIgnore = 0 \
		) \
		: BOOST_PP_CAT(C, expansionSettings) (BOOST_PP_CAT(e,BOOST_PP_CAT(expansionSettings, BOOST_PP_SEQ_ELEM(0, classData)))) \
		{ \
			BOOST_PP_SEQ_FOR_EACH_I(ELB_INITIALIZEMEMBERVAR, _, BOOST_PP_SEQ_ELEM(1, classData)) \
		} \
		\
		/* Accessors - Get, Set, static Default*/ \
		BOOST_PP_SEQ_FOR_EACH_I(ELB_DEFINEMEMBERVARACCESSORS, _, BOOST_PP_SEQ_ELEM(1, classData)) \
		\
		/* StaticEventType() */ \
		static BOOST_PP_CAT(E,expansionSettings) StaticEventType() \
		{ \
			return BOOST_PP_CAT(e,BOOST_PP_CAT(expansionSettings, BOOST_PP_SEQ_ELEM(0, classData))); \
		} \
	private: \
		/* Member Variables */ \
		BOOST_PP_SEQ_FOR_EACH_I(ELB_DEFINEMEMBERVAR, _, BOOST_PP_SEQ_ELEM(1, classData)) \
	};

//=====================================================================================

// to make required / optional more apparent in the EventList.
// NOTE: BOOST_PP_IF needs to take a 1 or 0 unfortunately!
#define ELB_REQUIRED 1
#define ELB_OPTIONAL 0

// add member variables to the constructor, optional or required as specified in data
#define ELB_CONSTRUCTPARAMS(depth, data, index, classData) \
	BOOST_PP_SEQ_ELEM(0, classData) BOOST_PP_SEQ_ELEM(1, classData) \
	BOOST_PP_IF(BOOST_PP_SEQ_ELEM(3, classData), , = BOOST_PP_SEQ_ELEM(2, classData)),

// initialize a member variable to the parameter passed into the constructor
#define ELB_INITIALIZEMEMBERVAR(depth, data, index, classData) \
	BOOST_PP_CAT(m_,BOOST_PP_SEQ_ELEM(1, classData)) = BOOST_PP_SEQ_ELEM(1, classData);

// define a single member variable
#define ELB_DEFINEMEMBERVAR(depth, data, idex, classData) \
	BOOST_PP_SEQ_ELEM(0, classData) BOOST_PP_CAT(m_,BOOST_PP_SEQ_ELEM(1, classData));

// define a single member variable accessors
#define ELB_DEFINEMEMBERVARACCESSORS(depth, data, index, classData) \
	BOOST_PP_SEQ_ELEM(0, classData) BOOST_PP_CAT(Get,BOOST_PP_SEQ_ELEM(1, classData))() const { return BOOST_PP_CAT(m_,BOOST_PP_SEQ_ELEM(1, classData)); } \
	void BOOST_PP_CAT(Set,BOOST_PP_SEQ_ELEM(1, classData))(const BOOST_PP_SEQ_ELEM(0, classData) &value) { BOOST_PP_CAT(m_,BOOST_PP_SEQ_ELEM(1, classData)) = value; } \
	static BOOST_PP_SEQ_ELEM(0, classData) BOOST_PP_CAT(Default,BOOST_PP_SEQ_ELEM(1, classData))() { return BOOST_PP_SEQ_ELEM(2, classData); } 

// define an enum value
#define ELB_ENUMVALUE(depth, expansionSettings, classData) \
	BOOST_PP_CAT(e,BOOST_PP_CAT(expansionSettings, BOOST_PP_SEQ_ELEM(0, classData))), \

//=====================================================================================

// make an enum of the event types
enum BOOST_PP_CAT(E,BOOST_PP_SEQ_ELEM(0, EventList))
{
	BOOST_PP_SEQ_FOR_EACH(ELB_ENUMVALUE, BOOST_PP_SEQ_ELEM(0, EventList), BOOST_PP_SEQ_ELEM(1, EventList))
};

// define the base class
ELB_DEFINEBASECLASS(BOOST_PP_SEQ_ELEM(0, EventList))

// build EventList into classes
BOOST_PP_SEQ_FOR_EACH(ELB_DEFINECLASS, BOOST_PP_SEQ_ELEM(0, EventList), BOOST_PP_SEQ_ELEM(1, EventList))

//=====================================================================================

// don't pollute other code with our macros
#undef ELB_DEFINEBASECLASS
#undef ELB_DEFINECLASS
#undef ELB_REQUIRED
#undef ELB_OPTIONAL
#undef ELB_CONSTRUCTPARAMS
#undef ELB_INITIALIZEMEMBERVAR
#undef ELB_DEFINEMEMBERVAR
#undef ELB_DEFINEMEMBERVARACCESSORS
#undef ELB_ENUMVALUE

// this was defined by the caller but clean it up for convinience
#undef EventList
[/code]

<h2>Possible Improvements</h2>

<ul>
	<li>Imagine if the event classes had binary and/or text serialization for being able to save and load events from disk, or over a network connection.  Something like this sample code could be the back bone of your editor, your save game systems, or your network communication protocol.  It would be type safe and easily modified.  When you changed structures, you'd likely get compile errors or warnings in most of the places you needed to update code to support the changes.</li>
	<li>The definitions of enums and events are kind of weird in that they are lists of text in parentheses because that's what a "boost sequence" is (BOOST_PP_SEQ family of functions).  Boost also has something called tuples which are comma seperated lists.  I think tuples would be more natural for usage in some of the definition cases but i was unable to get that working for whatever reason.  If you end up getting that working, post back and let us all know how you did it!</li>
	<li>There are a lot of "magic numbers" in the macros, such as saying "use sequence field 0 for this" or "use sequence field 2 for this".  It probably would be better (more readable at least) if I defined symbolic constants for various indices.  That way you'd see ELB_ENUMNAME instead of "0", which would make a lot more sense.</li>

</ul>

<h2>That's All</h2>
This post was code heavy and explanation light but hopefully you can understand what's going on here.  If you have any questions about the code, or why I did something one way instead of doing it a different way, post a comment and I'll get back to you!

Example Code: <a href="https://demofox2.files.wordpress.com/2013/05/Code_051113.zip">Code_051113</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date><![CDATA[2013-05-11 17:23:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-12 01:23:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lists-of-macro-lists]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494230082;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:159;}i:1;a:1:{s:2:"id";i:194;}i:2;a:1:{s:2:"id";i:55;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Black Art of sizeof() aka Compile Time Type Deduction</title>
		<link>http://blog.demofox.org/2013/05/21/the-black-art-of-sizeof-aka-compile-time-type-deduction/</link>
		<pubDate>Wed, 22 May 2013 06:00:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=307</guid>
		<description></description>
		<content:encoded><![CDATA[Over the past couple decades of C++ programming, I've found sizeof useful, if relatively boring, and have found it handy for making things like memcpy and fread usable in a safe way.  Little did I know that there were dark secrets lurking just below the surface, and that to truly understand sizeof is to dangle precariously above the black pit of infinity and see the secrets of creation laid bare.

I might be dramatizing things a little bit, but not by much (;

<h2>Sizeof Basics</h2>

Let's start with the basics before working to the really interesting stuff:

[code language="cpp"]
#include <stdio.h>
void main(void)
{
	printf("size = %i",sizeof(int));
}
[/code]

Running the above gives the output "size = 4".

Luckily, instead of always having to give a type as a parameter to sizeof, we can also give a variable name.  This saves us typing (and reduces potential bugs) when we change the type of a variable.  For instance the below gives the same output.

[code language="cpp"]
#include <stdio.h>
void main(void)
{
	int index = 3;
	printf("size = %i",sizeof(index));
}
[/code]

What's great about the above is you can change what type index is defined as, and you don't have to update the sizeof call.  It knows what type index is and will always print out the right size for you.  The less things you have to do manually or remember, the easier it is to maintain code and the less bugs you are likely to have.

Ok next up... sizeof() happens at compile time.  It isn't a function call, it does it's work at compile time and has no runtime cost.  This code below proves that and gives the same output:

[code language="cpp"]
#include <stdio.h>

int index = 3;

enum
{
	c_sizeOfIndex = sizeof(index)
};

void main(void)
{
	printf("size = %i",c_sizeOfIndex);
}
[/code]

<h2>A Little More Interesting</h2>

Did you know that you can "call functions" inside of sizeof?  Check out the below which gives the same output again:

[code language="cpp"]
#include <stdio.h>

int myFunc()
{
	return 3;
}

enum
{
	c_sizeOf = sizeof(myFunc())
};

void main(void)
{
	printf("size = %i",c_sizeOf);
}
[/code]

But wait a second... if sizeof happens at compile time, how is it able to call a function?  Does it evaluate the function at compile time somehow?  Does it just do a sizeof on the function pointer?

What happens is it doesn't actually evaluate anything that you pass to sizeof.  it just looks at what's inside, figures out what type it evaluates to, and gives you the size of that resulting type.

In the example above, it's just looking at the return type of myFunc and giving you the sizeof that.  That's all :P

To prove that it doesn't actually execute the function, check this program out, which gives the same output and does not crash!

[code language="cpp"]
#include <stdio.h>

int myFunc()
{
	// this is safe, right?
	((int *)0)[0] = 0;

	// this is too right?
	int a = 0;
	int b = 3;
	int c = b / a;

	// this text never gets printed out
	printf("sup dawg, i heard you liked...");

	// lastly, infinite recursion..  i feel like i'm trying to kill rasputin...
	return 3 + myFunc();
}

enum
{
	c_sizeOf = sizeof(myFunc())
};

void main(void)
{
	printf("size = %i",c_sizeOf);
}
[/code]

here's one more interesting example, to show that sizeof has all the power that the compiler has to figure out data types at compile time, without actually evaluating any of the code.  Running the below, you can see by observation that the result of what's inside sizeof is a bool, and when you run the program, it reports sizeof(bool) which is 1 for me on my machine.

[code language="cpp"]
#include <stdio.h>

int myFunc(int someNumber)
{
	// this is safe, right?
	((int *)0)[0] = 0;

	// this is too right?
	int a = 0;
	int b = 3;
	int c = b / a;

	// this text never gets printed out
	printf("sup dawg, i heard you liked...");

	// lastly, infinite recursion..  i feel like i'm trying to kill rasputin...
	return someNumber + myFunc(someNumber * 2);
}

int someGlobalVariable = 3;

enum
{
	c_sizeOf = sizeof((myFunc(someGlobalVariable) * someGlobalVariable << 1) == 0)
};

void main(void)
{
	printf("size = %i",c_sizeOf);
}
[/code]

So basically, we now know that we can pass any arbitrarily complex expression to sizeof - even ones that call functions and use variables - and the compiler will figure out the resulting type and give us the result of that.

<h2>True Power Revealed</h2>

The real power with sizeof comes in when we start using function overloads.  If we have 2 versions of the same function, we can pass some parameters to that function, and the compiler will figure out which function is the best match.  If each function has differently sized return types, we can use sizeof to know which one the compiler chose for any given parameters.  Even better... we can know this at compile time with absolutely no run time cost.

Check out what I mean:

[code language="cpp"]
#include <stdio.h>

int someFunc(int someNumber);
char someFunc(const char *someString);

int myNumber = 3;
const char *myString = "hello!";

enum
{
	c_size1 = sizeof(someFunc(myNumber)),
	c_size2 = sizeof(someFunc(myString))
};

void main(void)
{
	printf("sizes = %i,  %i", c_size1, c_size2);
}
[/code]

If you run that program, it prints out "sizes = 4, 1".  We now have a program that can tell at compile time whether a value (and even a variable) is a string or an int.  Note that we don't actually need to define bodies for our functions, because they aren't ever actually called.

What if we wanted to just make it be able to tell us if it was a string or not, and we didn't want to have to make a separate function (and return type) for each possible type to be able to tell it whether it was a string or not?  Luckily we can very easily.

When the compiler tries to figure out the best matching function for a given function call, if there is a variable argument function that is a possibility (a function that has ... as it's parameter list), that function will always be least wanted.  It's what you get if nothing else matches.  In our situation we're going to use that kind of a function effectively as an "else" statement.  Check it out:

[code language="cpp"]
#include <stdio.h>

char stringTester(const char *someString);
int  stringTester(...);

int myNumber = 3;
const char *myString = "hello!";

void main(void)
{
	if (sizeof(stringTester(myNumber)) == sizeof(char))
		printf("myNumber is a string\r\n");
	else
		printf("myNumber is not a string\r\n");

	if (sizeof(stringTester(myString)) == sizeof(char))
		printf("myString is a string\r\n");
	else
		printf("myString is not a string\r\n");
}
[/code]

Pretty neat right?  Running that program will tell you that myNumber is not a string, but myString is a string, just like you already know.

Even though we are using if statements above, it's still a compile time check and will have no runtime costs, and the if statements should be completely eaten away by the optimizer (check the assembly to see for yourself!)

Lets clean up that last bit of code a bit to be a bit more generalized:

[code language="cpp"]
#include <stdio.h>

char stringTester(const char *someString);
int  stringTester(...);

#define REPORT_IF_STRING(x) \
	if (sizeof(stringTester(x)) == sizeof(char)) \
		printf(#x " is a string\r\n"); \
	else \
		printf(#x " is not a string\r\n"); \

int myNumber = 3;
const char *myString = "hello!";

void main(void)
{
	REPORT_IF_STRING(myNumber);
	REPORT_IF_STRING(myString);
}
[/code]

That gives the exact same output, but as you can see, is a bit more generalized... something you could re-use in code easily.

If you look at the final compiled code (in release), you'll basically just see 2 printf statements, because the rest of it all happened at compile time.

Working with only testing if a variable is a string or not a string, and printing that result is not exactly something you are likely to need on a daily basis, but there are a lot more useful examples.  For instance, what if you wanted to be able to tell whether one object's type could safely be cast to another object type?

You might be asking "Isn't that what RTTI and dynamic_cast are for?".  Yep.  But what if you could determine this at compile time, so that there was no cost to the dynamic cast, and the code was optimized to the point of not even having an if statement to check the type... it just did the right thing at runtime because it already knew.  You'd end up with some pretty fast code!

Here's how you might do that for a specific class hierarchy:

[code language="cpp"]
#include <stdio.h>

class CFruit {};
class CApple : public CFruit {};
class CBanana: public CFruit {};
class CPeach : public CFruit {};

class CVegetable {};
class CCarrot: public CVegetable {};
class CCelery: public CVegetable {};

char FruitTester(const CFruit &);
int  FruitTester(...);

#define REPORT_IS_FRUIT(x) \
	if (sizeof(FruitTester(x)) == sizeof(char)) \
		printf(#x " is a fruit\r\n"); \
	else \
		printf(#x " is not a fruit\r\n"); \

CFruit  fruit;
CApple	apple;
CBanana banana;
CPeach  peach;

CVegetable vegetable;
CCarrot    carrot;
CCelery    celery;

void main(void)
{
	REPORT_IS_FRUIT(fruit);
	REPORT_IS_FRUIT(apple);
	REPORT_IS_FRUIT(banana);
	REPORT_IS_FRUIT(peach);
	REPORT_IS_FRUIT(vegetable);
	REPORT_IS_FRUIT(carrot);
	REPORT_IS_FRUIT(celery);
}
[/code]

Running that program will give you output like the below:

<img src="https://demofox2.files.wordpress.com/2013/05/fruittest.png" alt="fruittest"/>

Again, if you look at the compiled code in release, you'll see what is effectively just a series of printf statements, because all the checking of types and inheritance happened at compile time and there was no runtime cost.  Check out the disassembly below.  It's just pushing the address of the strings to show onto the stack, and then calling printf to show the string.  No if statements, no jumps, nothing at all at runtime other than printing the right string:

<img src="https://demofox2.files.wordpress.com/2013/05/disassembly" alt="disassembly"/>

There is a way to generalize that so that you pass the type in that you want to test against, or other random variations for how it might function in a general case, but I leave that to you to figure out!

<h2>Not Quite a Dynamic Cast</h2>

Ok so the above is not quite a dynamic cast.  This is an upcast and gives you the ability to tell if an object derives from a specific type, but it can't work in the opposite direction which is what a dynamic cast can do.

What the above is good for is mainly for situations where you don't know the object type because it came in as a macro parameter, or as a template parameter, but you still want to do specific logic on it if it's a certain type, or derives from a certain type.  That's where this stuff comes in useful.

There may be a clever way to do a downcast (dynamic cast) using this functionality, but at this point in time, I'm not sure of how you might do that :P

<h2>Other Uses</h2>

Looking online I've found some really interesting uses of this stuff beyond what I've shown you.  Some people have mixed in a little other forms of black magic including templates, macros and template argument deduction and have done things as wild as being able to tell if an object has a specifically named function or member variable.

I personally feel like this trick of using sizeof to do compile time type deduction must have a million uses, but that my brain isn't used to thinking in this way so it'll probably be a little time before using it becomes more natural (whenever it's appropriate that is hehe).

Hopefully you guys enjoyed learning about this as much as I did... soon I'll be writing about another neat trick I came across called SFINAE.  Give it a google if you want... it's another pretty odd thing and I look forward to digging into it to be able to write up another post with some everyday useful examples.

Until next time!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date><![CDATA[2013-05-21 22:00:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-22 06:00:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-black-art-of-sizeof-aka-compile-time-type-deduction]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495667576;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1760;}i:1;a:1:{s:2:"id";i:521;}i:2;a:1:{s:2:"id";i:5090;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>517</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.197.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-22 04:34:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-22 12:34:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This seems like how type inference was done before C++.  I'd imagine template specializations would provide the same functionality in a safer/more robust manner.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>518</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-22 08:04:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-22 16:04:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm still wrapping my head around this guy, but I don't think they are mutually exclusive, check this out:

http://debugfailure.wordpress.com/2009/10/06/understanding-sfinae/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>519</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.197.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-22 12:02:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-22 20:02:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[They're not exclusive but to me it seems like mixing OOP with goto.

Check the code sample I have in your Permutation Programming Without Maintenance Nightmares article.  I'm guessing that the understanding sfinae author wasn't aware of the stl's true types, decltype, etc (or his compiler didn't support it in 2009).

Don't get me wrong, sizeof is a nifty trick but with a large part of C++11 being devoted towards type inference it seems like the old standard (meaning reliable, semi-commonly known and arcane).  But if you're going to start using C++11 features like sfinae then you might as well use the other C++11 features as they're designed to work together.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>518</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>520</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-22 18:28:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-23 02:28:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You might be right poday... I gotta watch more of those videos you posted about this stuff.  When i learn more, if i realize you are right ill come back and edit these posts or note it in them (:]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>519</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>528</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-05-27 14:54:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-05-27 22:54:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Poday, I'm starting to see what you are talking about.

The stuff I've seen and talked about so far uses the sizeof trick to determine what function was chosen or which template was chosen due to SFINAE.

The stuff you are talking about makes it so you just use template specialization instead of if(sizeof(foo)==sizeof(bar)) to branch.

I'm coming around, that does seem a lot cleaner (:]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Is pre-increment really faster than post increment?  Part 1</title>
		<link>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/</link>
		<pubDate>Thu, 06 Jun 2013 06:55:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=368</guid>
		<description></description>
		<content:encoded><![CDATA[If you are a C++ programmer, I'll bet at some point in time, maybe during a code review, someone told you "hey you should use a pre-increment there because post-increments are slower".

I had heard this some years ago in the context of for loops with the caveat of "they might have fixed it by now [the compiler], but why take the chance". Fair enough I thought, and I started using pre-increment in for loops, but kept using post increment in other places because i felt it felt more natural. Also i don't write code that makes it actually matter. I try to be explicit instead of clever to prevent bugs and such. For instance, lots of C++ programmers with years of experience probably wouldn't be 100% sure about what order things happen in for this small code sample: *++p = 3;

To be more explicit, you could increment p on one line and then set *p to 3 on the next. That's easier to get your head around because it's more explicit. The optimizer can handle the details of combining the code, and as we will see a little bit later, code generation without an optimizer seems to do just fine too!

Ayways, I heard this again today during a code review. Someone saw i had a piece of code where i was incrementing an unsigned int like this (not as part of a for loop, just inside of an if statement): numEnables++;

They said "you should change that to a pre-increment because it's faster". Well, I decided I should have a look and see if that was true and that's where today's journey begins (:

Disclaimer: All my findings are based on what I've seen in MSVC 2010 and 2012 using default settings for debug and release building a win32 console application. When in doubt, check your own disassembly and make sure your code is doing what you think it is. I wish I had years ago so I would have known the truth back then.
<h2>Will It Blend?</h2>
Lets check out the assembly generated in release of a simple program to see what assembly it makes

[code language="cpp"]
int main(void)
{
int someNumber = 3;
someNumber++;
return 0;
}
[/code]

Here is the resulting code from the disassembly window. The assembly code of our program is in the blue box:

PS you can find the diasassembly window by setting a breakpoint on someNumber++, running the program and when it hits the breapoint, going under the "Debug" menu, selecting "Windows" and then selecting "Disassembly".

<img class="alignnone size-full wp-image-397" src="https://demofox2.files.wordpress.com/2013/06/prepost1.png" alt="prepost1" width="783" height="619" />

Ok so what the heck happened to our program? All it's doing is xoring the eax register against itself (to set it to zero) and then it's calling "ret". That is our "return 0" statement. Everything else got optimized away! The optimizer realized that nothing meaningful changes if it doesn't calculate someNumber, so it decides not to.

Let's try a printf to print out our number. That way the optimizer CAN'T optimize our code away.

[code language="cpp"]
#include
#include

int main(void)
{
int someNumber = 3;
someNumber++;
printf("someNumber = %i\r\n", someNumber);
return 0;
}
[/code]

Now here's the disassembly:

<img class="alignnone size-full wp-image-403" src="https://demofox2.files.wordpress.com/2013/06/prepost2.png" alt="prepost2" width="1176" height="769" />

Ok we are doing better i guess. we see a push, a call, an add and then our return 0 code (xor eax, eax and ret).

I included the watch window so that you could see the values that the code is working with. The push pushes our printf format string onto the stack, and then it calls printf. Then it has the line "add sp, 8". What that does is move the stack pointer up 8 bytes. Parameters are passed on the stack, so that line is there to undo the 4 byte push of the printf format string, and also the 4 byte push of someNumber. It's just cleaning up the stack.

But where the heck was someNumber pushed onto the stack? I actually have no idea... do you know? If you know, please post a comment, I'm really curious how that works LOL.

<b>EDIT: Thanks to Christophe for unraveling this, he points out that the assembly window was just not showing all the instructions:</b>

<blockquote>For some reason, your MSVC debug window screencap shows the actual main() asm debug starting at 0x10b1002, not 0x10b1000. If you look at the line above at 0x10b0fff, it shows some “add byte ptr [edx+4], ch”. Which is because MSVC incorrectly deduced that there were some code starting at 0x10b0fff and so it messes up the debug print out of the actual code at 0x10b1000 (which would be some “push 4” on the stack, which is the incremented “someNumber” var).</blockquote>

We are not quite there. The optimizer is doing some funky stuff, and I think it's because the optimizer knows that someNumber is the number "4". It doesnt have to do any run time calculations so it isn't

To make it so the optimizer can't optimizer our number away like that, lets have the user input someNumber so the compiler has no idea what the right value is until run time.

[code language="cpp"]
#include
#include

int main(void)
{
int someNumber = 0;
printf("Please enter a number.\r\n");
scanf("%i",&amp;someNumber);
someNumber++;
printf("someNumber = %i\r\n", someNumber);
return 0;
}
[/code]

And here's the code generated. The important part (our increment) is in the blue box:

<img class="alignnone size-full wp-image-409" src="https://demofox2.files.wordpress.com/2013/06/prepost3.png" alt="prepost3" width="842" height="918" />

Ok there's our post increment code. Let's change the post increment to a preincrement:

[code language="cpp"]
#include
#include

int main(void)
{
int someNumber = 0;
printf("Please enter a number.\r\n");
scanf("%i",&amp;someNumber);
++someNumber;
printf("someNumber = %i\r\n", someNumber);
return 0;
}
[/code]

And here's the code it generates:

<img class="alignnone size-full wp-image-412" src="https://demofox2.files.wordpress.com/2013/06/prepost4.png" alt="prepost4" width="842" height="918" />

If you compare this generated code to the previously generated code, you'll see it's the exact same (some memory addresses have changed, but the instructions are the same). This is pretty good evidence that for this type of usage case, it doesn't matter if you use post or pre increment - in RELEASE anyways.

Well, you might think to yourself "the optimizer does a good job, but if using a pre-increment, maybe you can make your DEBUG code faster so it isn't so painful to debug the program". Good point! It turns out that in debug though, preincrement and post increment give the same generated code. Here it is:

<img class="alignnone size-full wp-image-416" src="https://demofox2.files.wordpress.com/2013/06/prepost5a.png" alt="prepost5a" width="842" height="918" />
<img class="alignnone size-full wp-image-417" src="https://demofox2.files.wordpress.com/2013/06/prepost5b.png" alt="prepost5b" width="842" height="402" />

So, it looks like in this usage case that the compiler does not care whether you use preincrement or post increment.

Let's check out for loops real quick before calling it a day.
<h2>For Loops</h2>
Here's our post increment for loop testing code. Note we are doing the same tricks as before to prevent the key parts from getting optimized away.

[code language="cpp"]
#include
#include

int main(void)
{
int someNumber = 0;
printf("Please enter a number.\r\n");
scanf("%i",&amp;someNumber);
for(int index = 0; index &lt; someNumber; index++)
printf("index = %i\r\n", index);
return 0;
}
[/code]

Post and pre-increment generate the same code in release! Here it is:

<img class="alignnone size-full wp-image-422" src="https://demofox2.files.wordpress.com/2013/06/prepost6.png" alt="prepost6" width="593" height="1032" />

It turns out they generate the same code in debug as well:

<img class="alignnone size-full wp-image-424" src="https://demofox2.files.wordpress.com/2013/06/prepost7a.png" alt="prepost7a" width="625" height="1032" />
<img class="alignnone size-full wp-image-425" src="https://demofox2.files.wordpress.com/2013/06/prepost7b.png" alt="prepost7b" width="585" height="404" />
<h2>Summary</h2>
Well, it looks like for these usage cases (admittedly, they are not very complex code), it really just does not matter. You still ought to check your own usage cases just to make sure you see the results I'm seeing. See something different? Post a comment!

In part 2 I'll show you a case where using pre or post increment does matter. Here it is!

<a title="Is pre-increment really faster than post increment? Part 2" href="http://blog.demofox.org/2013/07/08/is-pre-increment-really-faster-than-post-increment-part-2/">Is pre-increment really faster than post increment? Part 2</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>368</wp:post_id>
		<wp:post_date><![CDATA[2013-06-05 22:55:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-06 06:55:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[is-pre-increment-really-faster-than-post-increment-part-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495029265;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:590;}i:1;a:1:{s:2:"id";i:5116;}i:2;a:1:{s:2:"id";i:456;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>547</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.81.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-06 02:17:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-06 10:17:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think your lead in "If you are a C++ programmer..." hints at where it's safe to use post increment.  If I'm writing C then it's safe to use post increment as the compiler will do the right thing.  But if I'm writing C++ then I know that the compiler can't be smart enough to do the right thing and it's up to me to be explicit in what I want.

I had hoped the C++11's rvalue references might have allowed the removal of post increment's penalty but after 30 minutes of searching rvalue and return value optimization, etc, I don't think it solves the problem.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>550</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-06 07:35:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-06 15:35:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks like you already know what's coming in part 2 then poday hehe (:

Good thinking about the rvalue/std::move features.  It's a bummer that didn't bear fruit.

BTW not sure if you saw but i finally got what you were talking about mixing sizeof() w/ template stuff.  It's like... why use sizeof() to detect the type when you can use template specialization for the yes/no types right? :P  Thanks for that]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>547</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>555</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.81.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-07 11:08:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-07 19:08:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah... I was really hoping that I could short circuit your part 2 with a "If you're using the latest compiler and you can guarantee your code was written by a competent C++11 programmer then it really doesn't matter if you use post increment."

regarding this line in your reply to the previous article:
"The stuff I’ve seen and talked about so far uses the sizeof trick to determine what function was chosen or which template was chosen due to SFINAE."
You could probably use some variation of "typedef decltype(f(0)) type;" to determine function return type.

Sizeof is a neat trick but several things were added to C++11 to specifically address that shortcoming that the sizeof trick steps around.  And there's always a voice in the back of my mind that says "sizeof(char) could equal sizeof(int), the standard only specifies that char is the smallest addressable element, what min &amp; max values that char and int can store, and that sizeof(char) is less than or equal to sizeof(short) which is less than or equal to sizeof(int)".  There could be some strange machine where the smallest addressable space is also the same size of an integer.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>550</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>556</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.148.0.72]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-07 11:19:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-07 19:19:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Definitely.  I've seen the better SFINAE / sizeof info on the net will use char[1] and char[2] or that sort of thing, as the yes/no types to avoid those problems.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>555</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>557</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.148.0.72]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-07 11:25:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-07 19:25:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[::forehead slap:: and of course which did i use... the good pattern or the bad? oops :P]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>556</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>638</wp:comment_id>
			<wp:comment_author><![CDATA[Is pre-increment really faster than post increment? Part 2 | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2013/07/08/is-pre-increment-really-faster-than-post-increment-part-2/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-08 21:48:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-09 05:48:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the first part of this blog post (Is pre-increment really faster than post increment? Part 1 I showed that it really doesn&#8217;t seem to matter if you use post or pre increment with simple [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Efficiently Generate Random Numbers Without Repeats</title>
		<link>http://blog.demofox.org/2013/06/08/random-numbers-without-repeats/</link>
		<pubDate>Sun, 09 Jun 2013 04:44:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=436</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes in game development, you want to get a random number, but you want it to be different than the last random number you got.

For instance, let's say you were making a game where the player was an elemental golem and could change between ice, fire, electricity and earth randomly but it cost 50 mana to change to a new random element.

When the player presses the button to change forms, if your game rolled a random number to figure out the new element, sometimes it would choose the exact same element that the player already had, but the player would still get charged the 50 mana.

As a player, wouldn't you feel kind of ripped off if that happened?  Wouldn't it be better if it just chose randomly from all elements except the current one?

I'm going to show you how so if you want to think about it a bit first and see if you can work out a solution, do so now! SPOILERS AHEAD!

<h2>Not so Great Implementations</h2>

To implement that, there are a couple of "not so great" ways to do it such as...
<ul>
	<li>Make a list of all elements except the current one, and randomly choose from that list.  This isn't so great because you would have to allocate space for a list, copy in the elements, and then do the random roll.  Memory allocations and data copying isn't cheap.  Imagine if there were 100 or 1000 different things you were choosing between.  Then imagine that this operation happened for enemies every few game loops and that there were 1000 enemies on the screen at a time.  That would a be a LOT of overhead just to roll fresh random numbers!</li>
	<li>Roll a random number and if it's the same as the current value, roll it again.  Repeat until you get a new number.  This isn't so great because this code will randomly take longer than others.  As an extreme case for instance, what if the random number generator chose the same number 100 times in a row?  It would take 100 times longer to run the code in that case.</li>
	<li>Another option might be to roll a random number, and if it was the same number as before, just add one (and use modulus to make sure it's within valid range).  This isn't so great because you are basically giving the next number higher than your current number twice as much chance of coming up versus any other number.  The solution shouldn't bias the random chance in any way.</li>
</ul>

<h2>Solution 1</h2>

I faced this problem a few days ago and below is how i solved it.  Note that Dice() is zero based, so if you call Dice(6), you will get a random number between 0 and 5.  Dice() might be implemented using rand(), or a fast pseudo random number generator like <a href="http://en.wikipedia.org/wiki/Mersenne_twister">Mersenne Twister</a> or whatever else you would like to use.

[code language="cpp"]
unsigned int DiceNoRepeat(unsigned int numSides, unsigned int currentValue)
{
  if (numSides < 1)
    return 0;

  unsigned int newValue = Dice(numSides - 1);

  if (newValue >= currentValue)
    newValue++;

  return newValue;
}
[/code]

Why that works is that if you throw out the current value, there are only numSides - 1 numbers left to choose from, so you first roll a number for which remaining number is the new number.

The numbers you chose from didn't include the current value, but the values you are working with DO include the current value, so if the value is >= the current value, add one.

This solution is nice because it works in constant time (it only calls Dice() once), and also, it doesn't mess up the probabilities (the chance of getting each number is the same).

<h2>Solution 2</h2>

Jay, a friend of mine who I used to work with, came up with a different solution that I think is essentially the same in terms of performance, and also has the nice properties of working in constant time and it doesn't mess up the probabilities.

[code language="cpp"]
unsigned int DiceNoRepeat(unsigned int numSides, unsigned int currentValue)
{
  if (numSides < 1)
    return 0;

  unsigned int offset = Dice(numSides - 1) + 1;

  return (currentValue + offset) % numSides;
}
[/code]

The reason this works is that instead of picking a random number, you are picking a random offset to add to your current number (wrapping around with modulus).  You know that you want to move at least one space, and at most, numSides - 1.  Since Dice() is zero based, Dice(numSides - 1) + 1 will give you a random number between 1 and numSides - 1.

When you add the offset to the current value and wrap it around by using modulus against numSides, you get a different random number.

<h2>Have a Different Solution?</h2>

Have a different way to do this?  Post a comment and share! (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>436</wp:post_id>
		<wp:post_date><![CDATA[2013-06-08 20:44:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-09 04:44:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[random-numbers-without-repeats]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494877495;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:456;}i:1;a:1:{s:2:"id";i:521;}i:2;a:1:{s:2:"id";i:502;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>565</wp:comment_id>
			<wp:comment_author><![CDATA[Fast &amp; Lightweight Random &#8220;Shuffle&#8221; Functionality | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2013/06/08/fast-lightweight-random-shuffle-functionality/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-08 23:36:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-09 07:36:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &larr; Efficiently Generate Random Numbers Without Repeats [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Fast &amp; Lightweight Random &quot;Shuffle&quot; Functionality</title>
		<link>http://blog.demofox.org/2013/06/08/fast-lightweight-random-shuffle-functionality/</link>
		<pubDate>Sun, 09 Jun 2013 07:36:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=456</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="https://demofox2.files.wordpress.com/2013/06/shufflewhatif.jpg" alt="shufflewhatif" width="400" height="400" class="aligncenter size-full wp-image-485" />

NOTE: THIS ARTICLE ENDS IN FAILURE.  IF YOU WANT TO SKIP AHEAD TO THE SUCCESSFUL METHOD CHECK OUT THIS POST: <a href="http://blog.demofox.org/2013/07/06/fast-lightweight-random-shuffle-functionality-fixed/" title="Fast & Lightweight Random “Shuffle” Functionality – FIXED!">Fast & Lightweight Random “Shuffle” Functionality - FIXED</a>

Sometimes in game development we have a list of things that we want to choose from randomly, but we want to make sure and only choose each thing one time.

For instance, let's say you are making a game where the player gets quests randomly from an NPC, but when they finish the current group of quests, they can then move onto the next group of quests (because the next group is harder than the first group).

Here's some obvious ways you might implement this:
<ul>
	<li>Make a list of the items you want to choose randomly from.  When you choose an item from the list, remove it from the list so that it won't be chosen from next time.  You have to allocate and maintain (and maybe serialize) a list which is a little bit of a bummer, but it gets the job done.</li>
	<li>Add a flag or bool to each item to remember whether it's been chosen from.  When you randomly choose an item, if it has already been chosen, roll a random number again.  If it hasn't been chosen, mark it as having been chosen and use it. The bummer here is that it isn't constant time.  If you have a lot of items to choose from, when you get near the end and only have a few items left unused, you'll have to roll a bunch of random numbers before you find a valid one to use.</li>
	<li>Taking a cue from the last article <a href="http://blog.demofox.org/2013/06/08/random-numbers-without-repeats/" title="Efficiently Generate Random Numbers Without Repeats">Efficiently Generate Random Numbers Without Repeats</a>, you could go with the 2nd option, but count how many unused items there are, roll a random number for the number of unused items, and then count through the list again to find which unused item you rolled.  This is nicer, but it might be costly to have to traverse the list, especially if the list has a lot of items in it.</li>
</ul>
<h2>Computer Science Magic</h2>
Computer science has some neat things to it that could help you out here.  Most notably, there are various algorithms for traversing numbers or multidimensional spaces in ways other than sequentially, for various reasons.  Here are 2 such things for example (but there are many more out there waiting for you to find them!):

<ul>
	<li><a href="http://en.wikipedia.org/wiki/Z-order_curve">Morton Order</a></li>
	<li><a href="http://en.wikipedia.org/wiki/Gray_code">Gray Code</a> (thanks to Jason for telling me about this guy!)</li>
</ul>

You could likely leverage something like these guys to traverse the items in a list in a way that looked random to a player, but would actually be well defined and have a pattern to them.  The unfortunate thing about these is that they may be the same "random" every time though.  With some creativity and programming alchemy you might be able to get around that problem though.

If something like this works well enough for you, it might be your solution!
<h2>XOR Magic</h2>

XOR is a magical thing.  I started game development back in 16 bit CPU days before hardware accelerated graphics, and when GL (and later directX) first appeared, my first question was "this is all very neat, but how do i XOR pixels?" Sadly, the answer was that I couldn't, and as far as I know, we still don't have that ability with shaders and it makes me sad LOL.

Anyways, besides making really snazzy "programmer art" style graphics (and selection boxes), XOR is one of the corner stones of encryption and other cryptography.  (Like Cryptography?  I have a bunch of posts on it, go check em out! <a href="http://blog.demofox.org/cryptography-101/">Cryptography 101</a>)

For instance, the "one time pad" is the ONLY mathematically proven uncrackable encryption scheme, and it uses XOR.  In fact, it ONLY uses XOR.

One property of XOR that makes it useful for cryptography also makes it useful to us here in our shuffle code.  That property is this:  If you have a random number, and a non random number, when you XOR them together, the result will be a random number too. (BTW the other property that makes it useful for cryptography is that it's reversible, but we don't care about that right now).

Think about that for a minute... that means that if you have a random number, and you count from 1 to 10, XORing each number by the same random number, the resulting numbers ought to be random too.  What else is great is that thanks to the fact that Boolean math is deterministic (1 xor 0 is always 1, every time you do it), the numbers you get out will all be unique and not repeat.  TA-DA! There are some problems left to solve, but we now have the basis for our shuffle algorithm!

<h2>Are you down with the SHUF?</h2>

Ok so the basic idea for shuffling is this:  We are going to loop through the list normally, but we are going to xor each index against a pre-rolled random number so that it randomizes the index for us in a way that will have no repeats.  Let's pretend that we have 5 things to loop through and that our random number is 3.  Let's try it out:

[code language="cpp"]
index 0: 0 ^ 3 == 3
index 1: 1 ^ 3 == 2
index 2: 2 ^ 3 == 1
index 3: 3 ^ 3 == 0
index 4: 4 ^ 3 == 7
[/code]

Our last number ended up being 7, what the heck happened?  Well, the issue here is that it's randomizing the bits in our indices, not really shuffling our 5 items.  With 5 items to loop through, that means there are 3 bits that it is randomizing, which means that we might encounter any 3 bit value at any time (including 7, the highest one!), and that we would need to iterate through all 3 bit values to encounter all the indices that we are looking for (0 through 5).  We'll just have to loop through all 3 bit indices and ignore anything too large.  Here's all of the values:

[code language="cpp"]
index 0: 0 ^ 3 == 3
index 1: 1 ^ 3 == 2
index 2: 2 ^ 3 == 1
index 3: 3 ^ 3 == 0
index 4: 4 ^ 3 == 7 (ignore)
index 5: 5 ^ 3 == 6 (ignore)
index 6: 6 ^ 3 == 5 (ignore)
index 7: 7 ^ 3 == 4
[/code]

Looks like we solved that issue.

The other issue that comes up is that the random number can be any number that can fit in an unsigned int.  When we xor a huge number by our small indices, we'll get giant numbers out as a result.

For instance if our random number was 15367, xoring that against index 3 would give us 15364.

To fix that, we can just use the lowest 3 bits of the random number (& against 7).  That way, the random number can only have bits set in the lowest 3 bits, and our index already can only have bits set in the lowest 3 bits, so the end result can also only have bits set in the lowest 3 bits.

I think we are ready to write some code!

<h2>The Source Code</h2>

[code language="cpp"]
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

template <unsigned int c_numItems>
struct SShuffler
{
public:
	SShuffler()
	{
		Start();
	}

	// start a new shuffle
	void Start()
	{
		m_index = (unsigned int)-1;
		m_randomNumber = ((unsigned int)rand()) & c_numItemsNextPow2Mask;
	}

	// whether or not the shuffle is finished
	bool IsDone()
	{
		return m_index == c_numItemsNextPow2;
	}

	// Get the next index in the shuffle
	bool Shuffle(unsigned int &shuffleIndex)
	{
		// increment our index until we reach our max index,
		// or we find a valid index
		do
		{
			m_index++;
			shuffleIndex = m_index ^ m_randomNumber;
		}
		while (m_index < c_numItemsNextPow2 && shuffleIndex >= c_numItems);

		// if we haven't reached the max index, our shuffle was successful
		return m_index < c_numItemsNextPow2;
	}

	// for debugging
	unsigned int DebugGetSeed()
	{
		return m_randomNumber;
	}

private:
	// calculate the next power of 2 up to or at NumItems
	// also calculate the mask of that power of 2
	static const unsigned int c_A = (c_numItems - 1) | (c_numItems - 1) >> 1;
	static const unsigned int c_B = c_A | c_A >> 2;
	static const unsigned int c_C = c_B | c_B >> 4;
	static const unsigned int c_D = c_C | c_C >> 8;
	static const unsigned int c_numItemsNextPow2Mask = c_D | c_D >> 16;
	static const unsigned int c_numItemsNextPow2 = c_numItemsNextPow2Mask + 1;

	// member vars
	unsigned int m_index;
	unsigned int m_randomNumber;
};

// our songs that we are going to shuffle through
const unsigned int g_numSongs = 10;
const char *g_SongList[g_numSongs] =
{
	"1. Head Like a Hole",
	"2. Terrible Lie",
	"3. Down in It",
	"4. Sanctified",
	"5. Something I Can Never Have",
	"6. Kinda I Want to",
	"7. Sin",
	"8. That's What I Get",
	"9. The Only Time",
	"10. Ringfinger"
};

int main(void)
{
	// use the current time as a seed for our random number generator
	srand((unsigned)time(0));

	// declare a shuffler object
	SShuffler<g_numSongs> shuffler;

	// shuffle play once
	printf("I wanna listen to some NIN...(seed = %i)\r\n\r\n", shuffler.DebugGetSeed());
	unsigned int shuffleIndex = 0;
	while(!shuffler.IsDone())
	{
		if (shuffler.Shuffle(shuffleIndex))
			printf("%s\r\n",g_SongList[shuffleIndex]);
	}

	// shuffle play again
	shuffler.Start();
	printf("\r\nThat was great, let's listen again! (seed = %i)\r\n\r\n", shuffler.DebugGetSeed());
	while(!shuffler.IsDone())
	{
		if (shuffler.Shuffle(shuffleIndex))
			printf("%s\r\n",g_SongList[shuffleIndex]);
	}

	printf("\r\n");
	system("pause");
	return 0;
}
[/code]
<h2>Example Run</h2>
Here's the output of an example run of this program.  Note that if ever you encounter seed 0, it will not shuffle at all.  Also, if you encounter seed 15, it will play the list exactly backwards!

<img src="https://demofox2.files.wordpress.com/2013/06/shuffle.png" alt="shuffle" width="843" height="589" class="alignnone size-full wp-image-480" />

<h2>Something Weird Going On</h2>
After playing with this stuff a bit, it looks like even though this technique works "ok", that it actually doesn't randomize the list as much as I thought it was.  It looks like no matter what my seed is, adjacent numbers seem to "pair up".  Like 1 and 2 will always be next to each other but will change which comes first.  Same with 3 and 4, 5 and 6, etc.

I think the problem is that if you have a set of numbers in order, that for each possible order those numbers can be in, there doesn't exist a number you can XOR the set of numbers to get to be in that order.  I think that even though a simple XOR can re-arrange the numbers, it can't give you all possible combinations (which makes sense... 16 seeds is a lot less than 10 factorial, which is how many combinations there ought to be!)

I have to play around with it some more and think about it a little more though.  There might be a way at least to make it better, maybe using some more bits from the random number to do more math operations on the index or something.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>456</wp:post_id>
		<wp:post_date><![CDATA[2013-06-08 23:36:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-09 07:36:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fast-lightweight-random-shuffle-functionality]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495681341;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:436;}i:1;a:1:{s:2:"id";i:549;}i:2;a:1:{s:2:"id";i:55;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>568</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.81.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-09 05:39:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-09 13:39:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You'll start noticing more patterns if you look at it as a binary tree or focus on the Gray Code.  You pointed out that the groups (1) and (2) are adjacent.  But also the sets of (1,2) and (3,4) are adjacent and carrying that out the sets of (1,2,3,4) and (5,6,7,8) will be adjacent, (1...N) and (N+1...2N) will always be adjacent.  The reason devolves into binary math and how XOR and binary positional values can relate.

There's a great article by Blizzard from 8 or 10 years ago (that I've lost my bookmark to) that details how perceived randomness is more important than true randomness for human interactions.  If I flip a coin 20 times and it comes up heads every time then people will believe that tails is more likely to come up on the next flip.  If a game used true randomness then someone would be "lucky" enough to always roll bad (over 5 million players the chances of the extremely unlikely becomes likely).]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>570</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.81.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-09 14:12:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-09 22:12:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[(1…N) and (N+1…2N) will always be adjacent, as long as N is a power of 2.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>568</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>572</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-09 20:30:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-10 04:30:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah i noticed that too (the thing about the adjacency).

Cool thing about the blizz talk.  Jason basically said the same thing on FB.

I'm reading up on some more stuff and the rabbit hole is getting pretty deep.  Apparently this thing I'm trying to do is called Quasi Random Numbers and low discrepancy sequences.  It looks like they use these things a lot in the financial world to do monte carlo sampling of N dimensional spaces.

Crazy stuff but interesting, I'm going to summarize what i've found out and take a stab at making the shuffler class be a bit better at shuffling hehe.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>570</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>573</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-09 20:40:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-10 04:40:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey btw poday what did you mean about thinking about this as a binary tree?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>568</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>576</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.81.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-10 13:29:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-10 21:29:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is one of those things that requires pictures to fully explain, but here goes:
If you think of the array of values to be shuffled as leaves of a binary tree.  Then you swap the left/right values based upon the bit of the input (the least significant bit corresponds with the Nth level of the tree, the 2nd least significant bit is N-1th level of the tree).
      /\          row 3
   /\     /\      row 2
 /\  /\ /\  /\    row 1
1 2 3 4 5 6 7 8

So with the basic tree (that I'm sure will lose formatting).  An input of 1 would swap the left/right values of the children of row 1.  An input of 2 would swap the left/right children of row 2.  An input of 3 would swap the left/right children of row 1 and row 2, etc.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>573</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>578</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-10 18:18:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-11 02:18:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ah gotcha.  If i catch your meaning, it isn't so much that the binary tree / swapping will help me solve this issue, but more that the binary tree shows why xor alone will always have the pairing problem when applied to sequential numbers?

FWIW i tried adding the random seed to every other index to help thwart the pairing problem (ANDing against the bitmask to keep it in range) and then converting the indices to gray code, and then xoring the random number in.  It's actually looking quite a bit better.  There's still some seeds that spit out values that make you say "WTF" but its getting better.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>576</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>579</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-10 18:21:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-11 02:21:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[oh and by "add the random seed to every other index", i mean "add the random seed * 2 to every other index".  Since i'm only offsetting the even or odd numbers, and I still need every number to be represented exactly once in the output of this operation, i can't change the evens to odds or vice versa.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>578</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>583</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.81.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-11 16:43:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-12 00:43:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It seems like you're going out of your way to shuffle a list without allocating any memory.  Wouldn't it be easier to just generate a bunch of random numbers and then sort them?  Or if allocations are bad and you can guarantee that half of the bits are going to waste for the values you're trying to shuffle you could set the high bits randomly, sort the list, and then clear the high bits.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>578</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>584</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-11 18:45:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-12 02:45:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Apparently we reached max comment reply depth so starting a new one :P

Yeah so this technique is good at shuffling a large amount of data, which doesn't come up that often, making this less useful.

There are a couple interesting properties to this guy besides just being good at shuffling though.

#1 - it can easily go forwards or backwards.  If you have a game that involves being able to rewind time, or being able to watch replays (resimulations) and scrub back and forward in the timeline, this could help make that easier for you by providing a random number generator that doesn't care about the flow of time :P

#2 - If the number you tell it to shuffle is a power of 2 minus 1 (so that it doesn't round up to the next power of 2), you ca set the "shuffle iterator" index to any value and get the number generated for that index.  I could tell a shuffler to shuffle 100,000 items, set the index to 75,683 and get the value instantly without having to generate the 75,683 numbers that came before it first.

I don't think it's every day useful, but I think this thing is going to be a decent tool for the old game programming toolbox that can be used from time to time (:]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>587</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.81.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-12 16:33:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-13 00:33:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OK, a reversible or random order deterministic random number does sound pretty awesome.  But I don't think that xor will get you there.  I think the problem is that you're only adding one random element to known values and a known ordering and trying to get a different ordering.  There is probably some odd public key or symmetrical key encryption out there that is poor encryption but would match your requirements.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>584</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>588</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.148.0.72]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-12 16:46:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-13 00:46:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah you might be right about xor... i thought i had done better w/ adding or xoring even numbers against an even random number, gray code, and then xor but it falls apart for larger numbers. (like... @ 100,000 random max, i get numbers that shift between being in the 400s back up to 10,000... and several pages of that bad behavior.

To take it to the extreme i was thinking about jamming in more random numbers, and trying multiple passes through this "jumbling process" just to see if it helps any.

Encryption has been on my mind too but haven't tried that yet, that's a good idea.  I know hashing is no good though because unlike "single byte at a time, stateless encryption", it will happily take N things and generate less than N unique outputs.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>587</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>590</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-12 19:50:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-13 03:50:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Poday, good instincts man.  I just found a post by a dude set out to do this exact thing and got it working with a block cypher.

http://blog.notdot.net/2007/9/Damn-Cool-Algorithms-Part-2-Secure-permutations-with-block-ciphers]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>587</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>626</wp:comment_id>
			<wp:comment_author><![CDATA[The Incredible Time Traveling Random Number Generator | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2013/07/06/the-incredible-time-traveling-random-number-generator/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-06 12:38:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-06 20:38:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Next up I&#8217;m going to be applying this code to the problem of shuffling to continue on from the post where I tried to do that before: Fast &amp; Lightweight Random &#8220;Shuffle&#8221; Functionality. [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>628</wp:comment_id>
			<wp:comment_author><![CDATA[Fast &amp; Lightweight Random “Shuffle” Functionality &#8211; FIXED! | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2013/07/06/fast-lightweight-random-shuffle-functionality-fixed/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-06 15:55:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-06 23:55:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This is a follow up post to an older post called Fast &amp; Lightweight Random “Shuffle” Functionality. [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Why do you hate me rand()?!</title>
		<link>http://blog.demofox.org/2013/06/18/wtf-rand/</link>
		<pubDate>Wed, 19 Jun 2013 05:47:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=502</guid>
		<description></description>
		<content:encoded><![CDATA[TL;DR - I've always heard rand() sucked for generating (cryptographically strong) random numbers, but it turns out it's just kind of bad in general too LOL.

OK so this is bizarre, I made a default settings console project in MSVC 2012 with the code below:

[code language="cpp"]
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(int argc, char** argv)
{
	time_t thetime = 0;
	time(&thetime);
	srand(thetime);
	int a = rand();
	int b = rand();
	int c = rand();
	int d = rand();

	printf("time = %llu (%llu)\r\na = %i\r\nb = %i\r\nc =t %i\r\nd = %i\r\n", thetime, thetime % RAND_MAX, a, b, c, d);
	return 0;
}
[/code]

Here are some sample outputs, can you see what's wrong?!

[code language="cpp"]
time = 1371620230 (26377)
a = 11108
b = 28489
c = 18911
d = 15679
[/code]

[code language="cpp"]
time = 1371620268 (26415)
a = 11232
b = 10944
c = 9621
d = 12581
[/code]

[code language="cpp"]
time = 1371620289 (26436)
a = 11301
b = 7285
c = 24321
d = 26390
[/code]

[code language="cpp"]
time = 1371620310 (26457)
a = 11369
b = 3625
c = 6252
d = 7432
[/code]

[code language="cpp"]
time = 1371620332 (26479)
a = 11441
b = 10714
c = 6048
d = 12537
[/code]

5 times in a row you can see that the first number randomly generated is in the 11,000's.  You can also see that it's steadily increasing.

I included the time modulo RAND_MAX in case that was the first number returned but it isn't.  I also looked at the numbers in hex and there isn't a clear pattern there either. I can't really discern the correlation between the time and the first random number, but there is definitely a pattern of some kind.

You always hear you shouldn't use rand() if you need really high quality random numbers (like used for encryption), but i always figured if you use srand() with time, your number will be good enough for games at least.  Turns out, you might want to throw out the first random number rand gives you before using the stuff for your games too.  Maybe throw out a couple just in case! :P

You might wonder why b,c,d are seemingly more random then a, but that's likely due to the <a href="http://en.wikipedia.org/wiki/Avalanche_effect">Avalanche Effect</a> aka "sensitivity to initial conditions" which as it turns out is a nice property of cryptographic algorithms as well as pseudo random number generators.  That is also a fundamental idea from <a href="http://en.wikipedia.org/wiki/Chaos_theory">Chaos Theory</a>.

Essentially, as you ask for more random numbers, they ought to be more unpredictable, and more "random".  You just get some trash in the beginning.

Anyways... I'm super surprised by just how bad rand() is... I guess I never looked at it like this before (or maybe this is some new bad behavior in MSVC 2012?).  Also, RAND_MAX is defined for me as 0x7fff.  Ouchies, where are the rest of our numbers? :P]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>502</wp:post_id>
		<wp:post_date><![CDATA[2013-06-18 21:47:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-19 05:47:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wtf-rand]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<category domain="category" nicename="encryption-security"><![CDATA[Encryption + Security]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495626498;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:521;}i:1;a:1:{s:2:"id";i:2894;}i:2;a:1:{s:2:"id";i:955;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>604</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.81.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-19 03:56:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-19 11:56:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The reason why your random numbers are seemingly less random is because the number of seconds since Jan 1st, 1970 is a tad deterministic.  The formula that rand uses weights the higher bits more importantly than the lower bits (multiplication by the seed and some prime numbers and then shifting the bits down).  If you use a better random seed you should see better random results.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>606</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-19 07:58:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-19 15:58:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Fair enough, I'm just surprised srand/rand doesn't do a better job with the seed.  Maybe there's a good reason for it though...

I guess if we really cared that much we could hash what time returns before passing it in to srand? hehe]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>608</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.81.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-20 05:30:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-20 13:30:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[To be fair to the algorithm you're changing 3 decimal digits in the seed and then complaining that you're only seeing three decimal digits variation in the first output.  Hashing it with a constant wouldn't change the behaviour.  Though you could try pulling in other random-ish values like process ID or tick count though none of these are good enough for cryptography they're good enough for your needs.

Or you could do the classic of priming the pump by calling rand a few times before actually using it's results.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>606</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>609</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-06-20 07:33:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-06-20 15:33:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good hashes have the property that small changes in the input make large changes in the output, so hashing the time and passing that to srand seems like it ought to be a decent fix.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The Incredible Time Traveling Random Number Generator</title>
		<link>http://blog.demofox.org/2013/07/06/the-incredible-time-traveling-random-number-generator/</link>
		<pubDate>Sat, 06 Jul 2013 20:38:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=521</guid>
		<description></description>
		<content:encoded><![CDATA[It isn't very often that you need a pseudo random number generator (<a href="http://en.wikipedia.org/wiki/PRNG" title="PRNG" target="_blank">PRNG</a>) that can go forwards or backwards in time, or skip to specific points in the future or the past.  However, if you are ever writing a game like <a href="http://braid-game.com/" title="Braid" target="_blank">Braid</a> and do end up needing one, here's one way to do it.

At the core of how this is going to work, we are going to keep track of an index, and have some way to convert that index into a random number.  if we want to move forward in time, we will just increment the index.  If we want to move backwards in time, we will just decrement the index.  It's super simple from a high level, but how are we going to convert an index into a random number?

There are lots of pseudo random number generators out there that we could leverage for this purpose, the most famous being C++'s built in "rand()" function, and another one famous in the game dev world is the <a href="http://en.wikipedia.org/wiki/Mersenne_twister" title="Mersenne Twister" target="_blank">Mersenne Twister</a>.

I'm going to do something a little differently though as it leads well into the next post I want to write, and may be a little bit different than some people are used to seeing; I want to use a hash function.

<h2>Murmur Hash 2</h2>

Good hash functions have the property that small changes in input give large changes in output.  This means that if we hash the number 1 and then hash the number 2, that they ought not to be similar output, they ought to be wildly different numbers in the usual case.  Sometimes, just like real random numbers, we might get 2 of the same numbers in a row, but that is the desired behavior to have the output act like real random sequences.

There are varying levels of quality of hash functions, ranging from a simple string "hash" function of using the first character of a string (super low quality hash function, but super fast) all the way up to cryptographic quality hash functions like <a href="http://en.wikipedia.org/wiki/MD5" title="MD5" target="_blank">MD5</a> and <a href="http://en.wikipedia.org/wiki/SHA-1" title="SHA-1" target="_blank">SHA-1</a> which are a lot higher quality but also take a lot longer to generate.

In our usage case, I'm going to assume this random number generator is going to be used for game use, where if the player can discover the pattern in the random numbers, they won't be able to gain anything meaningful or useful from that, other than at most be able to cheat at their own single player game.  However, I really do want the numbers to be fairly random to the casual eye.  I don't want visible patterns to be noticeable since that would decrease the quality of the gameplay.  I would also like my hash to run as quickly as possible to keep game performance up.

Because of that level of quality I'm aiming for, I opted to go with a fast, non cryptographic hash function called <a href="http://en.wikipedia.org/wiki/Murmurhash" title="Murmur Hash 2" target="_blank">Murmur Hash 2</a>.  It runs pretty quick and it gives pretty decent quality results too - in fact the official <a href="https://sites.google.com/site/murmurhash/" title="Murmur Hash Website" target="_blank">Murmur Hash Website</a> claims that it passes the <a href="http://en.wikipedia.org/wiki/Pearson%27s_chi-squared_test" title="Chi Squared Test" target="_blank">Chi Squared Test</a> for "practically all keysets & bucket sizes".

If you need a higher quality set of random numbers, you can easily drop in a higher quality hash in place of Murmur Hash.  Or, if you need to go the other way and have faster code at the expensive of random number quality, you can do that too.

<h2>Speed Comparison</h2>
How fast is it?  Here's some sample code to compare it vs C++'s built in rand() function, as well as an implementation of the Mersenne Twister I found online that seems to preform pretty well.

[code language="cpp"]
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>
#include "tinymt32.h" // from http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/TINYMT/index.html

// how many numbers to generate
#define NUMBERCOUNT 10000000  // Generate 10 million random numbers

// profiling macros
#define PROFILE_BEGIN \
{ \
	LARGE_INTEGER freq; \
	LARGE_INTEGER start; \
    QueryPerformanceFrequency(&freq); \
    QueryPerformanceCounter(&start); \
		
#define PROFILE_END(label) \
	LARGE_INTEGER end; \
	QueryPerformanceCounter(&end); \
	printf(label " - %f ms\r\n", ((double)(end.QuadPart - start.QuadPart)) * 1000.0 / freq.QuadPart); \
}

// MurmurHash code was taken from https://sites.google.com/site/murmurhash/
//-----------------------------------------------------------------------------
// MurmurHash2, by Austin Appleby

// Note - This code makes a few assumptions about how your machine behaves -

// 1. We can read a 4-byte value from any address without crashing
// 2. sizeof(int) == 4

// And it has a few limitations -

// 1. It will not work incrementally.
// 2. It will not produce the same results on little-endian and big-endian
//    machines.

unsigned int MurmurHash2 ( const void * key, int len, unsigned int seed )
{
	// 'm' and 'r' are mixing constants generated offline.
	// They're not really 'magic', they just happen to work well.

	const unsigned int m = 0x5bd1e995;
	const int r = 24;

	// Initialize the hash to a 'random' value

	unsigned int h = seed ^ len;

	// Mix 4 bytes at a time into the hash

	const unsigned char * data = (const unsigned char *)key;

	while(len >= 4)
	{
		unsigned int k = *(unsigned int *)data;

		k *= m; 
		k ^= k >> r; 
		k *= m; 
		
		h *= m; 
		h ^= k;

		data += 4;
		len -= 4;
	}
	
	// Handle the last few bytes of the input array

	switch(len)
	{
	case 3: h ^= data[2] << 16;
	case 2: h ^= data[1] << 8;
	case 1: h ^= data[0];
	        h *= m;
	};

	// Do a few final mixes of the hash to ensure the last few
	// bytes are well-incorporated.

	h ^= h >> 13;
	h *= m;
	h ^= h >> 15;

	return h;
}

void RandTest()
{
	for(int index = 0; index < NUMBERCOUNT; ++index)
		int i = rand();
}

unsigned int MurmurTest()
{
	unsigned int key = 0;
	for(int index = 0; index < NUMBERCOUNT; ++index)
		key = MurmurHash2(&key,sizeof(key),0);
	return key;
}

// g_twister is global and inited in main so it doesnt count towards timing
tinymt32_t g_twister; 
unsigned int TwisterTest()
{
	unsigned int ret = 0;
	for(int index = 0; index < NUMBERCOUNT; ++index)
		ret = tinymt32_generate_uint32(&g_twister);
	return ret;
}

int main(int argc, char**argv)
{
	// rand() test
	PROFILE_BEGIN;
	RandTest();
	PROFILE_END("rand()");

	// hash test
	unsigned int murmurhash;
	PROFILE_BEGIN;
	murmurhash = MurmurTest();
	PROFILE_END("Murmur Hash 2");

	// twister test
	g_twister.mat1 = 0;
	g_twister.mat2 = 0;
	tinymt32_init(&g_twister, 0);
	unsigned int twister;
	PROFILE_BEGIN;
	twister = TwisterTest();
	PROFILE_END("Mersenne Twister");

	// show the results
	system("pause");

	// this is here so that the murmur and twister code doesn't get optimized away
	printf("%u %u\r\n", murmurhash, twister);

	return 0;
}
[/code]

Here's the output of that code run in release on my machine, generating 10 million random numbers of each type.  You can see that murmurhash takes about 1/3 as long as rand() but is not quite as fast as the Mersenne Twister.  I ran this several times and got similar results, so all in all, Murmur Hash 2 is pretty fast!

<img src="https://demofox2.files.wordpress.com/2013/07/mrmrrandperf.png" alt="mrmrrandperf" width="358" height="82" class="alignnone size-full wp-image-529" />

<h2>Final Code & Sample Output</h2>

Performance looks good but how about the time traveling part, and how about seeing some example output?

Here's the finalized code:
[code language="cpp"]
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// MurmurHash code was taken from https://sites.google.com/site/murmurhash/
//-----------------------------------------------------------------------------
// MurmurHash2, by Austin Appleby

// Note - This code makes a few assumptions about how your machine behaves -

// 1. We can read a 4-byte value from any address without crashing
// 2. sizeof(int) == 4

// And it has a few limitations -

// 1. It will not work incrementally.
// 2. It will not produce the same results on little-endian and big-endian
//    machines.

unsigned int MurmurHash2 ( const void * key, int len, unsigned int seed )
{
	// 'm' and 'r' are mixing constants generated offline.
	// They're not really 'magic', they just happen to work well.

	const unsigned int m = 0x5bd1e995;
	const int r = 24;

	// Initialize the hash to a 'random' value

	unsigned int h = seed ^ len;

	// Mix 4 bytes at a time into the hash

	const unsigned char * data = (const unsigned char *)key;

	while(len >= 4)
	{
		unsigned int k = *(unsigned int *)data;

		k *= m; 
		k ^= k >> r; 
		k *= m; 
		
		h *= m; 
		h ^= k;

		data += 4;
		len -= 4;
	}
	
	// Handle the last few bytes of the input array

	switch(len)
	{
	case 3: h ^= data[2] << 16;
	case 2: h ^= data[1] << 8;
	case 1: h ^= data[0];
	        h *= m;
	};

	// Do a few final mixes of the hash to ensure the last few
	// bytes are well-incorporated.

	h ^= h >> 13;
	h *= m;
	h ^= h >> 15;

	return h;
}

class CReversablePRNG
{
public:
	CReversablePRNG()
	{
		m_index = 0;
		m_seed = 0;
	}

	unsigned int NextNumber()
	{
		unsigned int ret = MurmurHash2(&m_index, sizeof(m_index), m_seed);
		m_index++;
		return ret;
	}

	unsigned int LastNumber()
	{
		unsigned int lastIndex = m_index - 2;
		unsigned int ret = MurmurHash2(&lastIndex, sizeof(lastIndex), m_seed);
		m_index--;
		return ret;
	}

	// to be able to save / restore state for a save game or whatever else
	void GetState(unsigned int &index, unsigned int &seed)
	{
		index = m_index;
		seed = m_seed;
	}

	void SetState(unsigned int index, unsigned int seed)
	{
		m_index = index;
		m_seed = seed;
	}

private:
	unsigned int m_index;
	unsigned int m_seed;
};

int main(int argc, char**argv)
{
	// create and seed our random number generator.  If two similar numbers are hashed
	// they should give very different results usually, so for a seed, we can hash the
	// time in seconds, even though the number from run to run should be really similar
	CReversablePRNG prng;
	unsigned int currentTime = time(NULL);
	unsigned int seed = MurmurHash2(&currentTime, sizeof(currentTime), 0x1337beef);
	prng.SetState(0, seed);

	// display our seed and our table header
	printf("seed = %u\r\n", seed);
	printf("index | raw number | mod 10\r\n");
	printf("---------------------------\r\n");

	// generate 10 numbers forward
	for (int index = 0; index < 10; ++index)
	{
		unsigned int nextNumber = prng.NextNumber();
		printf("%2i    | %10u | %u\r\n", index, nextNumber, nextNumber % 10);
	}

	// generate 3 numbers back
	printf("\r\n");
	for (int index = 0; index < 3; ++index)
	{
		unsigned int lastNumber = prng.LastNumber();
		printf("%2i    | %10u | %u\r\n", 8 - index, lastNumber, lastNumber % 10);
	}

	// generate 5 numbers forward
	printf("\r\n");
	for (int index = 0; index < 5; ++index)
	{
		unsigned int nextNumber = prng.NextNumber();
		printf("%2i    | %10u | %u\r\n", 7 + index, nextNumber, nextNumber % 10);
	}

	system("pause");

	return 0;
}
[/code]

<img src="https://demofox2.files.wordpress.com/2013/07/mrmrout4.png" alt="mrmrout4" width="318" height="484" class="alignleft size-full wp-image-539" />

<img src="https://demofox2.files.wordpress.com/2013/07/mrmrout3.png" alt="mrmrout3" width="340" height="484" class="alignleft size-full wp-image-538" />

<img src="https://demofox2.files.wordpress.com/2013/07/mrmrout2.png" alt="mrmrout2" width="335" height="482" class="alignleft size-full wp-image-537" />

<img src="https://demofox2.files.wordpress.com/2013/07/mrmrout1.png" alt="mrmrout1" width="324" height="492" class="alignleft size-full wp-image-536" />

<h2>Next Up</h2>

Hopefully you enjoyed this post!

Next up I'm going to be applying this code to the problem of shuffling to continue on from the post where I tried to do that before: <a href="http://blog.demofox.org/2013/06/08/fast-lightweight-random-shuffle-functionality/" title="Fast & Lightweight Random “Shuffle” Functionality" target="_blank">Fast & Lightweight Random "Shuffle" Functionality</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>521</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 12:38:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 20:38:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-incredible-time-traveling-random-number-generator]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495696428;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:456;}i:1;a:1:{s:2:"id";i:436;}i:2;a:1:{s:2:"id";i:1483;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fast &amp; Lightweight Random “Shuffle” Functionality - FIXED!</title>
		<link>http://blog.demofox.org/2013/07/06/fast-lightweight-random-shuffle-functionality-fixed/</link>
		<pubDate>Sat, 06 Jul 2013 23:55:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=549</guid>
		<description></description>
		<content:encoded><![CDATA[In this post I'm going to show a way to make an iterator that will visit items in a list in a random order, only visit each item once, and tell you when it's visited all items and is finished.  It does this without storing a shuffled list, and it also doesn't have to keep track of which items it has already visited.

This means you could have a list that is a million items long and no matter how many you have visited, it will only take two uint32s to store the current state of the iterator, and it will be very fast to get the next item in the list (somewhere around 1 to 4 times the cost of calling the rand() function!).

This is a follow up post to an older post called <a href="http://blog.demofox.org/2013/06/08/fast-lightweight-random-shuffle-functionality/" title="Fast & Lightweight Random “Shuffle” Functionality">Fast & Lightweight Random “Shuffle” Functionality</a>.

In that older post, things didn't work quite like I expected them to so it was back to the drawing board for a little while to do some research and experimentation to find a better solution.  I'm not going to go back over the basics I talked about in that article so go back and have a read there first if anything is confusing.

<h2>High Level</h2>

In the last post on this topic we talked about how the high level goal was to map the index to a random number, and because we were randomizing the bits in a deterministic (and non destructive) way, we needed to iterate over the whole "next power of 2" items and reject any that were too large.  Only doing this could we be sure that we visited every index.  The problem I hit last time though was that I could not get the numbers to look random enough.

To solve this, i decided what i needed to do was ENCRYPT the index with a block cipher.  When you encrypt data, it should come out looking like random data, even though the data you put in may be sequential or have other easily seen patterns.  What else is great, is that when using a block cipher, each unique input should equate to a unique output which means that if we encrypt the full power of 2 range as input, we will get the full power of 2 range out as output, but just in a different order.

Once I realized this was a good solution, my next problem to tackle was that I knew of no block algorithms that would work for a variable number of bits.  There are block cipher algorithms that will work for LARGE number of bits, but there is no algorithm I knew of where you can tell it "hey, i only want to use 4 bits" or "i only want to use 5 bits".

In the end the answer I found was to roll my own, but use existing, well established technology to do so.  In my specific case, I'm also aiming for high speed functions since I want this functionality used in real time gaming applications.

What I came up with in the end is not cryptographically secure, but using the same techniques I have laid out, you should be able to drop in a different block cipher algorithm if that is a requirement.

<h2>Feistel Network</h2>
As it turns out, there is a basic primitive of cryptography called a <a href="http://en.wikipedia.org/wiki/Feistel_network" title="Feistel Network" target="_blank">Feistel Network</a>.  It's used by quite a number of modern ciphers and hash functions, and it is surprisingly simple.

For a balanced Feistel Network, you split the data into a left and a right side, and do the following, which consists of a single round (you can do as many rounds as you like):

[code language="cpp"]
Left[i+1]  = Right[i];
Right[i+1] = Left[i] ^ RoundFunction(Right[i], key);
[/code]

After performing however many rounds you wish, you combine the left and the right sides again to get your encrypted data.

To unencrypt, the feistel network works much the same but only in reverse, looking like the below:

[code language="cpp"]
Right[i] = Left[i+1];
Left[i] = Right[i+1] ^ RoundFunction(Left[i+1], key);
[/code]

Check out the wikipedia page if you are interested in more info.

The neat thing about Feistel Networks is that the round function can be any deterministic function that performs whatever operations it wants - even destructive and irreversible operations such as division or bit shifts.  Even so, the feistel network as a whole is reversible, no matter what you do in the round function, and you can unencrypt to get your origional data back.

This threw me for quite a loop and I couldn't get my head around why this worked for a long while until I found a webpage that explained it pretty well.  unfortunately I lost the link and cannot find it again but the basic idea is this... For each round of encryption, the right side is encrypted using the key and the left side.  This means that at any point, no matter how many rounds you've done on your data, the right side should be able to be decrypted using the key and the left side.  If you have the key, and you know how many rounds were used in encryption, you have all the data you need to decrypt it again.  Hopefully that makes sense... I had to work it out on paper a little bit to see it fully.

The other great thing about Feistel Networks is that you can make them be however many bits you want.  So, if i want each side of the Feistel Network to be 1 bit, I can do that.  Or, if i want each side to be 128 bits, I can do that too!

You can also tune the quality / performance a bit by doing less or more rounds.

BTW the <a href="http://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm" title="Tiny Encryption Algorithm" target="_blank">Tiny Encryption Algorithm</a> uses a Feistel Network if you want to see a simple example in action.

With the "variable bit size support" problem solved, next I needed to come up with a round function that did a good job of taking sequential numbers as input and spitting out seemingly random numbers as output.  Thanks to what I was saying before, the round function doesn't need to be reversible, so there are a lot of options available.

I ended up deciding to go with a hash function, specifically <a href="http://en.wikipedia.org/wiki/MurmurHash" title="Murmur Hash 2" target="_blank">Murmur Hash 2</a> (which I actually also used in my last post if you'd like to see some more information on it! <a href="http://blog.demofox.org/2013/07/06/the-incredible-time-traveling-random-number-generator/" title="The Incredible Time Traveling Random Number Generator" target="_blank">The Incredible Time Traveling Random Number Generator</a>).

Since the hash spits out numbers that might be anything in the range of an unsigned int, but I only want N bits, I just AND the hash against a mask to get the number of bits I want.  There's probably a higher quality method of smashing down the bits using XOR or something, but my quality needs aren't very high so I just opted to AND it.

A downside of going with the balanced Feistel Network approach is that before this, I only had to round up to the next power of 2, but now, since each half of the data needs to be a power of 2, I actually have to make sure I have an even number of bits and have to round up to the next power of 4.  This means that when it's looking for valid indices to return in the shuffle, it may have to calculate up to 4 different indices on average before it finds a valid one.  Not the greatest thing in the world, but also not the worst and definitely not a deal breaker in my eyes.

<h2>The Code</h2>

At long last, here is the code!  Use it in good health (:

There are some example runs of the program below it as well.

[code language="cpp"]
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// MurmurHash code was taken from https://sites.google.com/site/murmurhash/
//-----------------------------------------------------------------------------
// MurmurHash2, by Austin Appleby

// Note - This code makes a few assumptions about how your machine behaves -

// 1. We can read a 4-byte value from any address without crashing
// 2. sizeof(int) == 4

// And it has a few limitations -

// 1. It will not work incrementally.
// 2. It will not produce the same results on little-endian and big-endian
//    machines.

unsigned int MurmurHash2 ( const void * key, int len, unsigned int seed )
{
	// 'm' and 'r' are mixing constants generated offline.
	// They're not really 'magic', they just happen to work well.

	const unsigned int m = 0x5bd1e995;
	const int r = 24;

	// Initialize the hash to a 'random' value

	unsigned int h = seed ^ len;

	// Mix 4 bytes at a time into the hash

	const unsigned char * data = (const unsigned char *)key;

	while(len >= 4)
	{
		unsigned int k = *(unsigned int *)data;

		k *= m; 
		k ^= k >> r; 
		k *= m; 
		
		h *= m; 
		h ^= k;

		data += 4;
		len -= 4;
	}
	
	// Handle the last few bytes of the input array

	switch(len)
	{
	case 3: h ^= data[2] << 16;
	case 2: h ^= data[1] << 8;
	case 1: h ^= data[0];
	        h *= m;
	};

	// Do a few final mixes of the hash to ensure the last few
	// bytes are well-incorporated.

	h ^= h >> 13;
	h *= m;
	h ^= h >> 15;

	return h;
}

struct SShuffler
{
public:
	SShuffler(unsigned int numItems, unsigned int seed)
	{
		// initialize our state
		m_numItems = numItems;
		m_index = 0;
		m_seed = seed;

		// calculate next power of 4.  Needed sice the balanced feistel network needs
		// an even number of bits to work with
		m_nextPow4 = 4;
		while (m_numItems > m_nextPow4)
			m_nextPow4 *= 4;

		// find out how many bits we need to store this power of 4
		unsigned int numBits = 0;
		unsigned int mask = m_nextPow4 - 1;
		while(mask)
		{
			mask = mask >> 1;
			numBits++;
		}

		// calculate our left and right masks to split our indices for the feistel 
		// network
		m_halfNumBits = numBits / 2;
		m_rightMask = (1 << m_halfNumBits) - 1;
		m_leftMask = m_rightMask << m_halfNumBits;
	}

	void Restart()
	{
		Restart(m_seed);
	}

	void Restart(unsigned int seed)
	{
		// store the seed we were given
		m_seed = seed;

		// reset our index
		m_index = 0;
	}

	// Get the next index in the shuffle.  Returning false means the shuffle
	// is finished and you should call Restart() if you want to start a new one.
	bool Shuffle(unsigned int &shuffleIndex)
	{
		// m_index is the index to start searching for the next number at
		while (m_index < m_nextPow4)
		{
			// get the next number
			shuffleIndex = NextNumber();

			// if we found a valid index, return success!
			if (shuffleIndex < m_numItems)
				return true;
		}
		
		// end of shuffled list if we got here.
		return false;
	}

	// Get the previous index in the shuffle.  Returning false means the shuffle
	// hit the beginning of the sequence
	bool ShuffleBackwards(unsigned int &shuffleIndex)
	{
		while (m_index > 1)
		{
			// get the last number
			shuffleIndex = LastNumber();

			// if we found a valid index, return success!
			if (shuffleIndex < m_numItems)
				return true;
		}

		// beginning of shuffled list if we got here
		return false;
	}

private:
	unsigned int NextNumber()
	{
		unsigned int ret = EncryptIndex(m_index);
		m_index++;
		return ret;
	}

	unsigned int LastNumber()
	{
        unsigned int lastIndex = m_index - 2;
        unsigned int ret = EncryptIndex(lastIndex);
        m_index--;
        return ret;
	}

	unsigned int EncryptIndex(unsigned int index)
	{
		// break our index into the left and right half
		unsigned int left = (index & m_leftMask) >> m_halfNumBits;
		unsigned int right = (index & m_rightMask);

		// do 4 feistel rounds 
		for (int index = 0; index < 4; ++index)
		{
			unsigned int newLeft = right;
			unsigned int newRight = left ^ (MurmurHash2(&right, sizeof(right), m_seed) & m_rightMask);
			left = newLeft;
			right = newRight;
		}

		// put the left and right back together to form the encrypted index
		return (left << m_halfNumBits) | right;
	}

private:

	// precalculated values
	unsigned int m_nextPow4;
	unsigned int m_halfNumBits;
	unsigned int m_leftMask;
	unsigned int m_rightMask;

	// member vars
	unsigned int m_index;
	unsigned int m_seed;
	unsigned int m_numItems;

	// m_index assumptions:
	//   1) m_index is where to start looking for next valid number
	//   2) m_index - 2 is where to start looking for last valid number
};

// our songs that we are going to shuffle through
const unsigned int g_numSongs = 10;
const char *g_SongList[g_numSongs] =
{
	" 1. Head Like a Hole",
	" 2. Terrible Lie",
	" 3. Down in It",
	" 4. Sanctified",
	" 5. Something I Can Never Have",
	" 6. Kinda I Want to",
	" 7. Sin",
	" 8. That's What I Get",
	" 9. The Only Time",
	"10. Ringfinger"
};

int main(void)
{
	// create and seed our shuffler.  If two similar numbers are hashed they should give
	// very different results usually, so for a seed, we can hash the time in seconds,
	// even though that number should be really similar from run to run
    unsigned int currentTime = time(NULL);
    unsigned int seed = MurmurHash2(&currentTime, sizeof(currentTime), 0x1337beef);
	SShuffler shuffler(g_numSongs, seed);

	// shuffle play the songs
	printf("Listen to Pretty Hate Machine (seed = %u)\r\n", seed);
	unsigned int shuffleIndex = 0;
	while(shuffler.Shuffle(shuffleIndex))
		printf("%s\r\n",g_SongList[shuffleIndex]);

	system("pause");
	return 0;
}
[/code]

<img src="https://demofox2.files.wordpress.com/2013/07/shuf1.png" alt="shuf1" width="496" height="252" class="alignleft size-full wp-image-561" />

<img src="https://demofox2.files.wordpress.com/2013/07/shuf2.png" alt="shuf2" width="493" height="244" class="alignleft size-full wp-image-562" />

<img src="https://demofox2.files.wordpress.com/2013/07/shuf3.png" alt="shuf3" width="484" height="244" class="alignleft size-full wp-image-563" />

<img src="https://demofox2.files.wordpress.com/2013/07/shuf4.png" alt="shuf4" width="490" height="240" class="alignleft size-full wp-image-564" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>549</wp:post_id>
		<wp:post_date><![CDATA[2013-07-06 15:55:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-06 23:55:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fast-lightweight-random-shuffle-functionality-fixed]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495681307;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:456;}i:1;a:1:{s:2:"id";i:521;}i:2;a:1:{s:2:"id";i:3724;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>629</wp:comment_id>
			<wp:comment_author><![CDATA[Fast &amp; Lightweight Random &#8220;Shuffle&#8221; Functionality | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2013/06/08/fast-lightweight-random-shuffle-functionality/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-06 15:58:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-06 23:58:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Fast &amp; Lightweight Random “Shuffle” Functionality &#8211; FIXED! [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>747</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.148.0.72]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-08-28 11:12:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-08-28 19:12:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[By the way, another neat thing this shuffler can do is you can do a reverse query.  What i mean is you can say "I'm shuffling 10,000 things, and my seed is 16453.  What position in the shuffle will number 34 come in?".  You would just "decrypt" 34 and what comes out will be the index in the shuffle that it shows up in.

The biggest usage case i can see for this would be being able to query if you have already encountered a specific number in a shuffle yet or not.  You could say "what position in the shuffle does 34 show up in.  Is that number < our current position in the shuffle? if so, we have encountered it".

I think there are other usage cases too if you get creative (:]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>825</wp:comment_id>
			<wp:comment_author><![CDATA[Feistel Networks &#8211; Does They Have to use XOR? | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2014/05/18/feistel-networks-does-they-have-to-use-xor/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-05-18 15:35:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-05-18 23:35:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] If you have no idea what a Feistel network is, but like cryptography and/or random number generation algorithms, give this a read this link first: Fast &amp; Lightweight Random “Shuffle” Functionality – FIXED! [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>A Super Tiny Random Number Generator</title>
		<link>http://blog.demofox.org/2013/07/07/a-super-tiny-random-number-generator/</link>
		<pubDate>Sun, 07 Jul 2013 17:11:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=576</guid>
		<description></description>
		<content:encoded><![CDATA[When I posted the last blog post about shuffling on the <a href="http://gameprogrammer.com/" title="GameProgrammer.com">GameProgrammer.com</a> mailing list, someone responded back with a super tiny random number generator that is actually pretty damn good.  It is this:

[code language="cpp"]
x+=(x*x) | 5;
[/code]

The high bit of X is the source of your random numbers, so if you want to generate an 8 bit random number, you have to call it 8 times.  Apparently it passes a lot of tests for randomness really well and is a pretty high quality PRNG.  Check this out for more info: <a href="http://www.woodmann.com/forum/showthread.php?3100-super-tiny-PRNG" title="A Super Tiny PRNG">http://www.woodmann.com/forum/showthread.php?3100-super-tiny-PRNG</a>

You can start x at whatever you want, but it might take a few iterations to "warm up" especially if you start with a small seed (ie you may want to throw away the first 5-10 random bits it generates as they may not be that random).  I adapted it into an example program below, along with some example output.  I use time() to set the initial value of x.

[code language="cpp"]
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

// A super tiny prng
// http://www.woodmann.com/forum/showthread.php?3100-super-tiny-PRNG
//
unsigned int seed = 0;
unsigned int GenerateRandomBit()
{
	seed += (seed * seed) | 5;
	return seed & 0x80000000;
}

template <typename T>
void GenerateRandom(T& value)
{
	memset(&value, 0, sizeof(T));
	const unsigned int numBits = sizeof(T) * 8;
	unsigned int* dataPointer = (unsigned int *)&value;
	for (unsigned int index = 0; index < numBits; ++index)
	{
		if(GenerateRandomBit()) {
			unsigned int pointerIndex = index / 32;
			unsigned int mask = 1 << index % 32;
			dataPointer[pointerIndex] |= mask;
		}
	}
}

int main(int argc, char **argv)
{
	seed = (unsigned int)time(NULL);
	printf("seed = %u\r\n", seed);

	printf("9 random uints...\r\n");

	for (unsigned int index = 0; index < 9; ++index)
	{
		unsigned int random;
		GenerateRandom(random);
		printf("%2u: %10u (%x)\r\n", index, random, random);
	}

	printf("3 random floats...\r\n");
	for (unsigned int index = 0; index < 3; ++index)
	{
		float f;
		GenerateRandom(f);
		printf("%2u: %f (%x)\r\n", index, f, *((unsigned int*)&f));
	}

	printf("8 random characters...\r\n");
	char text[8];
	GenerateRandom(text);
	for (unsigned int index = 0; index < 8; ++index)
	{
		printf("%2u: %c\r\n", index, text[index]);
	}
	system("pause");
	return 0;
}
[/code]

<img src="https://demofox2.files.wordpress.com/2013/07/tinyprng1.png" alt="tinyprng1" width="799" height="498" class="alignleft size-full wp-image-581" />

<img src="https://demofox2.files.wordpress.com/2013/07/tinyprng2.png" alt="tinyprng2" width="799" height="500" class="alignleft size-full wp-image-582" />

<img src="https://demofox2.files.wordpress.com/2013/07/tinyprng3.png" alt="tinyprng3" width="801" height="499" class="alignleft size-full wp-image-583" />

<img src="https://demofox2.files.wordpress.com/2013/07/tinyprng4.png" alt="tinyprng4" width="800" height="501" class="alignleft size-full wp-image-584" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>576</wp:post_id>
		<wp:post_date><![CDATA[2013-07-07 09:11:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-07 17:11:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-super-tiny-random-number-generator]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495639980;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:521;}i:1;a:1:{s:2:"id";i:1803;}i:2;a:1:{s:2:"id";i:456;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Is pre-increment really faster than post increment? Part 2</title>
		<link>http://blog.demofox.org/2013/07/08/is-pre-increment-really-faster-than-post-increment-part-2/</link>
		<pubDate>Tue, 09 Jul 2013 05:48:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=590</guid>
		<description></description>
		<content:encoded><![CDATA[In the first part of this blog post (<a href="http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/" title="Is pre-increment really faster than post increment?  Part 1">Is pre-increment really faster than post increment?  Part 1</a>) I showed that it really doesn't seem to matter if you use post or pre increment with simple integer types.

I then promised an example of where the choice of pre or post increment DOES matter, and here it is.

The long and the short of it is this...

<ul>
	<li>When you pre increment a variable, you are changing the value of a variable, and the new value will be used for whatever code the pre increment is part of.</li>
	<li>When you post increment a variable, you are changing the value of a variable, but the OLD value is used for whatever code the post increment is part of.</li>
</ul>

To make post increment work that way, it essentially needs to make a copy of the variable before the increment and return the copy for use by the code of which the post increment is a part of.

A pre increment has no such need, it modifies the value and everything uses the same variable.  There is no copy needed.

The compiler / optimizer apparently does a good job of figuring out when it does or does not need to make a copy of integral types, but it doesn't do as well with complex objects.  Here's some sample code to demonstrate this and the output that it generates in both debug and release.

<h2>Test Code</h2>

[code language="cpp"]
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//=============================================================
class CScopeMessage
{
public:
	CScopeMessage(const char *label)
	{
		PrintIndent();
		printf("%s\r\n", label);
		s_indentLevel++;
	}

	CScopeMessage(const char *label, int objectId)
	{
		PrintIndent();
		printf("%s obj %i\r\n", label, objectId);
		s_indentLevel++;
	}

	CScopeMessage(const char *label, int objectId, int copyObjectId)
	{
		PrintIndent();
		printf("%s (obj %i) to obj %i\r\n", label, objectId, copyObjectId);
		s_indentLevel++;
	}

	~CScopeMessage()
	{
		s_indentLevel--;
	}

	static void StartNewTest()
	{
		s_indentLevel = 0;
		s_lineNumber = 0;
		printf("\r\n");
	}

private:
	void PrintIndent()
	{
		s_lineNumber++;
		printf("%2i:  ", s_lineNumber);
		for(int index = 0; index < s_indentLevel; ++index)
			printf("  ");
	}

private:
	static int s_indentLevel;
	static int s_lineNumber;
};

int CScopeMessage::s_indentLevel = 0;
int CScopeMessage::s_lineNumber = 0;

//=============================================================
class CTestClass
{
public:
	CTestClass()
	{
		m_objectID = s_objectID;
		s_objectID++;

		// this is just noise in the test, but feel free to
		// comment out if you want to see for yourself
		//CScopeMessage msg("Constructing", m_objectID);
		m_value = new char[4];
		strcpy(m_value, "one");
	}

	CTestClass(const CTestClass &other)
	{
		m_objectID = s_objectID;
		s_objectID++;

		CScopeMessage msg("Copy Constructing", other.m_objectID, m_objectID);
		m_value = new char[strlen(other.m_value) + 1];
		strcpy(m_value, other.m_value);
	}

	~CTestClass()
	{
		CScopeMessage msg("Destroying", m_objectID);
		delete[] m_value;
	}

    // preincrement
	CTestClass &operator++()
	{
		CScopeMessage msg("Pre Increment", m_objectID);
		DoIncrement();
		return *this;
	}
 
	// postincrement
	CTestClass operator++(int)
	{
		CScopeMessage msg("Post Increment", m_objectID);
		CTestClass result(*this);
		DoIncrement();
		return result;
	}

	void DoIncrement()
	{
		CScopeMessage msg("Doing Increment", m_objectID);
	}

private:
	char *m_value;
	int m_objectID;

	static int s_objectID;
};

int CTestClass::s_objectID = 0;

//=============================================================
int main (int argc, char **argv)
{
	CTestClass test;
	{
		CScopeMessage msg("--Post Increment--");
		test++;
	}

	CScopeMessage::StartNewTest();
	{
		CScopeMessage msg("--Post Increment Assign--");
		CTestClass testB = test++;
	}

	CScopeMessage::StartNewTest();
	{
		CScopeMessage msg("--Pre Increment--");
		++test;
	}

	CScopeMessage::StartNewTest();
	{
		CScopeMessage msg("--Pre Increment Assign--");
		CTestClass testB = ++test;
	}

	system("pause");
	return 0;
}
[/code]

<h2>Debug</h2>
Here's the debug output:

<img src="https://demofox2.files.wordpress.com/2013/07/prepostdebug.png" alt="prepostdebug" width="843" height="569" class="alignnone size-full wp-image-605" />

You can see that in the post increment operator, it calls the copy constructor not once but twice!  The first copy constructor is called to create the "result" object, and the second copy constructor is called to return it by value to the caller.

[code language="cpp"]
CTestClass operator++(int)
{
	CScopeMessage msg("Post Increment", m_objectID);
	CTestClass result(*this);
	DoIncrement();
	return result;
}
[/code]

Note that it can't return the copy by reference because it's a local variable.  C++11's "std::move" and xvalue type functionality is there to help with this stuff, but if you can't use that tech yet, it isn't much help hehe.

Interestingly, we can see that 2 copy constructors get called whether or not we assign the value returned or not.

On the pre-increment side, you can see that it only does a copy construction call if you assign the result.  This is nice and is what we want.  We don't want extra object copies or memory allocations and deallocations.

<h2>Release</h2>

<img src="https://demofox2.files.wordpress.com/2013/07/prepostrelease.png" alt="prepostrelease" width="843" height="489" class="alignnone size-full wp-image-606" />

Things are a little bit better in release, but not by much.  The optimizer seems to have figured out that it doesn't really need to do 2 object copies, since it only ever wants at most one REAL copy of the object, so it gets away with doing one object copy in both situations instead of two.

That's an improvement, but still not as good as the pre-increment case which hasn't visibly changed in release (not sure about the assembly of these guys, but if you look and find something interesting, post a comment!)

<h2>Summary</h2>
As always, you should check your own assembled code, or test your compiler with printf output like this post does to ensure you really know what your code is doing.

But... it seems like you might want to use pre-increment if you ever use increment operators for heavy weight objects (such as iterators), but if you want to use post increment for integral types, it ought to be fine.

That said, a lot of people say "just use pre-increment" because at worst it'll be the same as a post increment, but at best it will be a lot more efficient.

You do whatever you want, so long as you are aware of the implications of going one way or the other :P]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>590</wp:post_id>
		<wp:post_date><![CDATA[2013-07-08 21:48:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-09 05:48:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[is-pre-increment-really-faster-than-post-increment-part-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494722041;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:368;}i:1;a:1:{s:2:"id";i:1803;}i:2;a:1:{s:2:"id";i:4999;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>639</wp:comment_id>
			<wp:comment_author><![CDATA[Is pre-increment really faster than post increment? Part 1 | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2013/06/05/is-pre-increment-really-faster-than-post-increment-part-1/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-08 21:53:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-09 05:53:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Is pre-increment really faster than post increment? Part 2 [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>648</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.21.249.188]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-10 08:40:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-10 16:40:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Personally I believe that the post increment operator should "never" be used.  I haven't run across a reason to use it (but I have run across justifications for goto and the ternary operator).

The justification for only using pre increment isn't a technical one but instead a social argument.  First off there's habit, which increment to you go to when incrementing a variable.  If you're constantly switching between post and pre depending upon variable type then at some point you'll slip up and make a mistake.  Second there is someone refactoring local code.  You may be aware of the usage of post increments on an integer counter but if someone changes that to an iterator at a future point they may not notice every instance of post increment.  Third there are global APIs and unknown effects.  When calling a constructor it can fire off a lot of code; someone may have overloaded new and delete with their custom logger to print out all allocations, or you may have a Garbage Collector that has to handle all the allocations.

Summary: "There may not be a penalty for i++ vs ++i in today's code but you can't say the same about tomorrow's code."]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>650</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-10 20:35:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-11 04:35:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[seems the same way to go :P]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Alloca and Realloc - Useful Tools, Not Ancient Relics</title>
		<link>http://blog.demofox.org/2013/09/09/alloca-and-realloc-useful-tools-not-ancient-relics/</link>
		<pubDate>Tue, 10 Sep 2013 03:51:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=624</guid>
		<description></description>
		<content:encoded><![CDATA[If you are a C/C++ programmer, you are likely familiar with malloc() and free(), the predecessors to C++'s new and delete operators, as well as the existence of the variations of malloc such as calloc, realloc and alloca.

If you are like me, you probably thought for a long while that malloc and it's variations were relics of days gone by, only actually useful in a few very limited situations.  Some of these guys still have use though, and don't really have equivalents in C++ to replace them.

First the boring ones...
malloc - Allocates memory.  Precursor to new operator.
calloc - Allocates memory and sets the contents to zero.  C's answer to the problem of uninitialized memory that constructors solve in C++.

Now the more interesting ones!

<h2>Alloca</h2>

Believe it or not, alloca actually allocates memory on the stack.  When your function goes out of scope, the stack memory is automatically returned to the stack due to the nature of how the stack and stack pointer work.  No need to free the memory allocated with alloca, and in fact if you tried, you'd probably get a crash :P

If you are a programmer who writes high performance applications, you are probably familiar with the benefits of using the stack instead of allocating memory on the heap with new or malloc.

The benefits of using the stack include...
<ul>
	<li>Quicker allocations - Allocating memory can be a relatively costly operation in terms of time, especially if you have multiple threads running using the same (thread safe) allocator.  Allocating memory on the stack is essentially the same cost as defining a local variable.  Under the hood, it's just moving the stack pointer a little farther and gives you that empty space to use.</li>
	<li>No memory leaks - when the function you've allocated the stack memory in exits, that memory is automatically freed.  This is because the stack pointer just "moves back" to what it used to be.  There is not really any memory to free.</li>
	<li>Less memory fragmentation - When mixing large and small memory allocations and frees, sometimes you end up with your memory in a state where there is a lot of memory free, but just not all together in one place.  For instance, your program might need to allocate 50MB, and there may be 300MB free on the heap total, but if there are small 16 byte allocations littered in the memory every 10MB, your program won't be able to find a single 50MB region to allocate and the allocation will fail.  One common cause of this problem is small allocations used for things like relatively small arrays or small string buffer allocations that exist temporarily to copy or transform some data, but are not meant to stick around very long.  If you can put these on the stack instead of the heap, those small allocations don't hit the heap, and your memory will be less fragmented in the end.</li>
	<li>Increased performance (fewer cache misses) - the contents of the stack are likely already in the CPU cache, so putting your data there means less information for the CPU to have to gather from RAM which is a slow operation.</li>
</ul>

However, there are some dangers when allocating memory on the stack as well
<ul>
	<li>If you keep a pointer to the memory, that memory could be "freed" and re-used, getting filled with other random data (local variables).  That can cause crashes, memory corruption or other strange program behavior.</li>
	<li>If you allocate too much on the stack you could run out of stack space.  The stack isn't really meant to hold large amounts of allocated data.  You can adjust your programs stack size though if this is a route you want to pursue.</li>
</ul>

<h3>Alternatives</h3>

There are some common techniques I've seen people use in places that could have also used alloca instead.  These include...

<ul>
	<li>Small Pool Allocators - To get around the memory fragmentation problem, sometimes people will have different memory allocators based on the size of memory being allocated.  This way, small temporary allocations for things like temporary string buffers will all be allocated from one place, while larger allocations for things like textures will be allocated elsewhere.  This dramatically improves the memory fragmentation issue.</li>
	<li>Object Pools - Object pools are similar to small pool allocators but they work by allocating some amount of memory for specific types of objects, and have a way to remember which objects are used and which ones are free.  For instance, you may dynamically allocate an array of 100 SMyStruct objects and have a flag for each to know which ones are in use and which ones aren't. This way, the program can ask for a new object, and it can find one currently not in use and return it to the caller without needing to hit the ACTUAL memory allocator to get the data (unless all objects are spoken for, at which point it can choose to fail, or allocate a new "page" of objects to be able to hand out).  This also has an interesting side effect that cache misses can drop quite a bit since the same kinds of objects will be nearer to eachother in memory.</li>
	<li>DIY Stack Allocator - When  I was working at Midway, a friend (Hi Shawn!) profiled the animation code and found that a lot of time was spent in allocating temporary buffers to blend bone data together.  To fix this, he rolled his own stack allocator, where there was one contiguous piece of memory on the heap that could be allocated from.  There was an internal index keeping track of where the "top of the stack" was, and when memory was allocated, that stack index would just move up by however many bytes were asked for.  At the end of the frame, the stack index was reset to zero, thus "freeing" the memory.  This dramatically improved the animation system performance by making the temporary bone blend buffer allocations essentially free.</li>
	<li>Thread Specific Memory - If you are having problems where multiple threads are trying to allocate memory at the same time, causing contention and slowdowns due to thread synchronization, another option is to give each thread it's own chunk of memory and let it allocate from that.   That way there is no contention and you won't have the slowdown of thread synchronization due to memory allocation anymore.  A problem here though can be figuring out how much memory each thread needs.  One thread may need a lot of memory, and another thread may need none, and you may not have any way of knowing which in advance.  In this case, you'd have to allocate "a lot" of memory for each thread in advance, and pay an extra cost in memory that you technically don't have to.  But hey, at least it's fast, maybe the trade off is worth it in your situation!</li>
</ul>

Lastly, there's another common trick to avoid dynamic allocations involving templates, check it out!

[code language="cpp"]
// define the CStaticArray class
template <typename T, unsigned int N>
class CStaticArray
{
public:
  T m_values[N];

  // you could put functions in here to do operations on the array data to make it look more like a standard
  // data type, instead of a plain vanilla array
  unsigned int Count () { return N; }

  void SomeOtherFunction () { }
};

void MyFunc ()
{
  // make an array of 32 floats
  CStaticArray<float, 32> m_floatArray;

  // make an array of 128 SSomeStructs
  CStaticArray<SSomeStruct, 128> m_objectArray;

  for (unsigned int index = 0; index < m_objectArray.Count(); ++index)
  {
    m_objectArray.m_values[index].DoSomething();
  }
}
[/code]

The above really shines if you have a standard API for strings or dynamic arrays in your code base.  You can make a version like the above which works without dynamic allocations, but gives the same interface so it's easier for fellow programmers to use and swap in and out as needed.

Another nice benefit to the above technique is that it works for stack allocations, but you can also make them member variables of other objects.  In this way, you can minimize dynamic allocations.  Instead of having to dynamically allocate an object, and then dynamically allocate the array inside of it, you do a single allocation to get all the memory needed.

That is the closest thing in C++ that I've seen to alloca, but even so, alloca has the advantage that you can decide how much memory to allocate at run time.  With the template method, you have to know at compile time which is fine for a lot of cases, but othertimes is a deal breaker, forcing you to have to go back to dynamic allocations (or perhaps now, alloca instead?)

<h2>Realloc</h2>

Realloc is the other interesting memory allocation function.

Like I was mentioning above, the fewer allocations you can do, the better off you are in terms of performance, and also memory fragmentation.

By writing smart containers (dynamic arrays, dynamic strings, etc) you can make it so when someone tries to make a container smaller, that instead of allocating new memory that's smaller, copying the data over, and freeing the old memory, that instead it just remembers the new size but keeps the old, larger memory around.

Then later on, if the container was told to grow, if it was smaller than the larger size from the past, it could just use some of that old memory again.

However, if that container grows larger than it used to be, you are going to have to allocate, copy, and free (costly etc) to grow the container.

Down in the guts of your computer however, there may be memory right after the current memory that's not being used by anything else.  Wouldn't it be great if you could just say "hey... use that memory too, i don't want to reallocate!".

Well, realloc does ALL of the above for you without you having to write special code.

When you realloc memory, you give the old pointer and the new size, and if it's able to, it won't do any allocations whatsoever, and will just return you your old pointer back to you.  It may allocate the next memory block for you if the new size is larger, but would still return the old pointer value in this case.  Or, if the new amount of memory is smaller, it may return you back the same memory without doing anything internally (it depends on your compiler's specific implementation of realloc what it does when)

If realloc does have to allocate new memory though, it will copy over all the old data to the new memory that it returns to you and free the old memory.  So, you don't have to CARE whether the pointer returned is old or new, just store the return value and continue on with your life.

It's pretty cool and can help reduce actual memory allocations, lowering memory fragmentation and increasing performance.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>624</wp:post_id>
		<wp:post_date><![CDATA[2013-09-09 19:51:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-10 03:51:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[alloca-and-realloc-useful-tools-not-ancient-relics]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495490933;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4391;}i:1;a:1:{s:2:"id";i:1760;}i:2;a:1:{s:2:"id";i:4953;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>767</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[97.113.27.227]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-10 05:19:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-10 13:19:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[To bring OOP into this discussion don't forget that new doesn't have to allocate memory.  You can use something like:
//Allocate space on the stack
void* address = alloca(sizeof(MyClass));
//Call the constructor of MyClass at the address on the stack
MyClass* myClass = new(address)MyClass;
//Call the destructor of MyClass
myClass-&gt;~MyClass();]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>768</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.148.0.72]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-10 08:19:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-10 16:19:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice use of placement new.  I could see that being a neat addition to a factory pattern type setup maybe, being able to dynamically create an object on the stack (:]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>External C++ Header Guards</title>
		<link>http://blog.demofox.org/2013/09/13/external-c-header-guards/</link>
		<pubDate>Sat, 14 Sep 2013 06:40:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=650</guid>
		<description></description>
		<content:encoded><![CDATA[A buddy at work said "I wish C++ had a two pass pre processor so that we could do external header guards".  It got me thinking about some random macro stuff i had seen before and i thought "hrm... you know, that actually might be possible to do... i'm going to give it a try".

I ended up working something up tonight at home that's semi-palatable.  The way you use it is a little weird, but i think it satisfies the spirit of the challenge, and works as a proof of concept that you can do external header guards without having to type a bunch of stuff.

If you can think of a way to improve it, post a comment or something and let me know!!

<h2>Umm...External Header Guards? What are you Talking About??</h2>

Have you ever seen something like the below? it's called a header guard:

[code language="cpp"]
#ifndef BLAH_H
#define BLAH_H

// code goes here

#endif BLAH_H
[/code]

You might also have seen this variation:

[code language="cpp"]
#pragma once
[/code]

Without the header guards, if you include the header file twice, it will complain that the classes etc have already been defined.  Those make sure that doesn't happen, by only including the contents of the file if it hasn't already been included.

External header guards on the other hand would be guards in the place it's included instead of in the header file itself.  That is more typing (more work), but the benefit there is that the compiler doesn't have to open the header file at all to see if it's already been included, which could make for faster compile times in large projects.

Anyways, here's the code:

<h2>Main.cpp</h2>

[code language="cpp"]
// include test\one\blah.h which defines the typedef ProofIncluded__blah_h
// to prove that it was really included
#define FILESEQ (test\one)(blah)
#include "Includer.h"

// try to include test\one\blah.h again.  It won't get included again, and
// instead, ProofIncludeBlocked__blah_h will get typedef'd by includer.h
// to prove that the file did not get included.  Comment these lines out
// and you'll get a compiler error that ProofIncludeBlocked__blah_h is
// an undeclared identifier
#define FILESEQ (test\one)(blah)
#include "Includer.h" 

int main(int argc, char **argv)
{
	ProofIncluded__blah_h a;
	ProofIncludeBlocked__blah_h b;
	return 0;
}
[/code]

So it is a little weird... but to include a file, you define FILESEQ with a directory and filename (without .h on it), and then include "Includer.h".  Even though it's weird to use, and doesn't work for .inl files (and maybe other issues, some easily solved), it's only one extra line of typing to do an external header guard, which is about as good as you can expect.

Ideally I wish the interface were like the below, but I haven't been able to figure out how to make that work unfortunately.

[code language="cpp"]
IncludeFile_((test\one)(blah))
[/code]

<h2>Includer.h</h2>
[code language="cpp"]
//=====================================================================================================
// Rip off boost, hooray!!  boost_pp is really nice, you can just grab it from the boost bundle and
// start using it because it's just a bunch of includes.  you don't need to build or link with boost
// at all.  It's really nice.  http://www.boost.org/
//=====================================================================================================
# define BOOST_PP_EMPTY()
# define BOOST_PP_SEQ_ELEM(i, seq) BOOST_PP_SEQ_ELEM_I(i, seq)
# define BOOST_PP_SEQ_ELEM_I(i, seq) BOOST_PP_SEQ_ELEM_II((BOOST_PP_SEQ_ELEM_ ## i seq))
# define BOOST_PP_SEQ_ELEM_II(res) BOOST_PP_SEQ_ELEM_IV(BOOST_PP_SEQ_ELEM_III res)
# define BOOST_PP_SEQ_ELEM_III(x, _) x BOOST_PP_EMPTY()
# define BOOST_PP_SEQ_ELEM_IV(x) x

# define BOOST_PP_SEQ_ELEM_0(x) x, BOOST_PP_NIL
# define BOOST_PP_SEQ_ELEM_1(_) BOOST_PP_SEQ_ELEM_0
//=====================================================================================================
#define EB_COMBINETEXT(a, b) EB_COMBINETEXT_INTERNAL(a, b)
#define EB_COMBINETEXT_INTERNAL(a, b) a ## b
#define EB_TOTEXT(a) EB_TOTEXT_INTERNAL (a)
#define EB_TOTEXT_INTERNAL(a) #a
//=====================================================================================================

// extract the directory and file name
#define DIR BOOST_PP_SEQ_ELEM(0, FILESEQ)
#define FILE BOOST_PP_SEQ_ELEM(1, FILESEQ)

// create the full file name: <Dir>/<File>.h
#define THEFILENAME EB_TOTEXT(EB_COMBINETEXT(DIR, EB_COMBINETEXT(/, EB_COMBINETEXT(FILE, .h))))

#if !EB_COMBINETEXT(__, EB_COMBINETEXT(FILE, _h))
	//including file: YES
	//include the file
	#include THEFILENAME
#else
	//including file: NO
    //create a typedef called ProofIncludeBlocked__<FILE>_H to prove we didn't include the file
	typedef char EB_COMBINETEXT(ProofIncludeBlocked__, EB_COMBINETEXT(FILE, _h));
#endif

// clean up the things we created.  boost macros can stick around ::shrug::
#undef THEFILENAME
#undef DIR
#undef FILE

// defined by caller, but we're cleaning it up for convenience
#undef FILESEQ
[/code]

I ripped some macros out of the boost preprocessor library (boost_pp) to help things out a little bit.  In a nutshell what we are doing is this...

We test to see if the preprocessor value __&lt;File&gt;_h is not true (false, or undefined).  If that is the case, we include the file &lt;Directory&gt;/&lt;File&gt;.h.  Else, we define a typedef ProofIncludeBlocked&lt;File&gt;_h to prove that we blocked the include from happening.

<h2>Blah.h</h2>

[code language="cpp"]
#define __blah_h 1
class ProofIncluded__blah_h {};
[/code]

Blah.h defines __blah_h as 1 (true).  It's important that it uses the same naming convention as Includer.h does (__&lt;File&gt;_h), otherwise this setup won't work.  If you screw it up, you'll get compile errors  about multiply defined symbols.

This file also defines a class ProofIncluded__blah_h to prove that this file actually got included, and also defines something that will complain if the file is included twice.

<h2>Issues</h2>

So, this is just a proof of concept and it has some issue including...
<ul>
	<li>Duplicate file names - if you have the same file name in different folders, this setup has issues.  It might be able to be helped by including the directory name into the header guard preprocessor symbol.</li>
	<li>Referencing the same file different ways - if you reference the same file in different ways because there's multiple ways to reach it in the include search paths, it won't be able to tell that it's the same file if you do the last fix.  Maybe the real solution is to have another parameter defined specifying the header guard symbol? dont know...</li>
	<li>Only supports .h files - It assumes a .h extension, but maybe another parameter could be the file extension to use so you could include .inl, .hpp etc.</li>
</ul>

Hopefully you find it interesting at least though (:

<h2>Is it Worth It?</h2>
Poday made some good points in the comments about it not being worth it, and my friend Doug also has this to say:

<blockquote>It's not needed though all compilers already do that:

(GCC):
The GNU C preprocessor is programmed to notice when a header file uses this particular construct and handle it efficiently. If a header file is contained entirely in a `#ifndef' conditional, then it records that fact. If a subsequent `#include' specifies the same file, and the macro in the `#ifndef' is already defined, then the file is entirely skipped, without even reading it.

(Clang)
The MultipleIncludeOpt class implements a really simple little state machine that is used to detect the standard “#ifndef XX / #define XX” idiom that people typically use to prevent multiple inclusion of headers. If a buffer uses this idiom and is subsequently #include‘d, the preprocessor can simply check to see whether the guarding condition is defined or not. If so, the preprocessor can completely ignore the include of the header.

(Clang still)
clang_isFileMultipleIncludeGuarded - Determine whether the given header is guarded against multiple inclusions, either with the conventional #ifndef/#define/#endif macro guards or with #pragma once.

For MSVC all I could find is Herb Sutter lead architect for MSVC and head of the C++ committee in his book 'C++ Coding Standards: 101 Rules, Guidelines, and Best Practices':
24. Always write internal #include guards. Never write external #include guards.
With a reason of:
Don't try to be clever: Don't put any code or comments before and after the guarded portion, and stick to the standard form as shown.
Today's preprocessors can detect include guards, but they might have limited intelligence and expect the guard code to appear exactly at the beginning and end of the header.
</blockquote>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>650</wp:post_id>
		<wp:post_date><![CDATA[2013-09-13 22:40:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-14 06:40:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[external-c-header-guards]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495625916;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:194;}i:1;a:1:{s:2:"id";i:159;}i:2;a:1:{s:2:"id";i:3022;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>771</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[97.113.27.227]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-14 07:44:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-14 15:44:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[These things are generally compiler, Operating System and hardware performance dependent and are based upon assumptions on the inner workings of the compiler so they tend to be brittle.

Let's examine some assumptions implicit in this solution:
1.  The cost of opening/parsing a header file in aggregate is substantial and that it should be avoided when possible.
2.  The cost of opening/parsing Includer.h is inconsequential.
3.  Parsing multiple nested defines is faster then opening/parsing a header file.

Point 2 is where the crux of the problem with this solution lies.  In the naive system opening every header would first open the Includer.h header and then maybe open the real header.  Assuming that opening all files have the same cost this would actually make the system slower as the cost would be (number of includes) + (number of actually read includes).  But modern systems aren't nearly so naive.  Both Operating Systems and hard drives have caches that keep recently used files closer at hand.  So the assumption is that the Includer.h file would stick around in the cache so that the penalty for reading it from disk would be negligible.  But this cache works just as well with the other files in compilation.  It's a fair assumption that a header that's already been included in a cpp's include chain is still in the cache so the penalty for opening the file is negated.

*I've done a lot of hand waving by ignoring OS times for allocating/copying memory and getting file handles and that the compiler itself isn't doing any caching.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>772</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-14 08:10:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-14 16:10:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[good points poday.  Doug also had some points, i'm going to throw up onto the post since he posted them to FB hehe]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>771</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>773</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[97.113.27.227]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-14 15:53:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-14 23:53:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[To quote Knuth: "premature optimization is the root of all evil".]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>774</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[72.194.97.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-14 16:09:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-15 00:09:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, FWIW i never intended to use this, it was just more of a challenge to see if it could be done.  I was pretty sure it could be, and wanted to explore it a bit and give it a try.  I think it can be done better too, and it would be interesting if it could be done in a single line (instead of a define and an include), and like you point out, my technique includes "Includer.h" which defeats some of the benefit of external header guards.  It would be nice to solve that part if possible.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>773</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>775</wp:comment_id>
			<wp:comment_author><![CDATA[poday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pcoday@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[97.113.27.227]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-14 17:52:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-15 01:52:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I was more responding to your coworker's comment: “I wish C++ had a two pass pre processor so that we could do external header guards”.

However it's often fun to try to solve theoretical problems in a constrained environment.  So to answer your question, I don't believe it can be done in less then 2 lines.  It's fairly trivial to force the include of a header file in a build but that include happens before the first line of the cpp file so that you don't have a chance to set up any custom defines yet.  And it's impossible to nest pre processor directives inside a #define statement.

Several years ago I had an idea of a "todo macro".  The concept was that someone could use "todo("Need to check for divide by zero")" somewhere in their code and then have a define living somewhere that would toggle printing that macro to the compiler's warning channel or hiding the todo.  I spent a lot of time looking for tricks in macros to see if there was a way I could do something like:
#if(SHOULD_PRINT_TODO)
#define todo(x) #pragma message(x)
#else
#define todo()
#endif
Long story short: it's not possible (caveat it's possible but with all the hoops that would need to be jumped through it's easier to just search for "todo" comments).

C++ lives in that weird world where it's too lenient for strong static analysis unlike java and C# but it's too rigid to allow modification to it's compilation process unlike interpreted languages like perl and javascript.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>228</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>How to Test Randomness of Numbers</title>
		<link>http://blog.demofox.org/2013/09/17/how-to-test-randomness-of-numbers/</link>
		<pubDate>Wed, 18 Sep 2013 04:33:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=672</guid>
		<description></description>
		<content:encoded><![CDATA[At first i said the answer was to check this out: <a href="http://www.stat.fsu.edu/pub/diehard/" title="Diehard Battery of Tests of Randomness" target="_blank">Diehard Battery of Tests of Randomness</a> which is linked to by this page which may also be of interest: <a href="http://burtleburtle.net/bob/rand/testsfor.html" title="Tests for Random Number Generators" target="_blank">Tests for Random Number Generators</a>.

But apparently that is the "old way" and there is a new program from NIST that you can get here: <a href="http://csrc.nist.gov/groups/ST/toolkit/rng/documentation_software.html">NIST test suite for random numbers</a>, which subsequently is linked to from random.org: <a href="http://www.random.org/analysis/">Random.org Statistical Analysis</a>.

Getting that program from NIST to compile was a little bit of a chore for me on msvc 2010.  The biggest hurdle i hit was that msvc 2010 doesnt have erf() and erfc() so i had to google "erf.cpp" and find an implementation.  If you can't find one, erf and erfc are part of gcc which is open sourced so you can always go that route if you need to!

After compiling, i was able to run the test on my numbers but couldn't make much sense of the results very easily.  There were a few p scores and presumably some chi squared scores somewhere, but the "summary file" was very cryptic (pun intended) so i wasn't really sure...

Anyways, just wanted to put it here for myself and others if anyone's looking for this in the future :P

Thanks to my buddy James for the correction and links to the newer NIST program.  Thanks man!

<h2>Bottom Line</h2>
Interestingly, the tests above use the source number data to do a bunch of different things, and then measure the statistics of the results.

For instance, it will use the numbers to shuffle a deck of cards, and then it will play poker and see if there is any bias of cards dealt, or players winning.

Or, it will use the numbers as the source of numbers for a roulette wheel and see if players win at the right rate statistically.

I guess the bottom line lesson for testing random numbers is that you should use the numbers how you intend to use them, and see if there's any statistical anomalies.

There doesn't seem to be a magic bullet test that works for generic randomness, but I'm guessing it's just sort of... check for patterns in every way you can, or every way you care about, and if you don't find any, consider it random.  If you are using it for purposes where randomness really matters - like security or gambling - you then hope nobody else finds a pattern you didn't! :P

On that topic, check this out: <a href="http://en.wikipedia.org/wiki/Michael_Larson" title="Michael Larson" target="_blank">Wikipedia: Michael Larson</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>672</wp:post_id>
		<wp:post_date><![CDATA[2013-09-17 20:33:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-18 04:33:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-test-randomness-of-numbers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<category domain="category" nicename="encryption-security"><![CDATA[Encryption + Security]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495454348;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5051;}i:1;a:1:{s:2:"id";i:368;}i:2;a:1:{s:2:"id";i:502;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Converting To and From Polar / Spherical Coordinates Made Easy</title>
		<link>http://blog.demofox.org/2013/10/12/converting-to-and-from-polar-spherical-coordinates-made-easy/</link>
		<pubDate>Sat, 12 Oct 2013 23:20:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=706</guid>
		<description></description>
		<content:encoded><![CDATA[As a game developer there is just too much darn stuff to learn.  You could spend your entire life learning things and never know it all.

It's a blessing in that you are seldom bored, but also sometimes a curse in that there almost always is a better way to do something, and that you would know about it if you had spent your time learning X instead of Y :P

I find that you sort of have to triage what you learn and what you choose to keep fresh in your mind, which can be a challenge sometimes.  If you can find the commonalities between things that can help some - like understanding how encryption, hashing, pseudo random number generators and chaos theory all overlap - or how skeletal animation blending and audio synthesis are both trying to be continuous waves above all else.  Also, if you put in the time investment to learn something to where it becomes intuitive, that frees up neurons to make room for other stuff.  But, of course, we have a finite amount of time, so can't always spend the time needed to get to that level on every single topic.

How about you... do you have to do a juggling act like this to keep sharp and stay effective as a game (or non-game) programmer? I'd be interested to hear how others deal with this sort of thing with such a large knowledge space that we work in.

In any case, I usually work with spherical or polar coordinates only on rare occasions, so whenever i do, the process usually is to google the equations, drop them in, and move on with my life.  I was recently implementing an orbit camera for a raytracer on shadertoy.com (<a href="https://www.shadertoy.com/view/MdXGDX" title="Raytraced Refraction" target="_blank">Raytraced Refraction</a>) and when my copy/pasting wasn't working, I was forced to take a deeper look at why it wasn't working.  Amazingly, this time around, it finally clicked and is now an intuitive thing so I figured I'd share the explanation that makes most sense to me in case it helps anyone else.

<h2>Converting Polar Coordinates to Cartesian (2D)</h2>
Polar coordinates have two components - a distance and an angle - and represent a point in 2d space.

The distance is called the radial coordinate, or the radius and the angle is called the angular coordinate or polar angle.

Just like you probably expect, the angle defines what direction the point is in, and the radius defines how far away it is.  Super simple.  Below is a picture of a polar coordinate point at (3, 45) where 3 is the distance and 45 is the angle.

<img src="https://demofox2.files.wordpress.com/2013/10/polar1.png" alt="polar1" width="280" height="234" class="alignnone size-full wp-image-735" />

So how do we convert that to rectangular coordinates?  well, first thing to do is to convert the angle to rectangular coordinates on a unit circle to get a direction vector.  Then, you multiply that direction vector by the radius to get the final coordinate.

To convert the angle to a point on a unit circle and get the direction vector it's super simple...
[code language="cpp"]
X = cos(angle)
Y = sin(angle)
[/code]

For every point on the unit circle, it's X coordinate is the cosine of the angle, and it's Y coordinate is the sine of the angle.

Looking at the diagram below, see if you can figure out why arccosine only returns an angle between 0 and 180, and why arcsine only returns an angle between -90 and 90 (hint, what if i asked you to tell me what angle gives 0.7 in the x component).  Also see if you can understand why sin(x)^2 + cos(x)^2 = 1 (hint: distance formula).

<img src="https://demofox2.files.wordpress.com/2013/10/polcorunitcircle.png" alt="polcorunitcircle" width="400" height="400" class="alignnone size-full wp-image-752" />

Ok so now that we can get our direction vector, we just need to multiply it by the radius.  So... to convert from polar to rectangular (cartesian) coordinates, you do this:

[code language="cpp"]
X = cos(angle) * radius
Y = sin(angle) * radius
[/code]

<h2>Converting Cartesian to Polar Coordinates (2D)</h2>
So how do we convert from rectangular coordinates to polar?

Well, since we have the X and the Y coordinates, and we know that tangent(angle) = Y / X, we can use arctangent to get our angle.  Unfortunately atan has a similar problem to asin and acos in that it doesn't know which quadrant you are talking about.  For instance, look at the diagram above again and tell me "which angle gives me a value of 1 when i divide the Y component by the X component?".  The answer is 45 degrees and 225 degrees both.  This is because with a positive value of 1, we don't know if X and Y were both negative, or if they were both positive.  Similarly, if i asked which angle gave an answer of -1, we wouldn't know if it was the X or Y that was negative.

Instead of using atan, we want to use atan2, which takes 2 parameters - Y and X - so that it can figure out the correct angle for you.

Next is the easy part of finding the radius.  treating your point as a vector (or continuing to treat it like a vector if it IS a vector), the radius is just the magnitude of the vector (or distance from the origin if you want to think of it in "point" terms instead of vectors).

So, converting rectangular to polar coordinates is done like this:

[code language="cpp"]
radius = sqrt(X * X + Y * Y)
angle = atan2(Y, X)
[/code]

<h2>Converting Spherical Coordinates to Cartesian (3D)</h2>

Spherical coordinates have the same components as polar coordinates, but then an added component: an angle which determines pitch / vertical rotation (think: looking up and looking down, instead of the polar angle which is in charge of looking left and right).

In math, they usually call the radius rho, the polar angle theta, and the azimuth angle phi, so a formal polar coordinate looks like this:

(rho, theta, phi)

For our examples let's assume that X and Y make up the horizontal plane and that Z is the vertical (3d) axis.

If you are scared to make the jump from 2D polar coordinates to 3D spherical coordinates don't be!  The way to deal with these guys is to break the 3d problem into two 2d problems, using the exact same stuff as described above.


So, the first thing we want to do is completely ignore this new 3rd component phi and think back to our 2d case.  We are also going to ignore the radius for now.

[code language="cpp"]
XTheta = cos(theta)
YTheta = sin(theta)
[/code]

This is our direction vector on the horizontal plane (same as the 2d case, not accounting for radius yet).

Next we want to pretend like we are looking at our 3d world from the side and use our phi angle to convert from polar to rectangular coordinates:

[code language="cpp"]
XPhi = cos(phi)
YPhi = sin(phi)
[/code]

One way to think of what this other angle  phi means, is that it is controlling where in the unit sphere the theta circle sits.  As the theta circle gets higher or lower on the sphere, it shrinks or grows.  It's only at zero angle that it has a radius of 1.0.  So, calculating these values, YPhi represents how high on the sphere the theta circle should sit, and XPhi is how large the circle should be.

So, to combine the X,Y theta values and the X,Y Phi values, we use YPhi as the vertical component, and XPhi as a radius for the theta circle, which we can do like this:

[code language="cpp"]
X = XTheta * XPhi
Y = YTheta * XPhi
Z = YPhi
[/code]

The above equation will give us a point on a unit sphere, so from here, we need to multiply in the radius and our equation becomes:

[code language="cpp"]
X = XTheta * XPhi * radius
Y = YTheta * XPhi * radius
Z = YPhi * radius
[/code]

If we put sin and cos back in, instead of xtheta (etc), the equation becomes that familiar, and previously complex equation:

[code language="cpp"]
X = cos(theta) * cos(phi) * radius
Y = sin(theta) * cos(phi) * radius
Z = sin(phi) * radius
[/code]

Hopefully the equation makes more sense now, and hopefully you can look at that and intuitively understand why those values are what they are.

<h2>Converting Cartesian to Spherical Coordinates (3D)</h2>

To convert from spherical coordinates to rectangular, the first thing to do is to get the radius, which is done in the exact same way as in 2d.  We just take the magnitude of the vector (aka the distance of the point from the origion) and we are done.

To get theta and phi, we do the same thing of separating this 3d problem into two 2d problems.

In fact, to get theta, we do the exact same thing as we do for polar coordinates!  We use atan2(Y,X) to get our angle... THAT'S ALL!

So, we have this so far:

[code language="cpp"]
radius = sqrt(X * X + Y * Y + Z * Z)
theta = atan2(Y, X)
[/code]

How do we figure out phi?  Well, if you said that we should do atan2(Z,Y) or atan2(Z,X) you were pretty close but it's actually arccos(Z / radius).

The reason for this is because neither X, nor Y is the "X" component of the "phi 2d polar coordinate".  you'd have to take the length of the (X,Y) vector and use that if you wanted to use atan2 to calculate phi. Instead of calculating that vector length, we can instead use a value we already have.  cosine is Y / hypotenuse length, and hypotenuse length is the radius (length of our vector), so we might as well use that radius we already have to be able to use arccos.

The final equations for converting rectangular to spherical are:

[code language="cpp"]
radius = sqrt(X * X + Y * Y + Z * Z)
theta = atan2(Y, X)
phi = acos(Z / radius)
[/code]

More info / alternate forms available on wikipedia here:
<a href="http://en.wikipedia.org/wiki/List_of_common_coordinate_transformations#From_Cartesian_coordinates" title="From Cartesian to Spherical Coordinates">From Cartesian to Spherical Coordinates</a>
<a href="http://en.wikipedia.org/wiki/Spherical_coordinate_system" title="Spherical Coordinate System">Spherical Coordinate System</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>706</wp:post_id>
		<wp:post_date><![CDATA[2013-10-12 15:20:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-12 23:20:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[converting-to-and-from-polar-spherical-coordinates-made-easy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495702090;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5202;}i:1;a:1:{s:2:"id";i:5803;}i:2;a:1:{s:2:"id";i:54;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Transformation Matrix Basics</title>
		<link>http://blog.demofox.org/2013/11/13/transformation-matrix-basics/</link>
		<pubDate>Wed, 13 Nov 2013 19:03:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=775</guid>
		<description></description>
		<content:encoded><![CDATA[Here are some interesting tidbits of info that I've found useful for being able to think about matrix math in a more intuitive way.  We start off with 2d matrix math but extend it to 3d at the end.

<h2>Why Use A Matrix?</h2>

You might ask why you might go through all the trouble of using a matrix for doing transformations like translation, rotation, scaling and shearing / skewing.

Why not just manually modify the points, putting them through equations to get the results.  Well, there are two main reasons.

The first one is for performance.  The function for rotating a point in 2d looks like this:

x' = x * cos(theta) - y * sin(theta)
y' = x * sin(theta) + y * cos(theta)

If you have 1000 points, that means you are calculating sin twice and cos twice for each point which is 4000 trig operations.  If you are smart (or your compiler is!), you'll only do sin and cos once for each point, but that's still 2000 trig operations.

If you are super duper smart (or your compiler is...), you'll notice that theta is the same for all 1000 points, and perhaps you'll calculate sin(theta) and cos(theta) once ahead of time and use those values for each point.

That last step is basically what matrix math does for you.  A 2d rotation matrix looks like the below:

[ cos(theta), sin(theta) ]
[-sin(theta), cos(theta) ]

That means that once you have calculated your rotation matrix, you don't need to keep performing trig operations.  You have your values and can use them over and over very cheaply.

This especially saves processor time when you combine multiple transformations together.  If you needed to perform an operation that did some crazy combination of 2000 rotations, 2000 translations and 2000 scale adjustments, instead of needing to do those 6000 operations on each point, you can just calculate the final matrix (by combining the matrix of each of those 6000 operations into one matrix) and then use that single matrix to your hearts content.

Another reason why you might want to use matrices instead of doing transforms by hand is that it's a lot simpler writing code that does general transformations instead of deciding after the fact "hey i want to add scaling now and i need to touch all my transformation related code to implement it".

Using a matrix, you don't have to know or care what the transform is, it will just do it and you can move on with your life.

<h2>Matrix Vector Multiplication Is Just Dot Products!</h2>

As a quick refresher, in 2d, a dot product is just 2 multiplies and an add (A.X * B.X + A.Y * B.Y) and in 3d, a dot product is just 3 multiplies and 2 adds (A.X * B.X + A.Y * B.Y + A.Z * B.Z).

A lot of modern hardware (both CPU and GPU) has varying amounts of support built in for vector and matrix math to make it faster, but matrix vs vector multiplies are really not that bad to begin with.  In 2d, a matrix * vector operation is just 2 dot products!  In 3d, it's 3 dot products. Look at the below to see what I mean:

[VX VY]
*
[AX AY]
[BX BY]
=
VX' = AX * VX + BX * VY
VY' = AY * VX + BY * VY

and in 3d:

[VX VY VZ]
*
[AX AY AZ]
[BX BY BZ]
[CX CY CZ]
=
VX' = AX * VX + BX * VY + CX * VZ
VY' = AY * VX + BY * VY + CY * VZ
VZ' = AZ * VX + BZ * VY + CZ * VZ

<h2>You Can Make a Matrix From Basis Vectors</h2>

Let's say that you are working in 2d and you want to rotate a point.  Let's say that for some reason you know what the rotated X and Y axis are supposed to be.  You can actually create a rotation matrix from that knowledge alone without having to do any trig or geometry type math.

Like for instance, if you wanted an object's x axis to point parallel to the vector of a moving object, and you knew the object's normalized velocity vector (the direction it is moving, normalized to have a vector length of 1) was (0.34, 0.93).

That normalized velocity vector would be your X axis, and you could use the "faked 2d cross product" of flipping x and y and negating one to get a vector perpendicular to that X axis (aka your Y axis) . So...

X axis = ( 0.34, 0.93)
Y axis = (-0.93, 0.34)

(note, which one you negate on the Y axis matters only as much as you care which of the 2 directions you want the Y axis to point.  Basically if you don't care if it points up or down, it doesn't matter which one you flip.  If you do care, you need to pick the right one for the direction you want.  This may not be the best way, but i do it by visual inspection, or by evaluating the math and seeing if it's pointing in the way that i want or not. In other words... try it one way, and if it's backwards, do it the other way.)

Now that we have an X and a Y axis, we just use the X axis as the first row, and the Y axis as the second row and get our rotation matrix:

[ 0.34, 0.93]
[-0.93, 0.34]

To see that it really works, try multiplying the vector (1,0) by that matrix to see if we get the right number out (it should be the same vector as the velocity of the object we are orienting to).  We are basically verifying here that our X axis comes out to what it should.

[1 0]
*
[ 0.34, 0.93]
[-0.93, 0.34]
=
X' = 0.34 * 1 - 0.93 * 0 = 0.34
Y' = 0.93 * 1 + 0.34 * 0 = 0.93

now, let's check our y axis

[0 1]
*
[ 0.34, 0.93]
[-0.93, 0.34]
=
X' = 0.34 * 0 - 0.93 * 1 = -0.93
Y' = 0.93 * 0 + 0.34 * 1 =  0.34

Note that when you put your X and Y axis basis vectors into the matrix, that they should be normalized, otherwise they will do strange things to your point - like introduce scaling and skewing.

<h2>You Can Get Basis Vectors From a Matrix</h2>

The process works backwards too which is really handy.  If you have some matrix of unknown rotation, you can get the basis vectors out the same way you put them in.

You might have already seen this when looking at the matrix from the last example

[ 0.34, 0.93]
[-0.93, 0.34]

The first row (0.34, 0.93) is the X axis, and the second row (-0.93, 0.34) is the Y axis.

One caveat to be aware of though is that if you are working with a "matrix from the wild" where you don't know if it's a rotation matrix only, or if it might have some other transforms in it (scaling or skewing), the rows may not be normalized.

If you know for sure that it's just a rotation matrix, you can take the basis vectors right out of the matrix.  If you don't know for sure, you need to normalize the basis vectors after you pull them out.

Why is this useful?

If in 3d, you had the matrix representing the camera transform, you could grab the 3rd row to get the forward vector.  You could use this vector when launching a projectile from the player's position so that it would go where they were aiming.

Again, in 3d if you had the camera matrix, you could grab the first row to get the "left vector" and you could add or subtract that from the player's position to do strafing left and right.

No complex math required (:

<h2>2d Translation Matrix</h2>

To be able to have a matrix that can do translation, you need to go to a 3x3 matrix.

Below is what a translation matrix looks like.  (TX,TY) is the translation.

[1 0 0]
[0 1 0]
[TX TY 1]

When you want to transform a 2d point by a 3x3 matrix like the above, you need to use a 1 for the Z component.  Let's see what happens when we transform a 2d point by this 3x3 translation matrix.

[X Y 1]
*
[1 0 0]
[0 1 0]
[TX TY 1]
=
X' = X * 1 + Y * 0 + 1 * TX
Y' = Y * 0 + Y * 1 + 1 * TY
Z' = 1 * 0 + 1 * 0 + 1 * 1
=
X' = X + TX
Y' = Y * TY
Z' = 1

If you want to transform a 2d VECTOR (something that represents a direction, not a location) by a 3x3 matrix, you need to use a zero in the Z component instead of a 1.  You may have heard this before, but let's see why:

[X Y 0]
*
[1 0 0]
[0 1 0]
[TX TY 1]
=
X' = X * 1 + Y * 0 + 0 * TX
Y' = Y * 0 + Y * 1 + 0 * TY
Z' = 1 * 0 + 1 * 0 + 0 * 1
=
X' = X
Y' = Y
Z' = 0

As you can see, the vector was not affected by the translation of the matrix.  If the 3x3 matrix had scaling and rotation in it as well as the translation, the vector WOULD be affected by those things as it should be.  The translation is the only thing that doesn't apply when you use a Z value of zero.

Note that if you want to get the 2d basis vectors from a 3x3 matrix, you just ignore the 3rd row and the 3rd column and do the same thing you would do with a 2x2 matrix.  Again, making sure to normalize the basis vectors when it's appropriate.

<h2>Combining Matrices</h2>

To combine transforms together (whether 2x2 or 3x3 matrices) you just multiply them together.

The order of matrix multiplication matters though.  A * B is not the same as B * A.

To make things confusing, OpenGL and DirectX use different representations of matrices (one is "column major" the other is "row major") which means that the matrices in each API are transposes of the other.  

To make things even more confusing, if AT and BT are the transpose of A and B, then A * B = BT * BA.  This means that premultiplication and postmultiplication (aka is A on the left or the right in A * B) swap meanings when going from one API to the other.

I'm not sure who is to blame for that one, but here's an interesting link on the subject: <a href="http://steve.hollasch.net/cgindex/math/matrix/column-vec.html">http://steve.hollasch.net/cgindex/math/matrix/column-vec.html</a>

Note that row vs column major matrices also change which direction the basis vectors are stored in... so instead of X axis being the 3 top numbers, it would be the 3 left numbers!  It should be easy enough to tell which is which by inspection, but keep it in mind!

Anyways, I'll continue to use the conventions set in this article above in the vector / matrix multiplication.

If you multiply a translation matrix by a rotation matrix, you'll get a matrix that rotates a point, and then translates it.

[1 0 3]
[0 1 5]
[0 0 1]
*
[ 0.34 0.93 0]
[-0.93 0.34 0]
[ 0    0    1]
=
[ 0.34 0.93 3]
[-0.93 0.34 5]
[ 0    0    1]

If, however, you multiply a rotation matrix by a translation matrix, you'll get a matrix that translates a point, then rotates it.  Going that direction, the translated point is rotated.

[ 0.34 0.93 0]
[-0.93 0.34 0]
[ 0    0    1]
*
[1 0 3]
[0 1 5]
[0 0 1]
=
[ 0.34 0.93   5]
[-0.93 0.34 1.4]
[ 0    0    1  ]

Which way you multiply entirely depends on what it is you are trying to achieve.  And, well... it also depends on whether you are dealing with row major or column major matrices!

Multiplying a 3x3 matrix by another 3x3 matrix is the same as doing nine 3d dot products.

<h2>Inverting Matrices</h2>

Taking the transpose of a matrix doesn't have any intuitive geometrical (or other) meaning that I'm aware of.  I've looked on the net and all I could find was some "simple" explanations involving general relativity.  Awesome right? LOL.

On the other hand, inverse matrices have a very intuitive and very useful meaning.  Inverse matrices do the reverse of whatever the matrix does.

That means if you have a matrix that translates by (7,5) and then rotates by (45, 30) degrees, the inverse matrix will rotate by (-45, -30) degrees and then translate by (-7,-5).

This is super useful sometimes (:

Inverting a 2x2 matrix is actually really easy.  I could explain it but you really ought to check out this page to see how.  I recommend doing the exercises at the bottom to make sure you firmly understand how to do it!

<a href="http://www.mathsisfun.com/algebra/matrix-inverse.html">http://www.mathsisfun.com/algebra/matrix-inverse.html</a>

Inverting a 3x3 matrix is fairly easy too, but kind of tedious.  Here's a page that explains how:
<a href="http://www.wikihow.com/Inverse-a-3X3-Matrix">http://www.wikihow.com/Inverse-a-3X3-Matrix</a>

After you are done with that, here are some problems to run through to make sure you really do understand it:
<a href="https://www.khanacademy.org/math/algebra/algebra-matrices/inverting_matrices/e/matrix_inverse_3x3">https://www.khanacademy.org/math/algebra/algebra-matrices/inverting_matrices/e/matrix_inverse_3x3</a>

Not all matrices are invertible.  If you read the links and walk through the exercises, you'll see why.  Basically, an uninvertable matrix will cause a divide by zero in the inversion process.  I believe this comes up when you have a matrix with parallel basis vectors, or if you have a zero scaling matrix (a multiply by zero can't be reversed!) but i could be mistaken or not have the full picture there.  If I've mis-spoken, post a comment!

<h2>Extending to 3d</h2>

Extending the above to 3d matrices is pretty simple and there aren't really many suprises.

One difference is that in the above where we use a 2x2 matrix in 2d, we would use a 3x3 matrix in 3d because of the extra Z coordinate.

If you want to do translation in 3d, you have to use a 4v4 matrix instead of a 3x3 (just like in 2d how you had to move from a 2x2 to a 3v3, in 3d you have to move from a 3x3 to a 4x4).  A 3d translation matrix looks like this:

[1 0 0 0]
[0 1 0 0]
[0 0 1 0]
[TX TY TZ 1]

Inverting a 4x4 matrix is pretty tedious, but follows the same patterns as inverting a 3x3 and a 2x2.

You can find info on a 3d rotation matrix here, if you don't want to build it up with basis vectors: <a href="http://en.wikipedia.org/wiki/Rotation_matrix#In_three_dimensions">http://en.wikipedia.org/wiki/Rotation_matrix#In_three_dimensions</a>

In our example above where we had the X axis and used a "fake 2d cross product" to get the perpendicular vector, when you move into 3d you'll probably want to use the cross product to get perpendicular vectors.

Like for instance if you know 2 of the basis vectors, you can use cross product of those 2 to get the third.

Z = X x Y

If, however, you only have one basic vector (say "Z" because maybe you have a "camera direction"), you can use cross product to get 2 other vectors so long as you can make certain assumptions about the orientations involved.  Like for instance, you might do this:

Fwd = normalize(Camera.Forward)
Left = normalize(Fwd x (0, 1, 0))
Up = normalize(Fwd x Left)

rotation matrix = 
[Left.X Left.Y Left.Z]
[Up.X Up.Y Up.Z]
[Fwd.X Fwd.Y Fwd.Z]

The above only works if the camera can never look straight up, and it also assumes that your camera doesn't have any roll - but it is a useful technique if those assumptions are ok.

That's about it!  I hope you found at least some of this information useful (:

if I missed anything you think belongs here, post a comment and share with the rest of us!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>775</wp:post_id>
		<wp:post_date><![CDATA[2013-11-13 11:03:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-11-13 19:03:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[transformation-matrix-basics]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495546826;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3434;}i:1;a:1:{s:2:"id";i:706;}i:2;a:1:{s:2:"id";i:1205;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting Ideal Disk Reads on the Cheap</title>
		<link>http://blog.demofox.org/2014/01/11/getting-ideal-disk-reads-on-the-cheap/</link>
		<pubDate>Sat, 11 Jan 2014 16:50:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=831</guid>
		<description></description>
		<content:encoded><![CDATA[If you are making a game, chances are you are loading assets and/or data from disk, and that you would like to load it in as fast as possible, so that players can play your game instead of staring at loading screens.

To make the fastest load possible, you want as few disk reads as you can get away with, you want them to be as large reads as possible, you want to read in the same order as the data is on disk, and if possible, you want to read from a single file that is kept open the whole time.

There are many reasons for why the above makes for ideal disk reading, but some of them are...
<ul>
	<li>Every time you do a disk read, if the disk is in use by another process, you have to wait for that process to be done with the disk before you can start your read.  The fewer disk reads you do, the fewer times you possibly have to wait on something else to relinquish the disk.  Doing as large reads as possible makes for fewer disk reads too.</li>
	<li>You want to read the data from disk in the same order that it's stored on disk, because for some drive types (such as CDROM, DVD and hard disk drives) there is a physical "read head" that the drive has to move around to get to the data.  The more that drive head has to move around, the longer you spend waiting for it to move, versus getting the data you want from the disk drive.  Some drives, such as SSDs, have a zero seek time, but reading sequentially can also help out due to more efficient use of disk buffers.</li>
	<li>You want to read the data from a single file when possible, versus having multiple files, because opening a file is expensive, and doing multiple reads from multiple files has a lot more erratic performance than doing multiple reads from a single file.  Also, due to the fact that we usually have no way of knowing how files are actually laid out on disk, putting all the data into a single file is the only way to be sure that you can read data in order to minimize read head movements between reads (when the file is not fragmented on disk).</li>
</ul>

<h2>From Non Ideal to Ideal Disk Reads</h2>

So, how do you go from having a bunch of small reads from many different files, to fewer (or just 1) read from a single file?

Professionally made video games (especially console games) often will come up with a "packing process" to put all the files together into a single bundle, and possibly compress or encrypt it.  Also, they'll use this "pack time" opportunity to pre-calculate whatever they can that might be expensive at load time.  For instance creating a <a href="http://en.wikipedia.org/wiki/Navigation_mesh" title="Navigation Mesh" target="_blank">Navigation Mesh</a> or baking <a href="http://en.wikipedia.org/wiki/Lightmap" title="Lightmaps" target="_blank">Lightmaps</a>.

That is pretty cool, but is quite a bit of work.  What if you don't have the opportunity or willingness to make such a thing, or you want to get a sense of how much something like that would improve things?

Well, Paul, a buddy of mine, told me about a neat technique for doing this quickly and easily that after having heard it, I see references to ALL THE TIME now.  It's bizarre.

Basically, what you do is give your file read functions a special mode of operation where whenever they read data from disk, they also append that data to a special file.

After the load process is complete, you will then have a file that contains all the data your game wanted to read from disk during loading, in the order that it asked for it.

Next, you give your read and seek functions a special mode of operation where read will read from that special file, and seek will do nothing.  You can open that file at the beginning of the load operation and close it at the end.

Following that, you are now a lot closer to ideal... you are reading from a single file, and you are reading sequentially.

For the rest of it (reading as few times as possible / doing as large reads as you can), if you have the RAM free, instead of having your disk read function read from the file, you could actually just load the whole file into RAM at once when loading starts (with a single disk read), and have your read function just serve data from memory.  When loading is finished, you can free that memory from RAM, OR if you want to make subsequent loads faster (like if your game can have multiple plays in one session), you can keep it in memory so that the subsequent loads don't even have to touch the disk drive.

Of course this assumes you have a deterministic read order, or that you can make it deterministic, etc etc, but it's a pretty useful tool for the toolbox IMO.

<h2>Windows Does This Too!</h2>

Ok so as it turns out, the windows file cache (SuperFetch) uses a variation of this technique as well.  Check it out!

From <a href="http://www.osnews.com/story/21471/" title="SuperFetch: How it Works & Myths" target="_blank">SuperFetch: How it Works & Myths</a>

<blockquote>Let's focus on decreasing boot times first. During the Windows boot process, the same files need to be accessed at different times. SuperFetch records which data and files need to be accessed at which times, and stores this data in a trace file. During subsequent boots, this information is used to make the loading of said data/files more efficient, resulting in shorter boot times.

SuperFetch performs more tasks to make the boot process more efficient. It also interacts with the defragmenter to make sure that the files accessed during the boot process are stored on the disk in the order they are accessed in. It performs this as a routine task every three days; the specific file layout is stored in /Windows/Prefetch/Layout.ini.</blockquote>



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>831</wp:post_id>
		<wp:post_date><![CDATA[2014-01-11 08:50:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-01-11 16:50:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-ideal-disk-reads-on-the-cheap]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494409073;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:47;}i:1;a:1:{s:2:"id";i:4271;}i:2;a:1:{s:2:"id";i:78;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Shadertoy - WebGLSL pixel shaders</title>
		<link>http://blog.demofox.org/2014/01/22/shadertoy-webglsl-pixel-shaders/</link>
		<pubDate>Thu, 23 Jan 2014 03:55:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=846</guid>
		<description></description>
		<content:encoded><![CDATA[raytracing, raymarching, and other things.  Click here: <a href="https://www.shadertoy.com/user/demofox" title="Demofox on Shadertoy" target="_blank">Demofox on Shadertoy</a>

Shadertoy is a really fun website where you can write a pixel shader in WebGL / GLSL and share it with your friends.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>846</wp:post_id>
		<wp:post_date><![CDATA[2014-01-22 19:55:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-01-23 03:55:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shadertoy-webglsl-pixel-shaders]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1493954587;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2370;}i:1;a:1:{s:2:"id";i:2391;}i:2;a:1:{s:2:"id";i:4038;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A trip through the Graphics Pipeline</title>
		<link>http://blog.demofox.org/2014/01/27/a-trip-through-the-graphics-pipeline/</link>
		<pubDate>Tue, 28 Jan 2014 03:44:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=850</guid>
		<description></description>
		<content:encoded><![CDATA[This is a really awesome read, that really demystifies some of the inner workings of the GPU.  Check it out and learn how the GPU is different than the CPU, and how to squeeze the most out of it.

Check it out!  <a href="http://fgiesen.wordpress.com/2011/07/09/a-trip-through-the-graphics-pipeline-2011-index/" title="A trip through the Graphics Pipeline" target="_blank">A trip through the Graphics Pipeline</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>850</wp:post_id>
		<wp:post_date><![CDATA[2014-01-27 19:44:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-01-28 03:44:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-trip-through-the-graphics-pipeline]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495627389;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4038;}i:1;a:1:{s:2:"id";i:3986;}i:2;a:1:{s:2:"id";i:876;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Converting RGB to Grayscale</title>
		<link>http://blog.demofox.org/2014/02/03/converting-rgb-to-grayscale/</link>
		<pubDate>Tue, 04 Feb 2014 07:06:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=853</guid>
		<description></description>
		<content:encoded><![CDATA[If you were converting an RGB pixel to grayscale, you might be like me and be tempted to just add the red, green and blue components together and divide by 3 to get the grayscale equivalent of the color.

That's close, but not quite correct!

Red, green and blue are not equal brightness, so doing a straight average gives you biased results.

There's a wikipedia page on this topic <a href="http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale" title="http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale" target="_blank">here</a>, but the equation to use is below:
grayScale = red * 0.3f + green * 0.59f + blue * 0.11f;

Here are some sample images to show you the difference.

Color:
<img src="https://demofox2.files.wordpress.com/2014/02/color.png" alt="color" width="500" height="500" class="alignnone size-full wp-image-856" />

Average:
<img src="https://demofox2.files.wordpress.com/2014/02/avg.png" alt="avg" width="500" height="500" class="alignnone size-full wp-image-857" />

Weighted Average Equation:
<img src="https://demofox2.files.wordpress.com/2014/02/good.png" alt="good" width="500" height="500" class="alignnone size-full wp-image-858" />

<h2>Why?</h2>

You might be wondering "why the heck would i want to convert RGB to grayscale?"

Well... if you render a scene once, convert it to grayscale and shove it into the red channel, then render the scene again slightly offset to the side, convert that to grayscale and shove it into the blue channel, you can get some neat images like the below.  Red/Blue 3d glasses required, click the images to view the full size versions (;

<a href="https://demofox2.files.wordpress.com/2014/02/redblu3d1.png"><img src="https://demofox2.files.wordpress.com/2014/02/redblu3d1-300x300.png" alt="redblu3d1" width="500" height="500" class="alignnone size-medium wp-image-864" /></a>

<a href="https://demofox2.files.wordpress.com/2014/02/redblue3d2.png"><img src="https://demofox2.files.wordpress.com/2014/02/redblue3d2-300x300.png" alt="redblue3d2" width="500" height="500" class="alignnone size-medium wp-image-865" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>853</wp:post_id>
		<wp:post_date><![CDATA[2014-02-03 23:06:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-04 07:06:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[converting-rgb-to-grayscale]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495666943;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4744;}i:1;a:1:{s:2:"id";i:3986;}i:2;a:1:{s:2:"id";i:5699;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lots of Skyboxes!</title>
		<link>http://blog.demofox.org/2014/02/07/lots-of-free-skyboxes/</link>
		<pubDate>Sat, 08 Feb 2014 05:06:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=872</guid>
		<description></description>
		<content:encoded><![CDATA[not the highest resolution (the textures seem to be 512x512) but still, a pretty cool resource!

<a href="http://www.redsorceress.com/skybox.html" title="http://www.redsorceress.com/skybox.html" target="_blank">http://www.redsorceress.com/skybox.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>872</wp:post_id>
		<wp:post_date><![CDATA[2014-02-07 21:06:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-08 05:06:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lots-of-free-skyboxes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494725167;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Soft Maximum vs Hard Maximum</title>
		<link>http://blog.demofox.org/2014/02/20/soft-maximum-vs-hard-maximum/</link>
		<pubDate>Thu, 20 Feb 2014 20:13:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=876</guid>
		<description></description>
		<content:encoded><![CDATA[The other day i stumbled on an interesting concept called a "Soft Maximum".

If you think of the normal maximum, you might have something like this:

[code]
float maxValue = max(valueA, valueB);
[/code]

if valueA and valueB come from functions, there's usually going to be a sharp bend in the graph of the above where the maximum value changes from valueA to valueB or vice versa.

Sometimes, instead of a sharp bend, you would like a smooth transition between the two values - like when using this for graphics or advanced mathematics.

Here's the formula for soft max:

[code]
double SoftMaximum(double x, double y)
{
	double maximum = max(x, y);
	double minimum = min(x, y);
	return maximum + log( 1.0 + exp(minimum - maximum) );
}
[/code]

Here are 2 really interesting links on computing and using soft max:

<a href="http://www.johndcook.com/blog/2010/01/13/soft-maximum/" title="Soft Maximum" target="_blank">Soft Maximum</a>

<a href="http://www.johndcook.com/blog/2010/01/20/how-to-compute-the-soft-maximum/" title="How to Compute the Soft Maximum" target="_blank">How to Compute the Soft Maximum</a>

Check out the images below for an example of when you might use this.  This is from a shadertoy shader <a href="https://www.shadertoy.com/view/XdB3Dw" title="The Popular Shader" target="_blank">The Popular Shader</a>.  The first image is with using normal max, and the second image uses soft max.

<img src="https://demofox2.files.wordpress.com/2014/02/softminOFF.png" alt="softminOFF" width="802" height="483" class="alignnone size-full wp-image-878" />

<img src="https://demofox2.files.wordpress.com/2014/02/softminON.png" alt="softminON" width="800" height="483" class="alignnone size-full wp-image-879" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>876</wp:post_id>
		<wp:post_date><![CDATA[2014-02-20 12:13:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-20 20:13:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[soft-maximum-vs-hard-maximum]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495529864;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4038;}i:1;a:1:{s:2:"id";i:5276;}i:2;a:1:{s:2:"id";i:69;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bezier Curves</title>
		<link>http://blog.demofox.org/2014/03/04/bezier-curves/</link>
		<pubDate>Wed, 05 Mar 2014 07:34:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=886</guid>
		<description></description>
		<content:encoded><![CDATA[Bezier curves are pretty cool.  They were invented in the 1950s by Pierre Bezier while he was working at the car company Renault.  He created them as a succinct way of describing curves mathematically that could be shared easily with other people, or programmed into machines to make curves that matched the ones created by human designers.

I'm only going to go over bezier curves at the very high level, and give some links to html5 demos I've made to let you play around with them and understand how they work, so you too can implement them easily in your own software.

If you want more detailed information, I strongly recommend this book: <a href="http://www.amazon.com/Focus-Curves-Surfaces-Game-Development/dp/159200007X/ref=sr_1_1?ie=UTF8&qid=1394003762&sr=8-1&keywords=focus+on+curves+and+surfaces" title="Focus on Curves and Surfaces" target="_blank">Focus on Curves and Surfaces</a>

<h2>Quadratic Bezier Curves</h2>
Quadratic bezier curves have 3 control points.  The first control point is where the curve begins, the second control point is a true control point to influence the curve, and the third control point is where the curve ends.  Click the image below to be taken to my quadratic bezier curve demo.

<a href="http://demofox.org/bezquad.html" title="Quadratic Bezier Demo" target="_blank">
<img src="https://demofox2.files.wordpress.com/2014/03/bezquad.png" alt="bezquad" width="807" height="406" class="alignnone size-full wp-image-888" />
</a>

A quadratic bezier curve has the following parameters:
<ul>
	<li>t - the "time" parameter, this parameter goes from 0 to 1 to get the points of the curve.</li>
	<li>A - the first control point, which is also where the curve begins.</li>
	<li>B - the second control point.</li>
	<li>C - the third control point, which is also where the curve ends.</li>
</ul>

To calculate a point on the curve given those parameters, you just sum up the result of these 3 functions:

<ol>
	<li>A * (1-t)^2</li>
	<li>B * 2t(1-t)</li>
	<li>C * t^2</li>
</ol>

In otherwords, the equation looks like this:

CurvePoint = A*(1-t)^2 + B*2t(1-t) + C*t^2

To make an entire curve, you would start with t=0 to get the starting point, t=1 to get the end point, and a bunch of values in between to get the points on the curve itself.

<h2>Cubic Bezier Curves</h2>
Cubic bezier curves have 4 control points. The first control point is where the curve begins, the second and third control points are true control point to influence the curve, and the fourth control point is where the curve ends. Click the image below to be taken to my cubic bezier curve demo.

<a href="http://demofox.org/bezcubic.html" title="Cubic Bezier Demo" target="_blank">
<img src="https://demofox2.files.wordpress.com/2014/03/bezcubic.png" alt="bezcubic" width="806" height="405" class="alignnone size-full wp-image-892" />
</a>

A cubic bezier curve has the following parameters:
<ul>
	<li>t - the "time" parameter, this parameter goes from 0 to 1 to get the points of the curve.</li>
	<li>A - the first control point, which is also where the curve begins.</li>
	<li>B - the second control point.</li>
	<li>C - the second control point.</li>
	<li>D - the fourth control point, which is also where the curve ends.</li>
</ul>

To calculate a point on the curve given those parameters, you just sum up the result of these 4 functions:

<ol>
	<li>A * (1-t)^3</li>
	<li>B * 3t(1-t)^2</li>
	<li>C * 3t^2(1-t)</li>
	<li>D * t^3</li>
</ol>

In otherwords, the equation looks like this:

CurvePoint = A*(1-t)^3 + B*3t(1-t)^2 + C*3t^2(1-t) + D*t^3

<h2>Math</h2>
You might think the math behind these curves has to be pretty complex and non intuitive but that is not the case at all - seriously!  The curves are based entirely on linear interpolation.

Here are 2 ways you may have seen linear interpolation before.
<ol>
	<li>value = min + percent * (max - min)</li>
	<li>value = percent * max + (1 - percent) * min</li>
</ol>

We are going to use the 2nd form and replace "percent" with "t" but they have the same meaning.

Ok so considering quadratic bezier curves, we have 3 control points: A, B and C.

The formula for linearly interpolating between point A and B is this:
point = t * B + (1-t) * A

The formula for linearly interpolating between point B and C is this:
point = t * C + (1-t) * B

Now, here's where the magic comes in.  What's the formula for interpolating between the AB formula and the BC formulas above?  Well, let's use the AB formula as min, and the BC formula as max.  If you plug the formulas into the linear interpolation formula you get this:

point = t * (t * C + (1-t) * B) + (1-t) * (t * B + (1-t) * A)

if you expand that and simplify it you will end up with this equation:
point = A*(1-t)^2 + B*2t(1-t) + C*t^2

which as you may remember is the formula for a quadratic bezier curve.  There you have it... a quadratic bezier curve is just a linear interpolation between 2 other linear interpolations.

Cubic bezier curves work in a similar way, there is just a 4th point to deal with.

<h2>Next Up</h2>
The demos above are in 2d, but you could easily move to 3d (or higher dimensions!) and use the same equations.  Also, there are higher order bezier curves (more control points), but as you add control points, the computational complexity increases, so people usually stick to quadratic or cubic bezier curves, and just string them together.  When you put curves end to end like that, they call it a spline.

Next up, be on the look out for posts and demos for b-splines and nurbs!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>886</wp:post_id>
		<wp:post_date><![CDATA[2014-03-04 23:34:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-05 07:34:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bezier-curves]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495679076;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2754;}i:1;a:1:{s:2:"id";i:1176;}i:2;a:1:{s:2:"id";i:5413;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>819</wp:comment_id>
			<wp:comment_author><![CDATA[Bezier Curves Part 2 (and Bezier Surfaces) | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2014/03/22/bezier-curves-part-2-and-bezier-surfaces/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-03-22 22:41:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-03-23 06:41:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] is a follow up post to Bezier Curves. My plan was to write a post about b-splines and nurbs next, but after looking into them deeper, I [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Implicit vs Parametric vs Explicit Surfaces</title>
		<link>http://blog.demofox.org/2014/03/09/implicit-vs-parametric-vs-explicit-surfaces/</link>
		<pubDate>Mon, 10 Mar 2014 05:10:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=910</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Implicit Surface</h2>

It's always R = 0 where R is a function of one or more variables.

Like the unit circle equation:
 x^2 + y^2 -1 = 0.

<h2>Parametric Surface</h2>

The components of the output are based on some parameter or parameters

Like the quadratic bezier curve (which A,B,C and CurvePoint are points in N dimensions):
CurvePoint = f(t) = A*(1-t)^2 + B*2t(1-t) + C*t^2

Or the unit circle:
x = cos(t)
y = sin(t)

Or surfaces like this:
SurfacePoint3D = f(u,v)

<h2>Explicit Surface</h2>

The more usual looking type functions where you have one variable on the left side (dependent variable), and another variable on the right side (independent variable).

Like lines:
y = mx + b

or height fields:
height = f(x,y)

<h2>More Info</h2>
Here's a cool set of slides that explain this stuff in more detail (and beyond), and the pros and cons of using various forms.

<a href="http://groups.csail.mit.edu/graphics/classes/6.838/F01/lectures/SmoothSurfaces/0the_s001.html" title="Representing Smooth Surfaces" target="_blank">Representing Smooth Surfaces</a>

<h2>Bezier Surface Properties</h2>
Here's a couple pretty cool properties of Bezier surfaces that I learned recently.

The first one is that if you consider a "convex hull" being made up of the control points (connect all the control points into a convex shape), the curve will lie entirely inside that shape.  That means you can use the shape of the control points as a "quick test" for rendering or collision detection.  Note though, you could also just make a sphere that enclosed all the control points and do a sphere test instead, if you would rather have a simpler/quicker test at the cost of some wasted space (more false positives).

The second interesting property is that you can do back face culling of a Bezier surface if all the control points face away from the camera.  while it's true this isn't EXACTLY proper back face culling, the odds are good it's good enough for your needs, especially given how quick a test it is.

The third interesting property is that if you want to transform a bezier surface with something like a translation, rotation, or scale, you can apply the transform to the control points, and the curve will be transformed by the same transformation."A Bézier surface will transform in the same way as its control points under all linear transformations and translations." (from <a href="http://en.wikipedia.org/wiki/B%C3%A9zier_surface" title="Wikipedia: Bezier Surface" target="_blank">Wikipedia: Bezier Surface</a>)

... but unfortunately, as promising as these properties are, it still seems infeasible to render a decent number of bezier surfaces via real time raytracing (something i was planning on) and it seems to only get worse when moving to b-splines and nurbs surfaces, so it seems like this may not be the way to go.  It's still possible though that raymarching these surfaces could be doable, but I haven't explored too much in that direction yet.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>910</wp:post_id>
		<wp:post_date><![CDATA[2014-03-09 21:10:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-10 05:10:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[implicit-vs-parametric-vs-explicit-surfaces]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495692279;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5413;}i:1;a:1:{s:2:"id";i:2754;}i:2;a:1:{s:2:"id";i:928;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bezier Curves Part 2 (and Bezier Surfaces)</title>
		<link>http://blog.demofox.org/2014/03/22/bezier-curves-part-2-and-bezier-surfaces/</link>
		<pubDate>Sun, 23 Mar 2014 06:41:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=928</guid>
		<description></description>
		<content:encoded><![CDATA[This is a follow up post to <a href="http://blog.demofox.org/2014/03/04/bezier-curves/" title="Bezier Curves">Bezier Curves</a>.  My plan was to write a post about b-splines and nurbs next, but after looking into them deeper, I found out they aren't going to work for my needs so I'm scratching that.

Here's some basic info on b-splines and nurbs though before diving deeper into Bezier curves and surfaces.

<h2>B-Splines (Basis Splines)</h2>

Bezier curves are nice, but the more control points you add, the more complex the math gets because the degree of the curve function increases with each control point added.  You can put multiple Bezier curves end to end to be able to have more intricate curves, but another option is to use <a href="http://en.wikipedia.org/wiki/B-spline" title="B-Splines" target="_blank">B-Splines</a>.

B-Splines are basically Bezier curves which let you specify more control points without raising the degree of the Bezier curve.  They do this by having control points only affect part of the total curve.

This way, you could make a quadratic b-spline which had 10 control points.  Only a few control points control any given point on the curve, so the curve stays quadratic (and so does the math), but you get a lot more control points.  A "Knot Vector" is what controls which parts of the curve the control points control.

A Bezier curve is actually a special case of B-Spline where all control points affect the entire curve.

<h2>Nurbs (Non Uniform Rational B-Spline)</h2>

Sometimes when working with curves, you want some control points to be stronger that others.  You can accomplish this in Bezier curves and B-splines by doubling up or trippling up control points in the same location to make that control point twice, or three times as strong respectively.

What if you want a control point to be 1.3 times stronger though?  That gets a lot more complicated.

<a href="http://en.wikipedia.org/wiki/Non-uniform_rational_B-spline" title="Nurbs" target="_blank">Nurbs</a> solve that problem by letting you specify a weight per control point.

Just like Bezier curves are a special case of B-Splines, B-Splines are a special case of nurbs.  A B-Spline could be thought of as nurbs that has the same weighting for all control points.

<h2>Back to Bezier!</h2>

My end goal is to find a curve / surface type that is flexible enough to be used to make a variety of shapes by artists, but is efficient at doing line segment tests against on the GPU.  To this end, B-Splines and Nurbs add algorithmic and mathematical complexity over Bezier curves, and seem to be out of the running unless I can't find anything more promising.

My best bet right now looks like a <a href="http://en.wikipedia.org/wiki/B%C3%A9zier_triangle" title="Bezier Triangle" target="_blank">Bezier Triangle</a>.  Specifically, a quadratic Bezier triangle, where each side of the triangle is a quadratic Bezier curve that has 3 control points.  When I get those details fully worked out, I'll report back, but for now, here's some interesting info I found about generalizing bezier curves both in order (linear, quadratic, cubic, quartic, etc) as well as in the number of dimensions (line, curve, triangle, tetrahedron, etc).

<h2>Bezier Generalized</h2>

I found the generalized equation on the wikipedia page for Bezier triangles and am super glad i found it, it is very cool!

I want to show you some specifics to explain the generalization by example.

<em><strong>Quadratic Curve:</strong></em>
(A * S + B * T) ^ 2

Expanding that gives you:
A^2 * S^2 + A * B * 2 * S * T + B^2 * T^2

In the above, S and T are <a href="http://en.wikipedia.org/wiki/Barycentric_coordinate_system" title="Barycentric Coordinates" target="_blank">Barycentric Coordinates</a> in a 1 dimensional <a href="http://en.wikipedia.org/wiki/Simplex" title="Simplex" target="_blank">Simplex</a>.  Since we know that barycentric coordinates always add up to 1, we can replace S with (1-T) to get the below:

A^2 * (1-T)^2 + A * B * 2 * (1-T) * T + B^2 * T^2

Now, ignoring T and the constants, and only looking at A and B, we have 3 forms:  A^2, AB and B^2.  Those are our 3 control points!  Let's replace them with A,B and C to get the below:

A * (1-T)^2 + B * 2 * (1-T) * T + C * T ^2

And there we go, there's the quadratic Bezier curve formula seen in the previous post.

<em><strong>Cubic Curve:</strong></em>
(A * S + B * T) ^ 3

To make a cubic curve, you just change the power from 2 to 3, that's all!  If you expand that equation, you get:
A^3*S^3+3*A^2*B*S^2*T+3*A*B^2*S*T^2+B^3*T^3

We can swap S with (1-T) to get:

A^3*(1-T)^3+3*A^2*B*(1-T)^2*T+3*A*B^2*(1-T)*T^2+B^3*T^3

Looking at A/B terms we see that there is more this time: A^3, A^2B, AB^2 and B^3.  Those are our 4 control points that we can replace with A,B,C,D to get:
A*(1-T)^3+3*B*(1-T)^2*T+3*C*(1-T)*T^2+D*T^3

There is the cubic Bezier curve equation from the previous chapter.

<em><strong>Linear Curve:</strong></em>
(A * S + B * T) ^ 1

To expand that, we just throw away the exponent.  After we replace S with (1-T) we get:
A * (1-T) + B * T

That is the formula for linear interpolation between 2 points - which you could think of as the 2 control points of the curve.

One more example before we can generalize.

<em><strong>Quadratic Bezier Triangle:</strong></em>
(A * S + B * T + C * U) ^ 2

If you expand that you get this:
A^2*S^2+2*A*B*S*T+2*A*C*S*U+B^2*T^2+2*B*C*T*U+C^2*U^2

Looking at combinations of A,B & C you have:  A^2, AB, AC, B^2, BC, C^2.  Once again, these are your control points, and their names tell you where they lie on the triangle.  A Bezier triangle is a triangle where the 3 sides of the triangle are bezier curves.  A quadratic bezier triangle has quadratic bezier curves for it's edges which mean that each side has 3 control points.  Those 3 control points are made up of the 3 corners of the triangle, and then 3 more control points, each one being between end points.  A^2, B^2 and C^2 represent the 3 corners of the triangle.  AB is the third control point for the bezier curve on the edge AB.  BC and AC follow that pattern as well!  Super easy to remember.

In a cubic Bezier triangle, you get a lot more control points, but a new class of control point too: ABC.  This control point is in the middle of the triangle like the name would imply.

Anyways, in the expanded quadratic bezier triangle equation above, when you replace the control points with A,B,C for the triangle corner control points (the squares) and D,E,F for the inbetween control points, you get the bezier triangle equation below:

A*S^2+2*D*S*T+2*E*S*U+B*T^2+2*F*T*U+C*U^2

Note that we are dealing with a simplex in 3d now, so once again, instead of needing ALL Barycentric coordinates (S,T,U) we could pick one and replace it.  For instance, we could replace U with (1-S-T) to have one less variable floating around.

<h2>All Done for Now</h2>

You can use this pattern to expand either in "surface dimension", or in the dimension of adding more control points (and increasing the order of the equation).  I love it because it's super simple to remember that simple equation, and then just re-calculate the equation you need for whatever your specific usage case is.

If this stuff is confusing, check out the wiki page for Bezier Triangles, it has a great graphic that really shows you what I'm trying to explain:
<a href="http://en.wikipedia.org/wiki/B%C3%A9zier_triangle" title="Bezier Triangle" target="_blank">Bezier Triangle</a>

Next up I either want to make an HTML5 interactive app for messing around with Bezier triangles, or if I can figure out how to intersect a line segment with a quadratic Bezier triangle, i'll probably just have some real cool looking screenshots to post along w/ the equation I ended up using (;

Special thanks to wolfram alpha for crunching some of these equations.  Check it out, it's really cool!
<a href="https://www.wolframalpha.com/input/?i=%28A+*+S+%2B+B+*+T%29+%5E+3" title="Wolfram Alpha - Cubic Bezier Curve Expansion" target="_blank">Wolfram Alpha - Cubic Bezier Curve Expansion</a>

For more bezier fun check out my next Bezier post: <a href="http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/" title="One Dimensional Bezier Curves">One Dimensional Bezier Curves</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>928</wp:post_id>
		<wp:post_date><![CDATA[2014-03-22 22:41:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-23 06:41:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bezier-curves-part-2-and-bezier-surfaces]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495655828;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:886;}i:1;a:1:{s:2:"id";i:2754;}i:2;a:1:{s:2:"id";i:5413;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>835</wp:comment_id>
			<wp:comment_author><![CDATA[One Dimensional Bezier Curves | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-08-28 11:46:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-08-28 19:46:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] (more info available at Bezier Curves Part 2 (and Bezier Surfaces)) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Feistel Networks - Do They Have to use XOR?</title>
		<link>http://blog.demofox.org/2014/05/18/feistel-networks-does-they-have-to-use-xor/</link>
		<pubDate>Sun, 18 May 2014 23:35:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=955</guid>
		<description></description>
		<content:encoded><![CDATA[If you have no idea what a Feistel network is, but like cryptography and/or random number generation algorithms, read this link first:
<a href="http://blog.demofox.org/2013/07/06/fast-lightweight-random-shuffle-functionality-fixed/" title="Fast & Lightweight Random “Shuffle” Functionality – FIXED!">Fast & Lightweight Random “Shuffle” Functionality – FIXED!</a>

As a quick refresher, to encrypt data with a Feistel network, you break the plain text data into a left and a right side and do N rounds of this operation:
[code language="cpp"]Left[i+1]  = Right[i];
Right[i+1] = Left[i] ^ RoundFunction(Right[i], key);[/code]

Where RoundFunction is ideally some chaotic function that returns some pseudo-random-esque number based on the inputs.  For instance, RoundFunction could be MD5 so that it returned the MD5 hash of the data and the key, where the key could be considered the salt of the hash.  The better the round function, the better your encryption algorithm will be.

To decrypt data with a Feistel network, you break the data into a left and right side and do the same number of rounds of this operation:
[code language="cpp"]Right[i] = Left[i+1];
Left[i] = Right[i+1] ^ RoundFunction(Left[i+1], key);[/code]

Ok, onto the question....

<h2>Does it Have to use XOR?</h2>

Recently a friend of mine was using Feistel networks for something pretty amazing (so amazing, I can't even talk about it), but in doing so, he asked me an interesting question.  He asked "do you think this HAS to be XOR here, where we combine the round functions result back into the data?".  Well, it turns out, it doesn't!

The operation has to be a reversible operation though, and you have to do the reverse operation when decrypting that you did while encrypting.

For instance, when encrypting you could add the round function result in, but then when decrypting, you would have to subtract the round function result out.

Or, you could do bitwise rotation left when encrypting, and right when decrypting perhaps.

Basically, anything that has a reverse operation can be used.

You have to be careful though because you might be lured into the trap of thinking that this includes something like multiplication and division.

If you multiply when you encrypt, you might get an integer overflow and lose data that can't be corrected by doing a divide.  For instance, if you multiply 255*2 in an unsigned 8 bit number you get 254 as a result.  If you divide 254 by 2 to "undo" the multiplication, you get 127 which is obviously not 255, so we've lost some data.  In an unsigned 8 bit number, ((255*2)/2) = 127.

If you go the other way and divide on encryption, and multiply on decryption, that doesn't work either.  For instance, when you divide 3 by 2, you get 1 with integer math, and when you multiply by 2, you get 2.  So, with integers... ((3/2)*2) = 2.

Confusing note: you ARE able to do irreversible operations within the round function though.  Feel free to do a divide or whatever you want in there.  If that is difficult to understand how that could possibly work, you aren't alone.  Step through the code a bit by hand with a simple round function and a low number of rounds and you might be able to understand better how it does what it does.

I'm really not sure if anyone else out there does this variation on the traditional Feistel networks or not, but it is pretty interesting to combine the RoundFunction result back into the data with something other than XOR.

<h2>Source Code</h2>

Here's some simple C++ code below to play with if you want to mess around with this stuff.

[code language="cpp"]
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

static const unsigned int c_numRounds = 4;

void PrimeRandomNumberPump ()
{
	// if you are curious about this, check out:
	// http://blog.demofox.org/2013/06/18/wtf-rand/
	srand((unsigned)time(NULL));
	for (unsigned int index = 0; index < 20; ++index)
		rand();
}

unsigned char RoundFunction (unsigned char value, unsigned char key)
{
	// Not a particularly effective round function, but the round function
	// isn't the point of this code.
	// If you want a better round function, try plugging in a hash function
	// or another chaotic function that has big changes in output for
	// small changes in input.  Also, you could change c_numRounds to a
	// higher number if you want better encryption.
	return value + key | (value * key) + 3;
}

void Encrypt (unsigned char &left, unsigned char &right, unsigned char key)
{
	for (unsigned int index = 0; index < c_numRounds; ++index)
	{
		// Feistel Network Encryption:
		//  Left[i+1]  = Right[i];
		//  Right[i+1] = Left[i] ^ RoundFunction(Right[i], key);

		// let's do addition to combine the value of the round function on 
		// encryption, instead of doing xor.  Xor is used in feistel networks
		// because xor is it's own inverse operation.
		unsigned char oldLeft = left;
		left = right;
		right = oldLeft + RoundFunction(right, key);
	}
}

void Decrypt (unsigned char &left, unsigned char &right, unsigned char key)
{
	for (unsigned int index = 0; index < c_numRounds; ++index)
	{
		// Feistel Network Decryption:
		//  Right[i] = Left[i+1];
		//  Left[i] = Right[i+1] ^ RoundFunction(Left[i+1], key);

		// let's do subtraction to combine the value of the round function on 
		// decryption, instead of doing xor.  Xor is used in feistel networks
		// because xor is it's own inverse operation.
		unsigned char oldRight = right;
		right = left;
		left = oldRight - RoundFunction(left, key);
	}
}

void DoTest (unsigned char plainText1, unsigned char plainText2, unsigned char key, int &tests, int &errors)
{
	// encrypt the plaintext
	unsigned char cipherText1 = plainText1;
	unsigned char cipherText2 = plainText2;
	Encrypt(cipherText1, cipherText2, key);

	// decrypt the cipher text
	unsigned char decryptedData1 = cipherText1;
	unsigned char decryptedData2 = cipherText2;
	Decrypt(decryptedData1, decryptedData2, key);

	// if the decrypted data doesn't match the plaintext data, count it as an error
	// and show the details
	tests++;
	if (decryptedData1 != plainText1 || decryptedData2 != plainText2)
	{
		errors++;
		printf("plaintext = 0x%02X%02X\r\n", (unsigned int)plainText1, (unsigned int)plainText2);
		printf("ciphertext = 0x%02X%02X\r\n", (unsigned int)cipherText1, (unsigned int)cipherText2);
		printf("decrypteddata = 0x%02X%02X\r\n\r\n", (unsigned int)decryptedData1, (unsigned int)decryptedData2);
	}
}

void main (void)
{
	// generate a key
	PrimeRandomNumberPump();
	unsigned char key = (unsigned char)rand();

	// run tests with the key
	int errors = 0;
	int tests = 0;
	for (unsigned int y = 0; y < 256; ++y)
		for (unsigned int x = 0; x < 256; ++x)
			DoTest((unsigned char)y, (unsigned char)x, key, tests, errors);
		
	// display the test results
	printf("%i tests ran, %i errors encountered. key = 0x%02X\r\n", tests, errors, key);
}
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>955</wp:post_id>
		<wp:post_date><![CDATA[2014-05-18 15:35:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-18 23:35:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[feistel-networks-does-they-have-to-use-xor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<category domain="category" nicename="encryption-security"><![CDATA[Encryption + Security]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495563000;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:549;}i:1;a:1:{s:2:"id";i:48;}i:2;a:1:{s:2:"id";i:49;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Analytic Fog Density</title>
		<link>http://blog.demofox.org/2014/06/22/analytic-fog-density/</link>
		<pubDate>Sun, 22 Jun 2014 19:15:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=977</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://demofox2.files.wordpress.com/2014/06/AnalyticFog.png" target="_blank"><img src="https://demofox2.files.wordpress.com/2014/06/AnalyticFog-1024x576.png" alt="AnalyticFog" width="1024" height="576" class="aligncenter size-large wp-image-1011" /></a>

There are a number of ways to implement the effect of fog with modern real time rendered graphics.  This blog post will explain how to render fog that has varying density, based on a function of X,Y,Z location in space, like in the picture above.

<h1>Faked Fog</h1>

One way is to "fake it" and do something like set the color of a pixel on an object to be based on it's height.  For instance you might say that pixels with a y axis value above 15 are unfogged, pixels with y axis values between 15 and 10 progressively get more fogged as they get closer to 10, and pixels with y axis values less than 10 are completely fogged.  That can make some fog that looks like this:

<img src="https://demofox2.files.wordpress.com/2014/06/heightfog.jpg" alt="heightfog" width="1005" height="733" class="aligncenter size-full wp-image-984" />

A strange side effect of doing that though, is if you go down "into" the fog, and look out of the fog, things that should be fogged won't.  For instance, looking up at a mountain from inside the fog, the mountain won't be fogged at all, even though it should be because you are inside of the fog.

A better way to do it, if you intend for the camera to be able to go into the fog, is to calculate a fogging amount for a pixel based on how far away it is from the view point, and how dense the fog is between the view point and the destination point.

If you are doing ray based rendering, like ray tracing or ray marching, you might find yourself trying to find how much fog is between points that don't involve the view point - like if you are calculating the reflection portion of a ray.  In this case, you are just finding out how much fog there is between the point where the reflection happened and the closest intersection.  You can consider the point of reflection as the "view point" for the purpose of fogging.

Sometimes, the entire scene might not be in fog.  In this case, you have to find where the fog begins and ends, instead of the total distance between the view point and the destination point.

In any case, the first thing you need to do when fogging is figure out the point where the fog begins, and the point where the fog ends.  Then, you can figure out how much fog there is based on how the fog density works.

<h1>Constant Density Fog</h1>

<img src="https://demofox2.files.wordpress.com/2014/06/GraphConstant.png" alt="GraphConstant" width="397" height="266" class="aligncenter size-full wp-image-1014" />

The simplest sort of fog is fog that has the same density all throughout it.

What you do in this case is just multiply the fog density by the distance spent in the fog to come up with a final fog value.

As an example, your fog density might be "0.04" and if you are fogging a pixel 10 units away, you multiply density by distance.  FogAmount = 0.04 * 10.0 = 0.4.

Doing this, you know the pixel should be 40% fogged, so you interpolate the pixel's color 40% towards the fog color.  You should make sure to clamp the fog amount to be between 0 and 1 to avoid strange visual anomolies.

The image below shows a constant fog density of 0.04.

<a href="https://demofox2.files.wordpress.com/2014/06/ConstantFog1.png" target="_blank"><img src="https://demofox2.files.wordpress.com/2014/06/ConstantFog1-1024x545.png" alt="ConstantFog1" width="1024" height="545" class="aligncenter size-large wp-image-992" /></a>

Here's an image of the same constant density fog as viewed from inside the fog:

<a href="https://demofox2.files.wordpress.com/2014/06/ConstantFog3.png" target="_blank"><img src="https://demofox2.files.wordpress.com/2014/06/ConstantFog3-1024x544.png" alt="ConstantFog3" width="1024" height="544" class="aligncenter size-large wp-image-997" /></a>

A problem with constant fog density though, is that if you view it from edge on, you'll get a very noticeable hard edge where the fog begins, like you can see in the image below:

<a href="https://demofox2.files.wordpress.com/2014/06/ConstantFog2.png" target="_blank"><img src="https://demofox2.files.wordpress.com/2014/06/ConstantFog2-1024x546.png" alt="ConstantFog2" width="1024" height="546" class="aligncenter size-large wp-image-995" /></a>

<h1>Linear Density Fog</h1>

<img src="https://demofox2.files.wordpress.com/2014/06/GraphLinear.png" alt="GraphLinear" width="400" height="301" class="aligncenter size-full wp-image-1015" />

With linear fog density, the fog gets denser linearly, the farther you go into the fog.

With a fog plane, you can get the density of the fog for a specified point by doing a standard "distance from plane to point" calculation and multiplying that by how much the fog density grows per unit of distance.  If your plane is defined by A*x+B*y+C*y+D = 0, and your point is defined as X,Y,Z, you just do a dot product between the plane and the point, giving the point a W component of one.

In other words...

FogDensity(Point, Plane) = (Plane.NormX * Point.X + Plane.NormY * Point.Y + Plane.NormZ * Point.Z + Plane.D * 1.0) * FogGrowthFactor

Here's a picture of linear fog with a fog growth factor of 0.01:

<a href="https://demofox2.files.wordpress.com/2014/06/LinearFog1.png" target="_blank"><img src="https://demofox2.files.wordpress.com/2014/06/LinearFog1-1024x545.png" alt="LinearFog1" width="1024" height="545" class="aligncenter size-large wp-image-1002" /></a>

The same fog viewed from the inside:

<a href="https://demofox2.files.wordpress.com/2014/06/LinearFog2.png" target="_blank"><img src="https://demofox2.files.wordpress.com/2014/06/LinearFog2-1024x546.png" alt="LinearFog2" width="1024" height="546" class="aligncenter size-large wp-image-1003" /></a>

And lastly, the fog viewed edge on to show that the "hard line" problem of linear fog is gone (dramatic difference isn't it?!):

<a href="https://demofox2.files.wordpress.com/2014/06/LinearFog3.png" target="_blank"><img src="https://demofox2.files.wordpress.com/2014/06/LinearFog3-1024x546.png" alt="LinearFog3" width="1024" height="546" class="aligncenter size-large wp-image-1004" /></a>

<h1>Analytic Fog Density - Integrals</h1>

<img src="https://demofox2.files.wordpress.com/2014/06/GraphAnalytic.png" alt="GraphAnalytic" width="400" height="258" class="aligncenter size-full wp-image-1016" />

Taking a couple steps further, you might want to use equations to define fog density with some function FogDensity = f(x,y,z,).

How could you possibly figure out how much fog there is between two given points when the density between them varies based on some random function?

One way would be to take multiple samples along the line segment between the view point and the destination point, and either calculate the fog amount in each section, or maybe average the densities you calculate and multiply the result by the total distance. You might have to take a lot of samples to make this look correct, causing low frame rate, or accepting low visual quality as a compromise.

If you look at the graphs for the previous fog types, you might notice that we are trying to find the area under the graphs between points A and B.  For constant density fog, the shape is a rectangle, so we just multiply width (time in fog) by height (the constant fog density) to get the fog amount.  For linear density fog, the shape is a trapezoid, so we use the trapezoid area formula which is height (in this case, the distance in the fog) times the sum of the base lengths (the fog densities at points A and B) divided by 2.

How can we get the area under the graph between A and B for an arbitrary formula though?  Well, a way exists luckily, using integrals (thanks to my buddy "Danny The Physicist" for educating me on the basics of integrals!).

There's a way to transform a formula to get an "indefinite integral", which itself is also a formula.  I won't go into the details of how to do that, but you can easily get the indefinite integral of a function by typing it into <a href="http://www.wolframalpha.com/" target="_blank">Wolfram Alpha</a>.

Once you have the indefinite integral (let's call it G(x)) of the fog density formula (let's call it F(x)), if you calculate G(B) - G(A), that will give you the area under the graph in F(X) between A and B.  Yes, seriously, that gives us the area under the graph between our points, thus giving us the amount of fog that exists between the two points for an arbitrary fog density function!

Note that when you plug a value into the indefinite integral and get a number out, that number is called the definite integral.

<h1>Analytic Fog Density - Implementation Details</h1>

Now that the theory is worked out let's talk about implementation details.

First off, coming from an additive audio synthesis type of angle, I figured I might have some good luck adding together sine waves of various frequencies and amplitudes, so I started with this:

sin(x*F) * A

F is a frequency multiplier that controls how long the sine wave is.  A is an amplitude multiplier that controls how dense the fog gets max.

Next, I knew that I needed a fog density function that never goes below zero, because that would mean if you looked through a patch of negative fog density, it would make the other fog you were looking through be less dense.  That is just weird, and doesn't exist in reality (but maybe there is some interesting visual effect hiding in there somewhere??), so the formula evolved to this, making sure the function never went below zero:

(1 + sin(x*F)) * A

Plugging that equation into wolfram alpha, it says the indefinite integral is:

(x - (cos(x*F)) / F) * A

You can check that out here:
<a href="http://www.wolframalpha.com/input/?i=%281+%2B+sin%28x*F%29%29+*+A" target="_blank">Wolfram Alpha: (1 + sin(x*F)) * A</a>.

It's also kind of fun to ask google to graph these functions so you can see what they do to help understand how they work.  Here are the graphs for A = 0.01 and F = 0.6:
<a href="https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=graph%20(1%20%2B%20sin(x*0.6))%20*%200.01" target="_blank">Fog Density: graph (1 + sin(x*0.6)) * 0.01</a>
<a href="https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=graph+(x+-+(cos(x*0.6))+%2F+0.6)+*+0.01" target="_blank">Indefinite Integral: graph (x - (cos(x*0.6)) / 0.6) * 0.01</a>

So, if you have point A and B where the fogging begins and ends, you might think you can do this to get the right answer:
FogAmount = G(B.x) - G(A.x)

Nope!  There's a catch.  That would work if A and B had no difference on the y or z axis, but since they probably do, you need to jump through some hoops.  In essence, you need to stretch your answer across the entire length of the line segment between A and B.

To do that, firstly you need to get that fog amount down to unit length.  You do that by modifying the formula like so:
FogAmount = (G(B.x) - G(A.x)) / (B.x - A.x)

This also has a secondary benefit of making it so that your fog amount is always positive (so long as your fog density formula F(X) can't ever go negative!), which saves an abs() call.  Making it always positive ensures that this works when viewing fog both from the left and the right.

Now that we have the fog amount down to unit length, we need to scale it to be the length of the line segment, which makes the formula into this:
FogAmount = (G(B.x) - G(A.x)) * Length(B-A)/(B.x - A.x)

That formula will now give you the correct fog amount.

But, one axis of fog wasn't enough to look very good, so I wanted to make sure and do one sine wave on each axis.  I used 0.01 amplitude for each axis, but for the X axis i used a frequency of 0.6, for the Y axis i used a frequency of 1.2 and for the Z axis i used a frequency of 0.9.

Also, I wanted to give a little bit of baseline fog, so I added some constant density fog in as well, with a constant density of 0.1.

As a bonus, I also gave each axis a "movement factor" that made the sine waves move over time.  X axis had a factor of 2.0, Y axis had a factor of 1.4 and Z axis had a factor of 2.2.

Putting all of this together, here is the final fog equation (GLSL pixel shader code) for finding the fog amount between any two points at a specific point in time:

[code language="cpp"]
//=======================================================================================
float DefiniteIntegral (in float x, in float amplitude, in float frequency, in float motionFactor)
{
	// Fog density on an axis:
	// (1 + sin(x*F)) * A
	//
	// indefinite integral:
	// (x - cos(F * x)/F) * A
	//
	// ... plus a constant (but when subtracting, the constant disappears)
	//
	x += iGlobalTime * motionFactor;
	return (x - cos(frequency * x)/ frequency) * amplitude;
}

//=======================================================================================
float AreaUnderCurveUnitLength (in float a, in float b, in float amplitude, in float frequency, in float motionFactor)
{
	// we calculate the definite integral at a and b and get the area under the curve
	// but we are only doing it on one axis, so the "width" of our area bounding shape is
	// not correct.  So, we divide it by the length from a to b so that the area is as
	// if the length is 1 (normalized... also this has the effect of making sure it's positive
	// so it works from left OR right viewing).  The caller can then multiply the shape
	// by the actual length of the ray in the fog to "stretch" it across the ray like it
	// really is.
	return (DefiniteIntegral(a, amplitude, frequency, motionFactor) - DefiniteIntegral(b, amplitude, frequency, motionFactor)) / (a - b);
}

//=======================================================================================
float FogAmount (in vec3 src, in vec3 dest)
{
	float len = length(dest - src);
	
	// calculate base fog amount (constant density over distance)	
	float amount = len * 0.1;
	
	// calculate definite integrals across axes to get moving fog adjustments
	float adjust = 0.0;
	adjust += AreaUnderCurveUnitLength(dest.x, src.x, 0.01, 0.6, 2.0);
	adjust += AreaUnderCurveUnitLength(dest.y, src.y, 0.01, 1.2, 1.4);
	adjust += AreaUnderCurveUnitLength(dest.z, src.z, 0.01, 0.9, 2.2);
	adjust *= len;
	
	// make sure and not go over 1 for fog amount!
	return min(amount+adjust, 1.0);
}
[/code]

<h1>More Info</h1>

I ended up only using one sine wave per axis, but I think with more sine waves, or perhaps different functions entirely, you could get some more convincing looking fog.

At some point in the future, I'd like to play around with exponential fog density (instead of linear) where the exponential power is a parameter.

I also think that maybe squaring the sine waves could make them have sharper density changes perhaps...

One thing that bugs me in the above screenshots is the obvious "hard line" in both constant and linear fog where it seems fog crosses a threshold and gets a lot denser.  I'm not really sure how to fix that yet.  In traditional rasterized graphics you could put the fog amount on a curve, to give it a smoother transition, but in ray based rendering, that could make things a bit odd - like you could end up with an exponential curve butting up against the start of a different exponential curve (due to reflection or refraction or similar).  The fog density would end up looking like log graph paper which would probably not look so great - although honestly I haven't tried it to see yet!

If you have any questions, or feedback about improvements you know about or have discovered in any of the above, post a comment and let me know!

Here's a good read on fog defined by a plane, that also gets into how to make branchless calculations for the fog amounts.
<a href="https://www.terathon.com/lengyel/Lengyel-UnifiedFog.pdf" target="_blank">Unified Distance Formulas for Halfspace Fog</a>

Interactive ShaderToy.com demo with GLSL pixel shader source code that you can also edit in real time with WebGL:
<a href="https://www.shadertoy.com/view/ldfXzB" target="_blank"><img src="https://demofox2.files.wordpress.com/2014/06/Fog.png" alt="Fog" width="641" height="353" class="aligncenter size-full wp-image-979" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>977</wp:post_id>
		<wp:post_date><![CDATA[2014-06-22 11:15:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 19:15:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[analytic-fog-density]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495641536;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4038;}i:1;a:1:{s:2:"id";i:4744;}i:2;a:1:{s:2:"id";i:5413;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>836</wp:comment_id>
			<wp:comment_author><![CDATA[One Dimensional Bezier Curves | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-08-28 11:47:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-08-28 19:47:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] integral of the parameterized curve so that you can find the area underneath it (like, for Analytic Fog Density). Or, try to even find the given Y location that the curve has for a specific X value. These things [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Distance Field Textures</title>
		<link>http://blog.demofox.org/2014/06/30/distance-field-textures/</link>
		<pubDate>Tue, 01 Jul 2014 05:17:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1037</guid>
		<description></description>
		<content:encoded><![CDATA[A friend recently turned me onto a really cool paper (thanks James!) that Valve wrote that allows you to encode monochromatic (black & white) textures in a way that they can be incredibly low resolution, but when you scale them up, they still look crisp and smooth, not blurry or pixelated.

It is really quite amazing and is perfect for things like fonts or decals.

I recommend reading the paper, but below are some details to help you implement this in your own application, and also some examples of things taken to the extreme.

The paper is here: <a href="http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf" Target="_blank">Improved Alpha-Tested Magniﬁcation for Vector Textures and Special Effects</a>

Here's a really easy to use program that can turn fonts or SVG files into distance field images: <a href="https://code.google.com/p/signed-distance-field-font-generator/" target="_blank">signed-distance-field-font-generator</a>

<h1>Implementation</h1>

Ok so, in a signed distance field texture, the alpha value of each pixel is a value of how far that pixel is from the edge of the shape.  In a signed distance field, you essentially take the value which is from 0 to 1, and you subtract 0.5 and multiply by 2 so that you change it from 0-1 to -1 to +1.  Negative distances mean the pixel is inside the shape, Positive distances mean the pixel is outside the shape.

You only need to do that math if you care about the exact distance though.  If you only care about whether the pixel is inside or outside the shape, you can just consider values less than 0.5 to be inside the shape, and values greater than 0.5 to be outside the shape.  In other words, you could just do an ALPHA TEST against 0.5 to render these guys.

Here's an excerpt of some OpenCL code that does this:
[code language="cpp"]
float alpha = read_imagef(tex3dIn, g_textureSampler, textureCoords).w;
float3 color = (alpha < 0.5f) ? (float3)(1.0f) : (float3)(0.0f);
[/code]

I'll refer to that code as the "Alpha Test" code.

Another way to do it would be to use smoothstep to smooth the jaggies out a bit.  Here's an excerpt of some OpenCL code that does that:
[code language="cpp"]
const float smoothing = 1.0/64.0;
float distance = read_imagef(tex3dIn, g_textureSampler, textureCoords).w;
float alpha = Saturate(smoothstep(0.5 - smoothing, 0.5 + smoothing, distance));
float3 color = (float3)(1.0f - alpha);
[/code]

In the above, the smoothing constant can be adjusted to change how it smooths out the jaggies.

Note that even though the texture is monochromatic, you could use the color channel in the texture if you wanted to, or multiply the color by some other color to make it a colored image.

Here are the two source images I used.  The first one is of the "Comic Sans" font which I doubled vertically since my textures have to be square, and the second one is a mustache SVG vector graphics image I found online.  The font image is 512x512 and the mustache is 128x128.

<img src="https://demofox2.files.wordpress.com/2014/06/comic_source.png" alt="comic_source" width="512" height="512" class="aligncenter size-full wp-image-1042" />

<img src="https://demofox2.files.wordpress.com/2014/06/moustache_source.png" alt="moustache_source" width="128" height="128" class="aligncenter size-full wp-image-1043" />

<h1>Distance Field Textures in Action</h1>

Here's a shot of the texture usages rendered from a distance:
<a href="https://demofox2.files.wordpress.com/2014/06/ZoomedOut.png"><img src="https://demofox2.files.wordpress.com/2014/06/ZoomedOut.png" alt="ZoomedOut" width="1280" height="720" class="aligncenter size-full wp-image-1045" /></a>

<h1>Font in Action</h1>

Here's a shot of the text close up with the alpha test code:
<a href="https://demofox2.files.wordpress.com/2014/06/LettersAlphaTest.png"><img src="https://demofox2.files.wordpress.com/2014/06/LettersAlphaTest.png" alt="LettersAlphaTest" width="1280" height="720" class="aligncenter size-full wp-image-1048" /></a>

Here's the same shot, using the smooth step code.  Keep in mind that the "8" you are looking at is about 32x32 pixels :P
<a href="https://demofox2.files.wordpress.com/2014/06/LettersSmooth.png"><img src="https://demofox2.files.wordpress.com/2014/06/LettersSmooth.png" alt="LettersSmooth" width="1280" height="720" class="aligncenter size-full wp-image-1049" /></a>

Here's the text taken from 512x512 down to 256x256, rendered with the alpha test code.  You can already see degradation unfortunately but the look at the pictures above and remember that the full font texture is essentially 512x256 (I doubled it because my textures have to be square) and looks great up close:
<a href="https://demofox2.files.wordpress.com/2014/06/LettersAlphaTest_256x256.png"><img src="https://demofox2.files.wordpress.com/2014/06/LettersAlphaTest_256x256.png" alt="LettersAlphaTest_256x256" width="1280" height="720" class="aligncenter size-full wp-image-1051" /></a>

Here's the 256x256 font texture again, this time rendered with smooth step.  A little bit better, but still pretty bad (but not bad for the resolution of the source font texture!):
<a href="https://demofox2.files.wordpress.com/2014/06/LettersSmooth_256x256.png"><img src="https://demofox2.files.wordpress.com/2014/06/LettersSmooth_256x256.png" alt="LettersSmooth_256x256" width="1280" height="720" class="aligncenter size-full wp-image-1052" /></a>

<h1>Decal in Action</h1>

Here's the mustache decal, which has a source image size of 128x128, rendered with the alpha test code:
<a href="https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest.png"><img src="https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest.png" alt="MoustacheAlphaTest" width="1280" height="720" class="aligncenter size-full wp-image-1054" /></a>

Here's the mustache rendered with the smooth step code:
<a href="https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth.png"><img src="https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth.png" alt="MoustacheSmooth" width="1280" height="720" class="aligncenter size-full wp-image-1055" /></a>

Now it starts to get interesting.  Here it is at 64x64 with alpha test code:
<a href="https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_64x64.png"><img src="https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_64x64.png" alt="MoustacheAlphaTest_64x64" width="1280" height="720" class="aligncenter size-full wp-image-1056" /></a>

And now 64x64 with smooth step:
<a href="https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_64x64.png"><img src="https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_64x64.png" alt="MoustacheSmooth_64x64" width="1280" height="720" class="aligncenter size-full wp-image-1057" /></a>

Here's 32x32 with alpha test:
<a href="https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_32x32.png"><img src="https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_32x32.png" alt="MoustacheAlphaTest_32x32" width="1280" height="720" class="aligncenter size-full wp-image-1058" /></a>

Here's 32x32 with smooth step:
<a href="https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_32x32.png"><img src="https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_32x32.png" alt="MoustacheSmooth_32x32" width="1280" height="720" class="aligncenter size-full wp-image-1059" /></a>

Here's 16x16 with alpha test:
<a href="https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_16x16.png"><img src="https://demofox2.files.wordpress.com/2014/06/MoustacheAlphaTest_16x16.png" alt="MoustacheAlphaTest_16x16" width="1280" height="720" class="aligncenter size-full wp-image-1061" /></a>

And lastly, here's 16x16 with smooth step.  Not freaking bad for a 16x16 texture right??!!!
<a href="https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_16x16.png"><img src="https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_16x16.png" alt="MoustacheSmooth_16x16" width="1280" height="720" class="aligncenter size-full wp-image-1062" /></a>

<h1>Shadow Maps</h1>

Apparently another great use for these is to encode a shadow map as a distance field texture.  This does a great job of keeping your shadow line smooth, effectively letting you use a much lower resolution texture to store the shadow maps.

The unreal engine allows this as an option in fact, check this link for more info:
<a href="http://udn.epicgames.com/Three/DistanceFieldShadows.html" title="Distance Field Shadows" target="_blank">Distance Field Shadows</a>

This is a no brainer for static shadows, but dynamic shadows this may not be as useful, as it seems like you'd need to generate the full sized texture to make the distance field texture, so would require some extra memory and processing when generated at runtime.  There may be some clever tricks to avoiding that though, not sure.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1037</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 21:17:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-01 05:17:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[distance-field-textures]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495686981;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4072;}i:1;a:1:{s:2:"id";i:4038;}i:2;a:1:{s:2:"id";i:5803;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>838</wp:comment_id>
			<wp:comment_author><![CDATA[One Dimensional Bezier Curves | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-09-09 19:47:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-09-10 03:47:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] a GLSL built in function. You may have also seen it used in the post I made about distance fields (Distance Field Textures), because one of it&#8217;s common uses is to make the edges of things look smoother. Here&#8217;s [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Situational Leadership</title>
		<link>http://blog.demofox.org/2014/07/21/situational-leadership/</link>
		<pubDate>Tue, 22 Jul 2014 04:04:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1068</guid>
		<description></description>
		<content:encoded><![CDATA[This is a little bit different than the normal kinds of topics I write about, but I found it pretty interesting so wanted to share with you guys. (Thanks for sharing the idea with me Paul!)

This is a "theory of management" type of thing that helps explain why people act certain ways in specific situations, and what sort of management style they need to be successful.  I might butcher the details a little bit, but if you want to read about it in more depth, you might start with this wikipedia page: <a href="http://en.wikipedia.org/wiki/Situational_leadership_theory" title="Wikipedia: Situational Leadership" target="_blank">Wikipedia: Situation Leadership</a>.

Let's kick things off with a diagram:
<img src="https://demofox2.files.wordpress.com/2014/07/SLChart.png" alt="SLChart" width="442" height="390" class="aligncenter size-full wp-image-1071" />

The idea is that basically, when someone is put into a new situation, they will generally progress from 1 to 4(*).  This can be either hiring a programmer fresh out of college, or taking an experienced programmer from one team and putting him onto another team, or presumably could also refer to an entire team tackling a new type of problem.

(*) I sort of hate generalizing about how people act, and cookie-cutter-ing people and situations, but I take this as a sort of general guideline, instead of a hard and fast rule for every person and every situation.

<h2>Step 1</h2>
At step 1, a person is overly confident and think that they know what needs to be done, but in reality they don't have the skills and/or information needed to actually do what is needed - but they don't know it yet.  A person at this stage needs guidance or pairing with another person to keep from doing reckless things and to keep them on the path towards success.

<h2>Step 2</h2>
At step 2, a person has learned a bit more about things and realizes it's a bit more challenging than they thought.  There is some drop in morale at this stage, and is where people might contemplate giving up, switching teams, switching companies, or switching careers.  At this stage, a person needs "beer and hugs" I'm told.  Maybe they also need some smaller, isolated tasks, to give them a sense of accomplishment.  Maybe tasks drawing on their passions or previous experience to give them some victories to help them get over the hump.

How often have you found yourself in the mindset?  Maybe on a new team, at a new company, working with new technology, and feeling completely overwhelmed, thinking things are too difficult and maybe even wanting to give up, or feeling like you are not preforming well enough?

Chances are, everyone's felt that way.  I know I have!  I've worked at something like 7 companies in 13 years and early in my career i felt that way A LOT, and OFTEN.  It happens less as the years go on, and I find that more skills carry over than in previous days, but it still happens from time to time.  That's a good thing though, because if it didn't, it would mean I wasn't learning and growing, and stagnation is no good.

The good news is that this feeling is normal, it's typical, and if you have a good manager, they've seen it many times before and expect it.  No, you aren't under-performing, you aren't under-qualified, and you aren't a slacker.  But keep working hard anyways so you can get out of this stage!

<h2>Step 3</h2>
At step 3, a person has begun learning more and is getting more proficient, and starting to feel better about things.  Keep on trucking!

<h2>Step 4</h2>
At step 4, a person has mastery over the subject matter and is feeling good about things.  At this point they know what they are doing and are confident, and need a bit of a longer leash to be able to go out into the weeds a little bit to feel good about their work, even if it seems a bit silly.  People who are truly passionate about what they do want to be trusted to do the right thing, and they want the freedom to pursue their interests.  They've worked hard, through challenges both with the work and psychological, and now they are effective and hopefully pleasant - so hopefully they've deserved a little bit of diversion time hehe.

Plus!  if you've done any programming in the areas of genetic algorithms, or training neural networks, you may remember that if you only let the winners reproduce (in genetic algorithms), or you only activate the winning neurons while training (for neural networks), you will likely end up in a local minima, instead of the global minimum.  That "longer leash" time of letting people wander into the woods a little bit is kind of like mutation, or letting some of the losers reproduce.  They may very well come back with something way better than you ever considered.

Super tangent - someone recently told me that path finding has the same "local minima" problem, and that if you pursue some of the "not so great" paths while searching a pathing space, you can get better results.

<h2>Outside of the Box</h2>

Anyways....

While this may be a useful tool for helping to understand people's motivations, and helping to give them what they need to succeed and be happy and effective, this isn't the whole story of course.  Just like there is no such thing as a straight line in nature (AFAIK, but not sure what happens below the plank scale!), this doesn't exactly match reality.  It's just a useful guideline.

You might also find this interesting, as a different take on the transition from step 1 to step 2: <a href="http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect" title="Wikipedia: Dunning-Kruger Effect" target="_blank">Wikipedia: Dunning-Kruger Effect</a>

Recently I've been thinking about a few topics like this that are game dev related, but not about specific algorithms.  You'll probably see some more of this sort of thing smattered in amongst the cool algorithms I stumble on going forward (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1068</wp:post_id>
		<wp:post_date><![CDATA[2014-07-21 20:04:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-22 04:04:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[situational-leadership]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gamedev-commentary"><![CDATA[Gamedev Commentary]]></category>
		<category domain="category" nicename="people-skills"><![CDATA[People Skills]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495179585;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2460;}i:1;a:1:{s:2:"id";i:78;}i:2;a:1:{s:2:"id";i:5116;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>831</wp:comment_id>
			<wp:comment_author><![CDATA[puggles]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kenandkaren777@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.38.203.220]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-07-22 08:14:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-07-22 16:14:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[beer and hugs ftw!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>What if My Equation DOESN&#039;T Equal Zero??</title>
		<link>http://blog.demofox.org/2014/08/10/what-if-my-equation-doesnt-equal-zero/</link>
		<pubDate>Mon, 11 Aug 2014 05:52:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1090</guid>
		<description></description>
		<content:encoded><![CDATA[Take a simple equation such as y = 2x.  You can transform that into the equation 2x - y = 0, and then could write it as f(x,y) = 2x - y = 0.

Now we have some function of x and y that equals zero.  If we plug in numbers that are valid points in the original equation y = 2x (in other words, coordinates where y is double x), we'll get zero out as a result:

[code language="cpp"]
f(x,y) = 2x - y

f(1,2) = 2 * 1 - 2 = 0
f(2,4) = 2 * 2 - 4 = 0
f(0.5, 1.0) = 2 * 0.5 - 1.0 = 0
[/code]

If we plug numbers in that don't fit that pattern, we get non zero answers as a result:

[code language="cpp"]
f(x,y) = 2x - y

f(2,1) = 2 * 2 - 1 = 3
f(5,5) = 2 * 5 - 5 = 5
f(-10, 20) = 2 * -10 - 20 = -40
[/code]

What do these numbers mean?  Are they useful for anything?  As it turns out, they do have meaning and they are useful!  They are part of what is needed to calculate the distance from the point (x,y) to the closest point on the curve.  The other part of what we need is called the "gradient vector".

<h1>Tangent Vector & Gradient Vector</h1>

As you probably know, there is a tangent vector at every point on a curve (let's ignore things like asymptotes for now), and the tangent vector basically points from one point on the curve to the next point on the curve.  The tangent vector can also be seen as a slope of that point on the curve.

A gradient vector is another property of a point, but it is different than a tangent vector in a couple ways.  First off, it is perpendicular to the tangent vector, so sticks out away from the curve, and could be seen as a normal vector.  Secondly, every point in the graph has a gradient vector, even if that point isn't part of the curve and is just floating by itself in empty space.

The interesting part here is that a gradient vector of a point not on the curve will actually lead you straight to the closest point on the curve to the point.  This is because of a handy property where the line connecting a point to the closest point on the curve will be perpendicular to the curve (perpendicular to the tangent).

So, if we can calculate a gradient vector for a point, we have the vector that points towards the closest point on the curve.  Technically it might be pointing away from the closest point on the curve, instead of towards it but that gets cleared up in the math.

<h1>Calculating Gradient Vector</h1>

The gradient vector is just a partial derivative for each of the variables of the equation.  If you have no idea what I'm talking about, here are 2 options:

1) You can watch some videos and learn about it here: <a href="https://www.khanacademy.org/math/multivariable-calculus/partial_derivatives_topic" title="Khan Academy: Multivariable calculus" target="_blank">Khan Academy: Multivariable calculus</a>
2) You can have wolfram alpha calculate it for you, by typing "gradient" before the function.  Click this link to see what I mean: <a href="http://www.wolframalpha.com/input/?i=gradient+x%5E2-y" title="Wolfram Alpha: gradient x^2-y" target="_blank">Wolfram Alpha: gradient x^2-y</a>

Here are some example equations, along with their gradient vector, to make sure that you either understand what's going on, or are properly entering your equations into wolfram alpha.  Note that a gradient vector may not always be constant, in which case, it changes value for each point!  If it is constant, it's the same gradient vector across the entire graph space.

line:
f(x,y) = 2x - y
gradient(x,y) = (2, -1)

cubic function:
f(x,y) = x^3 - 10y
gradient(x,y) = (3x^2, -10)

sine:
f(x,y) = sin(x) - y
gradient(x,y) = (cos(x), -1)

circle:
f(x,y) = x^2 + y^2 - 5
gradient(x,y) = (2x, 2y)

<h1>Calculating Distance</h1>

Ok, so now that we have the value of our equation at some point (x,y) and we have the ability to find our gradient vector at that point, we have everything we need to calculate the distance from the point to the closest point on the curve.

All you need to do is divide the absolute value of the equation value at that point by the length of the gradient vector at that point.

<h2>Example 1 - Line</h2>

Let's start with something super simple... y = x, aka x - y = 0 aka f(x,y) = x - y.

the gradient of that function is (1, -1) at every point on the graph.  The magnitude of the gradient vector is the square root of 2.

What is the distance from the line to point P(2,0)?

Well.. the value of the equation at that point f(2,0) is 2, and the absolute value of that is still 2.

Next we divide that value by the magnitude of the gradient to get 2 / square root(2), which is just square root (2).  So, the distance is square root of 2. 

Since the value of the function at that point was positive before taking an absolute value, that means that the gradient points from the line to the point, so you can flip the gradient around to get (-1,1), and that is the direction that the closest point on the line is from the point P(2,0).  If we travel square root of 2 units from P(2,0) down the vector (-1,1) we will get to the point (1,1) which is on the graph.  That is the closest point on the graph to our point.

Note that it works out in this case, but usually the gradient vector won't be the right magnitude since it's not normalized.  It happened that in this case it is, by dumb luck, but it usually isn't.

<h2>Example 2 - Another Line</h2>

Let's try a more complex line.  y = 2x aka 2x - y = 0 aka f(x,y) = 2x - y.

the gradient of that function is (2, -1) with a magnitude of square root of 5 at all points on the graph.

What is the distance from that line to point P(1,5)?

Well, the value of the function at (1,5) is -3.  When you take the absolute value of that, it becomes 3.

So, the distance is 3 / square root (5).

In this case, since the value of the function at the point was negative before we took the absolute value, it means that the gradient points from the point to the graph, so the line y=2x is 3/square root(5) units of length away from the point P(1,5) and the direction to travel from the point to get to the line is the same direction as the gradient vector at that point aka (2,1).

<h2>Example 3 - Quadratic Function</h3>

For the last example lets do y=x^2 aka x^2 - y = 0 aka f(x,y) = x^2 - y.

The gradient of that function is (2x,-1) and since it isn't constant at all points, we can't get the magnitude of the gradient yet.

What is the distance from that function to point P(2,0)?

Well, the value of f(2,0) is 4, which is still 4 if you take the absolute value.

The gradient at P(2,0) is (4,-1) with a magnitude of square root of 5.

So, the distance from point P(2,0) to the curve f(x,y) = x^2 - y is 4/square root(5) and to get from the point to the curve you should travel that distance down the same direction as the vector (4,-1).

<h1>Caveat</h1>

Ok ok... the other shoe dropping here is that this distance calculation is only a distance ESTIMATE, and not always the right answer.

This is because if the gradient is a constant or linear function, it will be correct, but higher order gradients don't always follow straight lines from the point to the curve.

The good news though is that this estimation will be less than or equal to the actual distance.  Maybe not as useful as a for sure distance calculation, but an upper bound estimate still has it's uses (like in ray marching, or drawing vector graphics).

Basically, the straight line tells you the closest it could possibly be, but the actual gradient may take a longer, curving path, from the point to the curve.

<h1>More Info</h1>
Here's the article that got me started down this path, trying to find the answer to this question, while trying to understand the main topic:
<a href="http://iquilezles.org/www/articles/distance/distance.htm" target="_blank">IQ: Distance Estimation</a>

And here's a link that really helped me understand what a gradient was, and what it was all about:
<a href="http://betterexplained.com/articles/vector-calculus-understanding-the-gradient/" target="_blank">Vector Calculus: Understanding the Gradient</a>

Khan academy videos about these topics:
 <a href="https://www.khanacademy.org/math/multivariable-calculus/partial_derivatives_topic" title="Khan Academy: Multivariable calculus" target="_blank">Khan Academy: Multivariable calculus</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1090</wp:post_id>
		<wp:post_date><![CDATA[2014-08-10 21:52:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-11 05:52:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[what-if-my-equation-doesnt-equal-zero]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495394855;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1325;}i:1;a:1:{s:2:"id";i:5949;}i:2;a:1:{s:2:"id";i:6321;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Temporal supersampling, flipquads and real time raytracing</title>
		<link>http://blog.demofox.org/2014/08/11/temporal-supersampling-flipquads-and-real-time-raytracing/</link>
		<pubDate>Tue, 12 Aug 2014 06:38:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1127</guid>
		<description></description>
		<content:encoded><![CDATA[Follow me on this train of thought :P

1) There's this thing called super sampling where you render an image at a larger resolution, so that you can properly downsample it to the right size (the size of your screen for instance) to avoid aliasing problems.  The problem here is that you are rendering more pixels, so it is more expensive to render, which is usually a deal breaker for real time applications that are trying to push the envelope of performance - like modern games.

2) There's a way to get around this with something called Temporal Supersampling where you use the last frame rendered to provide extra information for the current frame, so that in a way, you get supersampled data by spreading it out over 2 frames. (More info on supersampling: <a href="http://bartwronski.com/2014/03/15/temporal-supersampling-and-antialiasing/" title="Temporal supersampling" target="_blank">Temporal supersampling</a>).  You get better results by jittering (offseting) the pixels you render from frame to frame, by a sub-pixel amount.  This is the usual monte carlo sampling kind of situation... find some cheap but well behaving pseudorandom number generator you can run in your pixel shader to offset each pixel by, or use a regular pattern of some sort that gives good enough results.

3) That gives you 2 samples if you only compost the last and current frame, but more samples is better of course.  You could keep more frames from the past around, but that takes up the precious resource of memory.  Apparently, when the hardware does MSAA (multisampling antialiasing), it has different configurations for different numbers of samples and it's configurable somehow.  If you have 2 samples, they may be 2 vertical dots, or 2 horizontal dots.  If you have 3 samples, it might look like a "3" on a domino.  If you have 5 samples it might look like a "5" on a domino.

<img src="https://demofox2.files.wordpress.com/2014/08/MSAAConfigs.png" alt="MSAAConfigs" width="303" height="75" class="aligncenter size-full wp-image-1130" />

4) Sometimes a corner will be sampled so that a sample can be shared across multiple pixels to increase efficiency.  There is this really interesting thing called "flipquads" that samples on an edge for that same reason.  You can see some info on here: <a href="http://fileadmin.cs.lth.se/cs/Personal/Tomas_Akenine-Moller/pubs/fliptri_tr.pdf" title="An Extremely Inexpensive Multisampling Scheme" target="_blank">An Extremely Inexpensive Multisampling Scheme</a>.  Basically, you only do two samples per pixel, sampling at 2 of the 4 sample locations on the edge of a pixel, so that the pixels that share the edge can use the results.  Effectively, you are doing 2 sample per pixel, but getting 4 samples per pixel due to sample sharing.

5) If you combine flipquads with temporal supersampling, it means that you get 4 samples for the cost of 2, amortized over 2 frames.  So, you essentially just render the normal amount of pixels (1 sample per pixel), compost frame N against frame N-1, and get the benefit of a 4 tap MSAA.  So, it's really cheap, and yes... it does actually help significantly, despite the fact that so many samples are redundant.

None of the above is anything new... I watched it all in various SIGGRAPH 2014 presentations earlier today from big name modern games - and man am i amazed what people are doing these days!

Now for the new part...

One way for raytracers to get better visual quality is to do multiple rays per sample, doing monte carlo sampling, where each of the rays in the group is perturbed by tiny amounts.  Some details here: <a href="http://web.cs.wpi.edu/~emmanuel/courses/cs563/S10/talks/wk3_p1_wadii_sampling_techniques.pdf" title="Advanced Topics in  Computer Graphics: Sampling Techniques" target="_blank">Advanced Topics in  Computer Graphics: Sampling Techniques</a>

In my own personal OpenCL real time raytracer, I don't have the luxury of doing multiple rays per pixel - and in fact, I have a graphics option that allows you to render only half the screen (top / bottom) each frame alternating, to cut the number of rays down so that it runs faster!

What if a person was able to do temporal supersampling with a realtime raytracer, using flipquads to make it so it could get the information of 4 rays per pixel, while only taking a single ray cast per pixel each frame?  Wouldn't that be something?

There are some technical details to work out but I think there is some real magic here waiting to happen.

The biggest technical problem I foresee is reprojecting the pixels from the last frame to the current frame.  This probably would work ok if your rays had a strict projection matrix governing them, but there may be difficulties with reflection and refraction, and honestly, I personally want to distort camera rays for game effects (like being underwater) so wouldn't want to be stuck with a strict projection matrix.  Maybe there's some clever solution to make it all ok though...

Also - the link to flipquads is actually an explanation of "fliptris" a technique using 1.25 samples per pixel.  If that were amortized across 2 frames, that means you would only need to cast 62% of your rays theoretically.  That might be a nice performance win, while gaining the benefits of temporal supersampling and ultimately having 3 samples for each pixel!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1127</wp:post_id>
		<wp:post_date><![CDATA[2014-08-11 22:38:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-12 06:38:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[temporal-supersampling-flipquads-and-real-time-raytracing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:32:"0e8f2fc5cdaf327c8da6ec0c63e770f6";a:2:{s:7:"expires";i:1494899014;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2405;}i:1;a:1:{s:2:"id";i:2370;}i:2;a:1:{s:2:"id";i:2391;}}}s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494910751;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2405;}i:1;a:1:{s:2:"id";i:2370;}i:2;a:1:{s:2:"id";i:2391;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wang Tiling</title>
		<link>http://blog.demofox.org/2014/08/13/wang-tiling/</link>
		<pubDate>Thu, 14 Aug 2014 06:41:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1148</guid>
		<description></description>
		<content:encoded><![CDATA[Wang tiling is a really cool concept... it's a good way to use 2d tiled graphics in such a way that can look very organic, without discernable patterns.

The basic idea of how they work is that each tile has a type of edge.  You start by placing a random tile, and then you start putting down it's neighboring tiles.  When you place a tile, the rule is you can only put down a tile that has compatible edge types (aka the tiles can go together seamlessly).  Rinse and repeat and pretty soon you have tile based graphics that don't look tiled at all.

Specifically here is a strategy I like to use for filling a grid with wang tiles:
<ol>
	<li>Place any random tile in the upper left corner</li>
	<li>Put a tile below it that has an edge on it's top that is compatible with the already placed tile's bottom edge</li>
	<li>Continue placing tiles downward until you reach the bottom of the column</li>
	<li>Now, move back to the top, move over to the next column, and now place a tile such that the left edge is compatible with the right edge of the tile it is next to.</li>
	<li>Moving down, you now have to find a tile which is compatible with both the tile above it, and the tile to the left.  Since there are going to be multiple tiles that fit these constraints, just choose randomly from the ones that do.</li>
	<li>Rinse and repeat until the grid is filled</li>
</ol>

There is a lot more info out there (links at bottom of post) so I'll leave it at that and show you some results I got with some simple tiles.

The tiles I used are very geometric, but if you have more organic looking tiles, the resulting tile grid will look a lot more organic as well.

Also, as the links at the bottom will tell you, if you have wang tiles where each axis has only 2 edge types, even though the number of permutations of tiles in that situation is 16 (XVariation^2 * YVariation^2), you can actually get away with just using 8 tiles (XVariation * YVariation * 2).  In my example below I had to use all 16 though because I'm just generating edge types in a pixel shader without deeply analyzing neighboring tiles, and it would be a lot more complex to limit my generation to just the 8 tiles.  If you can think of a nice way to generate a wang tile grid using only the 8 tiles though, please let me know!

The 16 wang tiles used:
<a href="https://demofox2.files.wordpress.com/2014/08/WTTiles.png"><img src="https://demofox2.files.wordpress.com/2014/08/WTTiles.png" alt="WTTiles" width="1024" height="576" class="aligncenter size-full wp-image-1150" /></a>

A resulting grid:
<a href="https://demofox2.files.wordpress.com/2014/08/WTGrid.png"><img src="https://demofox2.files.wordpress.com/2014/08/WTGrid.png" alt="WTGrid" width="1024" height="576" class="aligncenter size-full wp-image-1151" /></a>

Here's a more complex set of 16 wang tiles:
<a href="https://demofox2.files.wordpress.com/2014/08/Wang2Tiles.png"><img src="https://demofox2.files.wordpress.com/2014/08/Wang2Tiles.png" alt="Wang2Tiles" width="1024" height="576" class="aligncenter size-full wp-image-1169" /></a>

And a resulting grid:
<a href="https://demofox2.files.wordpress.com/2014/08/Wang2Grid.png"><img src="https://demofox2.files.wordpress.com/2014/08/Wang2Grid.png" alt="Wang2Grid" width="1024" height="576" class="aligncenter size-full wp-image-1170" /></a>

<h1>Links For More Info</h1>

<a href="https://www.shadertoy.com/view/MssSWs" title="ShaderToy: Wang Tiling" target="_blank">ShaderToy: Wang Tiling</a>
<a href="https://www.shadertoy.com/view/XsSXzR" title="ShaderToy: Wang Tiling" target="_blank">ShaderToy: Circuit Board</a>

<a href="https://pdfs.semanticscholar.org/8d96/c38065ddee67daac5390cf65486648b970f8.pdf" target="_blank">Wang Tiling Research Paper</a>

<a href="http://procworld.blogspot.ca/2013/01/introduction-to-wang-tiles.html" title="Introduction to Wang Tiles" target="_blank">Introduction to Wang Tiles</a>

By the way... something really crazy about wang tiles is that apparently they can be used to do computation and they are turing complete.  Seriously? Yes! Check out the link below:

<a href="https://moyix.wordpress.com/2012/04/06/computing-with-tiles/">Computing with Tiles</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1148</wp:post_id>
		<wp:post_date><![CDATA[2014-08-13 22:41:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-14 06:41:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wang-tiling]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495523415;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4149;}i:1;a:1:{s:2:"id";i:2;}i:2;a:1:{s:2:"id";i:3986;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Counting in Binary is a Fractal</title>
		<link>http://blog.demofox.org/2014/08/14/counting-in-binary-is-a-fractal/</link>
		<pubDate>Fri, 15 Aug 2014 01:27:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1160</guid>
		<description></description>
		<content:encoded><![CDATA[I can't remember for sure but I think I read about this first in <a href="http://www.amazon.com/New-Kind-Science-Stephen-Wolfram/dp/1579550088" title="A New Kind Of Science" target="_blank">A New Kind Of Science</a> by Stephen Wolfram (yes, the same guy who made Wolfram Alpha!).  Counting in binary is actually a fractal, check out these 4 sequential images...

<a href="https://demofox2.files.wordpress.com/2014/08/BinaryFractal1.png"><img src="https://demofox2.files.wordpress.com/2014/08/BinaryFractal1.png" alt="BinaryFractal1" width="1024" height="160" class="aligncenter size-full wp-image-1162" /></a>

<a href="https://demofox2.files.wordpress.com/2014/08/BinaryFractal2.png"><img src="https://demofox2.files.wordpress.com/2014/08/BinaryFractal2.png" alt="BinaryFractal2" width="1024" height="160" class="aligncenter size-full wp-image-1163" /></a>

<a href="https://demofox2.files.wordpress.com/2014/08/BinaryFractal3.png"><img src="https://demofox2.files.wordpress.com/2014/08/BinaryFractal3.png" alt="BinaryFractal3" width="1024" height="160" class="aligncenter size-full wp-image-1164" /></a>

<a href="https://demofox2.files.wordpress.com/2014/08/BinaryFractal4.png"><img src="https://demofox2.files.wordpress.com/2014/08/BinaryFractal4.png" alt="BinaryFractal4" width="1024" height="160" class="aligncenter size-full wp-image-1165" /></a>

<h1>Real Time Demo</h1>
To see it in action, check out this WebGL shadertoy:
<a href="https://www.shadertoy.com/view/lssXDs" title="Shadertoy: 1, 2, 3 fractal" target="_blank">Shadertoy: 1, 2, 3 fractal</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1160</wp:post_id>
		<wp:post_date><![CDATA[2014-08-14 17:27:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-15 01:27:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[counting-in-binary-is-a-fractal]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="fractals"><![CDATA[Fractals]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494675184;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1205;}i:1;a:1:{s:2:"id";i:4038;}i:2;a:1:{s:2:"id";i:69;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>One Dimensional Bezier Curves</title>
		<link>http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/</link>
		<pubDate>Thu, 28 Aug 2014 19:46:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1176</guid>
		<description></description>
		<content:encoded><![CDATA[I was recently looking at the formula for bezier curves:

Quadratic Bezier curve:
A * (1-T)^2 + B * 2 * (1-T) * T + C * T ^2

Cubic Bezier curve:
A*(1-T)^3+3*B*(1-T)^2*T+3*C*(1-T)*T^2+D*T^3

(more info available at <a href="http://blog.demofox.org/2014/03/22/bezier-curves-part-2-and-bezier-surfaces/" title="Bezier Curves Part 2 (and Bezier Surfaces)">Bezier Curves Part 2 (and Bezier Surfaces)</a>)

And I wondered... since you can have a Bezier curve in any dimension, what would happen if you made the control points (A,B,C,D) scalar?  In other words, what would happen if you made bezier curves 1 dimensional?

Well it turns out something pretty interesting happens.  If you replace T with x, you end up with f(x) functions, like the below:

Quadratic Bezier curve:
y = A * (1-x)^2 + B * 2 * (1-x) * x + C * x ^2

Cubic Bezier curve:
y = A*(1-x)^3+3*B*(1-x)^2*x+3*C*(1-x)*x^2+D*x^3

What makes that so interesting is that most math operations you may want to do on a bezier curve are a lot easier using y=f(x), instead of the parameterized formula Point = F(S,T).

For instance, try to calculate where a line segment intersects with a parameterized bezier curve, and then try it again with a quadratic equation.  Or, try calculating the indefinite integral of the parameterized curve so that you can find the area underneath it (like, for <a href="http://blog.demofox.org/2014/06/22/analytic-fog-density/" title="Analytic Fog Density">Analytic Fog Density</a>).  Or, try to even find the given Y location that the curve has for a specific X value.  These things are pretty difficult with a parameterized function, but a lot easier with the y=f(x) style function.

This ease of use does come at a price though.  Specifically, you can't move control points freely, you can only move them up and down and cannot move them left and right.  If you are ok with that trade off, these 1 dimensional curves can be pretty powerful.

Below is an image of a 1 dimensional cubic bezier curve that has control points A = 0.5 B = 0.25 C = 0.75 D = 0.5.  The function of this curve is  y = 0.5 * (1-x)^3 + 0.25 * 3x(1-x)^2 + 0.75 * 3x^2(1-x) + 0.5 * x^3.

You can ask google to graph that for you to see that it is in fact the same: <a href="https://www.google.com/#q=graph+y+%3D+0.5+*+(1-x)%5E3+%2B+0.25+*+3x(1-x)%5E2+%2B+0.75+*+3x%5E2(1-x)+%2B+0.5+*+x%5E3" title="Google: graph y = 0.5 * (1-x)^3 + 0.25 * 3x(1-x)^2 + 0.75 * 3x^2(1-x) + 0.5 * x^3" target="_blank">Google: graph y = 0.5 * (1-x)^3 + 0.25 * 3x(1-x)^2 + 0.75 * 3x^2(1-x) + 0.5 * x^3</a><br><br>
<a href="https://demofox2.files.wordpress.com/2014/08/cubicbez.png"><img src="https://demofox2.files.wordpress.com/2014/08/cubicbez.png" alt="cubicbez" width="804" height="805" class="aligncenter size-full wp-image-1186" /></a>

Another benefit to these one dimensional bezier curves is that you could kind of use them as a "curve fitting" method.  If you have some data that you wanted to approximate with a quadratic function, you could adjust the control points of a one dimensional quadratic Bezier curve to match your data set.  If you need more control points to get a better aproximation of the data, you can just increase the degree of the bezier curve (check this out for more info on how to do that: <a href="http://blog.demofox.org/2014/03/22/bezier-curves-part-2-and-bezier-surfaces/" title="Bezier Curves Part 2 (and Bezier Surfaces)">Bezier Curves Part 2 (and Bezier Surfaces)</a>).

<h1>Smoothstep as a Cubic 1d Bezier Curve</h1>

BIG THANKS to CeeJay.dk for telling me about this, this is pretty rad.

It's kind of out of the scope of this post to talk about why smoothstep is awesome, but to give you strong evidence that it is, it's a GLSL built in function.  You may have also seen it used in the post I made about distance fields (<a href="http://blog.demofox.org/2014/06/30/distance-field-textures/" title="Distance Field Textures">Distance Field Textures</a>), because one of it's common uses is to make the edges of things look smoother.  Here's a wikipedia page on it as well if you want more info: <a href="http://en.wikipedia.org/wiki/Smoothstep" title="Wikipedia: Smoothstep" target="_blank">Wikipedia: Smoothstep</a>

Anyhow, I had no idea, but apparently the smoothstep equation is the same as if you take a 1d cubic bezier curve and make the first two control points 0.0, and the second two control points 1.0.

The equation for smoothstep is: y = 3*x^2 - 2*x^3

The equation for the bezier curve i mentioned is: y = 0*(1-x)^3+3*0*(1-x)^2*x+3*1*(1-x)*x^2+1*x^3

otherwise known as: y = 3*1*(1-x)*x^2+1*x^3

If you work it out, those are the same equations!  Wolfram alpha can verify that for us even: <a href="http://www.wolframalpha.com/input/?i=does+3*x%5E2+-+2*x%5E3+%3D+3*1*%281-x%29*x%5E2%2B1*x%5E3" title="Wolfram Alpha: does 3*x^2 - 2*x^3 = 3*1*(1-x)*x^2+1*x^3" target="_blank">Wolfram Alpha: does 3*x^2 - 2*x^3 = 3*1*(1-x)*x^2+1*x^3</a>.

Kinda neat :P

<h1>Moving Control Points on the X Axis</h1>
There's a way you could fake moving control points on the X axis (left and right) if you really needed to.  What I'm thinking is basically that you could scale X before you plug it into the equation. 

For instance, if you moved the last control point to the left so that it was at 0.9 instead of 1.0, the space between the 3rd and 4th control point is now .23 instead of .33 on the x axis.  You could simulate that by having some code like this:

[code language="cpp"]
if (x > 0.66)
  x = 0.66 + (x - 0.66) / 0.33 * 0.23
[/code]

Basically, we are squishing the X values that are between 0.66 and 1.0 into 0.66 to 0.9.  This is the x value we want to use, but we'd still plug the raw, unscaled x value into the function to get the y value for that x.

As another example, let's say you moved the 3rd control point left from 0.66 to 0.5.  In this situation, you would squish the X values that were between 0.33 and 0.66 into 0.33 to 0.5.  HOWEVER, you would also need to EXPAND the values that were between 0.66 and 1.0 to be from 0.5 and 1.0.  Since you only moved the 3rd control point left, you'd have to squish the section to the left of the control point, and expand the section to the right to make up the difference to keep the 4th control point in the same place.  The code for converting X values is a little more complex, but not too bad.

What happens if you move the first control point left or right?  Well, basically you have to expand or squish the first section, but you also need to add or subtract an offset for the x as well.

I'll leave the last 2 conversions as an exercise for whoever might want to give this a shot :P

Another complication that comes up with the above is, what if you tried to move the 3rd control point to the left, past the 2nd control point?  Here are a couple ways I can think of off hand to deal with it, but there are probably other ways too, and the right way to deal with it depends on your needs.
<ol>
	<li>Don't let them do it - If a control point tries to move past another control point, just prevent it from happening</li>
	<li>Switch the control points - If you move control point 3 to the left past control point 2, secretly have them start controling control point 2 as they drag it left.  As far as the user is concerned, it's doing what they want, but as far as we are concerned, the control points never actually crossed</li>
	<li>Move both - if you move control point 3 to the left past control point 2, take control point 2 along for the ride, keeping it to the left of control point 3</li>
</ol>

When allowing this fake x axis movement, it does complicate the math a bit, which might bite you depending on what you are doing with the curve.  Intersecting a line segment with it for example is going to be more complex.

An alternative to this would be letting the control points move on the X axis by letting a user control a curve that controls the X axis location of the control points - hopefully this would happen behind the scenes and they would just move points in X & Y, not directly editing the curve that controls X position of control points.  This is a step towards making the math simpler again, by modifying the bezier curve function, instead of requiring if statements and loops, but as far as all the possibly functions I can think of, moving one control point on the X axis is probably going to move other control points around.  Also, it will probably change the shape of the graph.  It might change in a reasonable way, or it might be totally unreasonable and not be a viable alternative.  I'm not really sure, but maybe someday I'll play around with it - or if you do, please post a comment back and let us know how it went for you!

<h1>Links</h1>
Here are some links to experiment with these guys and see them in action:
<a href="http://www.demofox.org/bezquad1d.html" title="HTML5 Interactive 1D Quadratic Bezier Demo" target="_blank">HTML5 Interactive 1D Quadratic Bezier Demo</a>
<a href="http://www.demofox.org/bezcubic1d.html" title="HTML5 Interactive 1D Cubic Bezier Demo" target="_blank">HTML5 Interactive 1D Cubic Bezier Demo</a>
<a href="https://www.shadertoy.com/view/Xd2SR1" title="Shadertoy: Interactive 1D Quadratic Bezier Demo" target="_blank">Shadertoy: Interactive 1D Quadratic Bezier Demo</a>
<a href="https://www.shadertoy.com/view/Xd2Xz1" title="Shadertoy: Interactive 1D Cubic Bezier Demo" target="_blank">Shadertoy: Interactive 1D Cubic Bezier Demo</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1176</wp:post_id>
		<wp:post_date><![CDATA[2014-08-28 11:46:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-28 19:46:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[one-dimensional-bezier-curves]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:32:"7a0b08593409e373eea80587c5e731ff";a:2:{s:7:"expires";i:1495660652;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:928;}i:1;a:1:{s:2:"id";i:5413;}i:2;a:1:{s:2:"id";i:2661;}}}s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495700835;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:928;}i:1;a:1:{s:2:"id";i:5413;}i:2;a:1:{s:2:"id";i:2661;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>841</wp:comment_id>
			<wp:comment_author><![CDATA[Bezier Curves Part 2 (and Bezier Surfaces) | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2014/03/22/bezier-curves-part-2-and-bezier-surfaces/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-09-22 09:30:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-09-22 17:30:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] For more bezier fun check out my next Bezier post: One Dimensional Bezier Curves. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>846</wp:comment_id>
			<wp:comment_author><![CDATA[Four Ways to Calculate Sine Without Trig | The blog at the bottom of the sea]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://blog.demofox.org/2014/11/04/four-ways-to-calculate-sine-without-trig/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.208.41.185]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-04 12:55:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-04 20:55:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] &larr; One Dimensional Bezier Curves [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Four Ways to Calculate Sine Without Trig</title>
		<link>http://blog.demofox.org/2014/11/04/four-ways-to-calculate-sine-without-trig/</link>
		<pubDate>Tue, 04 Nov 2014 20:55:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1205</guid>
		<description></description>
		<content:encoded><![CDATA[Is it possible to sin without trig?  That is a question that has plagued theologians for centuries.  As evil as trigonometry is, modern science shows us that yes, it is possible to sin without trig.  Here are some ways that I've come across.

<h1>1 - Slope Iteration Method</h1>

<img src="https://demofox2.files.wordpress.com/2014/11/sin1_1024.png"/>
<b><i>The above image uses 1024 samples from 0 to 2pi to aproximate sine iteratively using it's slope.  Red is true sin, green is the aproximation, and yellow is where they overlap.</i></b>

This method comes from Game Programming Gems 8, which you can snag a copy of from amazon below if you are interested.  It's mentioned in chapter 6.1 A Practical DSP Radio Effect (which is a really cool read btw!).
<a href="http://www.amazon.com/Game-Programming-Gems-Adam-Lake/dp/1584507020">Amazon: Game Programming Gems 8</a>

This method uses calculus but is actually pretty straightforward and intuitive - and very surprising to me that it works so well!

The derivative of sin(x) is cos(x).  That means, for any x you plug into sin, the slope of the function at that point is the cosine value of that same x.

In other words, sin(0) is 0, but it has a slope of cos(0) which is 1.  Since slope is rise over run (change in y / change in x) that means that at sin(0), if you take an infinitely small step forward on x, you need to take the same sized step on y.  That will get you to the next value of sine.

Let's test that out!
sin(0) = 0 so we start at (0,0) on the graph.

If we try a step size of 0.1, our approximation is:
sin(0.1) = 0.1 

The actual value according to google is 0.09983341664.  so our error was about 0.0002.  That is actually pretty close!

How about 0.25?
sin(0.25) = 0.25

The real value is 0.24740395925, so our error is about 0.003.  We have about 10 times the error that we did at 0.1.

what if we try it with 0.5?
sin(0.5) = 0.5

The actual value is 0.4794255386, which leaves us with an error of about 0.02.  Our error is 100 times as much as it was at 0.1.  As you can see, the error increases as our step size gets larger.

If we wanted to, we could get the slope (cosine value) at the new x value and take another step.  we could continue doing this to get our sine approximation, knowing that the smaller the step that we use, the more accurate our sine approximation would be.

We haven't actually won anything at this point though, because we are just using cosine to take approximated steps through sine values.  We are paying the cost of calculating cosine, so we might as well just calculate sine directly instead.

Well luckily, cosine has a similar relationship with sine; the derivative of cos(x) is -sin(x).

Now, we can use cosine values to step through sine values, and use those same sine values to step through cosine values.

Since we know that cos(0) = 1.0 and sin(0) = 0.0, we can start at an angle of 0 with those values and we can iteratively step through the values.

Here is a sample function in C++
[code language="cpp"]
// theta is the angle we want the sine value of.
// higher resolution means smaller step size AKA more accuracy but higher computational cost.
// I used a resolution value of 1024 in the image at the top of this section.
float SineApproximation (float theta, float resolution)
{
    // calculate the stepDelta for our angle.
    // resolution is the number of samples we calculate from 0 to 2pi radians
    const float TwoPi = 6.28318530718f;
    const float stepDelta = (TwoPi / resolution);

    // initialize our starting values
    float angle = 0.0;
    float vcos = 1.0;
    float vsin = 0.0;

    // while we are less than our desired angle
    while(angle &lt; theta) {

        // calculate our step size on the y axis for our step size on the x axis.
        float vcosscaled = vcos * stepDelta;
        float vsinscaled = vsin * stepDelta;

        // take a step on the x axis
        angle += stepDelta;

        // take a step on the y axis
        vsin += vcosscaled;
        vcos -= vsinscaled;
    }

    // return the value we calculated
    return vsin;
}
[/code]

Note that the higher the angle you use, the more the error rate accumulates.  One way to help this would be to make sure that theta was between 0 and 2pi, or you could even just calculate between 0 and pi/2 and mirror / reflect the values for the other quadrants.

This function is quite a bit of work to calculate a single value of sine but it's real power comes in the fact that it's iterative.  If you ever find yourself in a situation where you need progressive values of sine, and have some fixed angle step size through the sine values, this algorithm just needs to do a couple multiplies and adds to get to the next value of sine.

One great use of this could be in DSP / audio synthesis, for sine wave generation.  Another good use could be in efficiently evaluating trigonometry based splines (a future topic I plan to make a post about!).

You can see this in action in this shadertoy or look below at the screenshots:
<a href="https://www.shadertoy.com/view/4dBSzt">Shadertoy: Sin without Trig</a>

<b><i>64 Samples - Red is true sine, green is our approximation, and yellow is where they are the same</i></b>
<img src="https://demofox2.files.wordpress.com/2014/11/sin1_64.png"/>

<b><i>128 Samples</i></b>
<img src="https://demofox2.files.wordpress.com/2014/11/sin1_128.png"/>

<b><i>256 Samples</i></b>
<img src="https://demofox2.files.wordpress.com/2014/11/sin1_256.png"/>

<b><i>1024 Samples</i></b>
<img src="https://demofox2.files.wordpress.com/2014/11/sin1_1024.png"/>

<h1>2 - Taylor Series Method</h1>

Another way to calculate sine is by using an infinite Taylor series.  Thanks to my friend Yuval for showing me this method.

You can get the Taylor series for sine by typing "series sin(x)" into wolfram alpha.  You can see that here: <a href="http://www.wolframalpha.com/input/?i=series+sin%28x%29" target="_blank">Wolfram Alpha: series sin(x)</a>.

Wolfram alpha says the series is: x-x^3/6+x^5/120-x^7/5040+x^9/362880-x^11/39916800 ....

what this means is that if you plug a value in for x, you will get an approximation of sine for that x value.  It's an infinite series, but you can do as few or as many terms as you want to be able to trade off speed for accuracy.

For instance check out these graphs.

<i><b><a href="https://www.google.com/search?q=graph+y+%3D+x%2C+y+%3D+sin(x)" target="_blank">Google: graph y = x, y = sin(x)</a></b></i>
<img src="https://demofox2.files.wordpress.com/2014/11/Sin2_1.png"/>

<i><b><a href="https://www.google.com/search?q=graph+y+%3D+x-x%5E3%2F6%2C+y+%3D+sin(x)" target="_blank">Google: graph y = x-x^3/6, y = sin(x)</a></b></i>
<img src="https://demofox2.files.wordpress.com/2014/11/Sin2_2.png"/>

<i><b><a href="https://www.google.com/search?q=graph+y+%3D+x-x%5E3%2F6%2Bx%5E5%2F120%2C+y+%3D+sin(x)" target="_blank">Google: graph y = x-x^3/6+x^5/120, y = sin(x)</a></b></i>
<img src="https://demofox2.files.wordpress.com/2014/11/Sin2_3.png"/>

<i><b><a href="https://www.google.com/search?q=graph+y+%3D+x-x%5E3%2F6%2Bx%5E5%2F120-x%5E7%2F5040%2C+y+%3D+sin(x)" target="_blank">Google: graph y = x-x^3/6+x^5/120-x^7/5040, y = sin(x)</a></b></i>
<img src="https://demofox2.files.wordpress.com/2014/11/Sin2_4.png"/>

<i><b><a href="https://www.google.com/search?q=graph+y+%3D+x-x%5E3%2F6%2Bx%5E5%2F120-x%5E7%2F5040%2Bx%5E9%2F362880%2C+y+%3D+sin(x)" target="_blank">Google: graph y = x-x^3/6+x^5/120-x^7/5040+x^9/362880, y = sin(x)</a></b></i>
<img src="https://demofox2.files.wordpress.com/2014/11/Sin2_5.png"/>

<i><b><a href="https://www.google.com/search?q=graph%20y%20%3D%20x-x%5E3%2F6%2Bx%5E5%2F120-x%5E7%2F5040%2Bx%5E9%2F362880-x%5E11%2F39916800%2C%20y%20%3D%20sin(x)" target="_blank">Google: graph y = x-x^3/6+x^5/120-x^7/5040+x^9/362880-x^11/39916800, y = sin(x)</a><br>
(Note that I had to zoom out a bit to show where it became inaccurate)</b></i>
<img src="https://demofox2.files.wordpress.com/2014/11/Sin2_6.png"/>

When looking at these graphs, you'll probably notice that very early on, the approximation is pretty good between -Pi/2 and + Pi/2.  I leveraged that by only using those values (with modulus) and mirroring them to be able to get a sine value of any angle with more accuracy.

When using just x-x^3/6, there was an obvious problem at the top and bottom of the sine waves:
<img src="https://demofox2.files.wordpress.com/2014/11/Sin2_8.png"/>

When i boosted the equation with another term, bringing it to x-x^3/6+x^5/120, my sine approximation was much better:
<img src="https://demofox2.files.wordpress.com/2014/11/Sin2_7.png"/>

You can see this method in action in this shadertoy:
<a href="https://www.shadertoy.com/view/MdBSRt">Shadertoy: Sin without Trig II</a>

<h1>3 - Smoothstep Method</h1>

The third method may be my favorite, due to it's sheer elegance and simplicity.  Thanks to P_Malin on shadertoy.com for sharing this one with me.

There's a function in graphics called "smoothstep" that is used to take the hard linear edge off of things, and give it a smoother, more organic feel. You can read more about it here: <a href="http://en.wikipedia.org/wiki/Smoothstep" target="_blank">Wikipedia: Smoothstep</a>.

BTW if you haven't read the last post, I talk about how smooth step is really just a 1d bezier curve with specific control points (<a href="http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/">One Dimensional Bezier Curves</a>).  Also, smoothstep is just this function: y = (3x^2 - 2x^3).

Anyhow, if you have a triangle wave that has values from 0 to 1 on the y axis, and put it through a smoothstep, then scale it to -1 to +1 on the y axis, you get a pretty darn good sine approximation out.  

Here is a step by step recipe:

<b><i>Step 1 - Make a triangle wave that has values on the y axis from 0 to 1</i></b>
<img src="https://demofox2.files.wordpress.com/2014/11/Sine3_1.png"/>

<b><i>Step 2 - Put that triangle wave through smoothstep (3x^2 - 2x^3)</i></b>
<img src="https://demofox2.files.wordpress.com/2014/11/Sine3_2.png"/>

<b><i>Step 3 - Scale the result to having values from -1 to +1 on the axis.</i></b>
<img src="https://demofox2.files.wordpress.com/2014/11/Sine3_3.png"/>

That is pretty good isn't it?

You can see this in action in this shadertoy (thanks to shadertoy's Dave_Hoskins for some help with improving the code):
<a href="https://www.shadertoy.com/view/lsBSRt">Shadertoy: Sin without Trig III</a>

After I made that shadertoy, IQ, the creator of shadertoy who is an amazing programmer and an impressive "demoscene" guy, said that he experimented with removing the error from that technique to try to get a better sin/cos aproximation.

You can see that here: <a href="https://www.shadertoy.com/view/XsjXzt" target="_blank">Shadertoy: Sincos approximation</a>

Also, I recommend checking out IQ's website.  He has a lot of interesting topics on there: <a href="http://www.iquilezles.org/" target="_blank">IQ's Website</a>

<h1>4 - CORDIC Mathematics</h1>

This fourth way is a method that cheaper calculators use to calculate trig functions, and other things as well.

I haven't taken a whole lot of time to understand the details, but it looks like it's using imaginary numbers to rotate vectors iteratively, doing a binary search across the search space to find the desired values.

The benefit of this technique is that it can be implemented with VERY little hardware support.

<b><i>The number of logic gates for the implementation of a CORDIC is roughly comparable to the number required for a multiplier as both require combinations of shifts and additions.</i></b>
<a href="http://en.wikipedia.org/wiki/CORDIC">Wikipedia: Coordinate Rotation Digital Computer</a>

<h1>Did I miss any?</h1>

If you know of something that I've left out, post a comment, I'd love to hear about it!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1205</wp:post_id>
		<wp:post_date><![CDATA[2014-11-04 12:55:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-04 20:55:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[four-ways-to-calculate-sine-without-trig]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3c7175888cf987a869373202fccdee87]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495708901;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4138;}i:1;a:1:{s:2:"id";i:2547;}i:2;a:1:{s:2:"id";i:1325;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Imaginary Numbers To Rotate 2D Vectors</title>
		<link>http://blog.demofox.org/2014/12/27/using-imaginary-numbers-to-rotate-2d-vectors/</link>
		<pubDate>Sun, 28 Dec 2014 05:57:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1272</guid>
		<description></description>
		<content:encoded><![CDATA[I'm a big fan of "exotic" math and programming techniques.  There's nothing I like more than seeing something common used in an uncommon way to do something that I didn't know was possible.

In this post I share a technique that lets you use imaginary numbers (complex numbers more specifically) to be able to rotate vectors in 2d.  This technique is so simple that you can even use it to rotate vectors by hand on paper!

<h2>Quick Review: Imaginary and Complex Numbers</h2>

The imaginary number "i" is the square root of -1.  Without using i, you can't take the square root of a negative number because if the answer is negative, multiplying a negative by a negative is positive, and if the answer is a positive, multiplying a positive by a positive is still a positive.

But, using i, you CAN take the square root of negative numbers.

The square root of 25 is 5.

The square root of -25 is 5*i, or just 5i, which means "5 times the square root of -1".

You can combine a real and imaginary number into something called a complex number like this: 3 + 5i

<h2>Quick Review: Multiplying Complex Numbers</h2>

We'll need to be able to multiply complex numbers together to do our rotations.

(3+5i)*(2+3i) = ???

Luckily, multiplying complex numbers together is as simple as using F.O.I.L. if you remember that from high school math class, it stands for First, Outer, Inner, Last.

Using that, we can multiply and then combine term, remembering that i^2 is -1:

(3+5i)*(2+3i) =
6 + 9i + 10i + 15i^2 =
6 + 19i + 15i^2 =
6 + 19i - 15 =
-9 + 19i

There we go, that's all there is to multiplying complex numbers together!

<h2>Getting Down To Business: Rotating</h2>

Let's say that we want to rotate the vector (0,1) by the angle of the vector (1,1).  To do that, we just convert the vectors to complex numbers, using the x axis as the real number component, and the y axis as the imaginary number component, then multiply them, and convert back to vectors.

That's a mouth full, so here it is, step by step.

<b>1) Convert Vectors to Complex Numbers</b>

(0,1) = 0 + 1i = i
(1,1) = 1 + 1i = 1 + i

<b>2) Multiply the Complex Numbers</b>

i * (1 + i) =
i + i^2 =
i - 1 =
-1 + i

In the above we change i - 1 to -1 + i to make the next step easier.  The real component of the complex number is the X axis and the imaginary component is the Y axis.

<b>3) Convert from Complex Number to Vector</b>

-1 + i =
-1 + 1i =
(-1, 1)

The diagram below shows this operation:
<img src="https://demofox2.files.wordpress.com/2014/12/ImRot1.gif"/>

As you can see we rotated the purple vector (0,1) which has an angle of 90 degrees and length of 1, by the blue vector (1,1) which has an angle of 45 degrees and a length of sqrt(2), and as a result we got the tan vector (-1,1) which has an angle of 135 degrees and a length of sqrt(2).  So, we essentially rotated the 90 degree angle by the 45 degree angle and ended up with a 135 degree angle.

Note that order of operations doesn't matter, you could rotate the 90 degree angle by 45 degrees, or you could rotate the 45 degree angle by 90 degrees, either way you are going to end up with 135 degrees.

A caveat with this technique though is that when you do the rotation, the resulting vector's length will be the the product of the two source vectors used; you won't get a normalized vector out as a result unless your source vectors are normalized, or you normalize after you are done with your operations.

As another example, let's rotate the vector (4,3) by the vector (-12,5).

The first step is to convert them to complex numbers:
(4,3) = 4 + 3i
(-12,5) = -12 + 5i

Then we multiply them:
(4 + 3i) * (-12 + 5i) =
-48 + 20i - 36i + 15i^2 =
-48 - 16i - 15 =
-63 - 16i

Then convert back to a vector to get: (-63, -16)

<img src="https://demofox2.files.wordpress.com/2014/12/ImRot2.gif"/>

In the image, you can see that we started with the blue vector (4,3) which is about 37 degrees and has a length of 5.

We rotated that vector by the purple vector (-12,5) which is about 157 degrees and has a length of 13.

That gave us the tan vector of (-63, -16) which is about 194 degrees and has a length of 65.

The resulting vector has the rotations added, and the lengths multiplied together.

<h2>Unrotating</h2>

If we multiply the complex numbers together to add rotations, does that mean that we divide the complex numbers to subtract rotations?  Sort of...

If you want to subtract a rotation, you multiply the imaginary part of the vector you want to subtract by -1 (or just flip the sign) and then multiply as normal.

When you flip the sign of the imaginary part, this is actually called the "complex conjugate" but if that term scares you, feel free to ignore it :P

As an example of unrotation, let's take the vector (5,1) and subtract the vector (2,2) from it to see what we get.

The first step is to convert them into complex numbers.
(5,1) = 5 + i
(2,2) = 2 + 2i

Next up, we are going to flip the imaginary part of the vector we want to subtract.
2 + 2i becomes 2 - 2i

Then, we multiply as per normal:
(5 + i) * (2 - 2i) =
10 - 10i + 2i - 2i^2 =
10 - 8i + 2 =
12 - 8i

Finally, we convert back to a vector to get (12, -8).

<img src="https://demofox2.files.wordpress.com/2014/12/ImRot3.gif"/>

In the image above, we started with the blue vector (5,1) which is about 11 degrees and has a length of sqrt(26).

We then unrotated by the purple vector (2,2) which is 45 degrees and has a length of sqrt(8).

That gave us the tan vector as a result (12,-8) which is about -34 degrees and has a length of sqrt(208).

Our resulting vector is the result of the second vector's angle subtracted from the first vector's angle, but the length of the vectors are still multiplied together, not divided.

<h2>Unrotating to Get Vector Length</h2>

As a fun aside, if you unrotate a vector by itself, the result will be that the imaginary components (the Y component) will disappear, and in the result, the real component (the x component) will be the squared length of the vector.

It's easy enough to calculate the squared length of a vector by adding x^2 and y^2 but this is an interesting property.

In fact, in the last post I mentioned CORDIC math using imaginary numbers to rotate vectors to try and find sine, cosine, etc.  This is related to how it does that work.  It basically rotates or unrotates a vector by smaller and smaller angles iteratively, based on the sign of the y (imaginary) component to try and get y to zero, which leaves the answer in the x component.  It also has some other magic sprinkled in to where it only has to deal with integer math.

Hopefully before too long I'll be able to make a CORDIC blog post and talk more about that in detail.

<h2>Example Code</h2> 

Ok so this theory stuff is all well and good but how about some code?

Before we get to that I want to give the naked formulas for rotating or unrotating vectors.

Given two vectors (A.x, A.y) and (B.x, B.y)...

Rotating A by B to get C:
C.x = A.x*B.x - A.y*B.y
C.y = A.x*B.y + A.y*B.x

Note: In the resulting vector C, the angles will be added, but the vector lengths will be multiplied.

Unrotating A by B to get C, we just flip the sign of any terms that contain B.y:
C.x = A.x*B.x + A.y*B.y
C.y = -A.x*B.y + A.y*B.x

Note: In the resulting vector C, the angles will be subtracted, but the vector lengths will be multiplied.

Below is some sample code, along with the output, showing our examples above working correctly.
[code language="cpp"]
#include <stdio.h>

struct SVector
{
	float x;
	float y;
};

void Rotate (const SVector &A, const SVector &B, SVector &C)
{
	C.x = A.x * B.x - A.y * B.y;
	C.y = A.x * B.y + A.y * B.x;
}

void Unrotate (const SVector &A, const SVector &B, SVector &C)
{
	C.x = A.x * B.x + A.y * B.y;
	C.y = -A.x * B.y + A.y * B.x;
}

void print (const SVector &V)
{
	printf("(%0.2f,%0.2f)", V.x, V.y);
}

int main(int argc, char **argv)
{
	{
		SVector testA = {0.0f, 1.0f};
		SVector testB = {1.0f, 1.0f};
		SVector testC = {0.0f, 0.0f};
		Rotate(testA, testB, testC);
		printf("Rotating ");
		print(testA);
		printf(" by ");
		print(testB);
		printf(" = ");
		print(testC);
		printf("\n");
	}
	{
		SVector testA = {4.0f, 3.0f};
		SVector testB = {-12.0f, 5.0f};
		SVector testC = {0.0f, 0.0f};
		Rotate(testA, testB, testC);
		printf("Rotating ");
		print(testA);
		printf(" by ");
		print(testB);
		printf(" = ");
		print(testC);
		printf("\n");
	}
	{
		SVector testA = {5.0f, 1.0f};
		SVector testB = {2.0f, 2.0f};
		SVector testC = {0.0f, 0.0f};
		Unrotate(testA, testB, testC);
		printf("Unrotating ");
		print(testA);
		printf(" by ");
		print(testB);
		printf(" = ");
		print(testC);
		printf("\n");
	}
	return 0;
}
[/code]

Program output:
<img src="https://demofox2.files.wordpress.com/2014/12/output.png"/>

<h2>More Info</h2>

Check out these links for more details:
<a href="http://betterexplained.com/articles/a-visual-intuitive-guide-to-imaginary-numbers/" target="_blank">Better Explained: A Visual, Intuitive Guide to Imaginary Numbers</a><br>
<a href="http://betterexplained.com/articles/intuitive-arithmetic-with-complex-numbers/" target="_blank">Better Explained: Intuitive Arithmetic With Complex Numbers</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1272</wp:post_id>
		<wp:post_date><![CDATA[2014-12-27 21:57:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-28 05:57:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-imaginary-numbers-to-rotate-2d-vectors]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495478347;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1090;}i:1;a:1:{s:2:"id";i:1325;}i:2;a:1:{s:2:"id";i:2285;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dual Numbers &amp; Automatic Differentiation</title>
		<link>http://blog.demofox.org/2014/12/30/dual-numbers-automatic-differentiation/</link>
		<pubDate>Wed, 31 Dec 2014 02:26:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1325</guid>
		<description></description>
		<content:encoded><![CDATA[In the last post, I talked about imaginary numbers, complex numbers, and how to use them to rotate vectors in 2d.

In this post, I want to share another interesting type of number called a "Dual Number" that uses the symbol ε (epsilon) and has a neat trick of automatically calculating the derivative of a function while you calculate the value of the function at the same time.

Dual numbers are pretty similar to imaginary numbers but there is one important difference.  With imaginary numbers, i^2 = -1, but with dual numbers, ε^2 = 0 (and ε is not 0!).  That may seem like a small difference, but oddly, that opens up a whole interesting world of mathematical usefulness.

Before we dig into automatic differentiation, I want to go over the mathematical basics for how dual numbers behave.
<h2>Basic Dual Number Math</h2>
Adding dual numbers is the same as adding complex numbers; you just add the real and dual parts separately:

(3 + 4ε) + (1 + 2ε) = 4 + 6ε

Subtraction works the same way as well:

(3 + 4ε) - (1 + 2ε) = 2 + 2ε

To multiply dual numbers, you use F.O.I.L. just like you do with complex numbers:

(3 + 4ε) * (1 + 2ε) =
3 + 6ε + 4ε + 8ε^2 =
3 + 10ε + 8ε^2

However, since ε^2 is zero, the last term 8ε^2 disappears:
3 + 10ε

It's interesting to note that with complex numbers, the i^2 became -1, so the last term changed from imaginary to real, meaning that the imaginary numbers fed back into the real numbers during multiplication.  With dual numbers, that isn't the case, the dual numbers don't feed back into the real numbers during multiplication.

In both complex and dual numbers the real terms do affect the non real terms during multiplication.

The division operator relates to the conjugate.  I have source code for it below, and some of the links at the end of the post go into the details of that and other operations.

<h2>Quick Review: Derivatives (Slope)</h2>
If you know the line formula y=mx+b, but you don't know what a derivative is you are in luck.  Remember how "m" is the slope of the line, specifying how steep it is?  That is what the derivative is too, it's just the slope.

Below is a graph of y=2x+1.  At every point on that line, the derivative (or slope) is 2.  That means that for every step we make on the x axis to the right (positive direction), we make 2 steps up on the y axis (positive direction).
<img src="https://demofox2.files.wordpress.com/2014/12/y2xPlus1.png"/>

Now, check out this graph of y=x^2-0.2
<img src="https://demofox2.files.wordpress.com/2014/12/yx2MinPoint2.png"/>
The derivative (or slope) at every point on this graph is 2x.  That means that the slope changes depending on where the x coordinate is!

So, when x=0, the slope is 0.  You can see that in the graph where x=0, that it is horizontal, meaning that a step on the x axis becomes no steps on the y axis (only at that point where x is 0, and only if you take an infinitely small step).

When x is 1, the slope is 2, when x is 2, the slope is 4, when x is 3, the slope is 6.  Since the numbers increase as we increase x from 0, that tells us that the graph gets steeper as we go to the right, which you can see in the graph.

Alternately, when x is -1, the slope is -2, when x is -2, the slope is -4, and when x is -3, the slope is -6.  This shows us that as we decrease x from 0, the graph gets steeper in the opposite direction, which you can see in the graph as well.
<h2>What is Automatic Differentiation?</h2>
Let's say you have a function (possibly a curve) describing the path of a rocket, and you want to make the rocket point down the path that it's traveling.

One way you might do this is to evaluate your function f(T) to get the current location of your rocket (where T is how long the rocket has been flying), and then calculate the derivative f'(T) to find the slope of the graph at that point so that you can orient the rocket in that direction.

You could calculate the value and slope of the function at time T independently easily enough if you know how to get the derivative of a function (a calculus topic), or use wolframalpha.com.

However, if you have a complex equation, or maybe if the equation is controlled by user input, or game data, it might not be so easy to figure out what the derivative is at run time.

For instance... imagine having a function that rolled random numbers to figure out what mathematical operation it should preform on a number next (if we roll a 0, add 3, if we roll a 1 multiply by 2, if we roll a 2, square the number... etc).  It isn't going to be simple to take the derivative of the same mathematical function.

Here enters automatic differentiation (or AD).  AD lets you calculate the derivative WHILE you are calculating the value of the function.

That way, you can do whatever math operations you want on your number, and in the end you will have both the value of f(T) as well as the derivative f'(T).
<h2>Using ε for Automatic Differentiation</h2>
You can use dual number operations on numbers to calculate the value of f(x) while also calculating f'(x) at the same time.  I'll show you how with a simple example using addition and multiplication like we went over above.

We'll start with the function f(x)=3x+2, and calculate f(4) and f'(4).

the first thing we do is convert our 4 into a dual number, using 1 for the dual component, since we are plugging it in for the value of x, which has a derivative of 1.

4+1ε

Next, we want to multiply that by the constant 3, using 0 for the dual component since it is just a constant (and the derivative of a constant is 0)

(4+1ε) * (3 + 0ε) =
12 + 0ε + 3ε + 0ε^2 =
12 + 3e

Lastly, we need to add the constant 2, using 0 again for the dual component since it's just a constant.
(12 + 3ε) + (2 + 0ε) = 
14 + 3ε

In our result, the real number component (14) is the value of f(4) and the dual component (3) is the derivative f'(4), which is correct if you work it out!

Let's try f(5).  First we convert 5 to a dual number, with the dual component being 1.

5 + 1ε

Next we need to multiply it by the constant 3 (which has a dual component of 0)

(5 + 1ε) * (3 + 0e) =
15 + 0ε + 3ε + 0ε^2 =
15 + 3ε

Now, we add the constant 2 (which has a dual component of 0 again since it's just a constant)
(15 + 3ε) + (2 + 0ε) =
17 + 3ε

So, our answer says that f(5) = 17, and f'(5) = 3, which again you can verify is true!
<h2>Quadratic Example</h2>
The example above worked well but it was a linear function.  What if we want to do a function like f(x) = 5x^2 + 4x + 1?

Let's calculate f(2).  We are going to first calculate the 5x^2 term, so we need to start by making a dual number for the function parameter x:
(2 + 1ε)

Next, we need to multiply it by itself to make x^2:
(2 + 1ε) * (2 + 1ε) = 
4 + 2ε + 2ε + 1ε^2 =
4 + 4ε

(remember that ε^2 is 0, so the last term disappears)

next, we multiply that by the constant 5 to finish making the 5x^2 term:
(4 + 4ε) * (5 + 0ε) =
20 + 0ε + 20ε + 0ε^2 =
20 + 20ε

Now, putting that number aside for a second we need to calculate the "4x" term by multiplying the value we plugged in for x by the constant 4
(2 + 1ε) * (4 + 0ε) =
8 + 0ε + 4ε + 0ε^2 =
8 + 4ε

Next, we need to add the last 2 values together (the 5x^2 term and the 4x term):
(20 + 20ε) + (8 + 4ε) =
28 + 24ε

Lastly, we need to add in the last term, the constant 1
(28 + 24ε) + (1 + 0ε) = 
29 + 24e

There is our answer!  For the equation y = 5x^2 + 4x + 1, f(2) = 29 and f'(2) = 24.  Check it, it's correct (:

As one last example let's calculate f(10) and f'(10) with the same function above y = 5x^2 + 4x + 1.

First, to start calculating the 5x^2 term, we need to make 10 into a dual number and multiply it by itself to make x^2:
(10 + 1ε) * (10 + 1ε) =
100 + 10ε + 10ε + 1ε^2 =
100 + 20ε

Next, we multiply by the constant 5 to finish making the 5x^2 term:
(100 + 20ε) * (5 + 0ε) =
500 + 0ε + 100ε + 0ε^2 =
500 + 100ε

Putting that aside, let's calculate the 4x term by multiplying our x value by the constant 4:
(10 + 1ε) * (4 + 0ε) =
40 + 0ε + 4ε + 0ε^2 =
40 + 4ε

Lastly, let's add our terms: 5x^2, 4x and the constant 1
(500 + 100ε) + (40 + 4ε) + (1 + 0ε) =
541 + 104ε

The answer tells us that for the equation y = 5x^2 + 4x + 1, f(10) = 541 and f'(10) = 104.

<h2>Sample Code</h2>

There are lots of other mathematical operations that you can do with dual numbers.  I've collected as many as I was able to find and made up some sample code that uses them.  The sample code is below, as well as the program output.

[code language="cpp"]
#include <stdio.h>
#include <math.h>

#define PI 3.14159265359f

// In production code, this class should probably take a template parameter for
// it's scalar type instead of hard coding to float
class CDualNumber
{
public:
	CDualNumber (float real = 0.0f, float dual = 0.0f)
		: m_real(real)
		, m_dual(dual)
	{
	}

	float Real () const { return m_real; }
	float Dual () const { return m_dual; }

private:
	float m_real;
	float m_dual;
};

//----------------------------------------------------------------------
// Math Operations
//----------------------------------------------------------------------
inline CDualNumber operator + (const CDualNumber &a, const CDualNumber &b)
{
	return CDualNumber(a.Real() + b.Real(), a.Dual() + b.Dual());
}

inline CDualNumber operator - (const CDualNumber &a, const CDualNumber &b)
{
	return CDualNumber(a.Real() - b.Real(), a.Dual() - b.Dual());
}

inline CDualNumber operator * (const CDualNumber &a, const CDualNumber &b)
{
	return CDualNumber(
		a.Real() * b.Real(),
		a.Real() * b.Dual() + a.Dual() * b.Real()
	);
}

inline CDualNumber operator / (const CDualNumber &a, const CDualNumber &b)
{
	return CDualNumber(
		a.Real() / b.Real(),
		(a.Dual() * b.Real() - a.Real() * b.Dual()) / (b.Real() * b.Real())
	);
}

inline CDualNumber sqrt (const CDualNumber &a)
{
	float sqrtReal = ::sqrt(a.Real());
	return CDualNumber(
		sqrtReal,
		0.5f * a.Dual() / sqrtReal
	);
}

inline CDualNumber pow (const CDualNumber &a, float y)
{
	return CDualNumber(
		::pow(a.Real(), y),
		y * a.Dual() * ::pow(a.Real(), y - 1.0f)
	);
}

inline CDualNumber sin (const CDualNumber &a)
{
	return CDualNumber(
		::sin(a.Real()),
		a.Dual() * ::cos(a.Real())
	);
}

inline CDualNumber cos (const CDualNumber &a)
{
	return CDualNumber(
		::cos(a.Real()),
		-a.Dual() * ::sin(a.Real())
	);
}

inline CDualNumber tan (const CDualNumber &a)
{
	return CDualNumber(
		::tan(a.Real()),
		a.Dual() / (::cos(a.Real()) * ::cos(a.Real()))
	);
}

inline CDualNumber atan (const CDualNumber &a)
{
	return CDualNumber(
		::atan(a.Real()),
		a.Dual() / (1.0f + a.Real() * a.Real())
	);
}

inline CDualNumber SmoothStep (CDualNumber x)
{
	// f(x) = 3x^2 - 2x^3
	// f'(x) = 6x - 6x^2
	return x * x * (CDualNumber(3) - CDualNumber(2) * x);
}

//----------------------------------------------------------------------
// Test Functions
//----------------------------------------------------------------------

void TestSmoothStep (float x)
{
	CDualNumber y = SmoothStep(CDualNumber(x, 1.0f));
	printf("smoothstep 3x^2-2x^3(%0.4f) = %0.4f\n", x, y.Real());
	printf("smoothstep 3x^2-2x^3'(%0.4f) = %0.4f\n\n", x, y.Dual());
}

void TestTrig (float x)
{
	CDualNumber y = sin(CDualNumber(x, 1.0f));
	printf("sin(%0.4f) = %0.4f\n", x, y.Real());
	printf("sin'(%0.4f) = %0.4f\n\n", x, y.Dual());

	y = cos(CDualNumber(x, 1.0f));
	printf("cos(%0.4f) = %0.4f\n", x, y.Real());
	printf("cos'(%0.4f) = %0.4f\n\n", x, y.Dual());

	y = tan(CDualNumber(x, 1.0f));
	printf("tan(%0.4f) = %0.4f\n", x, y.Real());
	printf("tan'(%0.4f) = %0.4f\n\n", x, y.Dual());

	y = atan(CDualNumber(x, 1.0f));
	printf("atan(%0.4f) = %0.4f\n", x, y.Real());
	printf("atan'(%0.4f) = %0.4f\n\n", x, y.Dual());
}

void TestSimple (float x)
{
	CDualNumber y = CDualNumber(3.0f) / sqrt(CDualNumber(x, 1.0f));
	printf("3/sqrt(%0.4f) = %0.4f\n", x, y.Real());
	printf("3/sqrt(%0.4f)' = %0.4f\n\n", x, y.Dual());

	y = pow(CDualNumber(x, 1.0f) + CDualNumber(1.0f), 1.337f);
	printf("(%0.4f+1)^1.337 = %0.4f\n", x, y.Real());
	printf("(%0.4f+1)^1.337' = %0.4f\n\n", x, y.Dual());
}

int main (int argc, char **argv)
{
	TestSmoothStep(0.5f);
	TestSmoothStep(0.75f);
	TestTrig(PI * 0.25f);
	TestSimple(3.0f);
	return 0;
}
[/code]

Here is the program output:
<img src="https://demofox2.files.wordpress.com/2014/12/DualNumberOutput.png"/>

<h2>Closing Info</h2>

When you are thinking what number ε has to be so that ε^2 is 0 but ε is not 0, you may be tempted to think that it is an imaginary number, just like i (the square root of -1) that doesn't actually exist.  This is actually not how it is... I've seen ε described in two ways.

One way I've seen it described is that it's an infinitesimal number.  That sort of makes sense to me, but not in a concrete and tangible way.

The way that makes more sense to me is to describe it as a matrix like this:
[0, 1]
[0, 0]

If you multiply that matrix by itself, you will get zero(s) as a result.

In fact, an alternate way to implement the dual numbers is to treat them like a matrix like that.

I also wanted to mention that it's possible to modify this technique to get the 2nd derivative of a function or the 3rd, or the Nth.  It isn't only limited to the 1st derivative.  Check the links at the bottom of this post for more info, but essentially, if you want 1st and 2nd derivative, you need to make it so that ε^3 = 0 instead of ε^2 = 0. There is a way to do that with matrices.

Another neat thing is that you can also extend this into multiple dimensions.  This is useful for situations like if you have some terrain described by mathematical functions, when you are walking the grid of terrain to make vertex information, you can get the slope / gradient / surface normal at the same time.

Lastly, I wanted to mention a different kind of number called a hyperbolic number.

The imaginary number i^2 = -1 and we can use it to do 2d rotations.

The dual number ε^2 is 0 (and ε is not 0) and we can use it to do automatic differentiation.

Hyperbolic numbers have j, and j^2 = 1 (and j is not 1).  I'm not sure, but I bet they have some interesting usefulness to them too.  It would be interesting to research that more sometime.  If you know anything about them, please post a comment!

<h2>Links</h2>

This shadertoy is what got me started looking into dual numbers.  It's a mandelbrot viewer done by iq using dual numbers to estimate a distance from a point to the mandelbrot set (as far as I understand it anyhow, ha!).  He uses that estimated distance to color the pixels.

<a href="https://www.shadertoy.com/view/Xd2GzR" target="_blank">Shadertoy: Dual Complex Numbers</a>

I didn't get very much into the reasons of why this works (has to do with taylor series terms disappearing if ε^2 is 0), or the rigorous math behind deriving the operators, but here are some great links I found researching this stuff and putting this blog post together.

<a href="http://en.wikipedia.org/wiki/Dual_number" target="_blank">Wikipedia: Dual Number</a>
<a href="https://books.google.com/books?id=hfinyCUHDW0C&pg=PA196&lpg=PA196&dq=dual+number+atan&source=bl&ots=y5wstSy4zv&sig=9eG3b80RMOgj4ncHpB7P95gBAZM&hl=en&sa=X&ei=TfSgVJDuBITwoATZmYGoDg&ved=0CB4Q6AEwAQ#v=onepage&q=dual%20number%20atan&f=false" target="_blank">[Book] Dual-Number Methods in Kinematics, Statics and Dynamics By Ian Fischer</a>
<a href="http://twvideo01.ubm-us.net/o1/vault/gdc2012/slides/Programming%20Track/vandenBergen_Gino_Math_Tutorial_Dual.pdf" target="_blank">[GDC2012] Math for Game Programmers: Dual Numbers by Gino van den Bergen</a>
<a href="http://math.stackexchange.com/questions/900541/implementing-trig-functions-for-dual-numbers" target="_blank">Stackexchange: Implementing trig functions for dual numbers</a>
<a href="http://jliszka.github.io/2013/10/24/exact-numeric-nth-derivatives.html" target="_blank">Exact numeric nth derivatives</a>
<a href="http://duaeliststudios.com/automatic-differentiation-with-dual-numbers/" target="_blank">Automatic Differentiation with Dual numbers</a>
<a href="http://en.wikipedia.org/wiki/Automatic_differentiation" target="_blank">Wikipedia: Automatic Differentiation </a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1325</wp:post_id>
		<wp:post_date><![CDATA[2014-12-30 18:26:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-31 02:26:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dual-numbers-automatic-differentiation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495674847;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5949;}i:1;a:1:{s:2:"id";i:6201;}i:2;a:1:{s:2:"id";i:1272;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bresenham&#039;s Drawing Algorithms</title>
		<link>http://blog.demofox.org/2015/01/17/bresenhams-drawing-algorithms/</link>
		<pubDate>Sun, 18 Jan 2015 02:07:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1369</guid>
		<description></description>
		<content:encoded><![CDATA[If you were asked to name a line drawing algorithm, chances are you would say Bresenham.  I recently needed to write my own software line drawing algorithm (CPU and regular ram, not GPU and VRAM) and Bresenham was the first to come to mind for me as well.

Believe it or not, Jack Bresenham actually came up with 2 famous line drawing algorithms.  One is a run length algorithm, and the other is a run slice algorithm.  People are most often familiar with the run length algorithm, which I mainly talk about in this post, but there's some information about the run slice algorithm and links to other Bresenham primitive rendering algorithms below as well!

An interesting thing about both line algorithms is that they involve only integer mathematics, so there is no round off error, epsilons, numerical instability or anything like that.  You use only integers and simple math (no divisions even!), and get the exact right answer out.  I think that is pretty cool.

<h2>Bresenham's Run Length Line Algorithm Summarized</h2>

To help understand the code, I want to give a brief summarization of how the algorithm works at a high level.

The first step of the Bresenham line algorithm is to see if the line is longer on the X axis or Y axis.  Whichever one it is longer on is the major axis, and the shorter one is the minor axis.

Then, starting at the starting point of the line, you loop across all pixels of the major axis, doing some math to decide for each pixel whether you need to move the pixel on the minor axis yet or not.  Basically you keep track of the error - or the distance the pixel is away from the true position of the line on the minor axis - and if the error is greater than or equal to 1 pixel, you move the pixel on the minor axis and subtract one pixel from the error.  If the error is smaller than 1 pixel, you keep it at the same value it was for the last pixel, and keep the error value the same, so that it can accumulate some more error for the next pixel and test again.

<img src="https://demofox2.files.wordpress.com/2015/01/HorVer.png"/>
<i>The left line is longer on the X axis, so the major axis is the X axis.  The right line is longer on the Y axis, so the major axis is the Y axis.  Notice that there is one pixel for each value along the major axis of each line, but repeated pixel values along the minor axis of each line.</i>

If you want the deeper details about the algorithm or the math behind it, check out this link:
<a href="http://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm" target="_blank">Wikipedia: Bresenham's line algorithm</a>

<h2>One Octant Code</h2>

Wikipedia says that many implementations implement the algorithm for a single octant (half of a quadrant) and then use coordinate conversions (flipping the x and y's and/or negating them) to make the same logic work for any quadrant.

In that vein, here is a simple implementation for the first octant - where the major axis is X, and both X and Y are increasing from the starting point to the ending point.

[code language="cpp"]
	void DrawLine (int x1, int y1, int x2, int y2, unsigned int color)
	{
		const int dx = x2 - x1;
		const int dy = y2 - y1;

		int Error = 2 * dy - dx;
		int y = y1;
		
		DrawPixel(x1, y1, color);
		for (int x = x1+1; x &lt; x2; ++x)
		{
			if (Error &gt; 0)
			{
				y++;
				Error += 2 * dy - 2 * dx;
			}
			else
			{
				Error += 2 * dy;
			}
			DrawPixel(x,y,color);
		}
	}
[/code]

With the point of Bresenham being that it is efficient, let's sacrifice readability a bit and get rid of those DrawPixel calls and perhaps over-micro-optimize a bit and make some consts for frequently used values.

[code language="cpp"]
	void DrawLine (unsigned int* pixels, int width, int x1, int y1, int x2, int y2, unsigned int color)
	{
		const int dx = x2 - x1;
		const int dy = y2 - y1;
		const int dx2 = dx * 2;
		const int dy2 = dy * 2;
		const int dy2Mindx2 = dy2 - dx2;

		int Error = dy2 - dx;

		unsigned int* pixel = &amp;amp;pixels[y1*width+x1];
		*pixel = color;
		for (int x = x2 - x1 - 1; x &gt; 0; --x)
		{
			if (Error &gt; 0)
			{
				pixel += width + 1;
				Error += dy2Mindx2;
			}
			else
			{
				pixel++;
				Error += dy2;
			}
			*pixel = color;
		}
	}
[/code]

Cool, now let's make it work for any line.

<h2>Final Code</h2>

[code language="cpp"]
	// Generic Line Drawing
	// X and Y are flipped for Y maxor axis lines, but the pixel writes are handled correctly due to
	// minor and major axis pixel movement
	void DrawLineMajorAxis(
		unsigned int* pixel,
		int majorAxisPixelMovement,
		int minorAxisPixelMovement,
		int dx,
		int dy,
		unsigned int color
	)
	{
		// calculate some constants
		const int dx2 = dx * 2;
		const int dy2 = dy * 2;
		const int dy2Mindx2 = dy2 - dx2;

		// calculate the starting error value
		int Error = dy2 - dx;

		// draw the first pixel
		*pixel = color;

		// loop across the major axis
		while (dx--)
		{
			// move on major axis and minor axis
			if (Error &gt; 0)
			{
				pixel += majorAxisPixelMovement + minorAxisPixelMovement;
				Error += dy2Mindx2;
			}
			// move on major axis only
			else
			{
				pixel += majorAxisPixelMovement;
				Error += dy2;
			}

			// draw the next pixel
			*pixel = color;
		}
	}

	// Specialized Line Drawing optimized for horizontal or vertical lines
	// X and Y are flipped for Y maxor axis lines, but the pixel writes are handled correctly due to
	// minor and major axis pixel movement
	void DrawLineSingleAxis(unsigned int* pixel, int majorAxisPixelMovement, int dx, unsigned int color)
	{
		// draw the first pixel
		*pixel = color;

		// loop across the major axis and draw the rest of the pixels
		while (dx--)
		{
			pixel += majorAxisPixelMovement;
			*pixel = color;
		};
	}

	// Draw an arbitrary line.  Assumes start and end point are within valid range
	// pixels is a pointer to where the pixels you want to draw to start aka (0,0)
	// pixelStride is the number of unsigned ints to get from one row of pixels to the next.
	// Usually, that is the same as the width of the image you are drawing to, but sometimes is not.
	void DrawLine(unsigned int* pixels, int pixelStride, int x1, int y1, int x2, int y2, unsigned int color)
	{
		// calculate our deltas
		int dx = x2 - x1;
		int dy = y2 - y1;

		// if the X axis is the major axis
		if (abs(dx) &gt;= abs(dy))
		{
			// if x2 &lt; x1, flip the points to have fewer special cases
			if (dx &lt; 0)
			{
				dx *= -1;
				dy *= -1;
				swap(x1, x2);
				swap(y1, y2);
			}

			// get the address of the pixel at (x1,y1)
			unsigned int* startPixel = &amp;amp;pixels[y1 * pixelStride + x1];

			// determine special cases
			if (dy &gt; 0)
				DrawLineMajorAxis(startPixel, 1, pixelStride, dx, dy, color);
			else if (dy &lt; 0)
				DrawLineMajorAxis(startPixel, 1, -pixelStride, dx, -dy, color);
			else
				DrawLineSingleAxis(startPixel, 1, dx, color);
		}
		// else the Y axis is the major axis
		else
		{
			// if y2 &lt; y1, flip the points to have fewer special cases
			if (dy &lt; 0)
			{
				dx *= -1;
				dy *= -1;
				swap(x1, x2);
				swap(y1, y2);
			}

			// get the address of the pixel at (x1,y1)
			unsigned int* startPixel = &amp;amp;pixels[y1 * pixelStride + x1];

			// determine special cases
			if (dx &gt; 0)
				DrawLineMajorAxis(startPixel, pixelStride, 1, dy, dx, color);
			else if (dx &lt; 0)
				DrawLineMajorAxis(startPixel, pixelStride, -1, dy, -dx, color);
			else
				DrawLineSingleAxis(startPixel, pixelStride, dy, color);
		}
	}
[/code]

Using the above functions, I wrote a little test to draw lines from the center of an image towards the edges at 100 different angles, and also a horizontal and vertical line.  Here's the results:

<img src="https://demofox2.files.wordpress.com/2015/01/BresenhamTest.png"/>

<h2>Run Slice Algorithm</h2>

So, like I said above, there is another Bresenham line algorithm that is a run slice algorithm.

What that means is that instead of looping across the major axis figuring out if each pixel needs to move on the minor axis as well, instead it loops across the minor axis, figuring out how many pixels it needs to write for that row or column of pixels.

One benefit of that algorithm is that it is less loop iterations since it's looping across the minor axis pixels instead of the major axis.

Here's an interesting read about Michael Abrash and his encounters with and the run slice algorithm:

<a href="http://www.phatcode.net/res/224/files/html/ch36/36-01.html" target="_blank">Michael Abrash's Graphics Programming Black Book Special Edition: The Good, the Bad, and the Run-Sliced</a>

<h2>Other Bresenham Algorithms</h2>

This was origionally just going to be about the line algorithms, and I was going to make up another post about the circle algorithm, but I changed my mind.

While doing some research to see if there was a Bresenham bezier curve algorithm I stumbled on the page below, which shows that yes, there is!  There are quite a few other algorithms as well:

<a href="http://members.chello.at/easyfilter/bresenham.html" target="_blank">Many Bresenham algorithms with very short c++ implementations</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1369</wp:post_id>
		<wp:post_date><![CDATA[2015-01-17 18:07:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-18 02:07:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[bresenhams-drawing-algorithms]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495718712;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:50;}i:1;a:1:{s:2:"id";i:3209;}i:2;a:1:{s:2:"id";i:48;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DAPSE Preview</title>
		<link>http://blog.demofox.org/2015/01/24/dapse-preview/</link>
		<pubDate>Sat, 24 Jan 2015 19:07:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1447</guid>
		<description></description>
		<content:encoded><![CDATA[Here's a preview of something I'm working on.  Details aren't ready yet, but I'm going to try and write up a little research paper about it and try to get it published if I can.  I'm going to try <a href="http://jcgt.org/" target="_blank">Journal of Computer Graphics Techniques</a> first, and if that doesn't work out, I'm going to try <a href="http://www.plosone.org/" target="_blank">plosone.com</a>.

After going through the process I think I'll be writing up some other papers about some other things, including some real time raytracing techniques :P

I'll probably also gather some notes and post them for other first time research paper writers looking to get their techniques out there.

Any guesses as to what DAPSE is all about? (:

As a very vague hint, this comic helped to inspire the name <a href="http://www.smbc-comics.com/?id=3548" target="_blank">Saturday Morning Breakfast Cereal: Why We do Science</a>

<img src="https://demofox2.files.wordpress.com/2015/01/animated.gif"/>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1447</wp:post_id>
		<wp:post_date><![CDATA[2015-01-24 11:07:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-24 19:07:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dapse-preview]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495274931;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2596;}i:1;a:1:{s:2:"id";i:5276;}i:2;a:1:{s:2:"id";i:2460;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>853</wp:comment_id>
			<wp:comment_author><![CDATA[puggles]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kenandkaren777@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.38.255.127]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-01-24 11:53:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-01-24 19:53:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[umm, the cartoon does not help me he he. does the first letter stand for digital?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>854</wp:comment_id>
			<wp:comment_author><![CDATA[Demofox]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[demofox@demofox.org]]></wp:comment_author_email>
			<wp:comment_author_url>http://demofox.org</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.105.195.126]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-01-24 15:13:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-01-24 23:13:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It stands for dual (:]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Programmatically Calculating GCD and LCM</title>
		<link>http://blog.demofox.org/2015/01/24/programmatically-calculating-gcd-and-lcm/</link>
		<pubDate>Sun, 25 Jan 2015 02:09:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1457</guid>
		<description></description>
		<content:encoded><![CDATA[I recently came across a really interesting technique for calculating GCD (greatest common divisor) and then found out you can use that to calculate LCM (least common multiple).

<h2>Greatest Common Divisor</h2>

The greatest common divisor of two numbers is the largest number that divides evenly into those numbers.

For instance the GCD of 12 and 15 is 3, the GCD of 30 and 20 is 10, and the GCD of 7 and 11 is 1.

You could calculate this with brute force - starting with 1 and counting up to the smaller number, keeping track of the largest number that divides evenly into both numbers - but for larger numbers, this technique could take a long time.

Luckily Euclid came up a better way in <b>300 BC</b>! 

Euclid's algorithm to find the GCD of numbers A and B:
<ol>
<li>If A and B are the same number, that number is the GCD</li>
<li>Otherwise, subtract the smaller number from the larger number</li>
<li>Goto 1</li>
</ol>

Pretty simple right?  It's not immediately intuitive why that works, but as an example let's say that there's a number that goes into A fives times, and goes into B three times.  That same number must go into (A-B) two times.

Try it out on paper, think about it a bit, and check out the links at the end of this section (:

A refinement on that algorithm is to use remainder (modulus) instead of possibly having to do repeated subtraction to get the same result.  For instance if you had the numbers 1015 and 2, you are going to have to subtract 2 from 1015 quite a few times before the 2 becomes the larger number.

Here's the refined algorithm:
<ol>
<li>If A and B are the same number, that number is the GCD</li>
<li><b>Otherwise, set the larger number to be the remainder of the larger number divided by the smaller number</b></li>
<li>Goto 1</li>
</ol>

And here's the C++ code:
[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;algorithm&gt;

unsigned int CalculateGCD (unsigned int smaller, unsigned int larger)
{
	// make sure A &lt;= B before starting
	if (larger &lt; smaller)
		std::swap(smaller, larger);

	// loop
	while (1)
	{
		// if the remainder of larger / smaller is 0, they are the same
		// so return smaller as the GCD
		unsigned int remainder = larger % smaller;
		if (remainder == 0)
			return smaller;

		// otherwise, the new larger number is the old smaller number, and
		// the new smaller number is the remainder
		larger = smaller;
		smaller = remainder;
	}
}

void WaitForEnter ()
{
	printf(&quot;\nPress Enter to quit&quot;);
	fflush(stdin);
	getchar();
}

void main (void)
{
	// Get A
	printf(&quot;Greatest Common Devisor Calculator, using Euclid's algorithm!\n&quot;);
	printf(&quot;\nFirst number? &quot;);
	unsigned int A = 0;
	if (scanf(&quot;%u&quot;,&amp;A) == 0 || A == 0) {
		printf(&quot;\nMust input a positive integer greater than 0!&quot;);
		WaitForEnter();
		return;
	}

	// Get B
	printf(&quot;Second number? &quot;);
	unsigned int B = 0;
	if (scanf(&quot;%u&quot;,&amp;B) == 0 || B == 0) {
		printf(&quot;\nMust input a positive integer greater than 0!&quot;);
		WaitForEnter();
		return;
	}
	
	// show the result
	printf(&quot;\nGCD(%u,%u) = %u\n&quot;, A, B, CalculateGCD(A,B));

	// wait for user to press enter
	WaitForEnter();
}
[/code]

I found this stuff in <a href="http://www.phatcode.net/res/224/files/html/ch10/10-01.html" target="_blank">Michael Abrash's Graphics Programming Black Book Special Edition: Patient Coding, Faster Code</a>.

That book is filled with amazing treasures of knowledge and interesting stories to boot.  I highly suggest flipping to a couple random chapters and reading it a bit.  Very cool stuff in there (:

You might also find these links interesting or useful!
<a href="http://en.wikipedia.org/wiki/Greatest_common_divisor" target="_blank">Wikipedia: Greatest Common Divisor</a>
<a href="http://en.wikipedia.org/wiki/Euclidean_algorithm" target="_blank">Wikipedia: Euclidean Algorithm</a>

I'm sure there's a way to extend this algorithm to work for N numbers at a time instead of only 2 numbers.  I'll leave that as a fun exercise for you if you want to play with that :P

<h2>Least Common Multiple</h2>

The least common multiple of two numbers is the smallest number that is evenly divisible by those numbers.

Kind of an ear full so some examples:  The LCM of 3 and 4 is 12, the LCM of 1 and 7 is 7, the LCM of 20 and 35 is 140.  Note that in the first two examples, the LCM is just the two numbers multiplied together, but in the 3rd example it isn't (also an interesting thing of note is that the first 2 examples have a GCD of 1, while the 3rd example has a GCD of 5).

Well interestingly, calculating the LCM is super easy if you already know how to calculate the GCD.  You just multiply the numbers together and divide by the GCD.

LCM(A,B) = (A*B) / GCD(A,B)

Interestingly though, GCD(A,B) divides evenly into both A and B and will result in an integer result. This means we can multiply by A or B after the division happens and get the exact same answer.  More importantly though, it helps protect you against integer overflow in the A*B calculation.   Using that knowledge the equation becomes this:

LCM(A,B) = (A / GCD(A,B))*B

Pretty neat!  Here's some C++ code that calculates LCM.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;algorithm&gt;

unsigned int CalculateGCD (unsigned int smaller, unsigned int larger)
{
	// make sure A &lt;= B before starting
	if (larger &lt; smaller)
		std::swap(smaller, larger);

	// loop
	while (1)
	{
		// if the remainder of larger / smaller is 0, they are the same
		// so return smaller as the GCD
		unsigned int remainder = larger % smaller;
		if (remainder == 0)
			return smaller;

		// otherwise, the new larger number is the old smaller number, and
		// the new smaller number is the remainder
		larger = smaller;
		smaller = remainder;
	}
}

unsigned int CalculateLCM (unsigned int A, unsigned int B)
{
	// LCM(A,B) = (A/GCD(A,B))*B
	return (A/CalculateGCD(A,B))*B;
}

void WaitForEnter ()
{
	printf(&quot;\nPress Enter to quit&quot;);
	fflush(stdin);
	getchar();
}

void main (void)
{
	// Get A
	printf(&quot;Least Common Multiple Calculator, using Euclid's algorithm for GCD!\n&quot;);
	printf(&quot;\nFirst number? &quot;);
	unsigned int A = 0;
	if (scanf(&quot;%u&quot;,&amp;A) == 0 || A == 0) {
		printf(&quot;\nMust input a positive integer greater than 0!&quot;);
		WaitForEnter();
		return;
	}

	// Get B
	printf(&quot;Second number? &quot;);
	unsigned int B = 0;
	if (scanf(&quot;%u&quot;,&amp;B) == 0 || B == 0) {
		printf(&quot;\nMust input a positive integer greater than 0!&quot;);
		WaitForEnter();
		return;
	}
	
	// show the result
	printf(&quot;\nLCM(%u,%u) = %u\n&quot;, A, B, CalculateLCM(A,B));

	// wait for user to press enter
	WaitForEnter();
}
[/code]

Extending this to N numbers could be an interesting thing to try too (:

Here's tasty link about LCM: <a href="http://en.wikipedia.org/wiki/Least_common_multiple" target="_blank">Wikipedia: Least Common Multiple</a>

<h2>Compile Time GCD and LCM</h2>

I've just heard that a compile time GCD and LCM implementation has been recomended for the STL.  Check out the link below, kinda neat!

<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3845.pdf" target="_blank">Greatest Common Divisor and Least Common Multiple</a>

TTFN.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1457</wp:post_id>
		<wp:post_date><![CDATA[2015-01-24 18:09:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-25 02:09:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[programmatically-calculating-gcd-and-lcm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495530989;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3239;}i:1;a:1:{s:2:"id";i:3209;}i:2;a:1:{s:2:"id";i:4341;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Estimating Counts of Distinct Values with KMV</title>
		<link>http://blog.demofox.org/2015/02/03/estimating-counts-of-distinct-values-with-kmv/</link>
		<pubDate>Wed, 04 Feb 2015 04:19:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1495</guid>
		<description></description>
		<content:encoded><![CDATA[A few months ago I saw what I'm about to show you for the first time, and my jaw dropped.  I'm hoping to share that experience with you right now, as a I share a quick intro to probabilistic algorithms, starting with KMV, otherwise known as K-Minimum Values, which is a Distinct Value (DV) Sketch, or a DV estimator.

Thanks to <a href="http://www.elbeno.com/blog/" target="_blank">Ben Deane</a> for exposure to this really interesting area of computer science.

<h2>The Setup</h2>

Let's say that you needed a program to count the number of unique somethings that you've encountered.  The unique somethings could be unique visitors on a web page, unique logins into a server within a given time period, unique credit card numbers, or anything else that has a way for you to get some unique identifier.

One way to do this would be to keep a list of all the things you've encountered before, only inserting a new item if it isn't already in the list, and then count the items in the list when you want a count of unique items.  The obvious downside here is that if the items are large and/or there are a lot of them, your list can get pretty large.  In fact, it can take an unbounded amount of memory to store this list, which is no good.

A better solution may be instead of storing the entire item in the list, maybe instead you make a 32 bit hash of the item and then add that hash to a list if it isn't already in the list, knowing that you have at most 2^32  (4,294,967,296) items in the list.  It's a bounded amount of memory, which is an improvement, but it's still pretty large.  The maximum memory requirement there is 2^32 * 4 which is 17,179,869,184 bytes or 16GB.

You may even do one step better and just decide to have 2^32 bits of storage, and when you encounter a specific 32 bit hash, use that as an index and set that specific bit to 1.  You could then count the number of bits set and use that as your answer.  That only takes 536,870,912 bytes, or 512MB.  A pretty big improvement over 16GB but still pretty big.  Also, try counting the number of bits set in a 512MB region of memory.  That isn't the fastest operation around :P

We made some progress by moving to hashes, which put a maximum size amount of memory required, but that came at the cost of us introducing some error.  Hashes can have collisions, and when that occurs in our scenarios above, we have no way of knowing that two items hashing to the same value are not the same item.

Sometimes it's ok though that we only have an approximate answer, because getting an exact answer may require resources we just don't have - like infinite memory to hold an infinitely large list, and then infinite computing time to count how many items there are.  Also notice that the error rate is tuneable if we want to spend more memory.  If we used a 64 bit hash instead of a 32 bit hash, our hash collisions would decrease, and our result would be more accurate, at the cost of more memory used.

<h2>The Basic Idea</h2>

Let's try something different, let's hash every item we see, but only store the lowest valued hash we encounter.  We can then use that smallest hash value to estimate how many unique items we saw.  That's not immediately intuitive, so here's the how and the why...

When we put something into a hash function, what we are doing really is getting a deterministic pseudo random number to represent the item.  If we put the same item in, we'll get the same number out every time, and if we put in a different item, we should get a different number out, even if the second item is really similar to the first item.  Interestingly the numbers we get out should have no bearing on the nature of the items we put into the hash.  Even if the items we put in are similar, the output should be just as different (on average) as if we put in items that were completely different.

This is one of the properties of a good hash function, that it's output is (usually) evenly distributed, no matter the nature of the input.  What that means is that if we put N items into a hash function, those items are on average going to be evenly spaced in the output of the hash, regardless of how similar or different they were before going into the hash function.

Using this property, the distance from zero to the smallest hash we've ever seen can be treated as a representative estimate of the average distance between each item that we hashed.  So, to get the number of items in the hash, we convert the smallest hash into a percentage from 0 to 1 of the total hash space (for uint32, convert to float and divide by (float)2^32), and then we can use this formula:

<b>numItems = (1 / percentage) - 1</b>

To understand why we subtract the 1, imagine that our minimum hash value is 0.5.  If that is an accurate representation of the space between values, that means that we only have 1 value, right in the middle.  But, if we didvide 1 by 0.5 we get 2.  We have 2 REGIONS, but we have only 1 item in the list, so we need to subtract 1.

As another example imagine that our minimum hash is 0.3333 and that it is an accurate representation of the space between values.  If we divide 1 by 0.3333, we get 3.  We do have 3 regions if we cut the whole space into 3 parts, but we only have 2 items (we made 2 cuts to make 3 regions).

<img src="https://demofox2.files.wordpress.com/2015/01/MinHash.png"/>

<h2>Reducing Error</h2>

This technique doesn't suffer too much from hash collisions (so long as your hash function is a decent hash function), but it does have a different sort of problem.

As you might guess, sometimes the hash function might not play nice, and you could hash only a single item, get a hash of 1 and ruin the count estimation. So, there is possibility for error in this technique.

To help reduce error, you ultimately need information about more ranges so that you can combine the multiple pieces of information together to get a more accurate estimate.

Here are some ways to gather information about more ranges:
<ul>
<li>Keep the lowest and highest hash seen instead of just the lowest. This doubles the range information you have since you'd know the range 0-min and max-1.</li>
<li>Keep the lowest N hashes seen instead of only the lowest. This multiplies the amount of range information you have by N.</li>
<li>Instead of keeping the lowest value from a single hash, perform N hashes instead and keep the lowest value seen from each hash.  Again, this multiplies the amount of range information you have by N.</li>
<li>Alternately, just salt the same hash N different ways (with high quality random numbers) instead of using N different hash functions, but still keep the lowest seen from each "value channel". Multiplies info by N again.</li>
<li>Also a possibility, instead of doing N hashes or N salts, do a single hash, and xor that hash against N different high quality random numbers to come up with N deterministic pseudorandom numbers per item. Once again, still keep the lowest hash value seen from each "value channel".  Multiplies info by N again</li>
<li>Mix the above however you see fit!</li>
</ul>

Whatever route you go, the ultimate goal is to just get information about more ranges to be able to combine them together.

In vanilla KMV, the second option is used, which is to keep the N lowest hashes seen, instead of just a single lowest hash seen.  Thus the full name for KMV: K-Minimum Values.

<h2>Combining Info From Multiple Ranges</h2>

When you have the info from multiple ranges and need to combine that info, it turns out that using the harmonic mean is the way to go because it's great at filtering out large values in data that don't fit with the rest of the data.

Since we are using division to turn the hash value into an estimate (1/percentValue-1), unusually small hashes will result in exponentially larger values, while unusually large hashes will not affect the math as much, but also likely will be thrown out before we ever see them since they will likely not be the minimum hash that we've seen.

I don't have supporting info handy, but from what I've been told, the harmonic mean is provably better than both the geometric mean and the regular plain old vanilla average (arithmetic mean) in this situation.

So, to combine information from the multiple ranges you've gathered, you turn each range into a distinct value estimate (by calculating 1/percentValue-1) and then putting all those values through the mean equation of your choice (which ought to be harmonic mean, but doesn't strictly have to be!).  The result will be your final answer.

<h2>Set Operations</h2>

Even though KMV is just a distinct value estimator that estimates a count, there are some interesting probabilistic set operations that you can do with it as well.  I'll be talking about using the k min value technique for gathering information from multiple ranges, but if you use some logic you should be able to figure out how to make it work when you use any of the other techniques.

<b>Jaccard Index</b>

Talking about set operations, I want to start with a concept called the Jaccard index (sometimes called the Jaccard similarity coefficient).

If you have 2 sets, the Jaccard index is calculated by:

<b>Jaccard Index = count(intersection(A,B)) / count(union(A,B))</b>

Since the union of A and B is the combined list of all items in those sets, and the intersection of A and B is the items that they have in common, you can see that if the sets have all items in common, the Jaccard index will be 1 and if the sets have no items in common, the Jaccard index will be 0.  If you have some items in common it will be somewhere between 0 and 1.  So, the Jaccard Index is just a measurement of how similar two sets are.

<b>Union</b>

If you have the information for two KMV objects, you can get an estimate to the number of unique items there if you were to union them together, even though you don't have much of the info about the items that are in the set.

To do a union, you just combine the minimum value lists, and remove the K largest ones, so that you are left with the K minimum values from both sets.

You then do business as usual to estimate how many items are in that resulting set.

If you think about it, this makes sense, because if you tracked the items from both lists in a third KMV object, you'd end up with the same K minimums as if you took the K smallest values from both sets individually.

Note that if the two KMV objects are of different size, due to K being different sizes, or because either one isn't completely filled with K minimum values, you should use the smaller value of K as your union set K size.

<b>Intersection</b>

Finding an estimated count of intersections between two sets is a little bit different.

Basically, having the K minimum hashes seen from both lists, you can think of that as a kind of random sample of a range in both lists.  You can then calculate the Jaccard index for that range you have for the two sets (by dividing the size of the intersection by the size of the union), and then use that Jaccard index to estimate an intersection count for the entire set based on the union count estimate.

You can do some algebra to the Jaccard index formula above to get this:

<b>count(intersection(A,B)) = Jaccard Index * count(union(A,B))</b>

Just like with union, if the two KMV objects are of different size, due to K being different sizes, or because either one isn't completely filled with K minimum values, you should use the smaller value of K.

<h2>Sample Code</h2>

[code language="cpp"]
#include <stdio.h>
#include <algorithm>
#include <array>
#include <string>
#include <set>
#include <vector>

// The CKMVCounter class
template <typename T, unsigned int NUMHASHES, typename HASHER = std::hash<T>>
class CKMVUniqueCounter
{
public:
	// constants
	static const unsigned int c_numHashes = NUMHASHES;
	static const size_t c_invalidHash = (size_t)-1;

	// constructor
	CKMVUniqueCounter ()
	{
		// fill our minimum hash values with the maximum possible value
		m_minHashes.fill(c_invalidHash);
		m_largestHashIndex = 0;
	}

	// interface
	void AddItem (const T& item)
	{
		// if the new hash isn't smaller than our current largest hash, do nothing
		const size_t newHash = HASHER()(item);
		if (m_minHashes[m_largestHashIndex] <= newHash)
			return;

		// if the new hash is already in the list, don't add it again
		for (unsigned int index = 0; index < c_numHashes; ++index)
		{
			if (m_minHashes[index] == newHash)
				return;
		}

		// otherwise, replace the largest hash
		m_minHashes[m_largestHashIndex] = newHash;

		// and find the new largest hash
		m_largestHashIndex = 0;
		for (unsigned int index = 1; index < c_numHashes; ++index)
		{
			if (m_minHashes[index] > m_minHashes[m_largestHashIndex])
				m_largestHashIndex = index;
		}
	}

	// probabilistic interface
	void UniqueCountEstimates (float &arithmeticMeanCount, float &geometricMeanCount, float &harmonicMeanCount)
	{
		// calculate the means of the count estimates.  Note that if there we didn't get enough items
		// to fill our m_minHashes array, we are just ignoring the unfilled entries.  In production
		// code, you would probably just want to return the number of items that were filled since that
		// is likely to be a much better estimate.
		// Also, we need to sort the hashes before calculating uniques so that we can get the ranges by
		// using [i]-[i-1] instead of having to search for the next largest item to subtract out
		SortHashes();
		arithmeticMeanCount = 0.0f;
		geometricMeanCount = 1.0f;
		harmonicMeanCount = 0.0f;
		int numHashes = 0;
		for (unsigned int index = 0; index < c_numHashes; ++index)
		{
			if (m_minHashes[index] == c_invalidHash)
				continue;
			numHashes++;
			float countEstimate = CountEstimate(index);
			arithmeticMeanCount += countEstimate;
			geometricMeanCount *= countEstimate;
			harmonicMeanCount += 1.0f / countEstimate;
		}
		arithmeticMeanCount = arithmeticMeanCount / (float)numHashes;
		geometricMeanCount = pow(geometricMeanCount, 1.0f / (float)numHashes);
		harmonicMeanCount /= (float)numHashes;
		harmonicMeanCount = 1.0f / harmonicMeanCount;
	}

	// friends
	template <typename T, unsigned int NUMHASHES, typename HASHER>
	friend CKMVUniqueCounter<T, NUMHASHES, HASHER> KMVUnion (
		const CKMVUniqueCounter<T, NUMHASHES, HASHER>& a,
		const CKMVUniqueCounter<T, NUMHASHES, HASHER>& b
	);

	template <typename T, unsigned int NUMHASHES, typename HASHER>
	friend float KMVJaccardIndex (
		const CKMVUniqueCounter<T, NUMHASHES, HASHER>& a,
		const CKMVUniqueCounter<T, NUMHASHES, HASHER>& b
	);

private:

	unsigned int NumHashesSet () const
	{
		unsigned int ret = 0;
		for (unsigned int index = 0; index < c_numHashes; ++index)
		{
			if (m_minHashes[index] != c_invalidHash)
				ret++;
		}
		return ret;
	}

	void SortHashes ()
	{
		std::sort(m_minHashes.begin(), m_minHashes.end());
		m_largestHashIndex = c_numHashes-1;
	}

	float CountEstimate (unsigned int hashIndex) const
	{
		size_t currentHash = m_minHashes[hashIndex];
		size_t lastHash = hashIndex > 0 ? m_minHashes[hashIndex- 1] : 0;
		const float percent = (float)(currentHash-lastHash) / (float)((size_t)-1);
		return (1.0f / percent) - 1.0f;
	}
	
	// the minimum hash values
	std::array<size_t, NUMHASHES> m_minHashes;
	size_t m_largestHashIndex;
};

// Set interface
template <typename T, unsigned int NUMHASHES, typename HASHER>
CKMVUniqueCounter<T, NUMHASHES, HASHER> KMVUnion (
	const CKMVUniqueCounter<T, NUMHASHES, HASHER>& a,
	const CKMVUniqueCounter<T, NUMHASHES, HASHER>& b
)
{
	// gather the K smallest hashes seen, where K is the smaller, removing duplicates
	std::set<size_t> setMinHashes;
	std::for_each(a.m_minHashes.begin(), a.m_minHashes.end(), [&setMinHashes](size_t v) {setMinHashes.insert(v); });
	std::for_each(b.m_minHashes.begin(), b.m_minHashes.end(), [&setMinHashes](size_t v) {setMinHashes.insert(v); });
	std::vector<size_t> minHashes(setMinHashes.begin(), setMinHashes.end());
	std::sort(minHashes.begin(),minHashes.end());
	minHashes.resize(std::min(a.NumHashesSet(), b.NumHashesSet()));

	// create and return the new KMV union object
	CKMVUniqueCounter<T, NUMHASHES, HASHER> ret;
	for (unsigned int index = 0; index < minHashes.size(); ++index)
		ret.m_minHashes[index] = minHashes[index];
	ret.m_largestHashIndex = ret.c_numHashes - 1;
	return ret;
}

template <typename T, unsigned int NUMHASHES, typename HASHER>
float KMVJaccardIndex (
	const CKMVUniqueCounter<T, NUMHASHES, HASHER>& a,
	const CKMVUniqueCounter<T, NUMHASHES, HASHER>& b
)
{
	size_t smallerK = std::min(a.NumHashesSet(), b.NumHashesSet());

	size_t matches = 0;
	for (size_t ia = 0; ia < smallerK; ++ia)
	{
		for (size_t ib = 0; ib < smallerK; ++ib)
		{
			if (a.m_minHashes[ia] == b.m_minHashes[ib])
			{
				matches++;
				break;
			}
		}
	}

	return (float)matches / (float)smallerK;
}

// data to add to the lists
const char *s_boyNames[] =
{
	"Loki",
	"Alan",
	"Paul",
	"Stripes",
	"Shelby",
	"Ike",
	"Rafael",
	"Sonny",
	"Luciano",
	"Jason",
	"Brent",
	"Jed",
	"Lesley",
	"Randolph",
	"Isreal",
	"Charley",
	"Valentin",
	"Dewayne",
	"Trent",
	"Abdul",
	"Craig",
	"Andre",
	"Brady",
	"Markus",
	"Randolph",
	"Isreal",
	"Charley",
	"Brenton",
	"Herbert",
	"Rafael",
	"Sonny",
	"Luciano",
	"Joshua",
	"Ramiro",
	"Osvaldo",
	"Monty",
	"Mckinley",
	"Colin",
	"Hyman",
	"Scottie",
	"Tommy",
	"Modesto",
	"Reginald",
	"Lindsay",
	"Alec",
	"Marco",
	"Dee",
	"Randy",
	"Arthur",
	"Hosea",
	"Laverne",
	"Bobbie",
	"Damon",
	"Les",
	"Cleo",
	"Robt",
	"Rick",
	"Alonso",
	"Teodoro",
	"Rodolfo",
	"Ryann",
	"Miki",
	"Astrid",
	"Monty",
	"Mckinley",
	"Colin",
	nullptr
};

const char *s_girlNames[] =
{
	"Chanel",
	"Colleen",
	"Scorch",
	"Grub",
	"Anh",
	"Kenya",
	"Georgeann",
	"Anne",
	"Inge",
	"Georgeann",
	"Anne",
	"Inge",
	"Analisa",
	"Ligia",
	"Chasidy",
	"Marylee",
	"Lashandra",
	"Frida",
	"Katie",
	"Alene",
	"Brunilda",
	"Zoe",
	"Shavon",
	"Anjanette",
	"Daine",
	"Sheron",
	"Hilary",
	"Felicitas",
	"Cristin",
	"Ressie",
	"Tynisha",
	"Annie",
	"Sharilyn",
	"Astrid",
	"Charise",
	"Gregoria",
	"Angelic",
	"Lesley",
	"Mckinley",
	"Lindsay",
	"Shanelle",
	"Karyl",
	"Trudi",
	"Shaniqua",
	"Trinh",
	"Ardell",
	"Doreen",
	"Leanna",
	"Chrystal",
	"Treasa",
	"Dorris",
	"Rosalind",
	"Lenore",
	"Mari",
	"Kasie",
	"Ann",
	"Ryann",
	"Miki",
	"Lasonya",
	"Olimpia",
	"Shelby",
	"Lesley",
	"Mckinley",
	"Lindsay",
	"Dee",
	"Bobbie",
	"Cleo",
	"Leanna",
	"Chrystal",
	"Treasa",
	nullptr
};

// driver program
void WaitForEnter ()
{
	printf("\nPress Enter to quit");
	fflush(stdin);
	getchar();
}

void main(void)
{
	// how many min values all these KMV objects keep around
	static const int c_numMinValues = 15;

	printf("Using %u minimum values\n\n", c_numMinValues);

	// =====================  Boy Names  =====================
	// put our data into the KVM counter
	CKMVUniqueCounter<std::string, c_numMinValues> boyCounter;
	unsigned int index = 0;
	while (s_boyNames[index] != nullptr)
	{
		boyCounter.AddItem(s_boyNames[index]);
		index++;
	}

	// get our count estimates
	float arithmeticMeanCount, geometricMeanCount, harmonicMeanCount;
	boyCounter.UniqueCountEstimates(arithmeticMeanCount, geometricMeanCount, harmonicMeanCount);

	// get our actual unique count
	std::set<std::string> actualBoyUniques;
	index = 0;
	while (s_boyNames[index] != nullptr)
	{
		actualBoyUniques.insert(s_boyNames[index]);
		index++;
	}

	// print the results!
	printf("Boy Names:\n%u actual uniques\n", actualBoyUniques.size());
	float actualCount = (float)actualBoyUniques.size();
	printf("Estimated counts and percent error:\n  Arithmetic Mean: %0.2f\t%0.2f%%\n"
		"  Geometric Mean : %0.2f\t%0.2f%%\n  Harmonic Mean  : %0.2f\t%0.2f%%\n",
		arithmeticMeanCount, 100.0f * (arithmeticMeanCount - actualCount) / actualCount,
		geometricMeanCount, 100.0f * (geometricMeanCount - actualCount) / actualCount,
		harmonicMeanCount, 100.0f * (harmonicMeanCount - actualCount) / actualCount);

	// =====================  Girl Names  =====================
	// put our data into the KVM counter
	CKMVUniqueCounter<std::string, c_numMinValues> girlCounter;
	index = 0;
	while (s_girlNames[index] != nullptr)
	{
		girlCounter.AddItem(s_girlNames[index]);
		index++;
	}

	// get our count estimates
	girlCounter.UniqueCountEstimates(arithmeticMeanCount, geometricMeanCount, harmonicMeanCount);

	// get our actual unique count
	std::set<std::string> actualGirlUniques;
	index = 0;
	while (s_girlNames[index] != nullptr)
	{
		actualGirlUniques.insert(s_girlNames[index]);
		index++;
	}

	// print the results!
	printf("\nGirl Names:\n%u actual uniques\n", actualGirlUniques.size());
	actualCount = (float)actualGirlUniques.size();
	printf("Estimated counts and percent error:\n  Arithmetic Mean: %0.2f\t%0.2f%%\n"
		"  Geometric Mean : %0.2f\t%0.2f%%\n  Harmonic Mean  : %0.2f\t%0.2f%%\n",
		arithmeticMeanCount, 100.0f * (arithmeticMeanCount - actualCount) / actualCount,
		geometricMeanCount, 100.0f * (geometricMeanCount - actualCount) / actualCount,
		harmonicMeanCount, 100.0f * (harmonicMeanCount - actualCount) / actualCount);

	// =====================  Set Operations  =====================

	// make the KMV union and get our count estimates
	CKMVUniqueCounter<std::string, c_numMinValues> boyGirlUnion = KMVUnion(boyCounter, girlCounter);
	boyGirlUnion.UniqueCountEstimates(arithmeticMeanCount, geometricMeanCount, harmonicMeanCount);

	// make the actual union
	std::set<std::string> actualBoyGirlUnion;
	std::for_each(actualBoyUniques.begin(), actualBoyUniques.end(),
		[&actualBoyGirlUnion](const std::string& s)
		{
			actualBoyGirlUnion.insert(s);
		}
	);
	std::for_each(actualGirlUniques.begin(), actualGirlUniques.end(),
		[&actualBoyGirlUnion](const std::string& s)
		{
			actualBoyGirlUnion.insert(s);
		}
	);

	// print the results!
	printf("\nUnion:\n%u actual uniques in union\n", actualBoyGirlUnion.size());
	actualCount = (float)actualBoyGirlUnion.size();
	printf("Estimated counts and percent error:\n  Arithmetic Mean: %0.2f\t%0.2f%%\n"
		"  Geometric Mean : %0.2f\t%0.2f%%\n  Harmonic Mean  : %0.2f\t%0.2f%%\n",
		arithmeticMeanCount, 100.0f * (arithmeticMeanCount - actualCount) / actualCount,
		geometricMeanCount, 100.0f * (geometricMeanCount - actualCount) / actualCount,
		harmonicMeanCount, 100.0f * (harmonicMeanCount - actualCount) / actualCount);

	// calculate estimated jaccard index
	float estimatedJaccardIndex = KMVJaccardIndex(boyCounter, girlCounter);

	// calculate actual jaccard index and actual intersection
	size_t actualIntersection = 0;
	std::for_each(actualBoyUniques.begin(), actualBoyUniques.end(),
		[&actualGirlUniques, &actualIntersection] (const std::string &s)
		{
			if (actualGirlUniques.find(s) != actualGirlUniques.end())
				actualIntersection++;
		}
	);
	float actualJaccardIndex = (float)actualIntersection / (float)actualBoyGirlUnion.size();

	// calculate estimated intersection
	float estimatedIntersection = estimatedJaccardIndex * (float)actualBoyGirlUnion.size();

	// print the intersection and jaccard index information
	printf("\nIntersection:\n%0.2f estimated, %u actual.  Error: %0.2f%%\n",
		estimatedIntersection,
		actualIntersection,
		100.0f * (estimatedIntersection - (float)actualIntersection) / (float)actualIntersection);

	printf("\nJaccard Index:\n%0.2f estimated, %0.2f actual.  Error: %0.2f%%\n",
		estimatedJaccardIndex,
		actualJaccardIndex,
		100.0f * (estimatedJaccardIndex-actualJaccardIndex) / actualJaccardIndex
	);

	WaitForEnter();
}
[/code]

Here's the output of the program:
<img src="https://demofox2.files.wordpress.com/2015/02/KMVOutput.png"/>

<h2>Upgrading from Set to Multi Set</h2>

Interestingly, if you keep a count of how many times you've seen each hash in the k min hash, you can upgrade this algorithm from being a set algorithm to a multi set algorithm and get some other interesting information from it.

Where a set is basically a list of unique items, a multi set is a set of unique items that also have a count associated with them.  In this way, you can think of a multiset as just a list of items which may appear more than once.

Upgrading KMV to a multi set algorithm lets you do some new and interesting things where instead of getting information only about unique counts, you can get information about non unique counts too.  But to re-iterate, you still keep the ability to get unique information as well, so it is kind of like an upgrade, if you are interested in multiset information.

<h2>Links</h2>

Want more info about this technique?

<a href="http://research.neustar.biz/2012/07/09/sketch-of-the-day-k-minimum-values/" target="_blank">Sketch of the Day: K-Minimum Values</a>

<a href="http://content.research.neustar.biz/blog/kmv.html" target="_blank">Sketch of the Day: Interactive KMV web demo</a>

<a href="http://research.neustar.biz/2012/08/20/k-minimum-values-sketching-error-hash-functions-and-you/" target="_blank">K-Minimum Values: Sketching Error, Hash Functions, and You</a>

<a href="http://en.wikipedia.org/wiki/MinHash#Jaccard_similarity_and_minimum_hash_values" target="_blank">Wikipedia: MinHash - Jaccard similarity and minimum hash values</a>

<h2>All Done</h2>

I wanted to mention that even though this algorithm is a great, intuitive introduction into probabilistic algorithms, there are actually much better distinct value estimators in use today, such as one called HyperLogLog which seems to be the current winner.  Look for a post on HyperLogLog soon :P

KMV is better than other algorithms at a few things though.  Specifically, from what I've read, that it can extend to multiset makes it very useful, and also it is much easier to calculate intersections versus other algorithms.

I also wanted to mention that there are interesting usage cases for this type of algorithms in game development, but where these probabilistic algorithms really shine is in massive data situations like google, amazon, netflix etc.  If you go out searching for more info on this stuff, you'll probably be led down many big data / web dev rabbit holes, because that's where the best information about this stuff resides.

Lastly, I wanted to mention that I'm using the C++ std::hash built in hash function.  I haven't done a lot of research to see how it compares to other hashes, but I'm sure, much like rand(), the built in functionality leaves much to be desired for "power user" situations.  In other words, if you are going to use this in a realistic situation, you probably are better off using a better hashing algorithm.  If you need a fast one, you might look into the latest <a href="http://en.wikipedia.org/wiki/MurmurHash" target="_blank">murmurhash</a> variant!

More probabilistic algorithm posts coming soon, so keep an eye out!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1495</wp:post_id>
		<wp:post_date><![CDATA[2015-02-03 20:19:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-04 04:19:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[estimating-counts-of-distinct-values-with-kmv]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495692208;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1803;}i:1;a:1:{s:2:"id";i:1483;}i:2;a:1:{s:2:"id";i:456;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Estimating Set Membership With a Bloom Filter</title>
		<link>http://blog.demofox.org/2015/02/08/estimating-set-membership-with-a-bloom-filter/</link>
		<pubDate>Mon, 09 Feb 2015 04:12:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1483</guid>
		<description></description>
		<content:encoded><![CDATA[Have you ever found yourself in a situation where you needed to keep track of whether or not you've seen an item, but the number of items you have to keep track of is either gigantic or completely unbounded?

This comes up a lot in "massive data" situations (like internet search engines), but it can also come up in games sometimes - like maybe having a monster in an MMO game remember which players have tried to attack it before so it can be hostile when it sees them again.

One solution to the game example could be to keep a list of all players the monster had been attacked by, but that will get huge and eat up a lot of memory and take time to search the list for a specific player.

You might instead decide you only want to keep the last 20 players the monster had been attacked by, but that still uses up a good chunk of memory if you have a lot of different monsters tracking this information for themselves, and 20 may be so low, that the monster will forget people who commonly attack it by the time it sees them again.

<h2>Enter The Bloom Filter</h2>

There is actually an interesting solution to this problem, using a probabilistic data structure called a bloom filter - and before you ask, no, it has nothing to do with graphics.  It was invented by a guy named Burton Howard Bloom in 1970.

A bloom filter basically has M number of bits as storage and K number of hashes.

To illustrate an example, let's say that we have 10 bits and only 1 hash.

When we insert an item, what we want to do is hash that item and then modulus that has value against 10 to get a pseudo-random (but deterministic) value 0-9.  That value is the index of the bit we want to set to true.  After we set that bit to true, we can consider that item is inserted into the set.

When we want to ask if an item exists in a given bloom filter, what we do is again hash the item and modulus it against 10 to get the 0-9 value again.  If that bit is set to false, we can say that item is NOT in the set with certainty, but if it's true we can only say it MIGHT be in the set.

If the bit is true, we can't say that for sure it's part of the set, because something else may have hashed to the same bit and set it, so we have to consider it a maybe, not a definite yes.  In fact, with only 10 bits and 1 hash function, with a good hash function, there is a 10% chance that any item we insert will result in the same bit being set.

To be a little more sure of our "maybe" being a yes, and not a false positive, we can do two things... we can increase the number of bits we use for the set (which will reduce collisions), or we can increase the number of hashes we do (although there comes a point where adding more hashes starts decreasing accuracy again).

If we add a second hash, all that means is that we will do a second hash, get a second 0-9 value, and write a one to that bit AS WELL when we insert an item.  When checking if an item exists in a set, we also READ that bit to see if it's true.

For N hashes, when inserting an item into a bloom filter, you get (up to) N different bits that you need to set to 1.

When checking if an item exists in a bloom filter, you get (up to) N different bits, all of which need to be 1 to consider the item in the set.

There are a few mathematical formulas you can use to figure out how many bits and hashes you would want to use to get a desired reliability that your maybes are in fact yeses, and also there are some formulas for figuring out the probability that your maybe is in fact a yes for any given bloom filter in a runtime state.

Depending on your needs and usage case, you may treat your "maybe" as a "yes" and move on, or you could treat a "maybe" as a time when you need to do a more expensive test (like, a disk read?).  In those situations, the "no" is the valuable answer, since it means you can skip the more expensive test.

<h2>Estimating Item Count In Bloom Filters</h2>

Besides being able to test an item for membership, you can also estimate how many items are in any given bloom filter:

<b>EstimatedCount = -(NumBits * ln(1 - BitsOn / NumBits)) / NumHashes</b>

Where BitsOn is the count of how many bits are set to 1 and ln is natural log.

<h2>Set Operations On Bloom Filters</h2>

If you have two bloom filters, you can do some interesting set operations on them.

<b>Union</b>

One operation you can do with two bloom filters is union them, which means that if you have a bloom filter A and bloom filter B, you end up with a third bloom filter C that contains all the unique items from both A and B.

Besides being able to test this third bloom filter to see if it contains specific items, you can also ask it for an estimated count of objects it contains, which is useful for helping figure out how similar the sets are.

Essentially, if A estimates having 50 items and B estimates having 50 items, and their union, C, estimates having 51 items, that means that the items in A and B were almost all the same (probably).

How you union two bloom filters is you just do a bitwise OR on every bit in A and B to get the bits for C.  Simple and fast to calculate.

<b>Intersection</b>

Another operation you can do with two bloom filters is to calculate their intersection.  The intersection of two sets is just the items that the two sets have in common.

Again, besides being able to test this third bloom filter for membership of items, you can also use it to get an estimated count of objects to help figure out how similar the sets are.

Similary to the union, you can reason that if the intersection count is small compared to the counts of the individual bloom filters that went into it, that they were probably not very similar.

There are two ways you can calculate the intersection of two bloom filters.

The first way is to do a bitwise AND on every bit in A and B to get the bits for C.  Again, super simple and faster to calculate.

The other way just involves some simple math:

<b>Count(Intersection(A,B)) = (Count(A) + Count(B)) - Count(Union(A,B))</b>

Whichever method is better depends on your needs and your usage case.

<b>Jaccard Index</b>

Just like I talked about in the KMV post two posts ago, you can also calculate an estimated Jaccard Index for two bloom filters, which will give you a value between 0 and 1 that tells you how similar two sets are.

If the Jaccard index is 1, that means the sets are the same and contain all the same items.  If the Jaccard index is 0, that means the sets are completely different.  If the Jaccard index is 0.5 that means that they have half of their items in common.

To calculate the estimated Jaccard Index, you just use this simple formula:

<b>Jaccard Index = Count(Intersection(A,B)) / Count(Union(A,B))</b>

<h2>Estimating False Positive Rate</h2>

The more items you insert into a bloom filter the higher the false positive rate gets, until it gets to 100% which means all the bits are set and if you ask if it contains an item, it will never say no.

To combat this, you may want to calculate your error rate at runtime and maybe spit out a warning if the error rate starts getting too high, so that you know you need to adjust the number of bits or number of hashes, or at very least you can alert the user that the reliability of the answers has degraded.

Here is the formula to calculate the false positive rate of a bloom filter at runtime:

<b>ErrorRate = (1 - e^(-NumHashes * NumItems / NumBits))^NumHashes</b>

NumItems is the number of unique items that have been inserted into the bloom filter.  If you know that exact value somehow you can use that real value, but in the more likely case, you won't know the exact value, so you can use the estimated unique item count formula described above to get an estimated unique count.

<h2>Managing the Error Rate of False Positives</h2>

As I mentioned above, there are formulas to figure out how many bits and how many hashes you need, to store a certain number of items with a specific maximum error rate.

You can work this out in advance by figuring out about how many items you expect to see.

First, you calculate the ideal bit count:

<b>NumBits = - (NumItems * ln(DesiredFalsePositiveProbability)) / (ln(2)^2)</b>

Where NumItems is the number of items you expect to put into the bloom filter, and DesiredFalsePositiveProbability is the error rate you want when the bloom filter has the expected number of items in it.  The error rate will be lower until the item count reaches NumItems.

Next, you calculate the ideal number of hashes:

<b>NumHashes = NumBits / NumItems * ln(2)</b>

Then, you just create your bloom filter, using the specified number of bits and hashes.

<h2>Example Code</h2>

Here is some example bloom filter c++ code with all the bells and whistles.  Instead of using multiple hashes, I just grabbed some random numbers and xor them against the hash of each item to make more deterministic but pseudo-random numbers (that's what a hash does too afterall).  If you want to use a bloom filter in a more serious usage case, you may want to actually use multiple hashes, and you probably want to use a better hashing algorithm than std::hash.

[code language="cpp"]
#include <stdio.h>
#include <algorithm>
#include <array>
#include <string>
#include <stdint.h>
#include <cmath>
#include <set>
 
// If you get a compile error here, remove the "class" from this enum definition.
// It just means your compiler doesn't support enum classes yet.
enum class EHasItem
{
    e_no,
    e_maybe
};
 
// The CBloomFilter class
template <typename T, unsigned int NUMBYTES, unsigned int NUMHASHES, typename HASHER = std::hash<T>>
class CBloomFilter
{
public:
    // constants
    static const unsigned int c_numHashes = NUMHASHES;
    static const unsigned int c_numBits = NUMBYTES*8;
    static const unsigned int c_numBytes = NUMBYTES;
 
    // friends
    template <typename T, unsigned int NUMBYTES, unsigned int NUMHASHES, typename HASHER>
    friend float UnionCountEstimate(const CBloomFilter<T, NUMBYTES, NUMHASHES, HASHER>& left, const CBloomFilter<T, NUMBYTES, NUMHASHES, HASHER>& right);
	template <typename T, unsigned int NUMBYTES, unsigned int NUMHASHES, typename HASHER>
	friend float IntersectionCountEstimate (const CBloomFilter<T, NUMBYTES, NUMHASHES, HASHER>& left, const CBloomFilter<T, NUMBYTES, NUMHASHES, HASHER>& right);
 
    // constructor
    CBloomFilter (const std::array<size_t, c_numHashes>& randomSalt)
        : m_storage()              // initialize bits to zero
        , m_randomSalt(randomSalt) // store off the random salt to use for the hashes
    { }
 
    // interface
    void AddItem (const T& item)
    {
        const size_t rawItemHash = HASHER()(item);
        for (unsigned int index = 0; index < c_numHashes; ++index)
        {
            const size_t bitIndex = (rawItemHash ^ m_randomSalt[index])%c_numBits;
            SetBitOn(bitIndex);
        }
    }
 
    EHasItem HasItem (const T& item) const
    {
        const size_t rawItemHash = HASHER()(item);
        for (unsigned int index = 0; index < c_numHashes; ++index)
        {
            const size_t bitIndex = (rawItemHash ^ m_randomSalt[index])%c_numBits;
            if (!IsBitOn(bitIndex))
                return EHasItem::e_no;
        }
        return EHasItem::e_maybe;
    }
 
    // probabilistic interface
    float CountEstimate () const
    {
        // estimates how many items are actually stored in this set, based on how many
        // bits are set to true, how many bits there are total, and how many hashes
        // are done for each item.
        return -((float)c_numBits * std::log(1.0f - ((float)CountBitsOn() / (float)c_numBits))) / (float)c_numHashes;
    }
 
    float FalsePositiveProbability (size_t numItems = -1) const
    {
        // calculates the expected error.  Since this relies on how many items are in
        // the set, you can either pass in the number of items, or use the default
        // argument value, which means to use the estimated item count
        float numItemsf = numItems == -1 ? CountEstimate() : (float)numItems;
        return pow(1.0f - std::exp(-(float)c_numHashes * numItemsf / (float)c_numBits),(float)c_numHashes);
    }
     
private:
 
    inline void SetBitOn (size_t bitIndex)
    {
        const size_t byteIndex = bitIndex / 8;
        const uint8_t byteValue = 1 << (bitIndex%8);
        m_storage[byteIndex] |= byteValue;
    }
 
    inline bool IsBitOn (size_t bitIndex) const
    {
        const size_t byteIndex = bitIndex / 8;
        const uint8_t byteValue = 1 << (bitIndex%8);
        return ((m_storage[byteIndex] & byteValue) != 0);
    }
 
    size_t CountBitsOn () const
    {
        // likely a more efficient way to do this but ::shrug::
        size_t count = 0;
        for (size_t index = 0; index < c_numBits; ++index)
        {
            if (IsBitOn(index))
                ++count;
        }
        return count;
    }
     
    // storage of bits
    std::array<uint8_t, c_numBytes> m_storage;
 
    // Storage of random salt values
    // It could be neat to use constexpr and __TIME__ to make compile time random numbers.
    // That isn't available til like c++17 or something though sadly.
    const std::array<size_t, c_numHashes>& m_randomSalt;
};
 
// helper functions
template <typename T, unsigned int NUMBYTES, unsigned int NUMHASHES, typename HASHER>
float UnionCountEstimate (const CBloomFilter<T, NUMBYTES, NUMHASHES, HASHER>& left, const CBloomFilter<T, NUMBYTES, NUMHASHES, HASHER>& right)
{
    // returns an estimated count of the unique items if both lists were combined
    // example: (1,2,3) union (2,3,4) = (1,2,3,4) which has a union count of 4
    CBloomFilter<T, NUMBYTES, NUMHASHES, HASHER> temp(left.m_randomSalt);
    for (unsigned int index = 0; index < left.c_numBytes; ++index)
        temp.m_storage[index] = left.m_storage[index] | right.m_storage[index];
     
    return temp.CountEstimate();
}
 
template <typename T, unsigned int NUMBYTES, unsigned int NUMHASHES, typename HASHER>
float IntersectionCountEstimate (const CBloomFilter<T, NUMBYTES, NUMHASHES, HASHER>& left, const CBloomFilter<T, NUMBYTES, NUMHASHES, HASHER>& right)
{
    // returns an estimated count of the number of unique items that are shared in both sets
    // example: (1,2,3) intersection (2,3,4) = (2,3) which has an intersection count of 2
    CBloomFilter<T, NUMBYTES, NUMHASHES, HASHER> temp(left.m_randomSalt);
    for (unsigned int index = 0; index < left.c_numBytes; ++index)
        temp.m_storage[index] = left.m_storage[index] & right.m_storage[index];
     
    return temp.CountEstimate();
}
 
float IdealBitCount (unsigned int numItemsInserted, float desiredFalsePositiveProbability)
{
    // given how many items you plan to insert, and a target false positive probability at that count, this returns how many bits
    // of flags you should use.
    return (float)-(((float)numItemsInserted*log(desiredFalsePositiveProbability)) / (log(2)*log(2)));
}
 
float IdealHashCount (unsigned int numBits, unsigned int numItemsInserted)
{
    // given how many bits you are using for storage, and how many items you plan to insert, this is the optimal number of hashes to use
    return ((float)numBits / (float)numItemsInserted) * (float)log(2.0f);
}
 
// random numbers from random.org
// https://www.random.org/cgi-bin/randbyte?nbytes=40&format=h
// in 64 bit mode, size_t is 64 bits, not 32.  The random numbers below will be all zero in the upper 32 bits!
static const std::array<size_t, 10> s_randomSalt =
{
    0x6ff3f8ef,
    0x9b565007,
    0xea709ce4,
    0xf7d5cbc7, 
    0xcb7e38e1,
    0xd54b5323,
    0xbf679080,
    0x7fb78dee,
    0x540c9e8a,
    0x89369800
};
 
// data for adding and testing in our list
static const char *s_dataList1[] =
{
    "hello!",
    "blah!",
    "moo",
    nullptr
};
 
static const char *s_dataList2[] =
{
    "moo",
    "hello!",
    "mooz",
    "kitty",
    "here is a longer string just cause",
    nullptr
};
 
static const char *s_askList[] =
{
    "moo",
    "hello!",
    "unf",
    "boom",
    "kitty",
    "mooz",
    "blah!",
    nullptr
};
 
// driver program
void WaitForEnter ()
{
    printf("\nPress Enter to quit");
    fflush(stdin);
    getchar();
}
 
void main(void)
{
    CBloomFilter<std::string, 8, 10> set1(s_randomSalt);
    CBloomFilter<std::string, 8, 10> set2(s_randomSalt);
	std::set<std::string> actualSet1;
	std::set<std::string> actualSet2;
 
    printf("Creating 2 bloom filter sets with %u bytes of flags (%u bits), and %u hashes.\n\n", set1.c_numBytes, set1.c_numBits, set1.c_numHashes);
 
	// create data set 1
    unsigned int index = 0;
    while (s_dataList1[index] != nullptr)
    {
        printf("Adding to set 1: \"%s\"\n", s_dataList1[index]);
        set1.AddItem(s_dataList1[index]);
		actualSet1.insert(s_dataList1[index]);
        index++;
    }
 
	// create data set 2
    printf("\n");
    index = 0;
    while (s_dataList2[index] != nullptr)
    {
        printf("Adding to set 2: \"%s\"\n", s_dataList2[index]);
        set2.AddItem(s_dataList2[index]);
		actualSet2.insert(s_dataList2[index]);
        index++;
    }
 
	// query each set to see if they think that they contain various items
    printf("\n");
    index = 0;
    while (s_askList[index] != nullptr)
    {
        printf("Exists: \"%s\"? %s & %s (actually %s & %s)\n",
            s_askList[index],
            set1.HasItem(s_askList[index]) == EHasItem::e_maybe ? "maybe" : "no",
            set2.HasItem(s_askList[index]) == EHasItem::e_maybe ? "maybe" : "no",
			actualSet1.find(s_askList[index]) != actualSet1.end() ? "yes" : "no",
			actualSet2.find(s_askList[index]) != actualSet2.end() ? "yes" : "no");
        index++;
    }

	// show false positive rates
    printf ("\nFalse postive probability = %0.2f%% & %0.2f%%\n", set1.FalsePositiveProbability()*100.0f, set2.FalsePositiveProbability()*100.0f);
    printf ("False postive probability at 10 items = %0.2f%%\n", set1.FalsePositiveProbability(10)*100.0f);
    printf ("False postive probability at 25 items = %0.2f%%\n", set1.FalsePositiveProbability(25)*100.0f);
    printf ("False postive probability at 50 items = %0.2f%%\n", set1.FalsePositiveProbability(50)*100.0f);
    printf ("False postive probability at 100 items = %0.2f%%\n", set1.FalsePositiveProbability(100)*100.0f);

	// show ideal bit counts and hashes.
    const unsigned int itemsInserted = 10;
    const float desiredFalsePositiveProbability = 0.05f;
    const float idealBitCount = IdealBitCount(itemsInserted, desiredFalsePositiveProbability);
    const float idealHashCount = IdealHashCount((unsigned int)idealBitCount, itemsInserted);
    printf("\nFor %u items inserted and a desired false probability of %0.2f%%\nYou should use %0.2f bits of storage and %0.2f hashes\n",
        itemsInserted, desiredFalsePositiveProbability*100.0f, idealBitCount, idealHashCount);

	// get the actual union
	std::set<std::string> actualUnion;
	std::for_each(actualSet1.begin(), actualSet1.end(), [&actualUnion] (const std::string& s) {
		actualUnion.insert(s);
	});
	std::for_each(actualSet2.begin(), actualSet2.end(), [&actualUnion] (const std::string& s) {
		actualUnion.insert(s);
	});

	// get the actual intersection
	std::set<std::string> actualIntersection;
	std::for_each(actualSet1.begin(), actualSet1.end(), [&actualIntersection,&actualSet2] (const std::string& s) {
		if (actualSet2.find(s) != actualSet2.end())
			actualIntersection.insert(s);
	});

	// caclulate actual jaccard index
	float actualJaccardIndex = (float)actualIntersection.size() / (float)actualUnion.size();

	// show the estimated and actual counts, and error of estimations
	printf("\nSet1: %0.2f estimated, %u actual.  Error: %0.2f%%\n",
		set1.CountEstimate(),
		actualSet1.size(),
		100.0f * ((float)set1.CountEstimate() - (float)actualSet1.size()) / (float)actualSet1.size()
	);
	printf("Set2: %0.2f estimated, %u actual.  Error: %0.2f%%\n",
		set2.CountEstimate(),
		actualSet2.size(),
		100.0f * ((float)set2.CountEstimate() - (float)actualSet2.size()) / (float)actualSet2.size()
	);

	float estimatedUnion = UnionCountEstimate(set1, set2);
	float estimatedIntersection = IntersectionCountEstimate(set1, set2);
	float estimatedJaccardIndex = estimatedIntersection / estimatedUnion;
	printf("Union: %0.2f estimated, %u actual.  Error: %0.2f%%\n",
		estimatedUnion,
		actualUnion.size(),
		100.0f * (estimatedUnion - (float)actualUnion.size()) / (float)actualUnion.size()
	);
	printf("Intersection: %0.2f estimated, %u actual.  Error: %0.2f%%\n",
		estimatedIntersection,
		actualIntersection.size(),
		100.0f * (estimatedIntersection - (float)actualIntersection.size()) / (float)actualIntersection.size()
	);
	printf("Jaccard Index: %0.2f estimated, %0.2f actual.  Error: %0.2f%%\n",
		estimatedJaccardIndex,
		actualJaccardIndex,
		100.0f * (estimatedJaccardIndex - actualJaccardIndex) / actualJaccardIndex
	);
 
    WaitForEnter();
}
[/code]

And here is the output of that program:
<img src="https://demofox2.files.wordpress.com/2015/02/BloomFilterOutput.png"/>

In the output, you can see that all the existence checks were correct.  All the no's were actually no's like they should be, but also, all the maybe's were actually present, so there were no false positives.

The estimated counts were a little off but were fairly close.  The first list was estimated at 2.4 items, when it actually had 3.  The second list was estimated at 4.44 items when it actually had 5 items.

It's reporting a very low false positive rate, which falls in line with the fact that we didn't see any false positives.  The projected false positive rates at 10, 25, 50 and 100 items show us that the set doesn't have a whole lot more capacity if we want to keep the error rate low.

The union, intersection and jaccard index error rate was pretty low, but the error rate was definitely larger than the false positive rate.

Interestingly, if you look at the part which reports the ideal bit and hash count for 10 items, it says that we should actually use FEWER hashes than we do and a couple less bits.  You can actually experiment by changing the number of hashes to 4 and seeing that the error rate goes down.  In the example code we are actually using TOO MANY hashes, and it's hurting our probability rate, for the number of items we plan on inserting.

<h2>Interesting Idea</h2>

I was chatting with a friend Dave, who said he was using a bloom filter like structure to try and help make sure he didn't try the same genetic algorithm permutation more than once.  An issue with that is that hash collisions could thwart the ability for evolution to happen correctly by incorrectly disallowing a wanted permutation from happening just because it happened to hash to the same value as another permutation already tried.  To help this situation, he just biased against permutations found in the data structure, instead of completely blocking them out.  Basically, if the permutation was marked as "maybe seen" in the data structure, he'd give it some % chance that it would allow it to happen "again" anyways.

Unfortunately, the idea in general turned out to be impractical. He had about 40 bits of genetic information which is about 1 trillion unique items (2^40).

for being able to store only 1 billion items - which is 1000 times smaller - with 5% false positive rate, that would require about 750MB of storage of bits.

Dropping the requirement to being 25% false positive rate, it still requires 350MB, and to 75% requires 70MB.  Even at 99% false positive rate allowed, it requires 2.5MB, and we are still 1000 times too small.

So, for 1 trillion permutations, the size of the bloom filter is unfortunately far too large and he ended up going a different route.

The technique of rolling a random number when you get a maybe is pretty neat though, so wanted to mention it (:

<h2>Next Up</h2>

We've now talked about a probabilistic unique value counter (KMV) that can count the number of unique objects seen.

We then talked about a probabilistic set structure (Bloom Filter) that can keep track of set membership of objects.

How about being able to probabilistically store a list of non unique items?

One way to do this would be to have a count with each item seen instead of only having a bit of whether it's present or not.  When you have a count per item, this is known as a multiset, or the more familiar term: histogram.

If you change a bloom filter to have a count instead of a single bit, that's called a counting bloom filter and completely works.

There's a better technique for doing this though called count min sketch. Look for a post soon!

<h2>Links</h2>

<a href="http://en.wikipedia.org/wiki/Bloom_filter" target="_blank">Wikipedia: Bloom Filter</a>
<a href="http://billmill.org/bloomfilter-tutorial/" target="_blank">Interactive Bloom Filter Demo</a>

Check this out, it's a physical implementation of a bloom filter (WAT?!)
<a href="http://en.wikipedia.org/wiki/Superimposed_code" target="_blank">Wikipedia: Superimposed code</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1483</wp:post_id>
		<wp:post_date><![CDATA[2015-02-08 20:12:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-09 04:12:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[estimating-set-membership-with-a-bloom-filter]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495639829;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:47;}i:1;a:1:{s:2:"id";i:2;}i:2;a:1:{s:2:"id";i:54;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting Strongly Typed Typedefs Using Phantom Types</title>
		<link>http://blog.demofox.org/2015/02/05/getting-strongly-typed-typedefs-using-phantom-types/</link>
		<pubDate>Thu, 05 Feb 2015 21:03:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1589</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="https://demofox2.files.wordpress.com/2015/02/phantom.png"/>

In C++, typedefs have a lot of really handy uses.

They can make code easier to read:
[code language="cpp"]

    // ugly code:
    std::map&lt;std::string, size_t&gt; wordCounts;
    for (std::map&lt;std::string, size_t&gt;::iterator it = wordCounts.begin(); it != wordCounts.end(); ++it)
    {
        ...
    }

    // typedefs
    typedef std::map&lt;std::string, size_t&gt; TWordCounts; 
    typedef TWordCounts::iterator TWordCountInterator;

    // prettier, simplified code:
    TWordCounts wordCounts;
    for (TWordCountInterator it = wordCounts.begin(); it != wordCounts.end(); ++it)
    {
        ...
    }
[/code]

And, if you find yourself wanting to change the std::map above to a std::unordered_map, typedefs can make your code easier to maintain since you only have one place to change instead of several (yes, decltype can help too!).

Typedefs can bite you sometimes though if you aren't careful.  Look at the below, where the code's diligent author made friendly typedefs for model and animation ids:

[code language="cpp"]
    typedef unsigned int TModelID;
    typedef unsigned int TAnimationID;

    TModelID id = GetModelID();
    SetAnimationID(id); // BUG!  SetAnimation() wants a TAnimationID!
[/code]

Wouldn't it be great if you could make it so even though TModelID and TAnimationID are the same underlying type, the compiler could give you a compile error when you tried to use the wrong one?

One way to solve this problem is to use C++ 11's feature enum classes, but that isn't the solve I want to show you today (that technique is pretty straightforward anyways...).  The solve I want to show you uses a spooky technique called phantom types.

<h2>Phantom Types</h2>

Here is how you might see a phantom type in the wild:

[code language="cpp"]
template &lt;typename PHANTOM_TYPE&gt;
struct SUInt
{
public:
    SUInt (unsigned int value) : m_value(value) { }
    inline unsigned int&amp; Value () { return &amp;m_value; }
private:
    unsigned int m_value;
};
[/code]

You might be asking yourself "why??" or "what??" or perhaps even "I wonder what the wife will be making for dinner tonight?".

The neat thing about that is that you can create dummy types to use as the template parameter, and then if you try to mix and match objects that use a different template parameter you'll get a compile error instead of a subtle run time bug.  Fail hard and fail early!

Here's how to use phantom types to solve our issue:

[code language="cpp"]
// our phantom-type-using struct
template &lt;typename PHANTOM_TYPE&gt;
struct SUInt
{
public:
    SUInt (unsigned int value) : m_value(value) { }
    inline unsigned int&amp; Value () { return &amp;m_value; }
private:
    unsigned int m_value;
};

// some &quot;tag types&quot; to use as phantom types
struct SModelID {};
struct SAnimationID {};

// our strongly typed typedefs, which both are really just unsigned ints
typedef SUInt&lt;SModelID&gt; TModelID;
typedef SUInt&lt;SAnimationID&gt; TAnimationID;

TModelID GetModelID ()
{
    TModelID ret(3);
    return ret;
}

void SetAnimationID (TAnimationID animId)
{
    // do something with the animation id
}

int main(int argc, char **argv)
{
    TModelID id = GetModelID();
    SetAnimationID(id);
    return 0;
}
[/code]

If you try to compile that you get a very lovely compile error.

<b>error C2664: 'SetAnimationID' : cannot convert parameter 1 from 'TModelID' to 'TAnimationID'</b>

And taking it a step further, you could abstract the unsigned int away to make this code, in case you want to change the underlying type of either ID in the future:

[code language="cpp"]
// our phantom-type-using struct
template &lt;typename T, typename PHANTOM_TYPE&gt;
struct SStronglyTypedType
{
public:
    SStronglyTypedType (T value) : m_value(value) { }
    inline T&amp; Value () { return &amp;m_value; }
private:
    T m_value;
};

// some &quot;tag types&quot; to use as phantom types
struct SModelID {};
struct SAnimationID {};

// our strongly typed typedefs, which both are really just unsigned ints
typedef SStronglyTypedType&lt;unsigned int, SModelID&gt; TModelID;
typedef SStronglyTypedType&lt;unsigned int, SAnimationID&gt; TAnimationID;

TModelID GetModelID ()
{
    TModelID ret(3);
    return ret;
}

void SetAnimationID (TAnimationID animId)
{
    // do something with the animation id
}

int main(int argc, char **argv)
{
    TModelID id = GetModelID();
    SetAnimationID(id);
    return 0;
}
[/code]

Trying to compile that code again gives the compile error:

<b>error C2664: 'SetAnimationID' : cannot convert parameter 1 from 'TModelID' to 'TAnimationID'</b>

If you are going to be using complex objects with this setup, you are going to want to more efficiently handle copy construction and such (check links section for more info), but the above solves our problem.  We can no longer mix up model id's and animation id's, even though they are both just really an unsigned int.

And best of all, except for the copy construction type issues, this code adds no overhead in memory or run time processing costs.

<h2>Other Uses</h2>

Besides the above, this strongly typed phantom type stuff has some other interesting uses.
<ul>
<li><b>Units</b> - If you have some functions that take units of time in seconds, and others that take it in milliseconds, you could use this setup to make sure you never passed the wrong type to the wrong function.  You could perhaps even make implicit conversion to fix it for you, if you desired that.</li>
<li><b>Validation</b> - This was originally shown to me as a way to make sure that raw data from the user was validated before being used.  Raw data from the user would use one phantom type, and validation functions would convert it to a different, validated phantom type.  In this way, you could be sure that no unvalidated (or unsanitized!) data went to something that was vulnerable.</li>
<li><b>Deterministic Calculations</b> - You could use this technique if you have a deterministic simulation that you need to run the same way every time.  These phantom types could ensure no "non deterministic" data got into your equations - such as data from user input, or the clock, or based on frame rate, etc.</li>
</ul>
<h2>Links</h2>

Here is the info about copy construction (etc) that i mentioned.  Every C++ programmer should know these things!
<a href="https://blog.feabhas.com/2014/12/the-rule-of-the-big-three-and-a-half-resource-management-in-c/" target="_blank">Sticky Bits: The Rule of The Big Three (and a half) – Resource Management in C++</a>
<a href="https://blog.feabhas.com/2015/01/the-rule-of-the-big-four-and-a-half-move-semantics-and-resource-management/" target="_blank">Sticky Bits: The Rule of The Big Four (and a half) – Move Semantics and Resource Management</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1589</wp:post_id>
		<wp:post_date><![CDATA[2015-02-05 13:03:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-05 21:03:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-strongly-typed-typedefs-using-phantom-types]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495671248;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2084;}i:1;a:1:{s:2:"id";i:3724;}i:2;a:1:{s:2:"id";i:2055;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Count Min Sketch: A Probabilistic Histogram</title>
		<link>http://blog.demofox.org/2015/02/22/count-min-sketch-a-probabilistic-histogram/</link>
		<pubDate>Sun, 22 Feb 2015 20:24:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1658</guid>
		<description></description>
		<content:encoded><![CDATA[Count min sketch is a probabilistic histogram that was invented in 2003 by Graham Cormode and S. Muthukrishnan.

It's a histogram in that it can store objects (keys) and associated counts.

It's probabilistic in that it lets you trade space and computation time for accuracy.

The count min sketch is pretty similar to a bloom filter, except that instead of storing a single bit to say whether an object is in the set, the count min sketch allows you to keep a count per object.  You can read more about bloom filters here: <a href="http://blog.demofox.org/2015/02/08/estimating-set-membership-with-a-bloom-filter/" target="_blank">Estimating Set Membership With a Bloom Filter</a>.

It's called a "sketch" because it's a smaller summarization of a larger data set.

<h2>Inserting an Item</h2>

The count min sketch is just a 2 dimensional array, with size of W x D.  The actual data type in the array depends on how much storage space you want.  It could be an unsigned char, it could be 4 bits, or it could be a uint64 (or larger!).

Each row (value of D) uses a different hash function to map objects to an index of W.

To insert an object, for each row you hash the object using that row's hash function to get the W index for that object, then increment the count at that position.

In this blog post, I'm only going to be talking about being able to add items to the count min sketch.  There are different rules / probabilities / etc for count min sketches that can have objects removed, but you can check out the links at the bottom of this post for more information about that!

<h2>Getting an Item Count</h2>

When you want to get the count of how many times an item has been added to the count min sketch, you do a similar operation as when you insert.

For each row, you hash the object being asked about with that row's hash function to get the W index and then get the value for that row at the W index.

This will give you D values and you just return the smallest one.

The reason for this, is because due to hash collisions of various hash functions, your count in a specific slot may have been incorrectly incremented extra times due to other objects hashing to the same object.  If you take the minimum value you've seen across all rows, you are guaranteed to be taking the value that has the least number of hash collisions, so is guaranteed to be most correct, and in fact guaranteed to be greater than or equal to the actual answer - but never lower than the actual answer.

<h2>Dot Product (Inner Product)</h2>

If you read the last post on using dot product with histograms to gauge similarity, you might be wondering if you can do a dot product between two count min sketch objects.

Luckily yes, you can!  They need to have the same W x D dimensions and they need to use the same hash functions per row, but if that's true, you can calculate a dot product value very easily.

If you have two count min sketch objects A and B that you want to calculate the dot product for, you dot product each row (D index) of the two count min sketch objects.  This will leave you with D dot products and you just return the smallest one.  This guarantees that the dot product value you calculate will have the fewest hash collisions (so will be most accurate), and will also guarantee that the estimate is greater that or equal to the actual answer, but will never be lower.

<h2>To Normalize Or Not To Normalize</h2>

There is a caveat here though with doing a dot product between two count min sketch objects.  If you do a normalized dot product (normalize the vectors before doing a dot product, or dividing the answer by the length of the two vectors multiplied together), the guarantee that the dot product is greater than or equal to the true answer no longer holds!

The reason for this is that the formula for doing a normalized dot product is like this:
normalized dot product = dot(A,B) / (length(A)*length(B))

In a count min sketch, the dot(A,B) estimate is guaranteed to greater than or equal to the true value.

The length of a vector is also guaranteed to be greater than or equal to the length of the true vector (the vector made from the actual histogram values).

This means that the numerator and the denominator BOTH have varying levels of overestimation in them.  Overestimation in the numerator makes the normalized dot product estimate larger, while overestimation in the denominator makes the normalized dot product estimate smaller.

The result is that a normalized dot product estimate can make no guarantee about being greater than or equal to the true value!

This may or may not be a problem for your situation.  Doing a dot product with unnormalized vectors still gives you a value that you can use to compare "similarity values" between histograms, but it has slightly different meaning than a dot product with normalized vectors.

Specifically, if the counts are much larger in one histogram versus another (such as when doing a dot product between multiple large text documents and a small search term string), the "weight" of the larger counts will count for more.

That means if you search for "apple pie", a 100 page novel that mentions apples 10 times will be a better match than a 1/2 page recipe for apple pie!

When you normalize histograms, it makes it so the counts are "by percentage of the total document length", which would help our search correctly find that the apple pie recipe is more relevant.

In other situations, you might want to let the higher count weigh stronger even though the occurrences are "less dense" in the document.

It really just depends on what your usage case is.

<h2>Calculating W & D</h2>

There are two parameters (values) used when calculating the correct W and D dimensions of a count min sketch, for the desired accuracy levels.  The parameters are ε (epsilon) and δ (delta).

ε (Epsilon) is "how much error is added to our counts with each item we add to the cm sketch".

δ (Delta) is "with what probability do we want to allow the count estimate to be outside of our epsilon error rate"

To calculate W and D, you use these formulas:

W = ⌈e/ε⌉
D = ⌈ln (1/δ)⌉

Where ln is "natural log" and e is "euler's constant".

<h2>Accuracy Guarantees</h2>

When querying to get a count for a specific object (also called a "point query") the accuracy guarantees are:

<ol>
<li>True Count <= Estimated Count</li>
<li>Estimated Count <= True Count + ε * Number Of Items Added</li>
<li>There is a δ chance that #2 is not true</li>
</ol>

When doing an <b>unnormalized</b> dot product, the accuracy guarantees are:

<ol>
<li>True Dot Product <= Estimated Dot Product</li>
<li>Estimated Dot Product <= True Dot Product + ε * Number Of Items Added To A * Number Of Items Added To B</li>
<li>There is a δ chance that #2 is not true</li>
</ol>

<h2>Conservative Update</h2>

There is an alternate way to implement adding an item to the cm sketch, which results in provably less error.  That technique is called a "Conservative Update".

When doing a conservative update, you first look at the values in each row that you would normally increment and keep track of the smallest value that you've seen.  You then only increment the counters that have that smallest value.

The reason this works is because we only look at the smallest value across all rows when doing a look up.  So long as the smallest value across all rows increases when you insert an object, you've satisfied the requirements to make a look up return a value that is greater than or equal to the true value.  The reason this conservative update results in less error is because you are writing to fewer values, which means that there are fewer hash collisions happening.

While this increases accuracy, it comes at the cost of extra logic and processing time needed when doing an update, which may or may not be appropriate for your needs.

<h2>Example Runs</h2>

The example program is a lot like the program from the last post which implemented some search engine type functionality.

This program also shows you some count estimations to show you that functionality as well.

The first run of the program is with normalized vectors, the second run of the program is with unnormalized vectors, and the third run of the program, which is most accurate, is with unnormalized vectors and conservative updates.

<b>First Run:  Normalized Vectors, Regular Updates</b>
<img src="https://demofox2.files.wordpress.com/2015/02/CMS_normed_normal.png"/>

<b>Second Run:  Unnormalized Vectors, Regular Updates</b>
<img src="https://demofox2.files.wordpress.com/2015/02/CMS_unnormed_normal.png"/>

<b>Third Run:  Unnormalized Vectors, Conservative Updates</b>
<img src="https://demofox2.files.wordpress.com/2015/02/CMS_unnormed_conservative.png"/>

<h2>Example Code</h2>

[code language="cpp"]
#include <algorithm>
#include <array>
#include <string>
#include <vector>
#include <cmath>
#include <memory>
#include <unordered_map>
#include <set>

const float c_eulerConstant = (float)std::exp(1.0);

// The CCountMinSketch class
template <typename TKEY, typename TCOUNTTYPE, unsigned int NUMBUCKETS, unsigned int NUMHASHES, typename HASHER = std::hash<TKEY>>
class CCountMinSketch
{
public:
	typedef CCountMinSketch<TKEY, TCOUNTTYPE, NUMBUCKETS, NUMHASHES, HASHER> TType;

	CCountMinSketch ()
		: m_countGrid { } // init counts to zero
		, m_vectorLengthsDirty(true)
	{ }

	static const unsigned int c_numBuckets = NUMBUCKETS;
	static const unsigned int c_numHashes = NUMHASHES;
	typedef TCOUNTTYPE TCountType;

	void AddItem (bool conservativeUpdate, const TKEY& item, const TCOUNTTYPE& count)
	{
		// this count min sketch is only supporting positive counts
		if (count < 0)
		{
			printf("Cound not add item, count needs to be >= 0!\n");
			return;
		}

		// remember that our vector lengths are inaccurate
		m_vectorLengthsDirty = true;

		// if doing a conservative update, only update the buckets that are necesary
		if (conservativeUpdate)
		{
			// find what the lowest valued bucket is and calculate what our new lowest
			// value should be
			TCOUNTTYPE lowestValue = GetCount(item) + count;

			// make sure every bucket has at least the lowest value it should have
			size_t rawHash = HASHER()(item);
			for (unsigned int i = 0; i < NUMHASHES; ++i)
			{
				size_t hash = std::hash<size_t>()(rawHash ^ std::hash<unsigned int>()(i));
				TCOUNTTYPE value = m_countGrid[i][hash%NUMBUCKETS];
				if (value < lowestValue)
					m_countGrid[i][hash%NUMBUCKETS] = lowestValue;
			}
		}
		// else do a normal update
		else
		{
			// for each hash, find what bucket this item belongs in, and add the count to that bucket
			size_t rawHash = HASHER()(item);
			for (unsigned int i = 0; i < NUMHASHES; ++i)
			{
				size_t hash = std::hash<size_t>()(rawHash ^ std::hash<unsigned int>()(i));
				m_countGrid[i][hash%NUMBUCKETS] += count;
			}
		}
	}

	TCOUNTTYPE GetCount (const TKEY& item)
	{
		// for each hash, get the value for this item, and return the smalles value seen
		TCOUNTTYPE ret = 0;
		size_t rawHash = HASHER()(item);
		for (unsigned int i = 0; i < NUMHASHES; ++i)
		{
			size_t hash = std::hash<size_t>()(rawHash ^ std::hash<unsigned int>()(i));
			if (i == 0 || ret > m_countGrid[i][hash%NUMBUCKETS])
				ret = m_countGrid[i][hash%NUMBUCKETS];
		}
		return ret;
	}

	void CalculateVectorLengths ()
	{
		// if our vector lengths were previously calculated, no need to do anything
		if (!m_vectorLengthsDirty)
			return;

		// calculate vector lengths of each hash
		for (unsigned int hash = 0; hash < NUMHASHES; ++hash)
		{
			m_vectorLengths[hash] = 0.0f;
			for (unsigned int bucket = 0; bucket < NUMBUCKETS; ++bucket)
				m_vectorLengths[hash] += (float)m_countGrid[hash][bucket] * (float)m_countGrid[hash][bucket];
			m_vectorLengths[hash] = sqrt(m_vectorLengths[hash]);
		}

		// remember that our vector lengths have been calculated
		m_vectorLengthsDirty = false;
	}

	friend float HistogramDotProduct (TType& A, TType& B, bool normalize)
	{
		// make sure the vector lengths are accurate. No cost if they were previously calculated
		A.CalculateVectorLengths();
		B.CalculateVectorLengths();

		// whatever hash has the smallest dot product is the most correct
		float ret = 0.0f;
		bool foundValidDP = false;
		for (unsigned int hash = 0; hash < NUMHASHES; ++hash)
		{
			// if either vector length is zero, don't consider this dot product a valid result
			// we cant normalize it, and it will be zero anyways
			if (A.m_vectorLengths[hash] == 0.0f || B.m_vectorLengths[hash] == 0.0f)
				continue;

			// calculate dot product of unnormalized vectors
			float dp = 0.0f;
			for (unsigned int bucket = 0; bucket < NUMBUCKETS; ++bucket)
				dp += (float)A.m_countGrid[hash][bucket] * (float)B.m_countGrid[hash][bucket];

			// normalize dot product by dividing by the product of the vector lengths, if we should normalize
			if (normalize)
				dp /= (A.m_vectorLengths[hash] * B.m_vectorLengths[hash]);

			// keep the smallest dot product seen
			if (!foundValidDP || ret > dp)
			{
				ret = dp;
				foundValidDP = true;
			}
		}
		return ret;
	}

private:
	typedef std::array<TCOUNTTYPE, NUMBUCKETS> TBucketList;
	typedef std::array<TBucketList, NUMHASHES> TTable;

	TTable m_countGrid;
	bool m_vectorLengthsDirty;
	std::array<float, NUMHASHES> m_vectorLengths;
};

// Calculate ideal count min sketch parameters for your needs.
unsigned int CMSIdealNumBuckets (float error)
{
	return (unsigned int)std::ceil((float)(c_eulerConstant / error));
}

unsigned int CMSIdealNumHashes (float probability)
{
	return (unsigned int)std::ceil(log(1.0f / probability));
}

typedef std::string TKeyType;
typedef unsigned char TCountType;

typedef CCountMinSketch<TKeyType, TCountType, 28, 5> THistogramEstimate;
typedef std::unordered_map<TKeyType, TCountType> THistogramActual;

// These one paragraph stories are from http://birdisabsurd.blogspot.com/p/one-paragraph-stories.html

// The Dino Doc : http://birdisabsurd.blogspot.com/2011/11/dino-doc.html (97 words)
const char *g_storyA =
"The Dino Doc:\n"
"Everything had gone according to plan, up 'til this moment. His design team "
"had done their job flawlessly, and the machine, still thrumming behind him, "
"a thing of another age, was settled on a bed of prehistoric moss. They'd "
"done it. But now, beyond the protection of the pod and facing an enormous "
"tyrannosaurus rex with dripping jaws, Professor Cho reflected that, had he "
"known of the dinosaur's presence, he wouldn't have left the Chronoculator - "
"and he certainly wouldn't have chosen \"Stayin' Alive\", by The Beegees, as "
"his dying soundtrack. Curse his MP3 player";

// The Robot: http://birdisabsurd.blogspot.com/2011/12/robot.html (121 words)
const char *g_storyB =
"The Robot:\n"
"The engineer watched his robot working, admiring its sense of purpose.It knew "
"what it was, and what it had to do.It was designed to lift crates at one end "
"of the warehouse and take them to the opposite end.It would always do this, "
"never once complaining about its place in the world.It would never have to "
"agonize over its identity, never spend empty nights wondering if it had been "
"justified dropping a promising and soul - fulfilling music career just to "
"collect a bigger paycheck.And, watching his robot, the engineer decided that "
"the next big revolution in the robotics industry would be programming "
"automatons with a capacity for self - doubt.The engineer needed some company.";

// The Internet: http://birdisabsurd.blogspot.com/2011/11/internet.html (127 words)
const char *g_storyC =
"The Internet:\n"
"One day, Sandra Krewsky lost her mind.Nobody now knows why, but it happened - "
"and when it did, Sandra decided to look at every page on the Internet, "
"insisting that she wouldn't eat, drink, sleep or even use the washroom until "
"the job was done. Traps set in her house stalled worried family members, and by "
"the time they trounced the alligator guarding her bedroom door - it managed to "
"snap her neighbour's finger clean off before going down - Sandra was already "
"lost… though the look of despair carved in her waxen features, and the cat "
"video running repeat on her flickering computer screen, told them everything "
"they needed to know.She'd seen too much. She'd learned that the Internet "
"played for keeps.";

void WaitForEnter ()
{
	printf("\nPress Enter to quit");
	fflush(stdin);
	getchar();
}

template <typename L>
void ForEachWord (const std::string &source, L& lambda)
{
	size_t prev = 0;
	size_t next = 0;

	while ((next = source.find_first_of(" ,.-\":\n", prev)) != std::string::npos)
	{
		if ((next - prev != 0))
		{
			std::string word = source.substr(prev, next - prev);
			std::transform(word.begin(), word.end(), word.begin(), ::tolower);
			lambda(word);
		}
		prev = next + 1;
	}

	if (prev < source.size())
	{
		std::string word = source.substr(prev);
		std::transform(word.begin(), word.end(), word.begin(), ::tolower);
		lambda(word);
	}
}

void PopulateHistogram (THistogramEstimate &histogram, const char *text, bool conservativeUpdate)
{
	ForEachWord(text, [&](const std::string &word) {
		histogram.AddItem(conservativeUpdate, word, 1);
	});
}

void PopulateHistogram (THistogramActual &histogram, const char *text)
{
	ForEachWord(text, [&histogram](const std::string &word) {
		histogram[word]++;
	});
}

float HistogramDotProduct (THistogramActual &A, THistogramActual &B, bool normalize)
{
	// Get all the unique keys from both histograms
	std::set<TKeyType> keysUnion;
	std::for_each(A.cbegin(), A.cend(), [&keysUnion](const std::pair<TKeyType, TCountType>& v)
	{
		keysUnion.insert(v.first);
	});
	std::for_each(B.cbegin(), B.cend(), [&keysUnion](const std::pair<TKeyType, TCountType>& v)
	{
		keysUnion.insert(v.first);
	});

	// calculate and return the normalized dot product!
	float dotProduct = 0.0f;
	float lengthA = 0.0f;
	float lengthB = 0.0f;
	std::for_each(keysUnion.cbegin(), keysUnion.cend(),
		[&A, &B, &dotProduct, &lengthA, &lengthB]
		(const TKeyType& key)
		{
			// if the key isn't found in either histogram ignore it, since it will be 0 * x which is
			// always anyhow.  Make sure and keep track of vector length though!
			auto a = A.find(key);
			auto b = B.find(key);

			if (a != A.end())
				lengthA += (float)(*a).second * (float)(*a).second;

			if (b != B.end())
				lengthB += (float)(*b).second * (float)(*b).second;

			if (a == A.end())
				return;

			if (b == B.end())
				return;

			// calculate dot product
			dotProduct += ((float)(*a).second * (float)(*b).second);
		}
	);

	// if we don't need to normalize, return the unnormalized value we have right now
	if (!normalize)
		return dotProduct;

	// normalize if we can
	if (lengthA * lengthB <= 0.0f)
		return 0.0f;

	lengthA = sqrt(lengthA);
	lengthB = sqrt(lengthB);
	return dotProduct / (lengthA * lengthB);
}

template <typename T>
const char *CalculateError (const T&estimate, const T&actual)
{
	float error = 100.0f * ((float)estimate - (float)actual) / (float)actual;
	if (std::isnan(error) || std::isinf(error))
		return "undef";
	
	// bad practice to return a static local string, dont do this in production code!
	static char ret[256];
	sprintf(ret, "%0.2f%%", error);
	return ret;
}

int main (int argc, char **argv)
{
	// settings
	const bool c_normalizeDotProducts = false;
	const bool c_conservativeUpdate = true;

	// show settings and implication
	printf("Dot Products Normalized? %s\n",
		c_normalizeDotProducts
			? "Yes! estimate could be <= or > actual"
			: "No! estimate <= actual");

	printf("Conservative Updates? %s\n\n",
		c_conservativeUpdate
			? "Yes! Reduced error"
			: "No! normal error");	

	// populate our probabilistic histograms.
	// Allocate memory for the objects so that we don't bust the stack for large histogram sizes!
	std::unique_ptr<THistogramEstimate> TheDinoDocEstimate = std::make_unique<THistogramEstimate>();
	std::unique_ptr<THistogramEstimate> TheRobotEstimate = std::make_unique<THistogramEstimate>();
	std::unique_ptr<THistogramEstimate> TheInternetEstimate = std::make_unique<THistogramEstimate>();
	PopulateHistogram(*TheDinoDocEstimate, g_storyA, c_conservativeUpdate);
	PopulateHistogram(*TheRobotEstimate, g_storyB, c_conservativeUpdate);
	PopulateHistogram(*TheInternetEstimate, g_storyC, c_conservativeUpdate);

	// populate our actual count histograms for comparison
	THistogramActual TheDinoDocActual;
	THistogramActual TheRobotActual;
	THistogramActual TheInternetActual;
	PopulateHistogram(TheDinoDocActual, g_storyA);
	PopulateHistogram(TheRobotActual, g_storyB);
	PopulateHistogram(TheInternetActual, g_storyC);

	// report whether B or C is a closer match for A
	float dpABEstimate = HistogramDotProduct(*TheDinoDocEstimate, *TheRobotEstimate, c_normalizeDotProducts);
	float dpACEstimate = HistogramDotProduct(*TheDinoDocEstimate, *TheInternetEstimate, c_normalizeDotProducts);
	float dpABActual = HistogramDotProduct(TheDinoDocActual, TheRobotActual, c_normalizeDotProducts);
	float dpACActual = HistogramDotProduct(TheDinoDocActual, TheInternetActual, c_normalizeDotProducts);
	printf("\"The Dino Doc\" vs ...\n");
	printf("  \"The Robot\"    %0.4f (actual %0.4f) Error: %s\n", dpABEstimate, dpABActual, CalculateError(dpABEstimate, dpABActual));
	printf("  \"The Internet\" %0.4f (actual %0.4f) Error: %s\n\n", dpACEstimate, dpACActual, CalculateError(dpACEstimate, dpACActual));
	if (dpABEstimate > dpACEstimate)
		printf("Estimate: \"The Dino Doc\" and \"The Robot\" are more similar\n");
	else
		printf("Estimate: \"The Dino Doc\" and \"The Internet\" are more similar\n");
	if (dpABActual > dpACActual)
		printf("Actual:   \"The Dino Doc\" and \"The Robot\" are more similar\n");
	else
		printf("Actual:   \"The Dino Doc\" and \"The Internet\" are more similar\n");

	// let the user do a search engine style query for our stories!
	char searchString[1024];
	printf("\nplease enter a search string:\n");
	searchString[0] = 0;
	scanf("%[^\n]", searchString);

	struct SSearchResults
	{
		SSearchResults(const std::string& pageName, float rankingEstimated, float rankingActual)
			: m_pageName(pageName)
			, m_rankingEstimated(rankingEstimated)
			, m_rankingActual(rankingActual)
		{ }

		bool operator < (const SSearchResults& other)
		{
			return m_rankingEstimated > other.m_rankingEstimated;
		}

		std::string m_pageName;
		float       m_rankingEstimated;
		float       m_rankingActual;
	};
	std::vector<SSearchResults> results;

	// preform our search and gather our results!
	std::unique_ptr<THistogramEstimate> searchEstimate = std::make_unique<THistogramEstimate>();
	THistogramActual searchActual;
	PopulateHistogram(*searchEstimate, searchString, c_conservativeUpdate);
	PopulateHistogram(searchActual, searchString);
	results.push_back(
		SSearchResults(
			"The Dino Doc",
			HistogramDotProduct(*TheDinoDocEstimate, *searchEstimate, c_normalizeDotProducts),
			HistogramDotProduct(TheDinoDocActual, searchActual, c_normalizeDotProducts)
		)
	);
	results.push_back(
		SSearchResults(
			"The Robot",
			HistogramDotProduct(*TheRobotEstimate, *searchEstimate, c_normalizeDotProducts),
			HistogramDotProduct(TheRobotActual, searchActual, c_normalizeDotProducts)
		)
	);
	results.push_back(
		SSearchResults(
			"The Internet",
			HistogramDotProduct(*TheInternetEstimate, *searchEstimate, c_normalizeDotProducts),
			HistogramDotProduct(TheInternetActual, searchActual, c_normalizeDotProducts)
		)
	);
	std::sort(results.begin(), results.end());

	// show the search results
	printf("\nSearch results sorted by estimated relevance:\n");
	std::for_each(results.begin(), results.end(), [](const SSearchResults& result) {
		printf("  \"%s\" : %0.4f (actual %0.4f) Error: %s\n",
			result.m_pageName.c_str(),
			result.m_rankingEstimated,
			result.m_rankingActual,
			CalculateError(result.m_rankingEstimated, result.m_rankingActual)
		);
	});

	// show counts of search terms in each story (estimated and actual)
	printf("\nEstimated counts of search terms in each story:\n");
	std::for_each(searchActual.cbegin(), searchActual.cend(), [&] (const std::pair<TKeyType, TCountType>& v)
	{
		// show key
		printf("\"%s\"\n", v.first.c_str());

		// the dino doc
		TCountType estimate = TheDinoDocEstimate->GetCount(v.first.c_str());
		TCountType actual = 0;
		auto it = TheDinoDocActual.find(v.first.c_str());
		if (it != TheDinoDocActual.end())
			actual = it->second;
		printf("  \"The Dino Doc\" %u (actual %u) Error: %s\n", estimate, actual, CalculateError(estimate, actual));

		// the robot
		estimate = TheRobotEstimate->GetCount(v.first.c_str());
		actual = 0;
		it = TheRobotActual.find(v.first.c_str());
		if (it != TheRobotActual.end())
			actual = it->second;
		printf("  \"The Robot\"    %u (actual %u) Error: %s\n", estimate, actual, CalculateError(estimate, actual));

		// the internet
		estimate = TheInternetEstimate->GetCount(v.first.c_str());
		actual = 0;
		it = TheInternetActual.find(v.first.c_str());
		if (it != TheInternetActual.end())
			actual = it->second;
		printf("  \"The Internet\" %u (actual %u) Error: %s\n", estimate, actual, CalculateError(estimate, actual));
	});

	// show memory use
	printf("\nThe above used %u buckets and %u hashes with %u bytes per count\n",
		THistogramEstimate::c_numBuckets, THistogramEstimate::c_numHashes, sizeof(THistogramEstimate::TCountType));
	printf("Totaling %u bytes of storage for each histogram\n\n",
		THistogramEstimate::c_numBuckets * THistogramEstimate::c_numHashes * sizeof(THistogramEstimate::TCountType));
	
	// show a probabilistic suggestion
	float error = 0.1f;
	float probability = 0.01f;
	printf("You should use %u buckets and %u hashes for...\n", CMSIdealNumBuckets(error), CMSIdealNumHashes(probability));
	printf("true count <= estimated count <= true count + %0.2f * Items Processed\nWith probability %0.2f%%\n", error, (1.0f - probability)*100.0f);
	
	WaitForEnter();
	return 0;
}
[/code]

<h2>Links</h2>

If you use this in production code, you should probably use a better quality hash.

The rabbit hole on this stuff goes deeper, so if you want to know more, check out these links!

<a href="http://en.wikipedia.org/wiki/Count%E2%80%93min_sketch" target="_blank">Wikipedia: Count Min Sketch</a>
<a href="http://dimacs.rutgers.edu/~graham/pubs/papers/cm-full.pdf" target="_blank">Count Min Sketch Full Paper</a>
<a href="http://dimacs.rutgers.edu/~graham/pubs/papers/cmencyc.pdf" target="_blank">Count Min Sketch AT&T Research Paper</a>
<a href="http://www.cse.unsw.edu.au/~cs9314/07s1/lectures/Lin_CS9314_References/cm-latin.pdf" target="_blank">Another CMS paper</a>
<a href="http://cs.stanford.edu/~rishig/courses/ref/l12b.pdf">And another, with some more info like range query details</a>

Next up I'll be writing about hyperloglog, which does the same thing as KMV (K-Minimum Values) but is better at it!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1658</wp:post_id>
		<wp:post_date><![CDATA[2015-02-22 12:24:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-22 20:24:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[count-min-sketch-a-probabilistic-histogram]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_6f8b8789901ff6d128b7a5c2f642f1c1]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495715675;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1483;}i:1;a:1:{s:2:"id";i:1803;}i:2;a:1:{s:2:"id";i:1495;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing a Basic Search Engine AKA Calculating Similarity of Histograms with Dot Product</title>
		<link>http://blog.demofox.org/2015/02/13/writing-a-basic-search-engine-aka-calculating-similarity-of-histograms-with-dot-product/</link>
		<pubDate>Fri, 13 Feb 2015 20:56:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1663</guid>
		<description></description>
		<content:encoded><![CDATA[I came across this technique while doing some research for the next post and found it so interesting that it seemed to warrant it's own post.

<h2>Histograms and Multisets</h2>

Firstly, histogram is just a fancy word for a list of items that have an associated count.

If I were to make a histogram of the contents of my office, I would end up with something like:

<ul>
<li>Books = 20</li>
<li>Phone = 1</li>
<li>Headphones = 2</li>
<li>Sombrero = 1  (thanks to the roaming tequilla cart, but that's another story...)</li>
<li>VideoGames = 15</li>
<li>(and so on)</li>
</ul>

Another term for a histogram is multiset, so if you see that word, just think of it as being the same thing.

<h2>Quick Dot Product Refresher</h2>

Just to make sure we are on the same page, using dot product to get the angle between two vectors is as follows:

<b>cos(theta) = (A * B) / (||A||*||B||)</b>

Or in coder-eese, if A and B are vectors of any dimension:

<b>cosTheta = dot(A,B) / (length(A)*length(B))</b>

To actually do the "dot" portion, you just multiply the X's by the X's, the Y's by the Y's, the Z's by the Z's etc, and add them all up to get a single scalar value.  For a 3d vector it would look like this:

<b>dot(A,B) = A.x*B.x + A.y*B.y + A.z*B.z</b>

The value from the formulas above will tell you how similar the direction of the two vectors are.

If the value is 1, that means they are pointing the exact same way.  if the value is 0 that means they are perpendicular.  If the value is -1 that means they are pointing the exact opposite way.

Note that you can forgo the division by lengths in that formula, and just look at whether the result is positive, negative, or zero, if that's enough information for your needs.  We'll be using the full on normalized vector version above in this post today though.

For a deeper refresher on dot product check out this link:
<a href="http://en.wikipedia.org/wiki/Dot_product" target="_blank">Wikipedia: Dot Product</a>

<h2>Histogram Dot Products</h2>

Believe it or not, if you treat the counts in a histogram as an N dimensional vector - where N is the number of categories in the histogram - you can use the dot product to gauge similarity between the contents of two histograms by using it to get the angular difference between the vectors!

In the normal usage case, histograms have counts that are >= 0, which ends up meaning that two histogram vectors can only be up to 90 degrees apart.  That ends up meaning that the result of the dot product of these normalized vectors is going to be from 0 to 1, where 0 means they have nothing in common, and 1 means they are completely the same.

This is similar to the Jaccard Index mentioned in previous posts, but is different.  In fact, this value isn't even linear (although maybe putting it through acos and dividing by pi/2 may make it suitably linear!), as it represents the cosine of an angle, not a percentage of similarity.  It's still useful though.  If you have histogram A and are trying to see if histogram B or C is a closer match to A, you can calculate this value for the A/B pair and the A/C pair.  The one with the higher value is the more similar pairing.

Another thing to note about this technique is that order doesn't matter.  If you are trying to compare two multisets where order matters, you are going to have to find a different algorithm or try to pull some shenanigans - such as perhaps weighting the items in the multiset based on the order they were in.

<h2>Examples</h2>

Let's say we have two bags of fruit and we want to know how similar the bags are.  The bags in this case represent histograms / multisets.

In the first bag, we have 3 apples.  In the second bag, we have 2 oranges.

<img src="https://demofox2.files.wordpress.com/2015/02/ApplesOranges1.png"/>
<img src="https://demofox2.files.wordpress.com/2015/02/ApplesOranges2.png"/>

If we have a 2 dimensional vector where the first component is apples and the second component is oranges, we can represent our bags of fruit with these vectors:

<b>Bag1 = [3, 0]
Bag2 = [0, 2]</b>

Now, let's dot product the vectors:

<b>Dot Product = Bag1.Apples * Bag2.Apples + Bag1.Oranges * Bag2.Oranges
= 3*0 + 0*2
= 0</b>

We would normally divide our answer by the length of the Bag1 vector and then the length of the Bag2 vector, but since it's zero we know that won't change the value.

From this, we can see that Bag1 and Bag2 have nothing in common!

What if we added an apple to bag 2 though?  let's do that and try the process again.

<img src="https://demofox2.files.wordpress.com/2015/02/ApplesOranges1.png"/>
<img src="https://demofox2.files.wordpress.com/2015/02/ApplesOranges3.png"/>

<b>Bag1 = [3,0]
Bag2 = [1,2]
Dot Product = Bag1.Apples * Bag2.Apples + Bag1.Oranges * Bag2.Oranges
= 3*1 + 0*2
= 3</b>

Next up, we need to divide the answer by the length of our Bag1 vector which is 3, multiplied the length of our Bag2 vector which is the square root of 5.

<b>Cosine Angle (Similarity Value) = 3 / (3 * sqrt(5))
= ~0.45</b>

Lets add an orange to bag 1.  That ought to make it more similar to bag 2, so should increase our similarity value of the two bags.  Let's find out if that's true.

<img src="https://demofox2.files.wordpress.com/2015/02/ApplesOranges4.png"/>
<img src="https://demofox2.files.wordpress.com/2015/02/ApplesOranges3.png"/>

<b>Bag1 = [3,1]
Bag2 = [1,2]
Dot Product = Bag1.Apples * Bag2.Apples + Bag1.Oranges * Bag2.Oranges
= 3*1 + 1*2
= 5</b>

Next, we need to divide that answer by the length of the bag 1 vector which is the square root of 10, multiplied by the length of the bag 2 vector which is the square root of 5.

<b>Cosine Angle (Similarity Value) = 5 / (sqrt(10) * sqrt(5))
= ~0.71</b>

So yep, adding an orange to bag 1 made the two bags more similar!

<h2>Example Code</h2>

Here's a piece of code that uses the dot product technique to be able to gauge the similarity of text.  It uses this to compare larger blocks of text, and also uses it to allow you to search the blocks of text like a search engine!

[code language="cpp"]
#include <string>
#include <unordered_map>
#include <set>
#include <algorithm>
#include <stdio.h>
 
typedef std::unordered_map<std::string, unsigned int> THistogram;
 
// These one paragraph stories are from http://birdisabsurd.blogspot.com/p/one-paragraph-stories.html
 
// The Dino Doc : http://birdisabsurd.blogspot.com/2011/11/dino-doc.html
const char *g_storyA =
"The Dino Doc:\n"
"Everything had gone according to plan, up 'til this moment. His design team "
"had done their job flawlessly, and the machine, still thrumming behind him, "
"a thing of another age, was settled on a bed of prehistoric moss. They'd "
"done it. But now, beyond the protection of the pod and facing an enormous "
"tyrannosaurus rex with dripping jaws, Professor Cho reflected that, had he "
"known of the dinosaur's presence, he wouldn't have left the Chronoculator - "
"and he certainly wouldn't have chosen \"Stayin' Alive\", by The Beegees, as "
"his dying soundtrack. Curse his MP3 player";
 
// The Robot: http://birdisabsurd.blogspot.com/2011/12/robot.html
const char *g_storyB =
"The Robot:\n"
"The engineer watched his robot working, admiring its sense of purpose.It knew "
"what it was, and what it had to do.It was designed to lift crates at one end "
"of the warehouse and take them to the opposite end.It would always do this, "
"never once complaining about its place in the world.It would never have to "
"agonize over its identity, never spend empty nights wondering if it had been "
"justified dropping a promising and soul - fulfilling music career just to "
"collect a bigger paycheck.And, watching his robot, the engineer decided that "
"the next big revolution in the robotics industry would be programming "
"automatons with a capacity for self - doubt.The engineer needed some company.";
 
// The Internet: http://birdisabsurd.blogspot.com/2011/11/internet.html
const char *g_storyC =
"The Internet:\n"
"One day, Sandra Krewsky lost her mind.Nobody now knows why, but it happened - "
"and when it did, Sandra decided to look at every page on the Internet, "
"insisting that she wouldn't eat, drink, sleep or even use the washroom until "
"the job was done. Traps set in her house stalled worried family members, and by "
"the time they trounced the alligator guarding her bedroom door - it managed to "
"snap her neighbour's finger clean off before going down - Sandra was already "
"lost… though the look of despair carved in her waxen features, and the cat "
"video running repeat on her flickering computer screen, told them everything "
"they needed to know.She'd seen too much. She'd learned that the Internet "
"played for keeps.";
 
void WaitForEnter ()
{
    printf("\nPress Enter to quit");
    fflush(stdin);
    getchar();
}
 
template <typename L>
void ForEachWord (const std::string &source, L& lambda)
{
    size_t prev = 0;
    size_t next = 0;
 
    while ((next = source.find_first_of(" ,.-\":\n", prev)) != std::string::npos)
    {
        if ((next - prev != 0))
        {
            std::string word = source.substr(prev, next - prev);
            std::transform(word.begin(), word.end(), word.begin(), ::tolower);
            lambda(word);
        }
        prev = next + 1;
    }
 
    if (prev < source.size())
    {
        std::string word = source.substr(prev);
        std::transform(word.begin(), word.end(), word.begin(), ::tolower);
        lambda(word);
    }
}
 
void PopulateHistogram (THistogram &histogram, const char *text)
{
    ForEachWord(text, [&histogram](const std::string &word) {
        histogram[word] ++;
    });
}
 
float HistogramDotProduct (THistogram &A, THistogram &B)
{
    // Get all the unique keys from both histograms
    std::set<std::string> keysUnion;
    std::for_each(A.cbegin(), A.cend(), [&keysUnion](const std::pair<std::string, unsigned int>& v)
    {
        keysUnion.insert(v.first);
    });
    std::for_each(B.cbegin(), B.cend(), [&keysUnion](const std::pair<std::string, unsigned int>& v)
    {
        keysUnion.insert(v.first);
    });
 
    // calculate and return the normalized dot product!
    float dotProduct = 0.0f;
    float lengthA = 0.0f;
    float lengthB = 0.0f;
    std::for_each(keysUnion.cbegin(), keysUnion.cend(),
        [&A, &B, &dotProduct, &lengthA, &lengthB]
        (const std::string& key)
        {
            // if the key isn't found in either histogram ignore it, since it will be 0 * x which is
            // always anyhow.  Make sure and keep track of vector length though!
            auto a = A.find(key);
            auto b = B.find(key);
 
            if (a != A.end())
                lengthA += (float)(*a).second * (float)(*a).second;
 
            if (b != B.end())
                lengthB += (float)(*b).second * (float)(*b).second;
 
            if (a == A.end())
                return;
 
            if (b == B.end())
                return;
 
            // calculate dot product
            dotProduct += ((float)(*a).second * (float)(*b).second);        
        }
    );
 
    // normalize if we can
    if (lengthA * lengthB <= 0.0f)
        return 0.0f;
 
	lengthA = sqrt(lengthA);
	lengthB = sqrt(lengthB);
    return dotProduct / (lengthA * lengthB);
}
 
int main (int argc, char **argv) {
 
    // populate our histograms
    THistogram TheDinoDoc, TheRobot, TheInternet;
    PopulateHistogram(TheDinoDoc, g_storyA);
    PopulateHistogram(TheRobot, g_storyB);
    PopulateHistogram(TheInternet, g_storyC);
 
    // report whether B or C is a closer match for A
    float dpAB = HistogramDotProduct(TheDinoDoc, TheRobot);
    float dpAC = HistogramDotProduct(TheDinoDoc, TheInternet);
 
    printf("\"The Dino Doc\" vs \"The Robot\" similarity = %0.4f\n", dpAB);
    printf("\"The Dino Doc\" vs \"The Internet\" similarity = %0.4f\n\n", dpAC);
 
    if (dpAB > dpAC)
        printf("\"The Dino Doc\" and \"The Robot\" are more similar\n");
    else
        printf("\"The Dino Doc\" and \"The Internet\" are more similar\n");
 
    // let the user do a search engine style query for our stories!
    char searchString[1024];
    printf("\nplease enter a search string:\n");
    scanf("%[^\n]", searchString);
 
    // preform our search and gather our results!
    THistogram search;
    PopulateHistogram(search, searchString);
 
    struct SSearchResults
    {
        SSearchResults (const std::string& pageName, float ranking, const char* pageContent)
            : m_pageName(pageName)
            , m_ranking(ranking)
            , m_pageContent(pageContent)
        { }
 
        bool operator < (const SSearchResults& other)
        {
            return m_ranking > other.m_ranking;
        }
 
        std::string m_pageName;
        float       m_ranking;
        const char* m_pageContent;
    };
    std::vector<SSearchResults> results;
 
    results.push_back(SSearchResults("The Dino Doc", HistogramDotProduct(TheDinoDoc, search), g_storyA));
    results.push_back(SSearchResults("The Robot", HistogramDotProduct(TheRobot, search), g_storyB));
    results.push_back(SSearchResults("The Internet", HistogramDotProduct(TheInternet, search), g_storyC));
    std::sort(results.begin(), results.end());
 
    // show the search results
    printf("\nSearch results sorted by relevance:\n");
    std::for_each(results.begin(), results.end(), [] (const SSearchResults& result) {
        printf("  \"%s\" : %0.4f\n", result.m_pageName.c_str(), result.m_ranking);
    });
 
    // show the most relevant result
    printf("\n-----Best Result-----\n%s\n",results[0].m_pageContent);
 
    WaitForEnter();
    return 0;
}
[/code]

Here is an example run of this program:
<img src="https://demofox2.files.wordpress.com/2015/02/HistogramDotProduct.png" target="_blank"/>

<h2>Improvements</h2>

Our "search engine" code does work but is pretty limited.  It doesn't know that "cat" and "Kitty" are basically the same, and also doesn't know that the words "and", "the" & "it" are not important.

I'm definitely not an expert in these matters, but to solve the first problem you might try making a "thesaurus" lookup table, where maybe whenever it sees "kitten", "kitty", "feline", it translates it to "cat" before putting it into the histogram.  That would make it smarter at realizing all those words mean the same thing.

For the second problem, there is a strange technique called tf–idf that seems to work pretty well, although people haven't really been able to rigorously figure out why it works so well.  Check out the link to it at the bottom of this post.

Besides just using this technique for text comparisons, I've read mentions that this histogram dot product technique is used in places like machine vision and object classification.

It is a pretty neat technique :P

<h2>Links</h2>

<a href="http://en.wikipedia.org/wiki/Cosine_similarity" target="_blank">Wikipedia: Cosine Similarity</a>   - The common name for this technique
<a href="http://www.socscistatistics.com/descriptive/bar/Default.aspx" target="_blank">Easy Bar Chart Creator</a> - Used to make the example graphs
<a href="http://en.wikipedia.org/wiki/Tf%E2%80%93idf" target="_blank">Wikipedia: tf-idf</a> - Used to automagically figure out which words in a document are important and which aren't]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1663</wp:post_id>
		<wp:post_date><![CDATA[2015-02-13 12:56:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-13 20:56:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[writing-a-basic-search-engine-aka-calculating-similarity-of-histograms-with-dot-product]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495620947;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1658;}i:1;a:1:{s:2:"id";i:775;}i:2;a:1:{s:2:"id";i:3967;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Avoiding The Performance Hazzards of std::function</title>
		<link>http://blog.demofox.org/2015/02/25/avoiding-the-performance-hazzards-of-stdfunction/</link>
		<pubDate>Wed, 25 Feb 2015 20:57:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1760</guid>
		<description></description>
		<content:encoded><![CDATA[There are two performance implications of using std::function that might surprise you:
<ol>
<li>When calling a std::function, it does a virtual function call.</li>
<li>When assigning a lambda with significant captures to a std::function, it will do a dynamic memory allocation!</li>
</ol>

Here is an example of what I mean:

[code language="cpp"]
    array<int, 5> i;
    auto A = [=] () -> int {
        return (i[0] + i[1] * i[2] + i[3]) ^ i[4];
    };

    // A dynamic memory allocation of sizeof(A) + some change is done on assignment
    // sizeof(A) = 20 on my machine, and it ends up doing a 28 byte allocation from the heap.
    function<int(void)> fA = A; 

    // A virtual function is called to be able to execute A()
    int ret = fA();
[/code]

The reason for the virtual function call is because under the hood, a lambda creates a class that contains the code and all the captured data you specified for capture.  Since other callers of your std::function have no idea what the type of that object is (it's only visible in the scope the lambda was defined in, and is not a human friendly name), the std::function has to use a virtual function to "blindly" call into from the outside, to perform the correct work on the inside.  This technique is called "type erasure" and you can read more about it in the links section at the bottom of this post!

The reason for the dynamic memory allocation is that std::function is generic and has no idea how much data you captured, but that captured data has to exist inside of a std::function and also has to be able to be copied as a std::function is moved around or copied to other locations.  It needs the storage space for your captures.

That is unfortunate in the cases of when you don't plan on using the lambda in those ways though.  Your data is already on the stack, it would be great if it could just use THAT copy of the captures and avoid the allocation.

If you capture only a small amount (in the implementations I've seen, typically something around 8 bytes max... so 2 pointers or references worth), it doesn't have to allocate, as it has a small static buffer for use in these "small capture" cases.  That's a nice optimization, but the allocations can still sneak in and bite us when we least expect it, so we have to be careful.

<h2>Avoid Both Problems With Template Parameters</h2>

If you are passing a lambda to some other code to execute, you can avoid both problems by using templated functions like below:

[code language="cpp"]
template <typename T>
void RunLambda (const T &lambda)
{
  // No virtual function calls or dynamic memory allocations!
  lambda();
}
[/code]
You could then call that function like this and it'll deduce the type of the lambda as the template parameter:
[code language="cpp"]
RunLambda([] () {printf("hello world!");});
[/code]

The reason why this works, is because your lambda does have an actual type (even if we don't know what it is, and can't really type what it is).  The template function is able to make a version of itself for the specific type that the lamdba is, and it can make a custom shrink wrapped function to call it.

In my experiences, it's also able to inline the lambda code & template function, which is pretty awesome since then it's basically no extra overhead at all.

The problem going this route though, is that you hit the usual problems of templated functions: without jumping through extra hoops, you have to put the implementation of the function in the header file.

The rest of the solutions i present get rid of the allocation, but the virtual call remains.  The allocation is the real monster here though, and if you really have to avoid the virtual function call too, you can always resort to using template functions.

<h2>Solution 1: Wrapping</h2>

Like I said above, a lambda makes a type for you behind the scenes that contains your code and capture storage.

If this type is small enough, if won't require dynamic allocation to hold it in a std::function.

So, let's say we have a lambda with a large capture and storing it in a std::function would require a dynamic allocation.

What if we capture that lambda in a new lambda, but capture it by reference, and inside this lambda we call the other lambda?

Our new lambda now has only a single capture, which is by reference, so has a size of 4.

That's small enough to store in a std::function without needing a dynamic allocation.

Weird huh?

[code language="cpp"]
	array<int, 5> i;
	auto A = [=]() -> int {
		return (i[0] + i[1] * i[2] + i[3]) ^ i[4];
	}; // sizeof(A) == 20
	auto B = [&]() -> int {
		return A();
	}; // sizeof(B) = 4!

	// no allocation needed, B is small enough to use the static storage buffer!
	function<int(void)> fB(B);
[/code]

<img src="https://demofox2.files.wordpress.com/2015/02/xzibit.jpg"/>

<b>Notes:</b>
<ul>
<li>When using this technique, you can't return B (or fB) from the function.  Once the function exits, those guys are garbage and using them will cause a crash.  This is the usual case when capturing locals by reference though, so nothing new there!</li>
<li>I tried to come up with a helper object / function to do this wrapping for you, to make it easier and more concise to do this.  I hit a problem in that in my generic template code, I was able to deduce the return type of the lambda being passed in, but not the argument types.  I'm sure it's possible, but I wasn't able to get it to work.</li>
</ul>

<h2>Solution 2: Stack Allocation</h2>

Due to the fact that you can give a std::function a custom allocator to use, you can solve this problem by having the std::function allocate from the stack (or a small pool allocator if that was more desirable for you!).

Unfortunately we can't naively use something like alloca() to allocate from the stack, because when a function returns that alloca() is used in, that stack memory is released.

However, you COULD make a custom allocator, give it a buffer for it to give out memory from, and allocate THAT buffer on the stack (or just define it on the stack).

You'll find the source code to that solution in the sample code below.

One problem with the solution as I made it though, is that you have to manually declare an allocator, define a buffer, pass it to this allocator, then pass that allocator to the std::function.

That is a lot of manual steps which could go wrong.

You could probably clean it up with a helper macro or something, but that still isn't nearly as clean as the wrapping solution.

Also, the amount of memory that is allocated seems somewhat arbitrarily larger than the size of your type.  If you look at the sample code and output of that code, in one case it wants 8 more bytes than the size of the type, and in another, it wants 12 bytes more.  Coming up with the right sized buffer can be tricky and problematic which makes this solve a bit uglier.

This is because it isn't always just your type that needs to be allocated, but is usually your type wrapped in some other type, that adds a little bit of it's own storage.

A good way to fix this would be to have the allocator store a type "T" object inside of it, and just give out that object when asked for memory, but unfortunately, due to the way allocators are used and converted from allocating one type to another, I was unable to get that working.

<h2>Solution 3: std::ref() / std::cref()</h2>

There is a third way I've found to solve the allocation problem that seems like it's the official solve that the STL gods would recommend.

Problem is, in my testing it was available in visual studio 2013, but not visual studio 2010. Boo hoo!

std::ref() and std::cref() return reference wrappers (costant ref wrapper in the cref case) which can hold arbitrary types as references.  If you put your large capture lambda into one of these functions and give it to std::function, there's a std::function constructor which is able to take this reference, and use that instead of allocating more memory.

It's very elegant and simple to do, check it out:

[code language="cpp"]
	array<int, 5> i;
	auto A = [=]() -> int {
		return (i[0] + i[1] * i[2] + i[3]) ^ i[4];
	};

	// no allocation, std::function stores a reference to A instead of A itself
	function<int(void)> fA(ref(A));
[/code]

Again to re-iterate though, this works in vs 2013 but not 2010.  If you are stuck in 2010, I recommend manually wrapping your lambdas like in solution 1 :/

<h2>Sample Code</h2>
[code language="cpp"]
#include <array>
#include <functional>
using namespace std;

#include <stdio.h>

// prototype for the function that runs our lambdas
int RunLambda(const function<int(void)>& f);

// ======================================= Allocators =======================================

template <typename T>
class CAllocator : public allocator < T >
{
public:
	template<typename _Tp1>
	struct rebind
	{
		typedef CAllocator<_Tp1> other;
	};

	T* allocate(size_type n, const void *hint = 0)
	{
		printf("!!CAllocator was asked for %u bytes, dynamically allocating memory.\n", n*sizeof(T));
		return allocator<T>::allocate(n, hint);
	}

	void deallocate(pointer p, size_type n)
	{
		return allocator<T>::deallocate(p, n);
	}

	CAllocator() throw() : allocator<T>() { }
	CAllocator(const CAllocator &a) throw() : allocator<T>(a) { }
	template <class U>
	CAllocator(const CAllocator<U> &a) throw() : allocator<T>(a) { }
	~CAllocator() throw() { }
};

template <typename T>
class CStackAllocator : public allocator < T >
{
public:
	template<typename _Tp1>
	struct rebind
	{
		typedef CStackAllocator<_Tp1> other;
	};

	T* allocate(size_type n, const void *hint = 0)
	{
		int a = sizeof(T);
		printf("  CStackAllocator was asked for %u bytes, returning buffer given.\n", n*sizeof(T));
		return (T*)m_buffer;
	}

	void deallocate(pointer p, size_type n)
	{
	}

	CStackAllocator() throw() : allocator<T>(), m_buffer(nullptr), m_bufferSize(0) { }
	CStackAllocator(const CStackAllocator &a) throw() : allocator<T>(a), m_buffer(a.m_buffer), m_bufferSize(a.m_bufferSize) { }
	template <class U>
	CStackAllocator(const CStackAllocator<U> &a) throw() : allocator<T>(a), m_buffer(a.m_buffer), m_bufferSize(a.m_bufferSize) { }
	~CStackAllocator() throw() { }

	void SetBuffer(void *buffer, size_t bufferSize)
	{
		m_buffer = buffer;
		m_bufferSize = bufferSize;
	}

	void   *m_buffer;
	size_t    m_bufferSize;

	// It would be neat to be able to do the below instead, but it complains about trying to use an undefined type unfortunately.
	// It would be less error prone and require fewer manual steps by the caller.
	// unsigned char m_buffer[sizeof(T)];
};

// ======================================= Lambda Tests =======================================

void LambdaTest_Normal()
{
	printf("=====LambdaTest_Normal()=====\n");
	printf("Large Capture Lambda A:\n");
	array<int, 5> i;
	i[0] = 2;
	i[1] = 57;
	i[2] = i[0] ^ i[1];
	i[3] = i[1] ^ i[2];
	i[4] = i[3] ^ i[2] + i[0] ^ i[1];
	auto A = [=]() -> int {
		return (i[0] + i[1] * i[2] + i[3]) ^ i[4];
	};
	printf("  sizeof(A) = %u\n", sizeof(A));
	printf("  creating allocatorA\n");
	CAllocator<decltype(A)> allocatorA;
	printf("  storing A in fA\n");
	function<int(void)> fA(A, allocatorA);
	printf("  RunLambda(fA)= %u\n", RunLambda(fA));
	printf("\n");

	// Allocation, no good for perf intensive code!
	// Also a virtual function call, but unavoidable when using std::functions
}

void LambdaTest_Wrap()
{
	printf("=====LambdaTest_Wrap()=====\n");
	printf("Lambda B which captures A by reference:\n");
	array<int, 5> i;
	i[0] = 2;
	i[1] = 57;
	i[2] = i[0] ^ i[1];
	i[3] = i[1] ^ i[2];
	i[4] = i[3] ^ i[2] + i[0] ^ i[1];
	auto A = [=]() -> int {
		return (i[0] + i[1] * i[2] + i[3]) ^ i[4];
	};
	auto B = [&]() -> int {
		return A();
	};
	printf("  sizeof(B) = %u\n", sizeof(B));
	printf("  creating allocatorB\n");
	CAllocator<decltype(B)> allocatorB;
	printf("  storing B in fB\n");
	function<int(void)> fB(B, allocatorB);
	printf("  RunLambda(fB)= %u\n", RunLambda(fB));
	printf("\n");

	// Could alternately do this to create fB more concisely while still avoiding allocation
	// function<int(void)> fB([&A]()->int {return A();});

	// It would be nice to make some kind of helper object / function to wrap
	// lambdas instead of having to wrap them twice yourself.  Couldn't figure out
	// a way to do that unfortunately.  decltype(A()) gives you the return type,
	// but figuring out the parameter type(s) is more difficult.
}

void LambdaTest_StackAlloc()
{
	printf("=====LambdaTest_StackAlloc()=====\n");
	printf("Large Capture Lambda A:\n");
	array<int, 5> i;
	i[0] = 2;
	i[1] = 57;
	i[2] = i[0] ^ i[1];
	i[3] = i[1] ^ i[2];
	i[4] = i[3] ^ i[2] + i[0] ^ i[1];
	auto A = [=]() -> int {
		return (i[0] + i[1] * i[2] + i[3]) ^ i[4];
	};
	printf("  sizeof(A) = %u\n", sizeof(A));
	printf("  creating stack allocatorA\n");
	CStackAllocator<decltype(A)> allocatorA;
	unsigned char buffer[sizeof(A) + 12];
	printf("  Giving stack allocator %u byte buffer\n", sizeof(buffer));
	allocatorA.SetBuffer(buffer, sizeof(buffer));
	printf("  storing A in fA\n");
	function<int(void)> fA(A, allocatorA);
	printf("  RunLambda(fA)= %u\n", RunLambda(fA));
	printf("\n");

	// It would have been nice for the allocator to hold it's own storage, since it
	// has to live on the stack anyways, and has knowledge of the type it's allocating
	// for (so knows the type size).  Hit some issues trying that though unfortunately.
}

void LambdaTest_Ref()
{
	printf("=====LambdaTest_Ref()=====\n");
	printf("Large Capture Lambda A:\n");
	array<int, 5> i;
	i[0] = 2;
	i[1] = 57;
	i[2] = i[0] ^ i[1];
	i[3] = i[1] ^ i[2];
	i[4] = i[3] ^ i[2] + i[0] ^ i[1];
	auto A = [=]() -> int {
		return (i[0] + i[1] * i[2] + i[3]) ^ i[4];
	};
	printf("  sizeof(A) = %u\n", sizeof(A));
	printf("  creating allocatorA\n");
	CAllocator<decltype(A)> allocatorA;
	printf("  storing ref(A) in fA\n");
	function<int(void)> fA(ref(A), allocatorA);
	printf("  RunLambda(fA)= %u\n", RunLambda(fA));
	printf("\n");

	// Nice and simple, this seems to be the correct solution, so long as you have access to
	// std::ref / std::cref!
	// vs2010 has it, but it seems to be partially implemented, as the above doesn't work.
	// vs2013 has it and it works wonderfully though.
}

// ======================================= Driver Program =======================================

void WaitForEnter()
{
	printf("Press Enter to quit");
	fflush(stdin);
	(void)getchar();
}

int main(int argc, char **argv)
{
	LambdaTest_Normal();
	LambdaTest_Wrap();
	LambdaTest_StackAlloc();
	LambdaTest_Ref();
	WaitForEnter();
	return 0;
}

// Pretend like this function is in another cpp file, where it can't be a templated function
int RunLambda(const function<int(void)>& f)
{
	return f() * 3;
}
[/code]

And here is the example output of that run in visual studio 2013.  Same output in debug and release:

<img src="https://demofox2.files.wordpress.com/2015/02/StdFunc.png"/>

<h2>
<h2>Links</h2>

A similar article:
<a href="http://www.drdobbs.com/cpp/efficient-use-of-lambda-expressions-and/232500059" target="_blank">DDJ: Efficient Use of Lambda Expressions and std::function</a>

Two good reads about type erasure:
<a href="http://www.cplusplus.com/articles/oz18T05o/" target="_blank">cplusplus.com: C++ Type Erasure</a>
<a href="https://akrzemi1.wordpress.com/2013/11/18/type-erasure-part-i/" target="_blank">Andrzej's C++ blog: Type erasure — Part I</a>

If you have any improvements to any of the above solutions, or other solutions of your own, post a comment and let us know!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1760</wp:post_id>
		<wp:post_date><![CDATA[2015-02-25 12:57:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-25 20:57:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[avoiding-the-performance-hazzards-of-stdfunction]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495684701;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5090;}i:1;a:1:{s:2:"id";i:4953;}i:2;a:1:{s:2:"id";i:5116;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HyperLogLog: Estimate Unique Value Counts Like The Pros</title>
		<link>http://blog.demofox.org/2015/03/09/hyperloglog-estimate-unique-value-counts-like-the-pros/</link>
		<pubDate>Tue, 10 Mar 2015 03:49:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1803</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="https://demofox2.files.wordpress.com/2015/03/hll.jpg"/>

This is the last of my planned posts on probabilistic algorithms.  There may be more in the future, but the initial volley is finished :P

Thanks again to <a href="http://www.elbeno.com/blog/" target="_blank">Ben Deane</a> for exposure to this really interesting area of computer science.

This post is about HyperLogLog, which is used to estimate a count of how many "uniques" there are in a stream of data.  It can also do intersection and union between two hyperloglog objects allowing you to see how many items HLL objects have in common.  It was invented in 2007 and is currently used in many big data situations including use by Google and Redis and Amazon.

This algorithm is probabilistic in that you can trade storage space for accuracy.  You can calculate how much accuracy to expect for a given amount of storage, or calculate how much storage you'd need for a specific amount of accuracy.

If this sounds a lot like the first probabilistic algorithm post I made (<a href="http://blog.demofox.org/2015/02/03/estimating-counts-of-distinct-values-with-kmv/" target="_blank">Estimating Counts of Distinct Values with KMV</a>) that means you have been paying attention.  HyperLogLog is in the same family of algorithms, but it is way better at most things than KMV is, and seems to be the current standard for DV Sketches (distinct value estimators).  The one thing KMV seems to be better at is calculating intersections between objects, which i'll talk about more below.

To give you an idea of the power of HyperLogLog, here's a quote from the paper it was first described in (link at end of post):

"...the new algorithm makes it possible to estimate cardinalities well beyond 10^9 with a typical accuracy of 2% while using a memory of only 1.5 kilobytes"

By the end of this post you should understand how that is possible, and also be able to start with the sample code and have HyperLogLog capabilities in your own C++ project immediately!

<h2>A Usage Case: Upvoting</h2>

A usage case for this algorithm would be adding an "upvote" button to a webpage.

A naive solution to this would be to have an upvote button that when clicked would increment a counter on the server.  That is problematic though because people can vote as many times as they want.  You could hack together a solution to this by having some client side cookies and javascript limiting people from doing that, but all your security is out the window since it's a client side fix, and you will soon have trolls spamming your vote counters by doing raw HTTP requests to your servers, to ruin your day, just because they can.

A less naive solution would be to have some unique identifier per user - whether that was something like a username, or just an IP address - and store that in a voting table, only allowing the counter to increment if the person wasn't already in the table, and entering them into the table when doing the increment.

The problem with that solution is that the table of users who have already voted might get extremely huge, causing lots of memory usage to hold it, lots of processing time to see if a user exists in the table already (even with a hash based lookup), and it doesn't parallelize very well to multiple servers.  You also have to implement some protection against race conditions around the "look for user in table, increment vote counter, add user to table" work, which means some potentially costly synchronization logic.

A better solution would be to use HyperLogLog and Here are some reasons why:
<ul>
<li>It has a fixed size you determine in advance.  The bold quote from the paper would indicate that 1.5KB is likely enough for our needs, being able to count over one billion unique values. Bringing it up to 2KB would be enough to store a heck of a lot more, like somewhere up near 2^250 unique items.</li>
<li>It automatically disallows the same item being accounted for more than once, so our multiple votes from same voter problem is gone with no need for costly synchronization work.</li>
<li>It lends itself well to being parallelized across machines, or just using SIMD / GPGPU if you wanted to squeeze some more performance out of it.</li>
<li>You can very quickly do set operations on multiple HLL objects.</li>
</ul>

The first three items solve the problems in the naive solutions, but the fourth adds some bonus functionality that is pretty cool.

Using set operations, you can do things like figure out if the same people are upvoting a dulce de leche flan desert compared to a cheesy grits recipe, and you can calculate that VERY QUICKLY.

A possibly naive way to suggest a recipe to a user would be to show them recipes that a lot of people have upvoted.

A more custom tailored suggestion (and thus, hopefully a better suggestion) would be when a person votes on a recipe, you can tell them "hey, a lot of the same people that upvoted the recipe you just upvoted also upvoted this other recipe, why don't you check it out!"

So now, you don't just have a voting system, you now also have a CLASSIFICATION SYSTEM.

Yeah ok, so that's a little hand wavy and making a real suggestion system has more details to solve than just those etc etc, but hopefully you can see how this algorithm can be a fundamental building block to many "big data" problems.

Onto the details of how it works!

<h2>Basic Premise - Coin Flips</h2>

When you flip a coin, what are the odds that it will be heads?  There's even chance of heads or tails, so the chance of a heads is 1 in 2 or 1/2 or 50%.

What are the odds that if you flip a coin twice it a row it will be heads both times?  Well, on each flip there is a 50% chance, so you multiply .5 * .5 to get the answer which is .25 or 25%.  There's a 25% chance, or a 1 in 4 chance, that you will flip heads twice in a row with two coin flips.  It's the same chance that you will flip two tails in a row, or that you will flip heads then tails, or tails then heads.  All possible outcomes have the same probability.

Another way to look at this, instead of probability, is to see how many combinations possible there are like this:
<table>
<tr><td><b>Sequence Number</b></td><td><b>Sequence</b></td></tr>
<tr><td>0</td><td>heads, heads</td></tr>
<tr><td>1</td><td>heads, tails</td></tr>
<tr><td>2</td><td>tails, heads</td></tr>
<tr><td>3</td><td>tails, tails</td></tr>
</table>

There's a 100% chance that two coin flips will be somewhere in those four results, and all results have an even chance of happening, so result 0 "heads, heads" has a 1 in 4 chance of happening.  All of the results above have a 1 in 4 chance.  Interestingly, looking at the above table you can also see that there is a 2/4 chance that the first flip will be heads, which is also 1/2, 1 in 2 or 50% chance.  That agrees with what we said before, that if only doing one coin flip (the first coin flip), there is a 50% chance of heads or tails.

If you switched to 3 coin flips, there would be a 1 in 8 chance of any specific event happening, since there are 8 possible outcomes:
<table>
<tr><td><b>Sequence Number</b></td><td><b>Sequence</b></td></tr>
<tr><td>0</td><td>heads, heads, heads</td></tr>
<tr><td>1</td><td>heads, heads, tails</td></tr>
<tr><td>2</td><td>heads, tails, heads</td></tr>
<tr><td>3</td><td>heads, tails, tails</td></tr>
<tr><td>4</td><td>tails, heads, heads</td></tr>
<tr><td>5</td><td>tails, heads, tails</td></tr>
<tr><td>6</td><td>tails, tails, heads</td></tr>
<tr><td>7</td><td>tails, tails, tails</td></tr>
</table>

It doesn't matter which specific sequence you are looking at above, the chance that 3 coin flips will result in any of those specific sequences is 1 in 8.

In fact, for N coin flips, the probability that you will encounter any specific sequence (permutation) of heads and tails is 1 in 2^N, or 1/(2^N).

Now, let's change it up a bit.  What are the odds that you will have some number of heads in a row, and then a tails?  In other words, what are the odds that you will have a "run" of heads of a specified length?

well, a run of 0 would just be you flip the coin once and get tails.  Since you are doing one coin flip and you are looking for a specific one of two possible outcomes to happen, the probability is or 1 in 2, or 1/2, or 50%.

A run of 1 would mean you flipped the coin once, got heads, flipped it again and got tails.  Since you are doing two coin flips and are looking for a specific one of four possible outcomes, the probability of that happening is 1/2*1/2 = 1/4, or 1 in 4, or 25%.

A run of 2 means heads, heads, tails.  3 coin flips = 1/2*1/2*1/2 = 1/8, or 1 in 8, or 12.5%.

By now you may have noticed that the probability for getting N heads and then a tail is just 1 in the number of coin flips, and the number of coin flips is 2^(N+1).

More formally, the odds of getting N heads and then a tail is 1/(2^(N+1)).

Let's now swap out the idea of heads and tails with the idea of binary digits 0 and 1 in a sequence of random numbers.  Think of "heads" as 0, and "tails" as 1.

If you generate a random bit (binary digit), there is a 50% chance it will be a 0, and a 50% chance it will be a 1.

If you generate two random bits, there is a 25% chance for each of the possible outcomes below:
<table>
<tr><td><b>Sequence Number</b></td><td><b>Sequence</b></td></tr>
<tr><td>0</td><td>00</td></tr>
<tr><td>1</td><td>01</td></tr>
<tr><td>2</td><td>10</td></tr>
<tr><td>3</td><td>11</td></tr>
</table>

Now, what are the odds that in a random binary number, we will have N zeros and then a 1?

Don't let the binary digits scare you, it's the same answer as the coin flip question:  1/(2^(N+1))

An interesting property of this is that if you ask for a random 8 bit binary number and get xxxxx100, using the formula above, you know there is a 1 in 8 chance that a random number would end in "100".

Using this information you can say to yourself "i'll bet I've seen about 8 different random numbers at this point", and that's a fairly decent guess, without actually having had to pay attention to any of the numbers that came before.

A better idea though would be to watch all the random numbers as they are generated, and keep track the longest run of zeros you've seen on the right side of any number.

Using this "longest run seen" value, you can guess how many unique random numbers you've seen so far.  If the longest run you've seen is N zeros and then a 1, the guess as to how many random numbers you've seen is 2^(N+1).

If you've seen a maximum of 4 zeros and a 1 (xxx10000), you've probably seen about 32 numbers on average.  If you've seen at maximum 2 zeros and a 1 (xxxxx100), you've probably seen about 8 numbers on average.

Since by definition, randomness is RANDOM, there will be fluctuation and your guess will not always be so accurate.  You might have only seen one random number, but it's value may have been 10000000 (0x80), which would incorrectly cause you to estimate that 256 items have been seen (2^8), when in fact only a single item has been seen.

To combat this, HyperLogLog uses multiple registers (counters) to keep multiple counts, and then averages the estimates together.  More info on that below, but for now, hopefully you can see how that would smooth things out towards a more average case.  The more registers you use, the more "average case" your estimation should be, so the more accurate your estimate should be.

There's an interesting twist here though... you aren't actually estimating how many random numbers you've seen, but instead are estimating how many UNIQUE random numbers you've seen.  Random numbers can repeat, but this count estimation will only count each unique value once, no matter how many times it appears.

To help visualize that, no matter how many times you see 10110100 - whether it's only once, or ten thousand times - the longest run will still be 2.  After you've seen ten thousand of those numbers, as soon as you see the next number 10011000, the longest run will then be 3.

That may sound like a trivial difference that we are counting uniques, and not actual values, but as the next section will show, it's actually a very important difference, and is where this technique derives it's power.

Also, if we were counting non uniques, we could just use an integer and increment it for each item we saw (;

<h2>Hashing Functions as Pseudorandom Number Generators</h2>

An interesting property of good hashing algorithms is that the output you get when you hash an object will be indistinguishable from random numbers.  If you hash 3, you'll get a random number, and if you hash 4, you'll likely get a completely different random number.  You can't tell from the output what the nature of the input was, or how similar the input objects were.

But, of course, when you put the same input into a hash function, you will always get the same output.

These two properties are what makes hash functions so useful in what we are trying to do in HLL.

<i><b>Quick Tangent:</b> These same properties also apply to encryption by the way.  The fact that they are random output is why hashed and encrypted data doesn't compress very well.  There are no patterns in the data that can be exploited to express the data as anything shorter than the full length of data itself.  You should not be able to gain any knowledge about the nature of the input by looking at the output, except perhaps the size of the source data in the case of encryption.  Also, whereas hashes are not reversible at all, encryption is only reversible if you have the encryption key (password).  HLL and similar algorithms use hashes, not encryption, because they want a fixed size output, and they don't care about reversing the process.</i>

The output of the hash function is the source of the pseudorandom numbers that we plug into the HyperLogLog algorithm, and is what allows us to count uniques of any type of thing, so long as that thing can be hashed.

So, to do HLL counting, you hash every object you see in a stream keeping track of the longest run of zeros (in binary) you've seen in the resulting hashes.  You store "longest runs seen" in multiple registers which you can then later use to get an averaged estimate of unique items encountered.  That's all there is to it.

<b><u>MAGIC!</u></b>

That's how things work from a high level, now let's get into the nitty gritty a bit...

<h2>Handling Multiple Registers</h2>

Let's say you have a hash function that spits out a 32 bit hash, which is a pretty common thing for HLL implementations.

We talked about figuring out the length of the run of 0's in the hash output, but if you had 16 registers to store run lengths in, how do you choose which register to store each run length in?

The common way to solve this is to use some of your hash bits for register selection.  If you have 16 registers, you could use the lowest 4 bits of your hash as the register index to store the count in for instance.

There is a problem here though, that hopefully you can see already.  The problem is that if we have a run of 3 with a hash that ends in the binary number 1000, we will only ever store that run length in register 8!  By using the same bits for register selection as we do for counting numbers, we've biased our count and introduced inaccuracy (error) because certain numbers will only get accounted for by specific registers.  The ideal situation is that every number is as likely to end up in any specific register versus another one.  It should "randomly" choose what register to use, but be deterministic in how it chose that register.

The bits you use for register selection cannot be reused for counting runs, or else you'll fall into the trap of only storing certain numbers in specific registers.

You could perhaps hash your hash to get another pseudo random number to use for register selection, but a better option is to just throw out those register selection bits once you use them.

Reducing the number of bits you evaluate for runs of 0's comes at a cost though.  It means that your estimation of unique values seen is capped at a lower number.  with 32 bits, you can estimate a count up to 2^32 (~4 billion), but at 28 bits, after using 4 bits for register selection, you can only estimate a count of up to 2^28 (~268 million).

I believe this is one of the reasons why google invented "HyperLogLog++" which uses a 64 bit hash and has some other improvements.  Check the links at the bottom of this post for more information.

It's a bit overkill, but in the sample code in this post, we create a 128 bit hash, use the top 32 bits for register selection, and the lower 96 bits for looking at runs.  I say it's overkill because at 96 bits, we can estimate counts up to 79 billion billion billion, which is way huger than anyone (even google!) is ever likely to need.

<h2>Register Sizes</h2>

As I mentioned above, many people use 32 bit hashes, for estimating at most about 4 billion unique objects.  Google bumps it up to 64 bits for up to 18 billion billion uniques, and our sample code uses 96 bits for run evaluation, letting us estimate counts up to 79 billion billion billion.

These numbers are beyond huge, but believe it or not, the size of the registers themselves used to track these things are pretty darn tiny.

Since we are looking for runs of zeros, if we have a 32 bit hash, we only need to be able to store the values 0 to 32.  0 to 31 can be stored in 5 bits, and chances are that people aren't going to bump it up to 6 bits just to get that extra value - especially when in practice you are going to use a few bits of the hash as register selection.

So, for a 32 bit hash, you really only need 5 bits per register to keep track of longest runs seen.

For a 64 bit hash, you need to be able to store the values 0 to 64.  Similar to the above, 0-63 can be stored in 6 bits, and we can ditch being able to store 64, so 6 bits per register is plenty.

For our 96 bit hash (since we use 32 bits for register selection), we'd only need to be able to store 0-96, which can fit entirely in 7 bits, since 7 bits can store 0-127.

In our example code, I'm an excessive glutton however, and store our longest run value in 8 bits, wasting an entire bit of memory per register.

Yep, in our excessively gigantic counting 128 bit hash HLL DV Sketch code, i use an ENTIRE BYTE of memory per register.  The Horror!!!

With a 32 or 64 bit hash, you could drop that down to 5 or 6 bits per register, and either condense your registers in memory, or perhaps even use those extra bits for something else if you wanted (need some flags?!).

<h2>Register Counts</h2>

So, our register size itself is fairly tiny, where my gluttonous, wasteful programming uses a single byte per register.  How many registers do we need though?

The answer to that depends on how much accuracy you want.

To calculate how much error there is for M registers, the equation is:  expectedError = 1.04 / sqrt(M)

To calculate how many registers you need to achieve a specific expected error, the equation is: M = 676 / (625 * expectedError^2)

In those equations, an expectedError of 0.03 would mean 3%.

Check out the table below to get an idea of accuracy vs size.

Note that since we use bits from our hash to do register selection, that our number of registers is a power of 2.

<table>
<tr>
<td><b>Register Bits</b></td>
<td><b>Register Count</b></td>
<td><b>Error</b></td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>104%</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>73.5%</td>
</tr>
<tr>
<td>2</td>
<td>4</td>
<td>52%</td>
</tr>
<tr>
<td>3</td>
<td>8</td>
<td>36.7%</td>
</tr>
<tr>
<td>4</td>
<td>16</td>
<td>26%</td>
</tr>
<tr>
<td>5</td>
<td>32</td>
<td>18.3%</td>
</tr>
<tr>
<td>6</td>
<td>64</td>
<td>13%</td>
</tr>
<tr>
<td>7</td>
<td>128</td>
<td>9%</td>
</tr>
<tr>
<td>8</td>
<td>256</td>
<td>6.5%</td>
</tr>
<tr>
<td>9</td>
<td>512</td>
<td>4.6%</td>
</tr>
<tr>
<td>10</td>
<td>1024</td>
<td>3.2%</td>
</tr>
<tr>
<td>11</td>
<td>2048</td>
<td>2.2%</td>
</tr>
<tr>
<td>12</td>
<td>4096</td>
<td>1.6%</td>
</tr>
</table>

Here is a graph showing how number of bits used affects error.  Bits used is the x axis, and expected error is the y axis.

<img src="https://demofox2.files.wordpress.com/2015/03/plotBitsError.png"/>

From the table and the graph you can see that adding bits (registers) gives diminishing returns in error reduction.  It's especially diminishing because whenever we add another bit, we double our storage size (double the number of registers we use).

This shows us that this algorithm is great at counting a large number of uniques, since one byte per counter can count up to about 2^256 (2^2^8) uniques, but it isn't super great at getting a low error rate.  If you are ok with about 2% accuracy, the storage space needed is pretty small though!

Remember the claim at the top of this post?

“…the new algorithm makes it possible to estimate cardinalities well beyond 10^9 with a typical accuracy of 2% while using a memory of only 1.5 kilobytes”

Looking at the bits used / error table, you can see 11 bits, or 2048 registers, gives just a little over 2% accuracy.

If you are using 32 bits of hash to look for runs of zeros, you can use 6 bit registers to store the longest run seen, if you want to waste a bit to be able to store 0-32 instead of just 0-31.

So, 2048 registers * 6 bits = 12288 bits of register storage needed.  That is 1536 bytes, or exactly 1.5KB.

You could count up to ~4 billion uniques (2^32) with that configuration, but error increases as you get closer to that limit, so I think that's why they limited their statement to counting ~1 billion uniques (10^9).

<h2>Estimating Counts</h2>

The math behind the count estimation is a bit complex (check the paper in the links section for more info!) but part of how it works is it uses the harmonic mean to average the data from the registers together.  Since there is randomness involved, and differences in our run lengths means being off by exponential amounts, the harmonic mean is great at filtering out large outliers due to the random fluctuations.  Fluctuation to the "too small" end won't matter too much since it will be over-written by other values since we are storing the maximum value seen.  Fluctuations to the "too large" end are mitigated with harmonic mean.

Here's some pseudo code for estimating the count.  Note that we are storing the position of the first 1 in the registers, not storing the run length of zeros.  That's an important distinction because it means the number is 1 higher than it would be otherwise, which if you get it wrong makes your estimation half as large as it should be.  It also means that you know if you see a zero register, that it is uninitialized and hasn't seen a value yet.

[code language="cpp"]
Alpha = 0.7213 / (1 + 1.079 / NumRegisters)
Sum = 0
for i = 0 to NumRegisters
  Sum = Sum + pow(2, -Register[i])

Estimation = Alpha * NumRegisters^2 / Sum

// do small range correction
if Estimation &lt; 5 / 2 * NumRegisters
{
  if NumEmptyRegisters &gt; 0
    Estimation = NumRegisters * ln(NumRegisters / NumEmptyRegisters)
}
// do large range correction
else if Estimation &gt; 2^32 / 30
{
  Estimation = -2^32 * ln(1 - Estimation/ 2^32);
}
[/code]

Small range correction is there because when not enough registers have been filled in (they haven't gotten any data yet), the normal algorithm path has expected error greater than 1.04.  Large range correction is there for the same reason, but on the high end side, when the registers are saturated.

<h2>Set Operations</h2>

You can do set operations on hyperloglog objects so long as they use the same number of registers, same sized registers, and same hashing algorithm.

There's a link in the links section at the end of this post that shows you how to resize the number of registers so that you can do set operations on HLL objects that have different numbers of registers.

<b>Union</b>

Taking a union of two HLL objects is actually really simple.

If you have two HLL objects A and B, that you want to union to get C, all you do is take the maximum bucket value from A and B and store it in C.  Check out this pseudocode to see what i mean:

[code language="cpp"]
for i = 0 to NumRegisters
  C.Register[i] = Max(A.Register[i], B.Register[i])
[/code] 

The neat thing about doing this union is that it is LOSSLESS and doesn't introduce any new error.  Doing a union of two HLL objects is just the same as if you had a third HLL object that processed all the same objects that A and B both processed.

<b>Intersection</b>

To do an intersection is a tiny bit trickier, but not by much.  We have to use what is called the Inclusion-Exclusion Principle (check links section for more info).

Using that principle, we can estimate the count of how many items are in the intersection, but we can't get a HLL object representing the intersection of the two objects unfortunately.

The formula is this:

Count(Intersection(A,B)) = Count(A) + Count(B) - Count(Union(A,B))

And here's some more pseudocode to show you how to do it:

[code language="cpp"]
C = Union(A,B)
IntersectionCountEstimate = A.CountEstimate() + B.CountEstimate() - C.CountEstimate()
[/code]

Pretty simple eh?

At the beginning I mentioned that KMV was actually better at intersections than HyperLogLog.  The reason for that is because with KMV, you have a small, random sample range from both objects, and you can do an intersection between those two ranges and get your result.

KMV really starts to shine when you need to do an intersection between more than 2 or 3 lists, because using the inclusion-exclusion principle causes a combinatorial explosion, while the KMV intersection easily extends for N sets.

<b>Jaccard Index</b>

There's no special trick to calculating the Jaccard Index, as per usual it's just:

JaccardIndex = Count(Intersection(A,B)) / Count(Union(A,B))

Which will give you a value from 0 to 1 indicating how similar the two sets A and B are, where 1 is totally the same, and 0 is completely different.  In the case of HLL, this is an estimated Jaccard Index of course, not the actual value!

<b>Contains Percent</b>

I was noticing in runs of the sample code below that while the union operation had pretty decent error levels, the intersection operation had not so great error levels and thus the Jaccard Index wasn't very accurate either.  This is mostly due to the fact that the intersection levels were pretty small, so if you had +1 or -1, that came out to be a large percentage of the actual value.

Despite having a reasonable explanation that diminished the actual impact of the "high error levels", I wanted to see if I could come up with a different similarity metric and see how the error rate was on it.

What I came up with was a "Contains Percent", which is the percentage of how many items in A are contained in B.  You calculate it like this:

ContainsPercent = Count(Intersection(A,B)) / Count(A)

Since it uses the intersection value (that is not so accurate), it didn't give great results, but I wanted to mention it because it actually is a completely different measurement than Jaccard Index with different meaning.  All of the items in A could be in B, which would give it a "ContainsPercent" of 1.0, but B may have 10 times as many items that don't appear in A, which would make the Jaccard Index very low.

In some cases, you may want to use the information that the Jaccard Index represents to make decisions, and in other cases you may want this "Contains Percent" metric, or maybe even something else.

It's a bit subtle, but it's good to think about what it is that you are actually looking for if using these things in actual production code (:

<b>Estimating Set Membership</b>

So, HLL is NOT a bloom filter, but can it still be used like one?

The answer is yes, but I don't have a whole lot of information about the formal accuracy of that.

Basically how you'd do this is create a temporary HLL object, make it store the single item you want to check the other HLL for set membership of, and then you'd do an estimated intersection count between the two HLL objects.

As crazy as it sounds, it looks like redis exposes this functionality and says it is pretty accurate (for however many registers they used anyways), which is pretty neat:
<a href="http://redis.io/commands/pfcount" target="blank">Redis: PFCOUNT</a>

<b>Dot Product</b>

The dot product between two sets (or multi sets - where you have a count associated with each item) can be really useful to help gauge the similarity between the two sets.

You can do a dot product operation between two HLL objects too.  If you think about it, getting the dot product between two HLL objects is the same as getting the estimated count of the intersection between those two objects.

<h2>Example Code</h2>

Here is some example code in C++ that allows you to do HyperLogLog.  It includes only standard include files so has no dependencies and is in a single file for convenience.

I use a hash called MurmurHash3 to generate 128 bits of hash, 32 bits of which are used to generate the register index, and the remaining 96 bits are used for looking at runs of zeros.

Below the code is the output of a run of this program

[code language="cpp"]#include &lt;array&gt;
#include &lt;string&gt;
#include &lt;assert.h&gt;
#include &lt;unordered_set&gt;
#include &lt;stdint.h&gt;
#include &lt;memory&gt;
 
// microsoft only, for _BitScanForward to quickly find the index of the first 1 bit
// Use clz in gcc
#include &lt;intrin.h&gt;
 
//=====================================================================================================
// MurmurHash3
//=====================================================================================================
 
// from https://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp
// note that this 128 bit MurmurHash3 is optimized for x86.  There is a version at the above link
// optimized for x64 as well, but it gives different output for the same input.
 
#define ROTL32(x,y)     _rotl(x,y)
 
inline uint32_t getblock32 (const uint32_t * p, int i)
{
    return p[i];
}
 
inline uint32_t fmix32 (uint32_t h)
{
    h ^= h &gt;&gt; 16;
    h *= 0x85ebca6b;
    h ^= h &gt;&gt; 13;
    h *= 0xc2b2ae35;
    h ^= h &gt;&gt; 16;
 
    return h;
}
 
void MurmurHash3_x86_128 (const void * key, const int len,
    uint32_t seed, std::array&lt;uint32_t, 4&gt; &amp; out)
{
    const uint8_t * data = (const uint8_t*)key;
    const int nblocks = len / 16;
 
    uint32_t h1 = seed;
    uint32_t h2 = seed;
    uint32_t h3 = seed;
    uint32_t h4 = seed;
 
    const uint32_t c1 = 0x239b961b;
    const uint32_t c2 = 0xab0e9789;
    const uint32_t c3 = 0x38b34ae5;
    const uint32_t c4 = 0xa1e38b93;
 
    //----------
    // body
 
    const uint32_t * blocks = (const uint32_t *)(data + nblocks * 16);
 
    for (int i = -nblocks; i; i++)
    {
        uint32_t k1 = getblock32(blocks, i * 4 + 0);
        uint32_t k2 = getblock32(blocks, i * 4 + 1);
        uint32_t k3 = getblock32(blocks, i * 4 + 2);
        uint32_t k4 = getblock32(blocks, i * 4 + 3);
 
        k1 *= c1; k1 = ROTL32(k1, 15); k1 *= c2; h1 ^= k1;
 
        h1 = ROTL32(h1, 19); h1 += h2; h1 = h1 * 5 + 0x561ccd1b;
 
        k2 *= c2; k2 = ROTL32(k2, 16); k2 *= c3; h2 ^= k2;
 
        h2 = ROTL32(h2, 17); h2 += h3; h2 = h2 * 5 + 0x0bcaa747;
 
        k3 *= c3; k3 = ROTL32(k3, 17); k3 *= c4; h3 ^= k3;
 
        h3 = ROTL32(h3, 15); h3 += h4; h3 = h3 * 5 + 0x96cd1c35;
 
        k4 *= c4; k4 = ROTL32(k4, 18); k4 *= c1; h4 ^= k4;
 
        h4 = ROTL32(h4, 13); h4 += h1; h4 = h4 * 5 + 0x32ac3b17;
    }
 
    //----------
    // tail
 
    const uint8_t * tail = (const uint8_t*)(data + nblocks * 16);
 
    uint32_t k1 = 0;
    uint32_t k2 = 0;
    uint32_t k3 = 0;
    uint32_t k4 = 0;
 
    switch (len &amp; 15)
    {
    case 15: k4 ^= tail[14] &lt;&lt; 16;
    case 14: k4 ^= tail[13] &lt;&lt; 8;
    case 13: k4 ^= tail[12] &lt;&lt; 0;
        k4 *= c4; k4 = ROTL32(k4, 18); k4 *= c1; h4 ^= k4;
 
    case 12: k3 ^= tail[11] &lt;&lt; 24;
    case 11: k3 ^= tail[10] &lt;&lt; 16;
    case 10: k3 ^= tail[9] &lt;&lt; 8;
    case  9: k3 ^= tail[8] &lt;&lt; 0;
        k3 *= c3; k3 = ROTL32(k3, 17); k3 *= c4; h3 ^= k3;
 
    case  8: k2 ^= tail[7] &lt;&lt; 24;
    case  7: k2 ^= tail[6] &lt;&lt; 16;
    case  6: k2 ^= tail[5] &lt;&lt; 8;
    case  5: k2 ^= tail[4] &lt;&lt; 0;
        k2 *= c2; k2 = ROTL32(k2, 16); k2 *= c3; h2 ^= k2;
 
    case  4: k1 ^= tail[3] &lt;&lt; 24;
    case  3: k1 ^= tail[2] &lt;&lt; 16;
    case  2: k1 ^= tail[1] &lt;&lt; 8;
    case  1: k1 ^= tail[0] &lt;&lt; 0;
        k1 *= c1; k1 = ROTL32(k1, 15); k1 *= c2; h1 ^= k1;
    };
 
    //----------
    // finalization
 
    h1 ^= len; h2 ^= len; h3 ^= len; h4 ^= len;
 
    h1 += h2; h1 += h3; h1 += h4;
    h2 += h1; h3 += h1; h4 += h1;
 
    h1 = fmix32(h1);
    h2 = fmix32(h2);
    h3 = fmix32(h3);
    h4 = fmix32(h4);
 
    h1 += h2; h1 += h3; h1 += h4;
    h2 += h1; h3 += h1; h4 += h1;
 
    out[0] = h1;
    out[1] = h2;
    out[2] = h3;
    out[3] = h4;
}
 
struct SMurmurHash3
{
    std::array&lt;uint32_t, 4&gt; HashBytes (const void *key, size_t len)
    {
        // use a random 32 bit number as the seed (salt) of the hash.
        // Gotten from random.org
        // https://www.random.org/cgi-bin/randbyte?nbytes=4&amp;format=h
        static const uint32_t c_seed = 0x2e715b3d;
 
        // MurmurHash3 doesn't do well with small input sizes, so if the input is too small,
        // make it longer in a way that hopefully doesn't cause likely collisions.
        // &quot;the&quot; hashed before the fix (notice the last 3 are the same)
        //  0x45930d0e
        //  0xfc76ee5b
        //  0xfc76ee5b
        //  0xfc76ee5b
        // and after the fix:
        //  0x70220da0
        //  0xe7d0664a
        //  0xb4e4d832
        //  0x25940640
        std::array&lt;uint32_t, 4&gt; ret;
        static const size_t c_minLen = 16;
        if (len &lt; c_minLen)
        {
            unsigned char buffer[c_minLen];
 
            for (size_t i = 0; i &lt; len; ++i)
                buffer[i] = ((unsigned char*)key)[i];
 
            for (size_t i = len; i &lt; c_minLen; ++i)
                buffer[i] = buffer[i%len] + i;
 
            MurmurHash3_x86_128(buffer, c_minLen, c_seed, ret);
        }
        else
        {
            MurmurHash3_x86_128(key, len, c_seed, ret);
        }
 
        return ret;
    }
 
    template &lt;typename T&gt;
    std::array&lt;uint32_t, 4&gt; operator() (const T &amp;object);
 
    template &lt;&gt;
    std::array&lt;uint32_t, 4&gt; operator() &lt;std::string&gt; (const std::string &amp;object)
    {
        return HashBytes(object.c_str(), object.length());
    }
 
    // NOTE: if you need to hash other object types, just make your own template specialization here
};
 
//=====================================================================================================
// The CHyperLogLog class
//=====================================================================================================
//
// TKEY is the type of objects to keep track of
// NUMREGISTERBITS is how many bits of the hash are used to index into registers.  It also controls
//   how many registers there are since that count is 2^NUMREGISTERBITS
// HASHER controls how the keys are hashed
//
template &lt;typename TKEY, size_t NUMREGISTERBITS, typename HASHER&gt;
class CHyperLogLog
{
public:
    CHyperLogLog()
        : m_counts{} // init counts to zero
    { }
 
    // friends
    template &lt;typename TKEY, size_t NUMREGISTERBITS, typename HASHER&gt;
    friend float UnionCountEstimate (const CHyperLogLog&lt;TKEY, NUMREGISTERBITS, HASHER&gt;&amp; A, const CHyperLogLog&lt;TKEY, NUMREGISTERBITS, HASHER&gt;&amp; B);
 
    // constants
    static const size_t c_numRegisters = 1 &lt;&lt; NUMREGISTERBITS;
    static const size_t c_registerMask = (c_numRegisters - 1);
 
    // interface
    void AddItem (const TKEY&amp; item)
    {
        // because 2^32 does not fit in 32 bits
        static_assert(NUMREGISTERBITS &lt; 32, &quot;CHyperLogLog must use fewer than 32 register bits&quot;);
 
        // make as many hashed bits as we need
        std::array&lt;uint32_t, 4&gt; hash = HASHER()(item);
 
        // use the highest 32 bits for getting our register index
        unsigned int registerIndex = hash[3] &amp; c_registerMask;
 
        // use the other 96 bits as our &quot;unique number&quot; corresponding to our object.  Note that we
        // don't use the high 32 bits that we've already used for the register index because that
        // would bias our results.  Certain values seen would ONLY get tracked by specific registers.
        // That's ok though that we are only using 96 bits because that is still an astronomically large
        // value.  Most HyperLogLog implementations use only 32 bits, while google uses 64 bits.  We are
        // doing even larger with 96 bits.
        // 2^(bits) = how many unique items you can track.
        //
        // 2^32  = 4 billion &lt;--- what most people use
        // 2^64  = 18 billion billion &lt;--- what google uses
        // 2^96  = 79 billion billion billion &lt;--- what we are using
        // 2^128 = 340 billion billion billion billion &lt;--- way huger than anyone needs. Beyond astronomical.
 
        // Figure out where the highest 1 bit is
        unsigned long bitSet = 0;
        if (_BitScanForward(&amp;bitSet, hash[0]))
            bitSet += 1;
        else if (_BitScanForward(&amp;bitSet, hash[1]))
            bitSet += 32 + 1;
        else if (_BitScanForward(&amp;bitSet, hash[2]))
            bitSet += 64 + 1;
 
        // store the highest seen value for that register
        assert(bitSet &lt; 256);
        unsigned char value = (unsigned char)bitSet;
        if (m_counts[registerIndex] &lt; value)
            m_counts[registerIndex] = value;
 
    }
 
    unsigned int EmptyRegisterCount () const
    {
        unsigned int ret = 0;
        std::for_each(m_counts.begin(), m_counts.end(), [&amp;] (unsigned char count) {
            if (count == 0)
                ret++;
        });
        return ret;
    }
 
    float GetCountEstimation () const
    {
        // calculate dv estimate
        const float c_alpha = 0.7213f / (1.0f + 1.079f / c_numRegisters);
        float sum = 0.0f;
        std::for_each(m_counts.begin(), m_counts.end(), [&amp;](unsigned char count) {
            sum += std::pow(2.0f, -(float)count);
        });
 
        float dv_est = c_alpha * ((float)c_numRegisters / sum) * (float)c_numRegisters;
 
        // small range correction
        if (dv_est &lt; 5.0f / 2.0f * (float)c_numRegisters)
        {
            // if no empty registers, use the estimate we already have
            unsigned int emptyRegisters = EmptyRegisterCount();
            if (emptyRegisters == 0)
                return dv_est;
 
            // balls and bins correction
            return (float)c_numRegisters * log((float)c_numRegisters / (float)emptyRegisters);
        }
 
        // large range correction
        if (dv_est &gt; 143165576.533f) // 2^32 / 30
            return -pow(2.0f, 32.0f) * log(1.0f - dv_est / pow(2.0f, 32.0f));
 
        return dv_est;
    }
 
private:
    std::array&lt;unsigned char, c_numRegisters&gt; m_counts;
};
 
// there seem to be numerical problems when using 26 bits or larger worth of registers
typedef CHyperLogLog&lt;std::string, 10, SMurmurHash3&gt; TCounterEstimated;
typedef std::unordered_set&lt;std::string&gt; TCounterActual;
 
//=====================================================================================================
// Set Operations
//=====================================================================================================
 
template &lt;typename TKEY, size_t NUMREGISTERBITS, typename HASHER&gt;
float UnionCountEstimate (
    const CHyperLogLog&lt;TKEY, NUMREGISTERBITS, HASHER&gt;&amp; A,
    const CHyperLogLog&lt;TKEY, NUMREGISTERBITS, HASHER&gt;&amp; B)
{
    // dynamically allocate our hyperloglog object to not bust the stack if you are using a lot of registers.
    std::unique_ptr&lt;CHyperLogLog&lt;TKEY, NUMREGISTERBITS, HASHER&gt;&gt; temp =
        std::make_unique&lt;CHyperLogLog&lt;TKEY, NUMREGISTERBITS, HASHER&gt;&gt;();
 
    // To make a union between two hyperloglog objects that have the same number of registers and use
    // the same hash, just take the maximum of each register between the two objects.  This operation is
    // &quot;lossless&quot; in that you end up with the same registers as if you actually had another object
    // that tracked the items each individual object tracked.
    for (size_t i = 0; i &lt; (*temp).c_numRegisters; ++i)
        (*temp).m_counts[i] = std::max(A.m_counts[i], B.m_counts[i]);
    return (*temp).GetCountEstimation();
}
 
template &lt;typename TKEY, size_t NUMREGISTERBITS, typename HASHER&gt;
float IntersectionCountEstimate (
    const CHyperLogLog&lt;TKEY, NUMREGISTERBITS, HASHER&gt;&amp; A,
    const CHyperLogLog&lt;TKEY, NUMREGISTERBITS, HASHER&gt;&amp; B)
{
    // We have to use the inclusion-exclusion principle to get an intersection estimate
    // count(Intersection(A,B)) = (count(A) + count(B)) - count(Union(A,B))
    // http://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle
 
    return (A.GetCountEstimation() + B.GetCountEstimation()) - UnionCountEstimate(A, B);
}
 
float UnionCountActual (const TCounterActual&amp; A, const TCounterActual&amp; B)
{
    TCounterActual temp;
    std::for_each(A.begin(), A.end(), [&amp;] (const TCounterActual::key_type &amp;s){temp.insert(s);});
    std::for_each(B.begin(), B.end(), [&amp;] (const TCounterActual::key_type &amp;s){temp.insert(s);});
    return (float)temp.size();
}
 
float IntersectionCountActual (const TCounterActual&amp; A, const TCounterActual&amp; B)
{
    float ret = 0;
    std::for_each(A.begin(), A.end(), [&amp;](const TCounterActual::key_type &amp;s)
    {
        if (B.find(s) != B.end())
            ++ret;
    });
    return ret;
}
 
//=====================================================================================================
// Error Calculations
//=====================================================================================================
 
float ExpectedError (size_t numRegisters)
{
    return 1.04f / ((float)(sqrt((float)numRegisters)));
}
 
float IdealRegisterCount (float expectedError)
{
    return 676.0f / (625.0f * expectedError * expectedError);
}
 
//=====================================================================================================
// Driver Program
//=====================================================================================================
 
template &lt;typename L&gt;
void ForEachWord(const std::string &amp;source, L&amp; lambda)
{
    size_t prev = 0;
    size_t next = 0;
 
    while ((next = source.find_first_of(&quot; ,.-\&quot;:\n&quot;, prev)) != std::string::npos)
    {
        if ((next - prev != 0))
        {
            std::string word = source.substr(prev, next - prev);
            std::transform(word.begin(), word.end(), word.begin(), ::tolower);
            lambda(word);
        }
        prev = next + 1;
    }
 
    if (prev &lt; source.size())
    {
        std::string word = source.substr(prev);
        std::transform(word.begin(), word.end(), word.begin(), ::tolower);
        lambda(word);
    }
}
 
template &lt;typename T&gt;
const char *CalculateError (const T&amp;estimate, const T&amp;actual)
{
    float error = 100.0f * ((float)estimate - (float)actual) / (float)actual;
    if (std::isnan(error) || std::isinf(error))
        return &quot;undef&quot;;
 
    // bad practice to return a static local string, dont do this in production code!
    static char ret[256];
    sprintf_s(ret, sizeof(ret), &quot;%0.2f%%&quot;, error);
    return ret;
}
 
char *BytesToHumanReadable (size_t bytes)
{
    // bad practice to return a static local string, dont do this in production code!
    static char ret[256];
    if (bytes &gt;= 1024 * 1024 * 1024)
        sprintf_s(ret, sizeof(ret), &quot;%0.2fGB&quot;, ((float)bytes) / (1024.0f*1024.0f*1024.0f));
    else if (bytes &gt;= 1024 * 1024)
        sprintf_s(ret, sizeof(ret), &quot;%0.2fMB&quot;, ((float)bytes) / (1024.0f*1024.0f));
    else if (bytes &gt;= 1024)
        sprintf_s(ret, sizeof(ret), &quot;%0.2fKB&quot;, ((float)bytes) / (1024.0f));
    else
        sprintf_s(ret, sizeof(ret), &quot;%u Bytes&quot;, bytes);
    return ret;
}
 
void WaitForEnter()
{
    printf(&quot;\nPress Enter to quit&quot;);
    fflush(stdin);
    getchar();
}
 
// These one paragraph stories are from http://birdisabsurd.blogspot.com/p/one-paragraph-stories.html
 
// The Dino Doc : http://birdisabsurd.blogspot.com/2011/11/dino-doc.html (97 words)
const char *g_storyA =
&quot;The Dino Doc:\n&quot;
&quot;Everything had gone according to plan, up 'til this moment. His design team &quot;
&quot;had done their job flawlessly, and the machine, still thrumming behind him, &quot;
&quot;a thing of another age, was settled on a bed of prehistoric moss. They'd &quot;
&quot;done it. But now, beyond the protection of the pod and facing an enormous &quot;
&quot;tyrannosaurus rex with dripping jaws, Professor Cho reflected that, had he &quot;
&quot;known of the dinosaur's presence, he wouldn't have left the Chronoculator - &quot;
&quot;and he certainly wouldn't have chosen \&quot;Stayin' Alive\&quot;, by The Beegees, as &quot;
&quot;his dying soundtrack. Curse his MP3 player&quot;;
 
// The Robot: http://birdisabsurd.blogspot.com/2011/12/robot.html (121 words)
const char *g_storyB =
&quot;The Robot:\n&quot;
&quot;The engineer watched his robot working, admiring its sense of purpose.It knew &quot;
&quot;what it was, and what it had to do.It was designed to lift crates at one end &quot;
&quot;of the warehouse and take them to the opposite end.It would always do this, &quot;
&quot;never once complaining about its place in the world.It would never have to &quot;
&quot;agonize over its identity, never spend empty nights wondering if it had been &quot;
&quot;justified dropping a promising and soul - fulfilling music career just to &quot;
&quot;collect a bigger paycheck.And, watching his robot, the engineer decided that &quot;
&quot;the next big revolution in the robotics industry would be programming &quot;
&quot;automatons with a capacity for self - doubt.The engineer needed some company.&quot;;
 
// The Internet: http://birdisabsurd.blogspot.com/2011/11/internet.html (127 words)
const char *g_storyC =
&quot;The Internet:\n&quot;
&quot;One day, Sandra Krewsky lost her mind.Nobody now knows why, but it happened - &quot;
&quot;and when it did, Sandra decided to look at every page on the Internet, &quot;
&quot;insisting that she wouldn't eat, drink, sleep or even use the washroom until &quot;
&quot;the job was done. Traps set in her house stalled worried family members, and by &quot;
&quot;the time they trounced the alligator guarding her bedroom door - it managed to &quot;
&quot;snap her neighbour's finger clean off before going down - Sandra was already &quot;
&quot;lost… though the look of despair carved in her waxen features, and the cat &quot;
&quot;video running repeat on her flickering computer screen, told them everything &quot;
&quot;they needed to know.She'd seen too much. She'd learned that the Internet &quot;
&quot;played for keeps.&quot;;
 
int main (int argc, char **argv)
{
    // show basic info regarding memory usage, precision, etc
    printf(&quot;For %u registers at 1 byte per register, the expected error is %0.2f%%.\n&quot;,
        TCounterEstimated::c_numRegisters,
        100.0f * ExpectedError(TCounterEstimated::c_numRegisters)
    );
    printf(&quot;Memory Usage = %s per HyperLogLog object.\n&quot;, BytesToHumanReadable(TCounterEstimated::c_numRegisters));
    static const float c_expectedError = 0.03f;
    printf(&quot;For expected error of %0.2f%%, you should use %0.2f registers.\n\n&quot;,
        100.0f*c_expectedError,
        IdealRegisterCount(c_expectedError)
    );
 
    // populate our data structures
    // dynamically allocate estimate so we don't bust the stack if we have a large number of registers
    std::unique_ptr&lt;TCounterEstimated&gt; estimateTotal = std::make_unique&lt;TCounterEstimated&gt;();
    std::unique_ptr&lt;TCounterEstimated&gt; estimateA = std::make_unique&lt;TCounterEstimated&gt;();
    std::unique_ptr&lt;TCounterEstimated&gt; estimateB = std::make_unique&lt;TCounterEstimated&gt;();
    std::unique_ptr&lt;TCounterEstimated&gt; estimateC = std::make_unique&lt;TCounterEstimated&gt;();
    TCounterActual actualTotal;
    TCounterActual actualA;
    TCounterActual actualB;
    TCounterActual actualC;
    {
        auto f = [&amp;](const std::string &amp;word)
        {
            estimateTotal-&gt;AddItem(word);
            actualTotal.insert(word);
        };
 
        auto fA = [&amp;](const std::string &amp;word)
        {
            estimateA-&gt;AddItem(word);
            actualA.insert(word);
            f(word);
        };
 
        auto fB = [&amp;](const std::string &amp;word)
        {
            estimateB-&gt;AddItem(word);
            actualB.insert(word);
            f(word);
        };
 
        auto fC = [&amp;](const std::string &amp;word)
        {
            estimateC-&gt;AddItem(word);
            actualC.insert(word);
            f(word);
        };
 
        ForEachWord(g_storyA, fA);
        ForEachWord(g_storyB, fB);
        ForEachWord(g_storyC, fC);
    }
 
    // Show unique word counts for the three combined stories
    {
        float estimateCount = estimateTotal-&gt;GetCountEstimation();
        float actualCount = (float)actualTotal.size();
        printf(&quot;Unique words in the three stories combined:\n&quot;);
        printf(&quot;  %0.1f estimated, %.0f actual, Error = %s\n\n&quot;,
            estimateCount,
            actualCount,
            CalculateError(estimateCount, actualCount)
        );
    }
     
    // show unique word counts per story
    {
        printf(&quot;Unique Word Count Per Story:\n&quot;);
        auto g = [](const char *name, const TCounterEstimated &amp;estimate, const TCounterActual &amp;actual)
        {
            float estimateCount = estimate.GetCountEstimation();
            float actualCount = (float)actual.size();
            printf(&quot;  %s = %0.1f estimated, %.0f actual, Error = %s\n&quot;,
                name,
                estimateCount,
                actualCount,
                CalculateError(estimateCount, actualCount)
            );
        };
         
        g(&quot;A&quot;, *estimateA, actualA);
        g(&quot;B&quot;, *estimateB, actualB);
        g(&quot;C&quot;, *estimateC, actualC);
    }
 
    // Set Operations
    {
        printf(&quot;\nSet Operations:\n&quot;);
 
        auto f = [] (
            const char *name1,
            const TCounterEstimated &amp;estimate1,
            const TCounterActual &amp;actual1,
            const char *name2,
            const TCounterEstimated &amp;estimate2,
            const TCounterActual &amp;actual2
        )
        {
            printf(&quot;  %s vs %s...\n&quot;, name1, name2);
 
            // union
            float estimateUnionCount = UnionCountEstimate(estimate1, estimate2);
            float actualUnionCount = UnionCountActual(actual1, actual2);
            printf(&quot;    Union: %0.1f estimated, %.0f actual, Error = %s\n&quot;,
                estimateUnionCount,
                actualUnionCount,
                CalculateError(estimateUnionCount, actualUnionCount)
            );
 
            // intersection
            float estimateIntersectionCount = IntersectionCountEstimate(estimate1, estimate2);
            float actualIntersectionCount = IntersectionCountActual(actual1, actual2);
            printf(&quot;    Intersection: %0.1f estimated, %.0f actual, Error = %s\n&quot;,
                estimateIntersectionCount,
                actualIntersectionCount,
                CalculateError(estimateIntersectionCount, actualIntersectionCount)
            );
 
            // jaccard index
            float estimateJaccard = estimateIntersectionCount / estimateUnionCount;
            float actualJaccard = actualIntersectionCount / actualUnionCount;
            printf(&quot;    Jaccard Index: %0.4f estimated, %.4f actual, Error = %s\n&quot;,
                estimateJaccard,
                actualJaccard,
                CalculateError(estimateJaccard, actualJaccard)
            );
 
            // Contains Percent.
            // What percentage of items in A are also in B?
            float estimateSim = estimateIntersectionCount / estimate1.GetCountEstimation();
            float actualSim = actualIntersectionCount / actual1.size();
            printf(&quot;    Contains Percent: %0.2f%% estimated, %0.2f%% actual, Error = %s\n&quot;,
                100.0f*estimateSim,
                100.0f*actualSim,
                CalculateError(estimateSim, actualSim)
            );
        };
 
        f(&quot;A&quot;, *estimateA, actualA, &quot;B&quot;, *estimateB, actualB);
        f(&quot;A&quot;, *estimateA, actualA, &quot;C&quot;, *estimateC, actualC);
        f(&quot;B&quot;, *estimateB, actualB, &quot;C&quot;, *estimateC, actualC);
    }
 
    WaitForEnter();
    return 0;
}
[/code]

Here is the output of the above program:
<img src="https://demofox2.files.wordpress.com/2015/03/HLLOutput.png"/>

<h2>Want More?</h2>

As per usual, the rabbit hole goes far deeper than what I've shown.  Check out the links below to go deeper!

<a href="http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf" target="_blank">HyperLogLog Research Paper</a>
<a href="http://tech.adroll.com/blog/data/2013/07/10/hll-minhash.html" target="_blank">Combining HLL and KMV to Get The Best of Both</a>
<a href="http://research.neustar.biz/2012/10/12/doubling-the-size-of-an-hll-dynamically/" target="_blank">Doubling the Count of HLL Registers on the Fly</a>
<a href="http://research.neustar.biz/2012/09/12/set-operations-on-hlls-of-different-sizes/" target="_blank">Set Operations on HLLs of Different Sizes</a>
<a href="http://content.research.neustar.biz/blog/hll.html" target="_blank">Interactive HyperLogLog Demo</a>
<a href="http://content.research.neustar.biz/blog/venn.html" target="_blank">Interactive HyperLogLog Union Demo</a>
<a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/pubs/archive/40671.pdf" target="_blank">HyperLogLog++ Research Paper</a>
<a href=" http://research.neustar.biz/2013/01/24/hyperloglog-googles-take-on-engineering-hll/" target="_blank">HyperLogLog++ Analyzed</a>
<a href="http://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle" target="_blank">Wikipedia: Inclusion Exclusion Principle</a>
<a href="http://gwydir.demon.co.uk/jo/probability/info.htm" target="_blank">Coin Flipping</a>
<a href="http://en.wikipedia.org/wiki/MurmurHash" target="_blank">Wikipedia: MurmurHash3</a>
<a href="https://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp" target="_blank">MurmurHash3 C++ Source Code</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1803</wp:post_id>
		<wp:post_date><![CDATA[2015-03-09 19:49:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-10 03:49:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hyperloglog-estimate-unique-value-counts-like-the-pros]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495724426;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1658;}i:1;a:1:{s:2:"id";i:1495;}i:2;a:1:{s:2:"id";i:1483;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DIY Synth: Basic Drum</title>
		<link>http://blog.demofox.org/2015/03/14/diy-synth-basic-drum/</link>
		<pubDate>Sun, 15 Mar 2015 05:00:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=1940</guid>
		<description></description>
		<content:encoded><![CDATA[This is a part of the <a href="http://blog.demofox.org/diy-synthesizer/" target="_blank">DIY Synthesizer</a> series of posts where each post is roughly built upon the knowledge of the previous posts. If you are lost, check the earlier posts!

Hello!  It's time for another installment of DIY synth.  It's been so long since the last one, that when I look back at the code in that post now, I'm mortified by some of the stylistic and implementation choices I made, EEK!  The curse of learning new stuff... we all experience that from time to time hehe.

Following the previous DIY synth posts, you are now able to do quite a bit of synth stuff, but the only way you have to make percussion is to use recorded sound samples of drums.  There's nothing wrong with that, and in fact is an easy way to get good quality percussion, but if you want to be a purist and synthesize everything yourself, that might make you sad to have to rely on a recorded sample.

In today's post, I'll walk you through the process of how to create a simple drum in 3 easy steps.

It may not be the best synthesized drum, but it definitely passes as a drum sound, and I provide links that explain how to refine it further.

<h2>Step 1: Sine Wave</h2>

Starting out is pretty simple, we just need a tone.  Here is a sine wave that lasts 1 second and is a F note in the 1st octave, or approximately 87hz.  Drums are low sounds, so we need to start with a low frequency sound.

<a href="https://demofox2.files.wordpress.com/2015/03/sine.wav" target="_blank">sine.wav</a>
<img src="https://demofox2.files.wordpress.com/2015/03/sine.png"/>

<h2>Step 2:Envelope</h2>

There is a concept in audio called an "envelope".  An envelope is just a fancy way of saying that you are changing the volume over time.  The envelope is the "shape" of the volume changes over time.

If you notice in step 1 the volume (amplitude of the sine wave) isn't constant throughout the whole thing, it actually has a part at the beginning that gradually goes from 0 volume to full volume, and at the end, it has a part at the end that goes from full volume to 0 volume (it's 50 milliseconds on each side if you are curious).  That fading is an envelope too and is actually there to prevent "popping" which can occur when you make audio samples that aren't smooth from one to the next.  It might seem like that would be a minor problem, but it's actually VERY noticeable.  Check out the previous DIY synth posts for more info and examples of that!

Anyhow, if you think about the sound that a drum makes when you hit it, it starts out loud right away, and then quickly fades out.  You can play with the specific values of the envelope and get a different sound, but what I went with was 10 milliseconds of fading in (0.01 seconds), 10 milliseconds of being at full volume (0.01 seconds), and 175 milliseconds of fading out (0.175 seconds).  You can see a picture of the envelope below:

<img src="https://demofox2.files.wordpress.com/2015/03/Envelope.png"/>

The fade in time is called the "attack", the time it remains at full volume is called the "hold" and the time that it fades out is called the "release".  There are other common stages to envelopes that you might hear about if looking up more info about them.  Two other common parts of an enveloper are "sustain" and "decay" for instance.

Envelopes are a big part of what make notes sound like specific instruments, so have fun playing with those values and listening to the results.

Here is the envelope applied to our low frequency sine wave (which you apply by just multiplying them together!)

<a href="https://demofox2.files.wordpress.com/2015/03/sineenvelope.wav" target="_blank">sineenvelope.wav</a>
<img src="https://demofox2.files.wordpress.com/2015/03/sineenvelope.png"/>

<h2>Step 3: Frequency Decay</h3>

We have something that sounds a little more interesting than a plain vanilla sine tone, but it doesn't sound much like a drum yet...

What we are missing is that in a real drum, the frequency of the note decays over time.  If that isn't intuitive, don't worry it wasn't for me either.  It took me a good amount of reading and investigation to find that out a few years back.

To add frequency decay, let's have the frequency decay 80% of the way (towards frequency 0) over the "release" (fade out) portion of the envelope.  So, the frequency will still be F1 through the entire drum note of attack and hold, but then starting with release, it will decay linearly over time for that 175 ms, until at the end, the frequency should only be 20% of 87hz, or about 17hz.

Here's what we end up with:
<a href="https://demofox2.files.wordpress.com/2015/03/drum.wav" target="_blank">drum.wav</a>
<img src="https://demofox2.files.wordpress.com/2015/03/drum.png"/>

<h2>Good Enough!</h2>

That's pretty passable as a drum, even if it isn't the best.  A neat thing too is that by changing the starting frequency, you can get different frequencies of your drum and get some different drum sounds.

Here's a little drum melody showing what i mean:

<a href="https://demofox2.files.wordpress.com/2015/03/melody.wav" target="_blank">melody.wav</a>
<img src="https://demofox2.files.wordpress.com/2015/03/melody.png"/>

<h2>Sample Code</h2>

Here's the code with everything above implemented, which created the drum melody.  It uses only standard include files, and writes a wave file called "out.wav" when you run it.  Play around with the code, adjusting envelope times, frequencies, frequency decay, or even change it from using a sine wave to a different wave form (I included some standard wave forms for you).

Often times synthesis / music making is all about just playing around with the knobs that are exposed to you til you find something really interesting.

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS
 
#include <array>
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <cmath>
#include <vector>
 
#define _USE_MATH_DEFINES
#include <math.h>
 
//=====================================================================================
// SNumeric - uses phantom types to enforce type safety
//=====================================================================================
template <typename T, typename PHANTOM_TYPE>
struct SNumeric
{
public:
    explicit SNumeric(const T &value) : m_value(value) { }
    SNumeric() : m_value() { }
    inline T& Value() { return m_value; }
    inline const T& Value() const { return m_value; }
 
    typedef SNumeric<T, PHANTOM_TYPE> TType;
    typedef T TInnerType;
 
    // Math Operations
    TType operator+ (const TType &b) const
    {
        return TType(this->Value() + b.Value());
    }
 
    TType operator- (const TType &b) const
    {
        return TType(this->Value() - b.Value());
    }
 
    TType operator* (const TType &b) const
    {
        return TType(this->Value() * b.Value());
    }
 
    TType operator/ (const TType &b) const
    {
        return TType(this->Value() / b.Value());
    }
 
    TType& operator+= (const TType &b)
    {
        Value() += b.Value();
        return *this;
    }
 
    TType& operator-= (const TType &b)
    {
        Value() -= b.Value();
        return *this;
    }
 
    TType& operator*= (const TType &b)
    {
        Value() *= b.Value();
        return *this;
    }
 
    TType& operator/= (const TType &b)
    {
        Value() /= b.Value();
        return *this;
    }
 
    TType& operator++ ()
    {
        Value()++;
        return *this;
    }
 
    TType& operator-- ()
    {
        Value()--;
        return *this;
    }
 
    // Extended Math Operations
    template <typename T>
    T Divide(const TType &b)
    {
        return ((T)this->Value()) / ((T)b.Value());
    }
 
    // Logic Operations
    bool operator< (const TType &b) const {
        return this->Value() < b.Value();
    }
    bool operator<= (const TType &b) const {
        return this->Value() <= b.Value();
    }
    bool operator> (const TType &b) const {
        return this->Value() > b.Value();
    }
    bool operator>= (const TType &b) const {
        return this->Value() >= b.Value();
    }
    bool operator== (const TType &b) const {
        return this->Value() == b.Value();
    }
    bool operator!= (const TType &b) const {
        return this->Value() != b.Value();
    }
 
private:
    T m_value;
};
 
//=====================================================================================
// Typedefs
//=====================================================================================
 
typedef uint8_t uint8;
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef int16_t int16;
typedef int32_t int32;
 
// type safe types!
typedef SNumeric<float, struct S__Frequency>      TFrequency;
typedef SNumeric<uint32, struct S__TimeMs>            TTimeMs;
typedef SNumeric<uint32, struct S__Samples>           TSamples;
typedef SNumeric<float, struct S__Decibels>           TDecibels;
typedef SNumeric<float, struct S__Amplitude>      TAmplitude;
typedef SNumeric<uint8, struct S__ChannelCount>       TChannelCount;
typedef SNumeric<float, struct S__Phase>          TPhase;
 
//=====================================================================================
// Constants
//=====================================================================================
 
static const float c_pi = (float)M_PI;
static const float c_twoPi = c_pi * 2.0f;
 
//=====================================================================================
// Structs
//=====================================================================================
 
struct SSoundSettings
{
    TSamples        m_sampleRate;
    TTimeMs         m_lengthMs;
    TChannelCount   m_numChannels;
    TSamples        m_currentSample;
};
 
struct SDrumSettings
{
    TFrequency  m_frequency;
    TSamples    m_attack;
    TSamples    m_sustain;
    TSamples    m_release;
    TAmplitude  m_volume;
};
 
struct SDrumInstance
{
    SDrumInstance(TSamples startTime, const SDrumSettings &settings)
        : m_startTime(startTime)
        , m_settings(settings)
        , m_phase(0.0f)
    {
 
    }
 
    const SDrumSettings     &m_settings;
    TSamples                m_startTime;
    TPhase                  m_phase;
};
 
//=====================================================================================
// Globals
//=====================================================================================
 
std::vector<SDrumInstance>    g_drumInstances;
 
//=====================================================================================
// Conversion Functions
//=====================================================================================
inline TDecibels AmplitudeToDB(TAmplitude volume)
{
    return TDecibels(log10(volume.Value()));
}
 
inline TAmplitude DBToAmplitude(TDecibels dB)
{
    return TAmplitude(pow(10.0f, dB.Value() / 20.0f));
}
 
TSamples SecondsToSamples(const SSoundSettings &s, float seconds)
{
    return TSamples((int)(seconds * (float)s.m_sampleRate.Value()));
}
 
TSamples MilliSecondsToSamples(const SSoundSettings &s, float milliseconds)
{
    return SecondsToSamples(s, milliseconds / 1000.0f);
}
 
TTimeMs SecondsToMilliseconds(float seconds)
{
    return TTimeMs((uint32)(seconds * 1000.0f));
}
 
TFrequency Frequency(float octave, float note)
{
    /* frequency = 440×(2^(n/12))
    Notes:
    0  = A
    1  = A#
    2  = B
    3  = C
    4  = C#
    5  = D
    6  = D#
    7  = E
    8  = F
    9  = F#
    10 = G
    11 = G# */
    return TFrequency((float)(440 * pow(2.0, ((double)((octave - 4) * 12 + note)) / 12.0)));
}
 
template <typename T>
T AmplitudeToAudioSample(const TAmplitude& in)
{
    const T c_min = std::numeric_limits<T>::min();
    const T c_max = std::numeric_limits<T>::max();
    const float c_minFloat = (float)c_min;
    const float c_maxFloat = (float)c_max;
 
    float ret = in.Value() * c_maxFloat;
 
    if (ret < c_minFloat)
        return c_min;
 
    if (ret > c_maxFloat)
        return c_max;
 
    return (T)ret;
}
 
//=====================================================================================
// Wave File Writing Code
//=====================================================================================
struct SMinimalWaveFileHeader
{
    //the main chunk
    unsigned char m_szChunkID[4];      //0
    uint32        m_nChunkSize;        //4
    unsigned char m_szFormat[4];       //8
 
    //sub chunk 1 "fmt "
    unsigned char m_szSubChunk1ID[4];  //12
    uint32        m_nSubChunk1Size;    //16
    uint16        m_nAudioFormat;      //18
    uint16        m_nNumChannels;      //20
    uint32        m_nSampleRate;       //24
    uint32        m_nByteRate;         //28
    uint16        m_nBlockAlign;       //30
    uint16        m_nBitsPerSample;    //32
 
    //sub chunk 2 "data"
    unsigned char m_szSubChunk2ID[4];  //36
    uint32        m_nSubChunk2Size;    //40
 
    //then comes the data!
};
 
//this writes a wave file
template <typename T>
bool WriteWaveFile(const char *fileName, const std::vector<TAmplitude> &samples, const SSoundSettings &sound)
{
    //open the file if we can
    FILE *file = fopen(fileName, "w+b");
    if (!file)
        return false;
 
    //calculate bits per sample and the data size
    const int32 bitsPerSample = sizeof(T) * 8;
    const int dataSize = samples.size() * sizeof(T);
 
    SMinimalWaveFileHeader waveHeader;
 
    //fill out the main chunk
    memcpy(waveHeader.m_szChunkID, "RIFF", 4);
    waveHeader.m_nChunkSize = dataSize + 36;
    memcpy(waveHeader.m_szFormat, "WAVE", 4);
 
    //fill out sub chunk 1 "fmt "
    memcpy(waveHeader.m_szSubChunk1ID, "fmt ", 4);
    waveHeader.m_nSubChunk1Size = 16;
    waveHeader.m_nAudioFormat = 1;
    waveHeader.m_nNumChannels = sound.m_numChannels.Value();
    waveHeader.m_nSampleRate = sound.m_sampleRate.Value();
    waveHeader.m_nByteRate = sound.m_sampleRate.Value() * sound.m_numChannels.Value() * bitsPerSample / 8;
    waveHeader.m_nBlockAlign = sound.m_numChannels.Value() * bitsPerSample / 8;
    waveHeader.m_nBitsPerSample = bitsPerSample;
 
    //fill out sub chunk 2 "data"
    memcpy(waveHeader.m_szSubChunk2ID, "data", 4);
    waveHeader.m_nSubChunk2Size = dataSize;
 
    //write the header
    fwrite(&waveHeader, sizeof(SMinimalWaveFileHeader), 1, file);
 
    //write the wave data itself, converting it from float to the type specified
    std::vector<T> outSamples;
    outSamples.resize(samples.size());
    for (size_t index = 0; index < samples.size(); ++index)
        outSamples[index] = AmplitudeToAudioSample<T>(samples[index]);
    fwrite(&outSamples[0], dataSize, 1, file);
 
    //close the file and return success
    fclose(file);
    return true;
}
 
//=====================================================================================
// Oscilators
//=====================================================================================
 
void AdvancePhase(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    phase += TPhase(frequency.Value() / (float)sampleRate.Value());
    while (phase >= TPhase(1.0f))
        phase -= TPhase(1.0f);
    while (phase < TPhase(0.0f))
        phase += TPhase(1.0f);
}
 
TAmplitude AdvanceOscilator_Sine(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(sin(phase.Value()*c_twoPi));
}
 
TAmplitude AdvanceOscilator_Saw(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(phase.Value() * 2.0f - 1.0f);
}
 
TAmplitude AdvanceOscilator_Square(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(phase.Value() > 0.5f ? 1.0f : -1.0f);
}
 
TAmplitude AdvanceOscilator_Triangle(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    if (phase > TPhase(0.5f))
        return TAmplitude((((1.0f - phase.Value()) * 2.0f) * 2.0f) - 1.0f);
    else
        return TAmplitude(((phase.Value() * 2.0f) * 2.0f) - 1.0f);
}
 
TAmplitude AdvanceOscilator_Saw_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
 
    // sum the harmonics
    TAmplitude ret(0.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        TPhase harmonicPhase = phase * TPhase((float)harmonicIndex);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / (float)harmonicIndex);
    }
 
    //adjust the volume
    ret *= TAmplitude(2.0f / c_pi);
     
    return ret;
}
 
TAmplitude AdvanceOscilator_Square_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
 
    // sum the harmonics
    TAmplitude ret(0.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        float harmonicFactor = (float)harmonicIndex * 2.0f - 1.0f;
        TPhase harmonicPhase = phase * TPhase(harmonicFactor);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / harmonicFactor);
    }
 
    //adjust the volume
    ret *= TAmplitude(4.0f / c_pi);
 
    return ret;
}
 
TAmplitude AdvanceOscilator_Triangle_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
 
    // sum the harmonics
    TAmplitude ret(0.0f);
    bool subtract = true;
    for (int harmonicIndex = 1; harmonicIndex <= 10; ++harmonicIndex)
    {
        float harmonicFactor = (float)harmonicIndex * 2.0f - 1.0f;
        TPhase harmonicPhase = phase * TPhase(harmonicFactor);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / (harmonicFactor*harmonicFactor)) * TAmplitude(subtract ? -1.0f : 1.0f);
    }
 
    //adjust the volume
    ret *= TAmplitude(8.0f / (c_pi*c_pi));
 
    return ret;
}
 
//=====================================================================================
// Drum Synthesis
//=====================================================================================
TAmplitude Drum(const SSoundSettings &sound, SDrumInstance &drum)
{
    // if the drum hasn't started yet, nothing to do!
    if (sound.m_currentSample < drum.m_startTime)
        return TAmplitude(0.0f);
 
    TFrequency frequencyMultiplier(1.0f);
    TAmplitude envelopeVolume(0.0f);
    TSamples sampleRelative = sound.m_currentSample - drum.m_startTime;
 
    if (sampleRelative < drum.m_settings.m_attack)
    {
        envelopeVolume = TAmplitude(sampleRelative.Divide<float>(drum.m_settings.m_attack));
    }
    else if (sampleRelative < drum.m_settings.m_attack + drum.m_settings.m_sustain)
    {
        envelopeVolume = TAmplitude(1.0f);
    }
    else if (sampleRelative < drum.m_settings.m_attack + drum.m_settings.m_sustain + drum.m_settings.m_release)
    {
        sampleRelative -= (drum.m_settings.m_attack + drum.m_settings.m_sustain);
        envelopeVolume = TAmplitude(1.0f - sampleRelative.Divide<float>(drum.m_settings.m_release));
        frequencyMultiplier = TFrequency(envelopeVolume.Value());
    }
    else
    {
        return TAmplitude(0.0f);
    }
 
    const TFrequency freqDecay(0.8f);
    envelopeVolume *= drum.m_settings.m_volume;
    TFrequency frequency = drum.m_settings.m_frequency * ((TFrequency(1.0f) - freqDecay) + (frequencyMultiplier*freqDecay));
    return AdvanceOscilator_Sine(drum.m_phase, frequency, sound.m_sampleRate) * envelopeVolume;
}
 
//=====================================================================================
// Main
//=====================================================================================
int main(int argc, char **argv)
{
    //our sound parameters
    SSoundSettings sound;
    sound.m_sampleRate = TSamples(44100);
    sound.m_lengthMs = SecondsToMilliseconds(9.0f);
    sound.m_numChannels = TChannelCount(1);
 
    // set up the data for our drums.
    SDrumSettings drum1;
    drum1.m_frequency = Frequency(1, 8);
    drum1.m_attack = MilliSecondsToSamples(sound, 10.0f);
    drum1.m_sustain = MilliSecondsToSamples(sound, 10.0f);
    drum1.m_release = MilliSecondsToSamples(sound, 175.0f);
    drum1.m_volume = DBToAmplitude(TDecibels(-3.0f));
 
    SDrumSettings drum2 = drum1;
    drum2.m_frequency = Frequency(2, 5);
 
    SDrumSettings drum3 = drum1;
    drum3.m_frequency = Frequency(2, 5);
 
    SDrumSettings drum4 = drum1;
    drum4.m_frequency = Frequency(1, 10);
 
    SDrumSettings drumBG = drum1;
    drumBG.m_frequency = Frequency(1, 2);
    drumBG.m_volume = DBToAmplitude(TDecibels(-12.0f));
 
    // setup drums: make a 4 beat pattern that occurs every other second
    for (uint32 i = 1; i < sound.m_lengthMs.Value() / 1000; i += 2)
	{
        g_drumInstances.push_back(SDrumInstance(SecondsToSamples(sound, (float)i + 0.00f), drum1));
        g_drumInstances.push_back(SDrumInstance(SecondsToSamples(sound, (float)i + 0.25f), drum2));
        g_drumInstances.push_back(SDrumInstance(SecondsToSamples(sound, (float)i + 0.50f), drum3));
        g_drumInstances.push_back(SDrumInstance(SecondsToSamples(sound, (float)i + 1.00f), drum4));
    }
 
    // setup drums: make a background beat
    for (uint32 i = 0, c = sound.m_lengthMs.Value() / 1000 * 4; i < c; ++i)
        g_drumInstances.push_back(SDrumInstance(SecondsToSamples(sound, (float)i / 4.0f), drumBG));
 
    //make our buffer to hold the samples
    TSamples numSamples = TSamples(sound.m_sampleRate.Value() * sound.m_numChannels.Value() * sound.m_lengthMs.Value() / 1000);
    std::vector<TAmplitude> samples;
    samples.resize(numSamples.Value());
 
    // render our audio samples from our drum list
    for (TSamples index = TSamples(0); index < numSamples; ++index)
    {
        sound.m_currentSample = index;
        TAmplitude &sample = samples[index.Value()];
        sample = TAmplitude(0.0f);
 
        std::for_each(
            g_drumInstances.begin(),
            g_drumInstances.end(),
            [&sample, &sound](SDrumInstance& drum)
            {
                sample += Drum(sound, drum);
            }
        );
    }
 
    // save as a wave file
    WriteWaveFile<int16_t>("out.wav", samples, sound);
}
[/code]

<h2>Links</h2>

If you want a better sounding drum, check out these links. Frankly, read everything on that site... there is such great stuff there.  If you like synth, that is the place to read about cool stuff, but unfortunately it's bent towards electrical engineers and musicians, not programmers.

<a href="http://www.soundonsound.com/sos/jan02/articles/synthsecrets0102.asp" target="_blank">Sound On Suond - Synthesizing Drums: The Bass Drum</a>
<a href="http://www.soundonsound.com/sos/Feb02/articles/synthsecrets0202.asp" target="_blank">Sound On Suond - Practical Bass Drum Synthesis</a>

Here is some more info about envelopes too.  Envelopes really are a core ingrediant to synthesizers.  Applying different envelopes to the same sine wave frequency, you can make a variety of different sounding instruments.  They are pretty darn powerful.
<a href="http://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope" target="_blank">Wikipedia: ASDR Envelope</a>

I got some REALLY cool synth stuff planned in the near future, so keep an eye out!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1940</wp:post_id>
		<wp:post_date><![CDATA[2015-03-14 21:00:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-15 05:00:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synth-basic-drum]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_b904ea8a239d768e1b84653958b2e539]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/sine.wav
88244
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/sineenvelope.wav
88244
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/drum.wav
88244
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/melody.wav
793844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495580219;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:31;}i:1;a:1:{s:2:"id";i:7;}i:2;a:1:{s:2:"id";i:2285;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DIY Synth: Flange Effect</title>
		<link>http://blog.demofox.org/2015/03/16/diy-synth-flange-effect/</link>
		<pubDate>Mon, 16 Mar 2015 22:48:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2001</guid>
		<description></description>
		<content:encoded><![CDATA[This is a part of the <a href="http://blog.demofox.org/diy-synthesizer/" target="_blank">DIY Synthesizer</a> series of posts where each post is roughly built upon the knowledge of the previous posts. If you are lost, check the earlier posts!

Flange is a pretty interesting audio effect.  It can give character to the most monotonous of sounds and it can also make good sounds even better.

Before we dive into it, check out these raw and flanged sound files to get a glimpse of what we're talking about.  The flanged files were created with the simple c++ sample code at the end of this chapter.  Only standard header files used, so you too will be able to flange sounds by the end of this post!

<b>A clip from the movie "legend"</b><br>
Raw: <a href="https://demofox2.files.wordpress.com/2015/03/legend.wav" target="_blank">legend.wav</a><br>
Flanged: <a href="https://demofox2.files.wordpress.com/2015/03/legend_f.wav" target="_blank">legend_f.wav</a><br>

<b>A drum loop</b><br>
Raw: <a href="https://demofox2.files.wordpress.com/2015/03/cymbal.wav" target="_blank">cymbal.wav</a><br>
Flanged: <a href="https://demofox2.files.wordpress.com/2015/03/cymbal_f.wav" target="_blank">cymbal_f.wav</a>

<h2>How Does it Work?</h2>

The idea behind flange is actually pretty simple.  All you do is you mix a sound with itself, but have one of the copies speed up and slow down (like, on a sine wave) instead of letting it play at normal speed.  This makes the sounds mix together at different (but similar) points in time.  Since sound is made up of peaks (positive numbers) and valleys (negative numbers), mixing the sound with the time offset sound causes some of the peaks and valleys to grow larger, and causes others to get smaller as they cancel each other out.  This results in the distinctive flange sound.

The simple way to flange a file would be to load all of the audio samples into memory and do something like this:

[code language="cpp"]
for (int i = 0; i < numSamples; ++i)
{
  // make a sine wave from -1 to 0 at the specified frequency.
  // flangeFrequencyAdjustment is hand wavey, but is there to account for desired flange frequency and also sound sample rate
  offset = sin((float)i*flangeFrequencyAdjustment);
  offset = offset * 0.5f - 0.5f; 

  // make this sine wave go from -flangeSampleDepth to 0
  offset *= flangeSampleDepth;

  // mix to get the flange effect!
  output[i] = input[i];
  if (i >= flangeSampleDepth)
       output[i] += input[i - offset];
}
[/code]

It's important to note though that for better quality flanging sounds, you should actually use a flange with sub-sample accuracy.  That way if your sine wave says it wants sample 3.6, it means your resulting sample should sample[3] * 0.4 + sample[4] * 0.6.  That is just doing a linear interpolation to get the "inbetween" data of the samples, which works well enough for my needs, but higher quality flangers will use higher quality interpolation techniques and curve fitting. 

Who invented the flanger is apparently not agreed on, but it's origin is back in the days of tape deck based audio recording studios.  If you put your finger on one of the tape flanges and slow it down, if you then mix that result with an undelayed version of the same sound, you'd start to hear the flanging effect.

These days we rely on hardware and software to emulate that.

If you have ever accidentally played too many copies of the same sound too closely together, you've probably heard a flange-like effect.  It sounds fairly similar, but you don't get the sweeping effect that you do with flange.

Some flanges also feed their output back into their input to further the effect and add some resonance.  We aren't doing that in this post, but feel free to experiment with that on your own! (check the links section for more info)

It's important to note that you can use the same process on LIVE music to do flanging in real time.  If you have a "delay buffer" to hold the last N seconds of sound, you can use the sine wave to control what part of that delay buffer mixes with the current sound coming out.

<h2>Flange Parameters</h2>

Flangers often have two parameters (at least).  One parameter controls the frequency of the LFO (low frequency oscilator) sine wave.  The other parameter controls it's "depth" which means how far backwards or forwards in time the non-real-time sound can go.

Good frequency values of the oscilator depends entirely on the sound you are flanging as well as the style you are going for, but usually small values like less than 5 hz works best.  I usually will use a value less than 1, and for best results I like to make it a value that isn't likely to line up with the tempo of the music - such as perhaps 0.374.

The reason for this is that flange adds some interesting flavor to your sound, and if you had a value like 0.25 for your flanger, every 4 notes would always sound the same and line up with the flange effect.  if instead, you have it at something like 0.374, you can play a repeating melody SEVERAL times over and over, and due to the flange effect, each time through the notes will sound different and accoustically interesting.

The best values of the other parameter (the flange depth), also varies depending on your source sounds and the sound you are going after.  People usually suggest doing no more than 20ms though.  I personally really enjoy the sound of a much smaller value, such as 1ms.  Play around with different values and see what you like!

<h2>Flanging Basic Wave Forms</h2>

Here are some more flange samples of the basic wave forms, to give you an idea of how flange behaves with the various wave forms:
<br><br>

Triangle:
Raw: <a href="https://demofox2.files.wordpress.com/2015/03/triangle.wav" target="blank">triangle.wav</a>
Flanged: <a href="https://demofox2.files.wordpress.com/2015/03/triangle_f.wav" target="blank">triangle_f.wav</a>

Bandlimited Triangle:
Raw: <a href="https://demofox2.files.wordpress.com/2015/03/triangleBL.wav" target="blank">triangleBL.wav</a>
Flanged: <a href="https://demofox2.files.wordpress.com/2015/03/triangleBL_f.wav" target="blank">triangleBL_f.wav</a>

Saw:
Raw: <a href="https://demofox2.files.wordpress.com/2015/03/saw.wav" target="blank">saw.wav</a>
Flanged: <a href="https://demofox2.files.wordpress.com/2015/03/saw_f.wav" target="blank">saw_f.wav</a>

Bandlimited Saw:
Raw: <a href="https://demofox2.files.wordpress.com/2015/03/sawBL.wav" target="blank">sawBL.wav</a>
Flanged: <a href="https://demofox2.files.wordpress.com/2015/03/sawBL_f.wav" target="blank">sawBL_f.wav</a>

Square:
Raw: <a href="https://demofox2.files.wordpress.com/2015/03/square.wav" target="blank">square.wav</a>
Flanged: <a href="https://demofox2.files.wordpress.com/2015/03/square_f.wav" target="blank">square_f.wav</a>

Bandlimited Square:
Raw: <a href="https://demofox2.files.wordpress.com/2015/03/squareBL.wav" target="blank">squareBL.wav</a>
Flanged: <a href="https://demofox2.files.wordpress.com/2015/03/squareBL_f.wav" target="blank">squareBL_f.wav</a>

Sine:
Raw: <a href="https://demofox2.files.wordpress.com/2015/03/sine1.wav" target="blank">sine1.wav</a>
Flanged: <a href="https://demofox2.files.wordpress.com/2015/03/sine_f.wav" target="blank">sine_f.wav</a>

<h2>Sample Code</h2>

This sample code reads in "in.wav" flanges it at 4hz with a 1ms depth, and writes out "out.wav".  Note, the wave file reading code is not bullet proof, sorry!  It seems to work well with mono 16 bit wave files, but if you need better sound file reading, i suggest looking at libsndfile (link in links section!)

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS
  
#include <array>
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <cmath>
#include <vector>
  
#define _USE_MATH_DEFINES
#include <math.h>
  
//=====================================================================================
// SNumeric - uses phantom types to enforce type safety
//=====================================================================================
template <typename T, typename PHANTOM_TYPE>
struct SNumeric
{
public:
    explicit SNumeric(const T &value) : m_value(value) { }
    SNumeric() : m_value() { }
    inline T& Value() { return m_value; }
    inline const T& Value() const { return m_value; }
  
    typedef SNumeric<T, PHANTOM_TYPE> TType;
    typedef T TInnerType;
  
    // Math Operations
    TType operator+ (const TType &b) const
    {
        return TType(this->Value() + b.Value());
    }
  
    TType operator- (const TType &b) const
    {
        return TType(this->Value() - b.Value());
    }
  
    TType operator* (const TType &b) const
    {
        return TType(this->Value() * b.Value());
    }
  
    TType operator/ (const TType &b) const
    {
        return TType(this->Value() / b.Value());
    }
  
    TType& operator+= (const TType &b)
    {
        Value() += b.Value();
        return *this;
    }
  
    TType& operator-= (const TType &b)
    {
        Value() -= b.Value();
        return *this;
    }
  
    TType& operator*= (const TType &b)
    {
        Value() *= b.Value();
        return *this;
    }
  
    TType& operator/= (const TType &b)
    {
        Value() /= b.Value();
        return *this;
    }
  
    TType& operator++ ()
    {
        Value()++;
        return *this;
    }
  
    TType& operator-- ()
    {
        Value()--;
        return *this;
    }
  
    // Extended Math Operations
    template <typename T>
    T Divide(const TType &b)
    {
        return ((T)this->Value()) / ((T)b.Value());
    }
  
    // Logic Operations
    bool operator< (const TType &b) const {
        return this->Value() < b.Value();
    }
    bool operator<= (const TType &b) const {
        return this->Value() <= b.Value();
    }
    bool operator> (const TType &b) const {
        return this->Value() > b.Value();
    }
    bool operator>= (const TType &b) const {
        return this->Value() >= b.Value();
    }
    bool operator== (const TType &b) const {
        return this->Value() == b.Value();
    }
    bool operator!= (const TType &b) const {
        return this->Value() != b.Value();
    }
  
private:
    T m_value;
};
  
//=====================================================================================
// Typedefs
//=====================================================================================
  
typedef uint8_t uint8;
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef int16_t int16;
typedef int32_t int32;
  
// type safe types!
typedef SNumeric<float, struct S__Frequency>      TFrequency;
typedef SNumeric<uint32, struct S__TimeMs>        TTimeMs;
typedef SNumeric<uint32, struct S__Samples>       TSamples;
typedef SNumeric<float, struct S__FractSamples>   TFractionalSamples;
typedef SNumeric<float, struct S__Decibels>       TDecibels;
typedef SNumeric<float, struct S__Amplitude>      TAmplitude;
typedef SNumeric<uint8, struct S__ChannelCount>      TChannelCount;
typedef SNumeric<float, struct S__Phase>          TPhase;
  
//=====================================================================================
// Constants
//=====================================================================================
  
static const float c_pi = (float)M_PI;
static const float c_twoPi = c_pi * 2.0f;
  
//=====================================================================================
// Structs
//=====================================================================================
  
struct SSoundSettings
{
    TSamples        m_sampleRate;
    TTimeMs         m_lengthMs;
    TChannelCount   m_numChannels;
    TSamples        m_currentSample;
};
  
//=====================================================================================
// Conversion Functions
//=====================================================================================
inline TDecibels AmplitudeToDB(TAmplitude volume)
{
    return TDecibels(log10(volume.Value()));
}
  
inline TAmplitude DBToAmplitude(TDecibels dB)
{
    return TAmplitude(pow(10.0f, dB.Value() / 20.0f));
}
  
TSamples SecondsToSamples(const SSoundSettings &s, float seconds)
{
    return TSamples((int)(seconds * (float)s.m_sampleRate.Value()));
}
  
TSamples MilliSecondsToSamples(const SSoundSettings &s, float milliseconds)
{
    return SecondsToSamples(s, milliseconds / 1000.0f);
}
  
TTimeMs SecondsToMilliseconds(float seconds)
{
    return TTimeMs((uint32)(seconds * 1000.0f));
}
  
TFrequency Frequency(float octave, float note)
{
    /* frequency = 440×(2^(n/12))
    Notes:
    0  = A
    1  = A#
    2  = B
    3  = C
    4  = C#
    5  = D
    6  = D#
    7  = E
    8  = F
    9  = F#
    10 = G
    11 = G# */
    return TFrequency((float)(440 * pow(2.0, ((double)((octave - 4) * 12 + note)) / 12.0)));
}
  
template <typename T>
T AmplitudeToAudioSample(const TAmplitude& in)
{
    const T c_min = std::numeric_limits<T>::min();
    const T c_max = std::numeric_limits<T>::max();
    const float c_minFloat = (float)c_min;
    const float c_maxFloat = (float)c_max;
  
    float ret = in.Value() * c_maxFloat;
  
    if (ret < c_minFloat)
        return c_min;
  
    if (ret > c_maxFloat)
        return c_max;
  
    return (T)ret;
}

TAmplitude GetLerpedAudioSample(const std::vector<TAmplitude>& samples, TFractionalSamples& index)
{
    // get the index of each sample and the fractional blend amount
    uint32 a = (uint32)floor(index.Value());
    uint32 b = a + 1;
    float fract = index.Value() - floor(index.Value());

    // get our two amplitudes
    float ampA = 0.0f;
    if (a >= 0 && a < samples.size())
        ampA = samples[a].Value();

    float ampB = 0.0f;
    if (b >= 0 && b < samples.size())
        ampB = samples[b].Value();

    // return the lerped result
    return TAmplitude(fract * ampB + (1.0f - fract) * ampA);
}

void NormalizeSamples(std::vector<TAmplitude>& samples, TAmplitude maxAmplitude)
{
    // nothing to do if no samples
    if (samples.size() == 0)
        return;

    // 1) find the largest absolute value in the samples.
    TAmplitude largestAbsVal = TAmplitude(abs(samples.front().Value()));
    std::for_each(samples.begin() + 1, samples.end(), [&largestAbsVal](const TAmplitude &a)
        {
            TAmplitude absVal = TAmplitude(abs(a.Value()));
            if (absVal > largestAbsVal)
                largestAbsVal = absVal;
        }
    );

    // 2) adjust largestAbsVal so that when we divide all samples, none will be bigger than maxAmplitude
    // if the value we are going to divide by is <= 0, bail out
    largestAbsVal /= maxAmplitude;
    if (largestAbsVal <= TAmplitude(0.0f))
        return;

    // 3) divide all numbers by the largest absolute value seen so all samples are [-maxAmplitude,+maxAmplitude]
    std::for_each(samples.begin(), samples.end(), [&largestAbsVal](TAmplitude &a)
        {
            a /= largestAbsVal;

            if (a >= TAmplitude(1.0f))
            {
                int ijkl = 0;
            }
        }
    );
}

void ResampleData(std::vector<TAmplitude>& samples, int srcSampleRate, int destSampleRate)
{
    //if the requested sample rate is the sample rate it already is, bail out and do nothing
    if (srcSampleRate == destSampleRate)
        return;

    //calculate the ratio of the old sample rate to the new
    float fResampleRatio = (float)destSampleRate / (float)srcSampleRate;
    
    //calculate how many samples the new data will have and allocate the new sample data
    int nNewDataNumSamples = (int)((float)samples.size() * fResampleRatio);

    std::vector<TAmplitude> newSamples;
    newSamples.resize(nNewDataNumSamples);

    //get each lerped output sample.  There are higher quality ways to resample
    for(int nIndex = 0; nIndex < nNewDataNumSamples; ++nIndex)
        newSamples[nIndex] = GetLerpedAudioSample(samples, TFractionalSamples((float)nIndex / fResampleRatio));
    
    //free the old data and set the new data
    std::swap(samples, newSamples);
}

void ChangeNumChannels(std::vector<TAmplitude>& samples, int nSrcChannels, int nDestChannels)
{
    //if the number of channels requested is the number of channels already there, or either number of channels is not mono or stereo, return
    if(nSrcChannels == nDestChannels ||
       nSrcChannels < 1 || nSrcChannels > 2 ||
       nDestChannels < 1 || nDestChannels > 2)
    {
        return;
    }

    //if converting from mono to stereo, duplicate the mono channel to make stereo
    if(nDestChannels == 2)
    {
        std::vector<TAmplitude> newSamples;
        newSamples.resize(samples.size() * 2);
        for (size_t index = 0; index < samples.size(); ++index)
        {
            newSamples[index * 2] = samples[index];
            newSamples[index * 2 + 1] = samples[index];
        }

        std::swap(samples, newSamples);
    }
    //else converting from stereo to mono, mix the stereo channels together to make mono
    else
    {
        std::vector<TAmplitude> newSamples;
        newSamples.resize(samples.size() / 2);
        for (size_t index = 0; index < samples.size() / 2; ++index)
            newSamples[index] = samples[index * 2] + samples[index * 2 + 1];

        std::swap(samples, newSamples);
    }
}

float PCMToFloat(unsigned char *pPCMData, int nNumBytes)
{
    switch(nNumBytes)
    {
        case 1:
        {
            uint8 data = pPCMData[0];
            return (float)data / 255.0f;
        }
        case 2:
        {
            int16 data = pPCMData[1] << 8 | pPCMData[0];
            return ((float)data) / ((float)0x00007fff);
        }
        case 3:
        {
            int32 data = pPCMData[2] << 16 | pPCMData[1] << 8 | pPCMData[0];
            return ((float)data) / ((float)0x007fffff);
        }
        case 4:
        {
            int32 data = pPCMData[3] << 24 | pPCMData[2] << 16 | pPCMData[1] << 8 | pPCMData[0];
            return ((float)data) / ((float)0x7fffffff);
        }
        default:
        {
            return 0.0f;
        }
    }
}
  
//=====================================================================================
// Wave File Writing Code
//=====================================================================================
struct SMinimalWaveFileHeader
{
    //the main chunk
    unsigned char m_szChunkID[4];      //0
    uint32        m_nChunkSize;        //4
    unsigned char m_szFormat[4];       //8
  
    //sub chunk 1 "fmt "
    unsigned char m_szSubChunk1ID[4];  //12
    uint32        m_nSubChunk1Size;    //16
    uint16        m_nAudioFormat;      //18
    uint16        m_nNumChannels;      //20
    uint32        m_nSampleRate;       //24
    uint32        m_nByteRate;         //28
    uint16        m_nBlockAlign;       //30
    uint16        m_nBitsPerSample;    //32
  
    //sub chunk 2 "data"
    unsigned char m_szSubChunk2ID[4];  //36
    uint32        m_nSubChunk2Size;    //40
  
    //then comes the data!
};
  
//this writes a wave file
template <typename T>
bool WriteWaveFile(const char *fileName, const std::vector<TAmplitude> &samples, const SSoundSettings &sound)
{
    //open the file if we can
    FILE *file = fopen(fileName, "w+b");
    if (!file)
        return false;
  
    //calculate bits per sample and the data size
    const int32 bitsPerSample = sizeof(T) * 8;
    const int dataSize = samples.size() * sizeof(T);
  
    SMinimalWaveFileHeader waveHeader;
  
    //fill out the main chunk
    memcpy(waveHeader.m_szChunkID, "RIFF", 4);
    waveHeader.m_nChunkSize = dataSize + 36;
    memcpy(waveHeader.m_szFormat, "WAVE", 4);
  
    //fill out sub chunk 1 "fmt "
    memcpy(waveHeader.m_szSubChunk1ID, "fmt ", 4);
    waveHeader.m_nSubChunk1Size = 16;
    waveHeader.m_nAudioFormat = 1;
    waveHeader.m_nNumChannels = sound.m_numChannels.Value();
    waveHeader.m_nSampleRate = sound.m_sampleRate.Value();
    waveHeader.m_nByteRate = sound.m_sampleRate.Value() * sound.m_numChannels.Value() * bitsPerSample / 8;
    waveHeader.m_nBlockAlign = sound.m_numChannels.Value() * bitsPerSample / 8;
    waveHeader.m_nBitsPerSample = bitsPerSample;
  
    //fill out sub chunk 2 "data"
    memcpy(waveHeader.m_szSubChunk2ID, "data", 4);
    waveHeader.m_nSubChunk2Size = dataSize;
  
    //write the header
    fwrite(&waveHeader, sizeof(SMinimalWaveFileHeader), 1, file);
  
    //write the wave data itself, converting it from float to the type specified
    std::vector<T> outSamples;
    outSamples.resize(samples.size());
    for (size_t index = 0; index < samples.size(); ++index)
        outSamples[index] = AmplitudeToAudioSample<T>(samples[index]);
    fwrite(&outSamples[0], dataSize, 1, file);
  
    //close the file and return success
    fclose(file);
    return true;
}

//loads a wave file in.  Converts from source format into the specified format
// TOTAL HONESTY: some wave files seem to have problems being loaded through this function and I don't have
// time to investigate why.  It seems to work best with 16 bit mono wave files.
// If you need more robust file loading, check out libsndfile at http://www.mega-nerd.com/libsndfile/
bool ReadWaveFile(const char *fileName, std::vector<TAmplitude>& samples, int16 numChannels, int32 sampleRate)
{
    //open the file if we can
    FILE *File = fopen(fileName,"rb");
    if(!File)
    {
        return false;
    }

    //read the main chunk ID and make sure it's "RIFF"
    char buffer[5];
    buffer[4] = 0;
    if(fread(buffer,4,1,File) != 1 || strcmp(buffer,"RIFF"))
    {
        fclose(File);
        return false;
    }

    //read the main chunk size
    uint32 nChunkSize;
    if(fread(&nChunkSize,4,1,File) != 1)
    {
        fclose(File);
        return false;
    }

    //read the format and make sure it's "WAVE"
    if(fread(buffer,4,1,File) != 1 || strcmp(buffer,"WAVE"))
    {
        fclose(File);
        return false;
    }

    long chunkPosFmt = -1;
    long chunkPosData = -1;

    while(chunkPosFmt == -1 || chunkPosData == -1)
    {
        //read a sub chunk id and a chunk size if we can
        if(fread(buffer,4,1,File) != 1 || fread(&nChunkSize,4,1,File) != 1)
        {
            fclose(File);
            return false;
        }

        //if we hit a fmt
        if(!strcmp(buffer,"fmt "))
        {
            chunkPosFmt = ftell(File) - 8;
        }
        //else if we hit a data
        else if(!strcmp(buffer,"data"))
        {
            chunkPosData = ftell(File) - 8;
        }

        //skip to the next chunk
        fseek(File,nChunkSize,SEEK_CUR);
    }

    //we'll use this handy struct to load in 
    SMinimalWaveFileHeader waveData;

    //load the fmt part if we can
    fseek(File,chunkPosFmt,SEEK_SET);
    if(fread(&waveData.m_szSubChunk1ID,24,1,File) != 1)
    {
        fclose(File);
        return false;
    }

    //load the data part if we can
    fseek(File,chunkPosData,SEEK_SET);
    if(fread(&waveData.m_szSubChunk2ID,8,1,File) != 1)
    {
        fclose(File);
        return false;
    }

    //verify a couple things about the file data
    if(waveData.m_nAudioFormat != 1 ||       //only pcm data
       waveData.m_nNumChannels < 1 ||        //must have a channel
       waveData.m_nNumChannels > 2 ||        //must not have more than 2
       waveData.m_nBitsPerSample > 32 ||     //32 bits per sample max
       waveData.m_nBitsPerSample % 8 != 0 || //must be a multiple of 8 bites
       waveData.m_nBlockAlign > 8)           //blocks must be 8 bytes or lower
    {
        fclose(File);
        return false;
    }

    //figure out how many samples and blocks there are total in the source data
    int nBytesPerBlock = waveData.m_nBlockAlign;
    int nNumBlocks = waveData.m_nSubChunk2Size / nBytesPerBlock;
    int nNumSourceSamples = nNumBlocks * waveData.m_nNumChannels;

    //allocate space for the source samples
    samples.resize(nNumSourceSamples);

    //maximum size of a block is 8 bytes.  4 bytes per samples, 2 channels
    unsigned char pBlockData[8];
    memset(pBlockData,0,8);

    //read in the source samples at whatever sample rate / number of channels it might be in
    int nBytesPerSample = nBytesPerBlock / waveData.m_nNumChannels;
    for(int nIndex = 0; nIndex < nNumSourceSamples; nIndex += waveData.m_nNumChannels)
    {
        //read in a block
        if(fread(pBlockData,waveData.m_nBlockAlign,1,File) != 1)
        {
            fclose(File);
            return false;
        }

        //get the first sample
        samples[nIndex].Value() = PCMToFloat(pBlockData,nBytesPerSample);

        //get the second sample if there is one
        if(waveData.m_nNumChannels == 2)
        {
            samples[nIndex+1].Value() = PCMToFloat(&pBlockData[nBytesPerSample],nBytesPerSample);
        }
    }

    //re-sample the sample rate up or down as needed
    ResampleData(samples, waveData.m_nSampleRate, sampleRate);

    //handle switching from mono to stereo or vice versa
    ChangeNumChannels(samples, waveData.m_nNumChannels, numChannels);

    return true;
}
  
//=====================================================================================
// Oscilators
//=====================================================================================
  
void AdvancePhase(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    phase += TPhase(frequency.Value() / (float)sampleRate.Value());
    while (phase >= TPhase(1.0f))
        phase -= TPhase(1.0f);
    while (phase < TPhase(0.0f))
        phase += TPhase(1.0f);
}
  
TAmplitude AdvanceOscilator_Sine(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(sin(phase.Value()*c_twoPi));
}
  
TAmplitude AdvanceOscilator_Saw(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(phase.Value() * 2.0f - 1.0f);
}
  
TAmplitude AdvanceOscilator_Square(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(phase.Value() > 0.5f ? 1.0f : -1.0f);
}
  
TAmplitude AdvanceOscilator_Triangle(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    if (phase > TPhase(0.5f))
        return TAmplitude((((1.0f - phase.Value()) * 2.0f) * 2.0f) - 1.0f);
    else
        return TAmplitude(((phase.Value() * 2.0f) * 2.0f) - 1.0f);
}
  
TAmplitude AdvanceOscilator_Saw_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
  
    // sum the harmonics
    TAmplitude ret(0.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        TPhase harmonicPhase = phase * TPhase((float)harmonicIndex);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / (float)harmonicIndex);
    }
  
    //adjust the volume
    ret *= TAmplitude(2.0f / c_pi);
      
    return ret;
}
  
TAmplitude AdvanceOscilator_Square_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
  
    // sum the harmonics
    TAmplitude ret(0.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        float harmonicFactor = (float)harmonicIndex * 2.0f - 1.0f;
        TPhase harmonicPhase = phase * TPhase(harmonicFactor);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / harmonicFactor);
    }
  
    //adjust the volume
    ret *= TAmplitude(4.0f / c_pi);
  
    return ret;
}
  
TAmplitude AdvanceOscilator_Triangle_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
  
    // sum the harmonics
    TAmplitude ret(0.0f);
    TAmplitude signFlip(1.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        float harmonicFactor = (float)harmonicIndex * 2.0f - 1.0f;
        TPhase harmonicPhase = phase * TPhase(harmonicFactor);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / (harmonicFactor*harmonicFactor)) * signFlip;
        signFlip *= TAmplitude(-1.0f);
    }
  
    //adjust the volume
    ret *= TAmplitude(8.0f / (c_pi*c_pi));
  
    return ret;
}

//=====================================================================================
// Main
//=====================================================================================
int main(int argc, char **argv)
{
    //our desired sound parameters
    SSoundSettings sound;
    sound.m_sampleRate = TSamples(44100);
    sound.m_lengthMs = SecondsToMilliseconds(4.0f);
    sound.m_numChannels = TChannelCount(1);

    // flange effect parameters
    const TFrequency c_flangeFrequency(0.4f);
    const TSamples c_flangeDepth(MilliSecondsToSamples(sound, 1.0f));
 
    // load the wave file if we can
    std::vector<TAmplitude> inputData;
    if (!ReadWaveFile("in.wav", inputData, sound.m_numChannels.Value(), sound.m_sampleRate.Value()))
    {
        printf("could not load wave file!");
        return 0;
    }

    // allocate space for the output file
    std::vector<TAmplitude> samples;
    samples.resize(inputData.size());

    TSamples envelopeSize = MilliSecondsToSamples(sound, 50.0f);

    //apply the phase effect to the file
    TPhase flangePhase(0.0f);
    for (TSamples index = TSamples(0), numSamples(samples.size()); index < numSamples; ++index)
    {
        // calculate envelope at front and end of sound.
        TAmplitude envelope(1.0f);
        if (index < envelopeSize)
            envelope = TAmplitude((float)index.Value() / (float)envelopeSize.Value());
        else if (index > (numSamples - envelopeSize))
            envelope = TAmplitude(1.0f) - TAmplitude((float)(index - (numSamples - envelopeSize)).Value() / (float)envelopeSize.Value());

        // make a sine wave that goes from -1 to 0 at the specified frequency
        TAmplitude flangeSine = AdvanceOscilator_Sine(flangePhase, c_flangeFrequency, sound.m_sampleRate) * TAmplitude(0.5f) - TAmplitude(0.5f);

        // use that sine wave to calculate an offset backwards in time to sample from
        TFractionalSamples flangeOffset = TFractionalSamples((float)index.Value()) + TFractionalSamples(flangeSine.Value() * (float)c_flangeDepth.Value());

        // mix the sample with the offset sample and apply the envelope for the front and back of the sound
        samples[index.Value()] = (inputData[index.Value()] + GetLerpedAudioSample(inputData, flangeOffset)) * envelope;
    }
  
    // normalize the amplitude of the samples to make sure they are as loud as possible without clipping
    // give 3db of headroom
    NormalizeSamples(samples, DBToAmplitude(TDecibels(-3.0f)));

    // save as a wave file
    WriteWaveFile<int16_t>("out.wav", samples, sound);

    return 0;
}
[/code]

<h2>Links</h2>

More DIY synth stuff coming soon, I have like 5 more posts I want to make right now, with the last couple being about some pretty awesome stuff I learned about recently!<br>
<br>
<a href="http://en.wikipedia.org/wiki/Flanging" target="_blank">Wikipedia: Flanging</a><br>
<a href="http://makingmusicmag.com/difference-between-phase-flanger-and-chorus-effect/" target="_blank">The difference between flange, phaser & chorus</a><br>
<a href="http://testtone.com/fundamentals/what-chorus-effect" target="_blank">What is a chorus effect?</a><br>
<br>
<a href="https://www.shadertoy.com/view/MssSW2" target="_blank">Shadertoy: Flange (made by me!)</a><br>
<br>
<a href="http://www.mega-nerd.com/libsndfile/" target="_blank">libsndfile - to get better sound loading!</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2001</wp:post_id>
		<wp:post_date><![CDATA[2015-03-16 14:48:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-16 22:48:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synth-flange-effect]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend.wav
793904
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend_f.wav
793844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal.wav
693104
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal_f.wav
693044
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/triangle.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/triangle_f.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/triangleBL.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/triangleBL_f.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/saw.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/saw_f.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/sawBL.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/sawBL_f.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/square.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/square_f.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/squareBL.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/squareBL_f.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/sine1.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/sine_f.wav
352844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495498876;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2055;}i:1;a:1:{s:2:"id";i:31;}i:2;a:1:{s:2:"id";i:7;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DIY Synth: Delay Effect (Echo)</title>
		<link>http://blog.demofox.org/2015/03/17/diy-synth-delay-effect-echo/</link>
		<pubDate>Tue, 17 Mar 2015 22:45:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2055</guid>
		<description></description>
		<content:encoded><![CDATA[This is a part of the <a href="http://blog.demofox.org/diy-synthesizer/" target="_blank">DIY Synthesizer</a> series of posts where each post is roughly built upon the knowledge of the previous posts. If you are lost, check the earlier posts!

The delay effect is a pretty simple effect that adds echo to a sound.

Two parameters at minimum are usually exposed on delay effects: delay time and feedback.

Delay time is how long the echo is, and feedback controls how much the sound feeds back into itself - or how loud the echo is.

Implementing delay is actually super simple.  You figure out how many samples you need to hold "delay time" amount of sound (using the sample rate of the sound), and then just keep a circular buffer of previous sound samples.  The feedback value controls how much the sound feeds back into the delay buffer.

Here is some pseudo code for how it might be implemented:

[code language="cpp"]
//The size of the delay buffer is controlled by the time parameter 
// make sure the delay buffer is initialized with silence
delayBuffer[delaySamples] = 0;

// start the circular delay buffer index at 0
delayIndex = 0;

// process each input sample
for (i = 0; i < numSamples; ++i)
{
  // calculate the output sample, which includes the echo from the delay buffer
  outSample[i] = inSample[i] + delayBuffer[delayIndex];

  // also store this output sample in the delay buffer
  delayBuffer[delayIndex] = outSample[i] * feedbackMultiplier; // a multiplier that is usually (0 to 1]

  // advance the circular delay buffer index
  delayIndex++;
  if (delayIndex >= delaySamples)
    delayIndex = 0;
}
[/code]

Delay is an effect in it's own right, but it's also the basis for many other effect types as well.  Flange, phaser, and chorus for instance rely on a delay buffer to be able to do their work.

Some common variations on the delay effect include having different delay parameters for the left and right channel in a stereo sound, or modifying the output sound before it goes into the delay buffer to make it so that the echo sounds a bit different than the original.  For instance you could put a lowpass or highpass filter on the echo, or even flange it!

Play around with it and get creative.  You might make some interesting and unique sounding sounds (:

<h2>Audio Samples</h2>

These files were processed with the sample code in this post.

<table>
<tr>
<td></td>
<td><b>Legend Quote</b></td>
<td><b>Cymbals</b></td>
</tr>
<tr>
<td><b>Raw</b></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/legend.wav" target="blank">legend.wav</a></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/cymbal.wav" target="blank">cymbal.wav</a></td>
</tr>
<tr>
<td><b>250ms delay, -3db feedback</b></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/legend_250_3.wav" target="blank">legend_250_3.wav</a></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/cymbal_250_3.wav" target="blank">cymbal_250_3.wav</a></td>
</tr>
<tr>
<td><b>250ms delay, -12db feedback</b></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/legend_250_12.wav" target="blank">legend_250_12.wav</a></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/cymbal_250_12.wav" target="blank">cymbal_250_12.wav</a></td>
</tr>
<tr>
<td><b>333ms delay, -6db feedback</b></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/legend_333_6.wav" target="blank">legend_333_6.wav</a></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/cymbal_333_6.wav" target="blank">cymbal_333_6.wav</a></td>
</tr>
</table>

<h2>Sample Code</h2>

The sample code below reads in.wav, applies a delay of 333ms with -12db feedback and writes it as out.wav.

Usual caveat: the wave reading code isn't bullet proof (sorry).  Seems to work best with 16 bit mono wave files.  You can use libsndfile if you want more reliable and more diverse sound loading options!

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS
   
#include <array>
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <cmath>
#include <vector>
   
#define _USE_MATH_DEFINES
#include <math.h>
   
//=====================================================================================
// SNumeric - uses phantom types to enforce type safety
//=====================================================================================
template <typename T, typename PHANTOM_TYPE>
struct SNumeric
{
public:
    explicit SNumeric(const T &value) : m_value(value) { }
    SNumeric() : m_value() { }
    inline T& Value() { return m_value; }
    inline const T& Value() const { return m_value; }
   
    typedef SNumeric<T, PHANTOM_TYPE> TType;
    typedef T TInnerType;
   
    // Math Operations
    TType operator+ (const TType &b) const
    {
        return TType(this->Value() + b.Value());
    }
   
    TType operator- (const TType &b) const
    {
        return TType(this->Value() - b.Value());
    }
   
    TType operator* (const TType &b) const
    {
        return TType(this->Value() * b.Value());
    }
   
    TType operator/ (const TType &b) const
    {
        return TType(this->Value() / b.Value());
    }
   
    TType& operator+= (const TType &b)
    {
        Value() += b.Value();
        return *this;
    }
   
    TType& operator-= (const TType &b)
    {
        Value() -= b.Value();
        return *this;
    }
   
    TType& operator*= (const TType &b)
    {
        Value() *= b.Value();
        return *this;
    }
   
    TType& operator/= (const TType &b)
    {
        Value() /= b.Value();
        return *this;
    }
   
    TType& operator++ ()
    {
        Value()++;
        return *this;
    }
   
    TType& operator-- ()
    {
        Value()--;
        return *this;
    }
   
    // Extended Math Operations
    template <typename T>
    T Divide(const TType &b)
    {
        return ((T)this->Value()) / ((T)b.Value());
    }
   
    // Logic Operations
    bool operator< (const TType &b) const {
        return this->Value() < b.Value();
    }
    bool operator<= (const TType &b) const {
        return this->Value() <= b.Value();
    }
    bool operator> (const TType &b) const {
        return this->Value() > b.Value();
    }
    bool operator>= (const TType &b) const {
        return this->Value() >= b.Value();
    }
    bool operator== (const TType &b) const {
        return this->Value() == b.Value();
    }
    bool operator!= (const TType &b) const {
        return this->Value() != b.Value();
    }
   
private:
    T m_value;
};
   
//=====================================================================================
// Typedefs
//=====================================================================================
   
typedef uint8_t uint8;
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef int16_t int16;
typedef int32_t int32;
   
// type safe types!
typedef SNumeric<float, struct S__Frequency>      TFrequency;
typedef SNumeric<uint32, struct S__TimeMs>        TTimeMs;
typedef SNumeric<uint32, struct S__Samples>       TSamples;
typedef SNumeric<float, struct S__FractSamples>   TFractionalSamples;
typedef SNumeric<float, struct S__Decibels>       TDecibels;
typedef SNumeric<float, struct S__Amplitude>      TAmplitude;
typedef SNumeric<float, struct S__Phase>          TPhase;
   
//=====================================================================================
// Constants
//=====================================================================================
   
static const float c_pi = (float)M_PI;
static const float c_twoPi = c_pi * 2.0f;
   
//=====================================================================================
// Structs
//=====================================================================================
   
struct SSoundSettings
{
    TSamples        m_sampleRate;
    TTimeMs         m_lengthMs;
    TSamples        m_currentSample;
};

//=====================================================================================
// CDelay -> the delay buffer object
//=====================================================================================

class CDelay
{
public:
    CDelay(TSamples delayTime, TAmplitude feedback)
        : m_feedBack(feedback)
        , m_sampleIndex(0)
    {
        m_samples.resize(delayTime.Value());
        std::fill(m_samples.begin(), m_samples.end(), TAmplitude(0.0f));
    }

    TAmplitude ProcessSample(TAmplitude sample)
    {
        TAmplitude ret = sample + m_samples[m_sampleIndex];
        m_samples[m_sampleIndex] = ret * m_feedBack;
        m_sampleIndex++;
        if (m_sampleIndex >= m_samples.size())
            m_sampleIndex = 0;
        return ret;
    }

private:
    TAmplitude              m_feedBack;
    std::vector<TAmplitude> m_samples;
    size_t                  m_sampleIndex;
};

//=====================================================================================
// Conversion Functions
//=====================================================================================
inline TDecibels AmplitudeToDB(TAmplitude volume)
{
    return TDecibels(log10(volume.Value()));
}
   
inline TAmplitude DBToAmplitude(TDecibels dB)
{
    return TAmplitude(pow(10.0f, dB.Value() / 20.0f));
}
   
TSamples SecondsToSamples(const SSoundSettings &s, float seconds)
{
    return TSamples((int)(seconds * (float)s.m_sampleRate.Value()));
}
   
TSamples MilliSecondsToSamples(const SSoundSettings &s, float milliseconds)
{
    return SecondsToSamples(s, milliseconds / 1000.0f);
}
   
TTimeMs SecondsToMilliseconds(float seconds)
{
    return TTimeMs((uint32)(seconds * 1000.0f));
}
   
TFrequency Frequency(float octave, float note)
{
    /* frequency = 440×(2^(n/12))
    Notes:
    0  = A
    1  = A#
    2  = B
    3  = C
    4  = C#
    5  = D
    6  = D#
    7  = E
    8  = F
    9  = F#
    10 = G
    11 = G# */
    return TFrequency((float)(440 * pow(2.0, ((double)((octave - 4) * 12 + note)) / 12.0)));
}
   
template <typename T>
T AmplitudeToAudioSample(const TAmplitude& in)
{
    const T c_min = std::numeric_limits<T>::min();
    const T c_max = std::numeric_limits<T>::max();
    const float c_minFloat = (float)c_min;
    const float c_maxFloat = (float)c_max;
   
    float ret = in.Value() * c_maxFloat;
   
    if (ret < c_minFloat)
        return c_min;
   
    if (ret > c_maxFloat)
        return c_max;
   
    return (T)ret;
}
 
TAmplitude GetLerpedAudioSample(const std::vector<TAmplitude>& samples, TFractionalSamples& index)
{
    // get the index of each sample and the fractional blend amount
    uint32 a = (uint32)floor(index.Value());
    uint32 b = a + 1;
    float fract = index.Value() - floor(index.Value());
 
    // get our two amplitudes
    float ampA = 0.0f;
    if (a >= 0 && a < samples.size())
        ampA = samples[a].Value();
 
    float ampB = 0.0f;
    if (b >= 0 && b < samples.size())
        ampB = samples[b].Value();
 
    // return the lerped result
    return TAmplitude(fract * ampB + (1.0f - fract) * ampA);
}
 
void NormalizeSamples(std::vector<TAmplitude>& samples, TAmplitude maxAmplitude)
{
    // nothing to do if no samples
    if (samples.size() == 0)
        return;
 
    // 1) find the largest absolute value in the samples.
    TAmplitude largestAbsVal = TAmplitude(abs(samples.front().Value()));
    std::for_each(samples.begin() + 1, samples.end(), [&largestAbsVal](const TAmplitude &a)
        {
            TAmplitude absVal = TAmplitude(abs(a.Value()));
            if (absVal > largestAbsVal)
                largestAbsVal = absVal;
        }
    );
 
    // 2) adjust largestAbsVal so that when we divide all samples, none will be bigger than maxAmplitude
    // if the value we are going to divide by is <= 0, bail out
    largestAbsVal /= maxAmplitude;
    if (largestAbsVal <= TAmplitude(0.0f))
        return;
 
    // 3) divide all numbers by the largest absolute value seen so all samples are [-maxAmplitude,+maxAmplitude]
    std::for_each(samples.begin(), samples.end(), [&largestAbsVal](TAmplitude &a)
        {
            a /= largestAbsVal;
 
            if (a >= TAmplitude(1.0f))
            {
                int ijkl = 0;
            }
        }
    );
}
 
void ResampleData(std::vector<TAmplitude>& samples, int srcSampleRate, int destSampleRate)
{
    //if the requested sample rate is the sample rate it already is, bail out and do nothing
    if (srcSampleRate == destSampleRate)
        return;
 
    //calculate the ratio of the old sample rate to the new
    float fResampleRatio = (float)destSampleRate / (float)srcSampleRate;
     
    //calculate how many samples the new data will have and allocate the new sample data
    int nNewDataNumSamples = (int)((float)samples.size() * fResampleRatio);
 
    std::vector<TAmplitude> newSamples;
    newSamples.resize(nNewDataNumSamples);
 
    //get each lerped output sample.  There are higher quality ways to resample
    for(int nIndex = 0; nIndex < nNewDataNumSamples; ++nIndex)
        newSamples[nIndex] = GetLerpedAudioSample(samples, TFractionalSamples((float)nIndex / fResampleRatio));
     
    //free the old data and set the new data
    std::swap(samples, newSamples);
}
 
void ChangeNumChannels(std::vector<TAmplitude>& samples, int nSrcChannels, int nDestChannels)
{
    //if the number of channels requested is the number of channels already there, or either number of channels is not mono or stereo, return
    if(nSrcChannels == nDestChannels ||
       nSrcChannels < 1 || nSrcChannels > 2 ||
       nDestChannels < 1 || nDestChannels > 2)
    {
        return;
    }
 
    //if converting from mono to stereo, duplicate the mono channel to make stereo
    if(nDestChannels == 2)
    {
        std::vector<TAmplitude> newSamples;
        newSamples.resize(samples.size() * 2);
        for (size_t index = 0; index < samples.size(); ++index)
        {
            newSamples[index * 2] = samples[index];
            newSamples[index * 2 + 1] = samples[index];
        }
 
        std::swap(samples, newSamples);
    }
    //else converting from stereo to mono, mix the stereo channels together to make mono
    else
    {
        std::vector<TAmplitude> newSamples;
        newSamples.resize(samples.size() / 2);
        for (size_t index = 0; index < samples.size() / 2; ++index)
            newSamples[index] = samples[index * 2] + samples[index * 2 + 1];
 
        std::swap(samples, newSamples);
    }
}
 
float PCMToFloat(unsigned char *pPCMData, int nNumBytes)
{
    switch(nNumBytes)
    {
        case 1:
        {
            uint8 data = pPCMData[0];
            return (float)data / 255.0f;
        }
        case 2:
        {
            int16 data = pPCMData[1] << 8 | pPCMData[0];
            return ((float)data) / ((float)0x00007fff);
        }
        case 3:
        {
            int32 data = pPCMData[2] << 16 | pPCMData[1] << 8 | pPCMData[0];
            return ((float)data) / ((float)0x007fffff);
        }
        case 4:
        {
            int32 data = pPCMData[3] << 24 | pPCMData[2] << 16 | pPCMData[1] << 8 | pPCMData[0];
            return ((float)data) / ((float)0x7fffffff);
        }
        default:
        {
            return 0.0f;
        }
    }
}
   
//=====================================================================================
// Wave File Writing Code
//=====================================================================================
struct SMinimalWaveFileHeader
{
    //the main chunk
    unsigned char m_szChunkID[4];      //0
    uint32        m_nChunkSize;        //4
    unsigned char m_szFormat[4];       //8
   
    //sub chunk 1 "fmt "
    unsigned char m_szSubChunk1ID[4];  //12
    uint32        m_nSubChunk1Size;    //16
    uint16        m_nAudioFormat;      //18
    uint16        m_nNumChannels;      //20
    uint32        m_nSampleRate;       //24
    uint32        m_nByteRate;         //28
    uint16        m_nBlockAlign;       //30
    uint16        m_nBitsPerSample;    //32
   
    //sub chunk 2 "data"
    unsigned char m_szSubChunk2ID[4];  //36
    uint32        m_nSubChunk2Size;    //40
   
    //then comes the data!
};
   
//this writes a wave file
template <typename T>
bool WriteWaveFile(const char *fileName, const std::vector<TAmplitude> &samples, const SSoundSettings &sound)
{
    //open the file if we can
    FILE *file = fopen(fileName, "w+b");
    if (!file)
        return false;
   
    //calculate bits per sample and the data size
    const int32 bitsPerSample = sizeof(T) * 8;
    const int dataSize = samples.size() * sizeof(T);
   
    SMinimalWaveFileHeader waveHeader;
   
    //fill out the main chunk
    memcpy(waveHeader.m_szChunkID, "RIFF", 4);
    waveHeader.m_nChunkSize = dataSize + 36;
    memcpy(waveHeader.m_szFormat, "WAVE", 4);
   
    //fill out sub chunk 1 "fmt "
    memcpy(waveHeader.m_szSubChunk1ID, "fmt ", 4);
    waveHeader.m_nSubChunk1Size = 16;
    waveHeader.m_nAudioFormat = 1;
    waveHeader.m_nNumChannels = 1;
    waveHeader.m_nSampleRate = sound.m_sampleRate.Value();
    waveHeader.m_nByteRate = sound.m_sampleRate.Value() * 1 * bitsPerSample / 8;
    waveHeader.m_nBlockAlign = 1 * bitsPerSample / 8;
    waveHeader.m_nBitsPerSample = bitsPerSample;
   
    //fill out sub chunk 2 "data"
    memcpy(waveHeader.m_szSubChunk2ID, "data", 4);
    waveHeader.m_nSubChunk2Size = dataSize;
   
    //write the header
    fwrite(&waveHeader, sizeof(SMinimalWaveFileHeader), 1, file);
   
    //write the wave data itself, converting it from float to the type specified
    std::vector<T> outSamples;
    outSamples.resize(samples.size());
    for (size_t index = 0; index < samples.size(); ++index)
        outSamples[index] = AmplitudeToAudioSample<T>(samples[index]);
    fwrite(&outSamples[0], dataSize, 1, file);
   
    //close the file and return success
    fclose(file);
    return true;
}
 
//loads a wave file in.  Converts from source format into the specified format
// TOTAL HONESTY: some wave files seem to have problems being loaded through this function and I don't have
// time to investigate why.  It seems to work best with 16 bit mono wave files.
// If you need more robust file loading, check out libsndfile at http://www.mega-nerd.com/libsndfile/
bool ReadWaveFile(const char *fileName, std::vector<TAmplitude>& samples, int32 sampleRate)
{
    //open the file if we can
    FILE *File = fopen(fileName,"rb");
    if(!File)
    {
        return false;
    }
 
    //read the main chunk ID and make sure it's "RIFF"
    char buffer[5];
    buffer[4] = 0;
    if(fread(buffer,4,1,File) != 1 || strcmp(buffer,"RIFF"))
    {
        fclose(File);
        return false;
    }
 
    //read the main chunk size
    uint32 nChunkSize;
    if(fread(&nChunkSize,4,1,File) != 1)
    {
        fclose(File);
        return false;
    }
 
    //read the format and make sure it's "WAVE"
    if(fread(buffer,4,1,File) != 1 || strcmp(buffer,"WAVE"))
    {
        fclose(File);
        return false;
    }
 
    long chunkPosFmt = -1;
    long chunkPosData = -1;
 
    while(chunkPosFmt == -1 || chunkPosData == -1)
    {
        //read a sub chunk id and a chunk size if we can
        if(fread(buffer,4,1,File) != 1 || fread(&nChunkSize,4,1,File) != 1)
        {
            fclose(File);
            return false;
        }
 
        //if we hit a fmt
        if(!strcmp(buffer,"fmt "))
        {
            chunkPosFmt = ftell(File) - 8;
        }
        //else if we hit a data
        else if(!strcmp(buffer,"data"))
        {
            chunkPosData = ftell(File) - 8;
        }
 
        //skip to the next chunk
        fseek(File,nChunkSize,SEEK_CUR);
    }
 
    //we'll use this handy struct to load in 
    SMinimalWaveFileHeader waveData;
 
    //load the fmt part if we can
    fseek(File,chunkPosFmt,SEEK_SET);
    if(fread(&waveData.m_szSubChunk1ID,24,1,File) != 1)
    {
        fclose(File);
        return false;
    }
 
    //load the data part if we can
    fseek(File,chunkPosData,SEEK_SET);
    if(fread(&waveData.m_szSubChunk2ID,8,1,File) != 1)
    {
        fclose(File);
        return false;
    }
 
    //verify a couple things about the file data
    if(waveData.m_nAudioFormat != 1 ||       //only pcm data
       waveData.m_nNumChannels < 1 ||        //must have a channel
       waveData.m_nNumChannels > 2 ||        //must not have more than 2
       waveData.m_nBitsPerSample > 32 ||     //32 bits per sample max
       waveData.m_nBitsPerSample % 8 != 0 || //must be a multiple of 8 bites
       waveData.m_nBlockAlign > 8)           //blocks must be 8 bytes or lower
    {
        fclose(File);
        return false;
    }
 
    //figure out how many samples and blocks there are total in the source data
    int nBytesPerBlock = waveData.m_nBlockAlign;
    int nNumBlocks = waveData.m_nSubChunk2Size / nBytesPerBlock;
    int nNumSourceSamples = nNumBlocks * waveData.m_nNumChannels;
 
    //allocate space for the source samples
    samples.resize(nNumSourceSamples);
 
    //maximum size of a block is 8 bytes.  4 bytes per samples, 2 channels
    unsigned char pBlockData[8];
    memset(pBlockData,0,8);
 
    //read in the source samples at whatever sample rate / number of channels it might be in
    int nBytesPerSample = nBytesPerBlock / waveData.m_nNumChannels;
    for(int nIndex = 0; nIndex < nNumSourceSamples; nIndex += waveData.m_nNumChannels)
    {
        //read in a block
        if(fread(pBlockData,waveData.m_nBlockAlign,1,File) != 1)
        {
            fclose(File);
            return false;
        }
 
        //get the first sample
        samples[nIndex].Value() = PCMToFloat(pBlockData,nBytesPerSample);
 
        //get the second sample if there is one
        if(waveData.m_nNumChannels == 2)
        {
            samples[nIndex+1].Value() = PCMToFloat(&pBlockData[nBytesPerSample],nBytesPerSample);
        }
    }
 
    //re-sample the sample rate up or down as needed
    ResampleData(samples, waveData.m_nSampleRate, sampleRate);
 
    //handle switching from mono to stereo or vice versa
    ChangeNumChannels(samples, waveData.m_nNumChannels, 1);
 
    return true;
}
   
//=====================================================================================
// Oscilators
//=====================================================================================
   
void AdvancePhase(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    phase += TPhase(frequency.Value() / (float)sampleRate.Value());
    while (phase >= TPhase(1.0f))
        phase -= TPhase(1.0f);
    while (phase < TPhase(0.0f))
        phase += TPhase(1.0f);
}
   
TAmplitude AdvanceOscilator_Sine(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(sin(phase.Value()*c_twoPi));
}
   
TAmplitude AdvanceOscilator_Saw(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(phase.Value() * 2.0f - 1.0f);
}
   
TAmplitude AdvanceOscilator_Square(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(phase.Value() > 0.5f ? 1.0f : -1.0f);
}
   
TAmplitude AdvanceOscilator_Triangle(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    if (phase > TPhase(0.5f))
        return TAmplitude((((1.0f - phase.Value()) * 2.0f) * 2.0f) - 1.0f);
    else
        return TAmplitude(((phase.Value() * 2.0f) * 2.0f) - 1.0f);
}
   
TAmplitude AdvanceOscilator_Saw_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
   
    // sum the harmonics
    TAmplitude ret(0.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        TPhase harmonicPhase = phase * TPhase((float)harmonicIndex);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / (float)harmonicIndex);
    }
   
    //adjust the volume
    ret *= TAmplitude(2.0f / c_pi);
       
    return ret;
}
   
TAmplitude AdvanceOscilator_Square_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
   
    // sum the harmonics
    TAmplitude ret(0.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        float harmonicFactor = (float)harmonicIndex * 2.0f - 1.0f;
        TPhase harmonicPhase = phase * TPhase(harmonicFactor);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / harmonicFactor);
    }
   
    //adjust the volume
    ret *= TAmplitude(4.0f / c_pi);
   
    return ret;
}
   
TAmplitude AdvanceOscilator_Triangle_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
   
    // sum the harmonics
    TAmplitude ret(0.0f);
    TAmplitude signFlip(1.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        float harmonicFactor = (float)harmonicIndex * 2.0f - 1.0f;
        TPhase harmonicPhase = phase * TPhase(harmonicFactor);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / (harmonicFactor*harmonicFactor)) * signFlip;
        signFlip *= TAmplitude(-1.0f);
    }
   
    //adjust the volume
    ret *= TAmplitude(8.0f / (c_pi*c_pi));
   
    return ret;
}
 
//=====================================================================================
// Main
//=====================================================================================
int main(int argc, char **argv)
{
    //our desired sound parameters
    SSoundSettings sound;
    sound.m_sampleRate = TSamples(44100);
    sound.m_lengthMs = SecondsToMilliseconds(4.0f);

    // create a delay effect object with the specified parameters
    const TSamples c_delayTime = MilliSecondsToSamples(sound, 333.0f);
    const TAmplitude c_delayFeedback = DBToAmplitude(TDecibels(-12.0f));
    CDelay delay(c_delayTime, c_delayFeedback);
  
    // load the wave file if we can
    std::vector<TAmplitude> inputData;
    if (!ReadWaveFile("in.wav", inputData, sound.m_sampleRate.Value()))
    {
        printf("could not load wave file!");
        return 0;
    }
 
    // allocate space for the output file
    std::vector<TAmplitude> samples;
    samples.resize(inputData.size());

    //apply the delay effect to the file
    const TSamples c_envelopeSize = MilliSecondsToSamples(sound, 50.0f);
    for (TSamples index = TSamples(0), numSamples(samples.size()); index < numSamples; ++index)
    {
        // calculate envelope at front and end of sound.
        TAmplitude envelope(1.0f);
        if (index < c_envelopeSize)
            envelope = TAmplitude((float)index.Value() / (float)c_envelopeSize.Value());
        else if (index > (numSamples - c_envelopeSize))
            envelope = TAmplitude(1.0f) - TAmplitude((float)(index - (numSamples - c_envelopeSize)).Value() / (float)c_envelopeSize.Value());

        // put our input through the delay buffer
        TAmplitude outSample = delay.ProcessSample(inputData[index.Value()]);
 
        // mix the sample with the offset sample and apply the envelope for the front and back of the sound
        samples[index.Value()] = outSample * envelope;
    }
   
    // normalize the amplitude of the samples to make sure they are as loud as possible without clipping
    // give 3db of headroom
    NormalizeSamples(samples, DBToAmplitude(TDecibels(-3.0f)));
 
    // save as a wave file
    WriteWaveFile<int16_t>("out.wav", samples, sound);
 
    return 0;
}
[/code]

<h2>Links</h2>

<a href="http://en.wikipedia.org/wiki/Delay_%28audio_effect%29" target="_blank">Wikipedia: Delay Effect</a>

Next post will be about multitap reverb, which is similar to delay, but a little bit different.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2055</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 14:45:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-17 22:45:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synth-delay-effect-echo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend.wav
793904
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal.wav
693104
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend_250_3.wav
793844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal_250_3.wav
693044
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend_250_12.wav
793844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal_250_12.wav
693044
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend_333_6.wav
793844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal_333_6.wav
693044
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495716204;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2084;}i:1;a:1:{s:2:"id";i:2001;}i:2;a:1:{s:2:"id";i:4423;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DIY Synth: Multitap Reverb</title>
		<link>http://blog.demofox.org/2015/03/17/diy-synth-multitap-reverb/</link>
		<pubDate>Wed, 18 Mar 2015 03:01:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2084</guid>
		<description></description>
		<content:encoded><![CDATA[This is a part of the <a href="http://blog.demofox.org/diy-synthesizer/" target="_blank">DIY Synthesizer</a> series of posts where each post is roughly built upon the knowledge of the previous posts. If you are lost, check the earlier posts!

Reverb is similar to delay in that it adds echoes to a sound.  It's different, though, in that whereas delay adds one echo (even if that echo repeats itself, quieter each time), reverb adds several echos to the sound.  Basically, reverb is what makes things sound like they are played in a church, or a deep cavern, or a small bathroom.  Delay just makes things sound a bit echoey.

Multitap reverb is the most ghetto of reverb techniques.  It's kind of hacky, it takes a lot of manual tweaking, and in the end, usually doesn't sound very good.  It is less computationally expensive compared to other reverb techniques though, so if that's a concern of yours, or you don't want to be bothered with the more complex and sophisticated reverb techniques, multitap reverb may be a good solution for you!

Here are some audio samples for you to hear the effect in action:

<table>
<tr>
<td></td>
<td><b>Legend Quote</b></td>
<td><b>Cymbals</b></td>
</tr>
<tr>
<td><b>Raw</b></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/legend.wav" target="_blank">legend.wav</a></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/cymbal.wav" target="_blank">cymbal.wav</a></td>
</tr>
<tr>
<td><b>Multitap Reverb</b></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/legend_mtr.wav" target="_blank">legend_mtr.wav</a></td>
<td><a href="https://demofox2.files.wordpress.com/2015/03/cymbal_mtr.wav" target="_blank">cymbal_mtr.wav</a></td>
</tr>
</table>

<h2>Technique</h2>

The technique is pretty straightforward.  You have a sample buffer to hold the last N samples, and then when you process an incoming sample, you add in multiple samples from the delay buffer, each multiplied by a different volume (amplitude) and add that into the incoming sample to get the outgoing sample.  You then also put that outgoing sample into the reverb buffer at the current index in the circular buffer.

Here is some pseudocode about how it might be implemented:
[code language="cpp"]
// The size of the delay buffer is controlled by the maximum time parameter of all taps
// make sure the buffer is initialized with silence
reverbBuffer[reverbSamples] = 0;
 
// start the circular buffer index at 0
reverbIndex= 0;
 
// process each input sample
for (i = 0; i &lt; numSamples; ++i)
{
  // calculate the output sample, which is the input sample plus all the taps from the delay buffer
  // TODO: handle wrapping around zero when the tapTime is greater than the current reverbIndex
  outSample[i] = inSample[i];
  for (j = 0; j &lt; numTaps; ++j)
    outSample[i] += reverbBuffer[reverbIndex - taps[j].tapTime] * taps[j].feedbackMultiplier; 
 
  // also store this output sample in the reverb buffer
  reverbBuffer[reverbIndex] = outSample[i];
 
  // advance the circular buffer index
  reverbIndex++;
  if (reverbIndex&gt;= reverbSamples)
    reverbIndex= 0;
}
[/code]

In the sample code below, and in the reverb processed samples above, here are the times and amplitudes of the taps that were used.  The amplitude is given both as dB and amplitude so you can see whichever you are more comfortable with.

<table>
<tr>
<td>Time (ms)</td>
<td>dB</td>
<td>Amplitude</td>
</tr>
<tr>
<td>79</td>
<td>-25</td>
<td>0.0562</td>
</tr>
<tr>
<td>130</td>
<td>-23</td>
<td>0.0707</td>
</tr>
<tr>
<td>230</td>
<td>-15</td>
<td>0.1778</td>
</tr>
<tr>
<td>340</td>
<td>-23</td>
<td>0.0707</td>
</tr>
<tr>
<td>470</td>
<td>-17</td>
<td>0.1412</td>
</tr>
<tr>
<td>532</td>
<td>-21</td>
<td>0.0891</td>
</tr>
<tr>
<td>662</td>
<td>-13</td>
<td>0.2238</td>
</tr>
</table>

With some more effort, you could likely come up with some better tap values to make the reverb sound better.

Also, I was going for a cavernous feel, but you could come up with specific taps to make things feel smaller instead.

You have to be careful when setting up your taps so that the overall volume diminishes over time instead of grows.  If you put too much acoustic energy back into the reverb buffer, the reverbed sound will get louder and louder over time instead of things dying out giving you that nice diminishing echo sound.

<h2>Sample Code</h2>

Here's sample code that loads in.wav, processes it with the taps mentioned above, and writes it out as out.wav. As per usual, the wave loading code has some issues with certain wave formats.  If you need better sound file loading, check out libsndfile!

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS

#include &lt;array&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdint.h&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;

#define _USE_MATH_DEFINES
#include &lt;math.h&gt;

//=====================================================================================
// SNumeric - uses phantom types to enforce type safety
//=====================================================================================
template &lt;typename T, typename PHANTOM_TYPE&gt;
struct SNumeric
{
public:
    explicit SNumeric(const T &amp;value) : m_value(value) { }
    SNumeric() : m_value() { }
    inline T&amp; Value() { return m_value; }
    inline const T&amp; Value() const { return m_value; }

    typedef SNumeric&lt;T, PHANTOM_TYPE&gt; TType;
    typedef T TInnerType;

    // Math Operations
    TType operator+ (const TType &amp;b) const
    {
        return TType(this-&gt;Value() + b.Value());
    }

    TType operator- (const TType &amp;b) const
    {
        return TType(this-&gt;Value() - b.Value());
    }

    TType operator* (const TType &amp;b) const
    {
        return TType(this-&gt;Value() * b.Value());
    }

    TType operator/ (const TType &amp;b) const
    {
        return TType(this-&gt;Value() / b.Value());
    }

    TType&amp; operator+= (const TType &amp;b)
    {
        Value() += b.Value();
        return *this;
    }

    TType&amp; operator-= (const TType &amp;b)
    {
        Value() -= b.Value();
        return *this;
    }

    TType&amp; operator*= (const TType &amp;b)
    {
        Value() *= b.Value();
        return *this;
    }

    TType&amp; operator/= (const TType &amp;b)
    {
        Value() /= b.Value();
        return *this;
    }

    TType&amp; operator++ ()
    {
        Value()++;
        return *this;
    }

    TType&amp; operator-- ()
    {
        Value()--;
        return *this;
    }

    // Extended Math Operations
    template &lt;typename T&gt;
    T Divide(const TType &amp;b)
    {
        return ((T)this-&gt;Value()) / ((T)b.Value());
    }

    // Logic Operations
    bool operator&lt; (const TType &amp;b) const {
        return this-&gt;Value() &lt; b.Value();
    }
    bool operator&lt;= (const TType &amp;b) const {
        return this-&gt;Value() &lt;= b.Value();
    }
    bool operator&gt; (const TType &amp;b) const {
        return this-&gt;Value() &gt; b.Value();
    }
    bool operator&gt;= (const TType &amp;b) const {
        return this-&gt;Value() &gt;= b.Value();
    }
    bool operator== (const TType &amp;b) const {
        return this-&gt;Value() == b.Value();
    }
    bool operator!= (const TType &amp;b) const {
        return this-&gt;Value() != b.Value();
    }

private:
    T m_value;
};

//=====================================================================================
// Typedefs
//=====================================================================================

typedef uint8_t uint8;
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef int16_t int16;
typedef int32_t int32;

// type safe types!
typedef SNumeric&lt;float, struct S__Frequency&gt;      TFrequency;
typedef SNumeric&lt;uint32, struct S__TimeMs&gt;        TTimeMs;
typedef SNumeric&lt;uint32, struct S__Samples&gt;       TSamples;
typedef SNumeric&lt;float, struct S__FractSamples&gt;   TFractionalSamples;
typedef SNumeric&lt;float, struct S__Decibels&gt;       TDecibels;
typedef SNumeric&lt;float, struct S__Amplitude&gt;      TAmplitude;
typedef SNumeric&lt;float, struct S__Phase&gt;          TPhase;

//=====================================================================================
// Constants
//=====================================================================================

static const float c_pi = (float)M_PI;
static const float c_twoPi = c_pi * 2.0f;

//=====================================================================================
// Structs
//=====================================================================================

struct SSoundSettings
{
    TSamples        m_sampleRate;
    TTimeMs         m_lengthMs;
    TSamples        m_currentSample;
};

//=====================================================================================
// CMultiTapReverb -&gt; the multi tap reverb object
//=====================================================================================

struct SReverbTap
{
    TSamples    m_timeOffset;
    TAmplitude  m_feedback;
};

class CMultitapReverb
{
public:
    CMultitapReverb(const std::vector&lt;SReverbTap&gt;&amp; taps)
        : m_sampleIndex(0)
    {
        // copy the taps table
        m_taps = taps;

        // find out the largest tap time offset so we know how big to make the buffer
        TSamples largestTimeOffset(0);
        std::for_each(m_taps.begin(), m_taps.end(),
            [&amp;largestTimeOffset](const SReverbTap&amp; tap)
            {
                if (tap.m_timeOffset &gt; largestTimeOffset)
                    largestTimeOffset = tap.m_timeOffset;
            }
        );

        // if it's 0, bail out, we are done
        if (largestTimeOffset.Value() == 0)
            return;

        // else resize our internal buffer and fill it with silence
        m_samples.resize(largestTimeOffset.Value()+1);
        std::fill(m_samples.begin(), m_samples.end(), TAmplitude(0.0f));
    }

    TAmplitude ProcessSample(TAmplitude sample)
    {
        // if no taps, or none with any time value, bail out!
        if (m_samples.size() == 0)
            return sample;

        // take our taps from the delay buffer
        TAmplitude outSample = sample;
        std::for_each(m_taps.begin(), m_taps.end(),
            [&amp;outSample, this](const SReverbTap&amp; tap)
            {
                size_t tapSampleIndex;
                if (tap.m_timeOffset.Value() &gt; m_sampleIndex)
                    tapSampleIndex = m_samples.size() - 1 - (tap.m_timeOffset.Value() - m_sampleIndex);
                else
                    tapSampleIndex = m_sampleIndex - tap.m_timeOffset.Value();

                outSample += m_samples[tapSampleIndex] * tap.m_feedback;
            }
        );

        // put the output sample into the buffer
        m_samples[m_sampleIndex] = outSample;

        // advance the circular buffer index
        m_sampleIndex++;
        if (m_sampleIndex &gt;= m_samples.size())
            m_sampleIndex = 0;

        // return the reverbed sample
        return outSample;
    }

private:
    std::vector&lt;SReverbTap&gt; m_taps;
    std::vector&lt;TAmplitude&gt; m_samples;
    size_t                  m_sampleIndex;
};

//=====================================================================================
// Conversion Functions
//=====================================================================================
inline TDecibels AmplitudeToDB(TAmplitude volume)
{
    return TDecibels(log10(volume.Value()));
}

inline TAmplitude DBToAmplitude(TDecibels dB)
{
    return TAmplitude(pow(10.0f, dB.Value() / 20.0f));
}

TSamples SecondsToSamples(const SSoundSettings &amp;s, float seconds)
{
    return TSamples((int)(seconds * (float)s.m_sampleRate.Value()));
}

TSamples MilliSecondsToSamples(const SSoundSettings &amp;s, float milliseconds)
{
    return SecondsToSamples(s, milliseconds / 1000.0f);
}

TTimeMs SecondsToMilliseconds(float seconds)
{
    return TTimeMs((uint32)(seconds * 1000.0f));
}

TFrequency Frequency(float octave, float note)
{
    /* frequency = 440×(2^(n/12))
    Notes:
    0  = A
    1  = A#
    2  = B
    3  = C
    4  = C#
    5  = D
    6  = D#
    7  = E
    8  = F
    9  = F#
    10 = G
    11 = G# */
    return TFrequency((float)(440 * pow(2.0, ((double)((octave - 4) * 12 + note)) / 12.0)));
}

template &lt;typename T&gt;
T AmplitudeToAudioSample(const TAmplitude&amp; in)
{
    const T c_min = std::numeric_limits&lt;T&gt;::min();
    const T c_max = std::numeric_limits&lt;T&gt;::max();
    const float c_minFloat = (float)c_min;
    const float c_maxFloat = (float)c_max;

    float ret = in.Value() * c_maxFloat;

    if (ret &lt; c_minFloat)
        return c_min;

    if (ret &gt; c_maxFloat)
        return c_max;

    return (T)ret;
}

TAmplitude GetLerpedAudioSample(const std::vector&lt;TAmplitude&gt;&amp; samples, TFractionalSamples&amp; index)
{
    // get the index of each sample and the fractional blend amount
    uint32 a = (uint32)floor(index.Value());
    uint32 b = a + 1;
    float fract = index.Value() - floor(index.Value());

    // get our two amplitudes
    float ampA = 0.0f;
    if (a &gt;= 0 &amp;&amp; a &lt; samples.size())
        ampA = samples[a].Value();

    float ampB = 0.0f;
    if (b &gt;= 0 &amp;&amp; b &lt; samples.size())
        ampB = samples[b].Value();

    // return the lerped result
    return TAmplitude(fract * ampB + (1.0f - fract) * ampA);
}

void NormalizeSamples(std::vector&lt;TAmplitude&gt;&amp; samples, TAmplitude maxAmplitude)
{
    // nothing to do if no samples
    if (samples.size() == 0)
        return;

    // 1) find the largest absolute value in the samples.
    TAmplitude largestAbsVal = TAmplitude(abs(samples.front().Value()));
    std::for_each(samples.begin() + 1, samples.end(), [&amp;largestAbsVal](const TAmplitude &amp;a)
    {
        TAmplitude absVal = TAmplitude(abs(a.Value()));
        if (absVal &gt; largestAbsVal)
            largestAbsVal = absVal;
    }
    );

    // 2) adjust largestAbsVal so that when we divide all samples, none will be bigger than maxAmplitude
    // if the value we are going to divide by is &lt;= 0, bail out
    largestAbsVal /= maxAmplitude;
    if (largestAbsVal &lt;= TAmplitude(0.0f))
        return;

    // 3) divide all numbers by the largest absolute value seen so all samples are [-maxAmplitude,+maxAmplitude]
    std::for_each(samples.begin(), samples.end(), [&amp;largestAbsVal](TAmplitude &amp;a)
    {
        a /= largestAbsVal;

        if (a &gt;= TAmplitude(1.0f))
        {
            int ijkl = 0;
        }
    }
    );
}

void ResampleData(std::vector&lt;TAmplitude&gt;&amp; samples, int srcSampleRate, int destSampleRate)
{
    //if the requested sample rate is the sample rate it already is, bail out and do nothing
    if (srcSampleRate == destSampleRate)
        return;

    //calculate the ratio of the old sample rate to the new
    float fResampleRatio = (float)destSampleRate / (float)srcSampleRate;

    //calculate how many samples the new data will have and allocate the new sample data
    int nNewDataNumSamples = (int)((float)samples.size() * fResampleRatio);

    std::vector&lt;TAmplitude&gt; newSamples;
    newSamples.resize(nNewDataNumSamples);

    //get each lerped output sample.  There are higher quality ways to resample
    for (int nIndex = 0; nIndex &lt; nNewDataNumSamples; ++nIndex)
        newSamples[nIndex] = GetLerpedAudioSample(samples, TFractionalSamples((float)nIndex / fResampleRatio));

    //free the old data and set the new data
    std::swap(samples, newSamples);
}

void ChangeNumChannels(std::vector&lt;TAmplitude&gt;&amp; samples, int nSrcChannels, int nDestChannels)
{
    //if the number of channels requested is the number of channels already there, or either number of channels is not mono or stereo, return
    if (nSrcChannels == nDestChannels ||
        nSrcChannels &lt; 1 || nSrcChannels &gt; 2 ||
        nDestChannels &lt; 1 || nDestChannels &gt; 2)
    {
        return;
    }

    //if converting from mono to stereo, duplicate the mono channel to make stereo
    if (nDestChannels == 2)
    {
        std::vector&lt;TAmplitude&gt; newSamples;
        newSamples.resize(samples.size() * 2);
        for (size_t index = 0; index &lt; samples.size(); ++index)
        {
            newSamples[index * 2] = samples[index];
            newSamples[index * 2 + 1] = samples[index];
        }

        std::swap(samples, newSamples);
    }
    //else converting from stereo to mono, mix the stereo channels together to make mono
    else
    {
        std::vector&lt;TAmplitude&gt; newSamples;
        newSamples.resize(samples.size() / 2);
        for (size_t index = 0; index &lt; samples.size() / 2; ++index)
            newSamples[index] = samples[index * 2] + samples[index * 2 + 1];

        std::swap(samples, newSamples);
    }
}

float PCMToFloat(unsigned char *pPCMData, int nNumBytes)
{
    switch (nNumBytes)
    {
    case 1:
    {
        uint8 data = pPCMData[0];
        return (float)data / 255.0f;
    }
    case 2:
    {
        int16 data = pPCMData[1] &lt;&lt; 8 | pPCMData[0];
        return ((float)data) / ((float)0x00007fff);
    }
    case 3:
    {
        int32 data = pPCMData[2] &lt;&lt; 16 | pPCMData[1] &lt;&lt; 8 | pPCMData[0];
        return ((float)data) / ((float)0x007fffff);
    }
    case 4:
    {
        int32 data = pPCMData[3] &lt;&lt; 24 | pPCMData[2] &lt;&lt; 16 | pPCMData[1] &lt;&lt; 8 | pPCMData[0];
        return ((float)data) / ((float)0x7fffffff);
    }
    default:
    {
        return 0.0f;
    }
    }
}

//=====================================================================================
// Wave File Writing Code
//=====================================================================================
struct SMinimalWaveFileHeader
{
    //the main chunk
    unsigned char m_szChunkID[4];      //0
    uint32        m_nChunkSize;        //4
    unsigned char m_szFormat[4];       //8

    //sub chunk 1 &quot;fmt &quot;
    unsigned char m_szSubChunk1ID[4];  //12
    uint32        m_nSubChunk1Size;    //16
    uint16        m_nAudioFormat;      //18
    uint16        m_nNumChannels;      //20
    uint32        m_nSampleRate;       //24
    uint32        m_nByteRate;         //28
    uint16        m_nBlockAlign;       //30
    uint16        m_nBitsPerSample;    //32

    //sub chunk 2 &quot;data&quot;
    unsigned char m_szSubChunk2ID[4];  //36
    uint32        m_nSubChunk2Size;    //40

    //then comes the data!
};

//this writes a wave file
template &lt;typename T&gt;
bool WriteWaveFile(const char *fileName, const std::vector&lt;TAmplitude&gt; &amp;samples, const SSoundSettings &amp;sound)
{
    //open the file if we can
    FILE *file = fopen(fileName, &quot;w+b&quot;);
    if (!file)
        return false;

    //calculate bits per sample and the data size
    const int32 bitsPerSample = sizeof(T) * 8;
    const int dataSize = samples.size() * sizeof(T);

    SMinimalWaveFileHeader waveHeader;

    //fill out the main chunk
    memcpy(waveHeader.m_szChunkID, &quot;RIFF&quot;, 4);
    waveHeader.m_nChunkSize = dataSize + 36;
    memcpy(waveHeader.m_szFormat, &quot;WAVE&quot;, 4);

    //fill out sub chunk 1 &quot;fmt &quot;
    memcpy(waveHeader.m_szSubChunk1ID, &quot;fmt &quot;, 4);
    waveHeader.m_nSubChunk1Size = 16;
    waveHeader.m_nAudioFormat = 1;
    waveHeader.m_nNumChannels = 1;
    waveHeader.m_nSampleRate = sound.m_sampleRate.Value();
    waveHeader.m_nByteRate = sound.m_sampleRate.Value() * 1 * bitsPerSample / 8;
    waveHeader.m_nBlockAlign = 1 * bitsPerSample / 8;
    waveHeader.m_nBitsPerSample = bitsPerSample;

    //fill out sub chunk 2 &quot;data&quot;
    memcpy(waveHeader.m_szSubChunk2ID, &quot;data&quot;, 4);
    waveHeader.m_nSubChunk2Size = dataSize;

    //write the header
    fwrite(&amp;waveHeader, sizeof(SMinimalWaveFileHeader), 1, file);

    //write the wave data itself, converting it from float to the type specified
    std::vector&lt;T&gt; outSamples;
    outSamples.resize(samples.size());
    for (size_t index = 0; index &lt; samples.size(); ++index)
        outSamples[index] = AmplitudeToAudioSample&lt;T&gt;(samples[index]);
    fwrite(&amp;outSamples[0], dataSize, 1, file);

    //close the file and return success
    fclose(file);
    return true;
}

//loads a wave file in.  Converts from source format into the specified format
// TOTAL HONESTY: some wave files seem to have problems being loaded through this function and I don't have
// time to investigate why.  It seems to work best with 16 bit mono wave files.
// If you need more robust file loading, check out libsndfile at http://www.mega-nerd.com/libsndfile/
bool ReadWaveFile(const char *fileName, std::vector&lt;TAmplitude&gt;&amp; samples, int32 sampleRate)
{
    //open the file if we can
    FILE *File = fopen(fileName, &quot;rb&quot;);
    if (!File)
    {
        return false;
    }

    //read the main chunk ID and make sure it's &quot;RIFF&quot;
    char buffer[5];
    buffer[4] = 0;
    if (fread(buffer, 4, 1, File) != 1 || strcmp(buffer, &quot;RIFF&quot;))
    {
        fclose(File);
        return false;
    }

    //read the main chunk size
    uint32 nChunkSize;
    if (fread(&amp;nChunkSize, 4, 1, File) != 1)
    {
        fclose(File);
        return false;
    }

    //read the format and make sure it's &quot;WAVE&quot;
    if (fread(buffer, 4, 1, File) != 1 || strcmp(buffer, &quot;WAVE&quot;))
    {
        fclose(File);
        return false;
    }

    long chunkPosFmt = -1;
    long chunkPosData = -1;

    while (chunkPosFmt == -1 || chunkPosData == -1)
    {
        //read a sub chunk id and a chunk size if we can
        if (fread(buffer, 4, 1, File) != 1 || fread(&amp;nChunkSize, 4, 1, File) != 1)
        {
            fclose(File);
            return false;
        }

        //if we hit a fmt
        if (!strcmp(buffer, &quot;fmt &quot;))
        {
            chunkPosFmt = ftell(File) - 8;
        }
        //else if we hit a data
        else if (!strcmp(buffer, &quot;data&quot;))
        {
            chunkPosData = ftell(File) - 8;
        }

        //skip to the next chunk
        fseek(File, nChunkSize, SEEK_CUR);
    }

    //we'll use this handy struct to load in 
    SMinimalWaveFileHeader waveData;

    //load the fmt part if we can
    fseek(File, chunkPosFmt, SEEK_SET);
    if (fread(&amp;waveData.m_szSubChunk1ID, 24, 1, File) != 1)
    {
        fclose(File);
        return false;
    }

    //load the data part if we can
    fseek(File, chunkPosData, SEEK_SET);
    if (fread(&amp;waveData.m_szSubChunk2ID, 8, 1, File) != 1)
    {
        fclose(File);
        return false;
    }

    //verify a couple things about the file data
    if (waveData.m_nAudioFormat != 1 ||       //only pcm data
        waveData.m_nNumChannels &lt; 1 ||        //must have a channel
        waveData.m_nNumChannels &gt; 2 ||        //must not have more than 2
        waveData.m_nBitsPerSample &gt; 32 ||     //32 bits per sample max
        waveData.m_nBitsPerSample % 8 != 0 || //must be a multiple of 8 bites
        waveData.m_nBlockAlign &gt; 8)           //blocks must be 8 bytes or lower
    {
        fclose(File);
        return false;
    }

    //figure out how many samples and blocks there are total in the source data
    int nBytesPerBlock = waveData.m_nBlockAlign;
    int nNumBlocks = waveData.m_nSubChunk2Size / nBytesPerBlock;
    int nNumSourceSamples = nNumBlocks * waveData.m_nNumChannels;

    //allocate space for the source samples
    samples.resize(nNumSourceSamples);

    //maximum size of a block is 8 bytes.  4 bytes per samples, 2 channels
    unsigned char pBlockData[8];
    memset(pBlockData, 0, 8);

    //read in the source samples at whatever sample rate / number of channels it might be in
    int nBytesPerSample = nBytesPerBlock / waveData.m_nNumChannels;
    for (int nIndex = 0; nIndex &lt; nNumSourceSamples; nIndex += waveData.m_nNumChannels)
    {
        //read in a block
        if (fread(pBlockData, waveData.m_nBlockAlign, 1, File) != 1)
        {
            fclose(File);
            return false;
        }

        //get the first sample
        samples[nIndex].Value() = PCMToFloat(pBlockData, nBytesPerSample);

        //get the second sample if there is one
        if (waveData.m_nNumChannels == 2)
        {
            samples[nIndex + 1].Value() = PCMToFloat(&amp;pBlockData[nBytesPerSample], nBytesPerSample);
        }
    }

    //re-sample the sample rate up or down as needed
    ResampleData(samples, waveData.m_nSampleRate, sampleRate);

    //handle switching from mono to stereo or vice versa
    ChangeNumChannels(samples, waveData.m_nNumChannels, 1);

    return true;
}

//=====================================================================================
// Oscilators
//=====================================================================================

void AdvancePhase(TPhase &amp;phase, TFrequency frequency, TSamples sampleRate)
{
    phase += TPhase(frequency.Value() / (float)sampleRate.Value());
    while (phase &gt;= TPhase(1.0f))
        phase -= TPhase(1.0f);
    while (phase &lt; TPhase(0.0f))
        phase += TPhase(1.0f);
}

TAmplitude AdvanceOscilator_Sine(TPhase &amp;phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(sin(phase.Value()*c_twoPi));
}

TAmplitude AdvanceOscilator_Saw(TPhase &amp;phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(phase.Value() * 2.0f - 1.0f);
}

TAmplitude AdvanceOscilator_Square(TPhase &amp;phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(phase.Value() &gt; 0.5f ? 1.0f : -1.0f);
}

TAmplitude AdvanceOscilator_Triangle(TPhase &amp;phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    if (phase &gt; TPhase(0.5f))
        return TAmplitude((((1.0f - phase.Value()) * 2.0f) * 2.0f) - 1.0f);
    else
        return TAmplitude(((phase.Value() * 2.0f) * 2.0f) - 1.0f);
}

TAmplitude AdvanceOscilator_Saw_BandLimited(TPhase &amp;phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);

    // sum the harmonics
    TAmplitude ret(0.0f);
    for (int harmonicIndex = 1; harmonicIndex &lt;= 4; ++harmonicIndex)
    {
        TPhase harmonicPhase = phase * TPhase((float)harmonicIndex);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / (float)harmonicIndex);
    }

    //adjust the volume
    ret *= TAmplitude(2.0f / c_pi);

    return ret;
}

TAmplitude AdvanceOscilator_Square_BandLimited(TPhase &amp;phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);

    // sum the harmonics
    TAmplitude ret(0.0f);
    for (int harmonicIndex = 1; harmonicIndex &lt;= 4; ++harmonicIndex)
    {
        float harmonicFactor = (float)harmonicIndex * 2.0f - 1.0f;
        TPhase harmonicPhase = phase * TPhase(harmonicFactor);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / harmonicFactor);
    }

    //adjust the volume
    ret *= TAmplitude(4.0f / c_pi);

    return ret;
}

TAmplitude AdvanceOscilator_Triangle_BandLimited(TPhase &amp;phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);

    // sum the harmonics
    TAmplitude ret(0.0f);
    TAmplitude signFlip(1.0f);
    for (int harmonicIndex = 1; harmonicIndex &lt;= 4; ++harmonicIndex)
    {
        float harmonicFactor = (float)harmonicIndex * 2.0f - 1.0f;
        TPhase harmonicPhase = phase * TPhase(harmonicFactor);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / (harmonicFactor*harmonicFactor)) * signFlip;
        signFlip *= TAmplitude(-1.0f);
    }

    //adjust the volume
    ret *= TAmplitude(8.0f / (c_pi*c_pi));

    return ret;
}

//=====================================================================================
// Main
//=====================================================================================
int main(int argc, char **argv)
{
    //our desired sound parameters
    SSoundSettings sound;
    sound.m_sampleRate = TSamples(44100);
    sound.m_lengthMs = SecondsToMilliseconds(4.0f);

    // create a reverb object with a list of taps
    CMultitapReverb reverb(
        {
            { MilliSecondsToSamples(sound,  79.0f), DBToAmplitude(TDecibels(-25.0f)) },
            { MilliSecondsToSamples(sound, 130.0f), DBToAmplitude(TDecibels(-23.0f)) },
            { MilliSecondsToSamples(sound, 230.0f), DBToAmplitude(TDecibels(-15.0f)) },
            { MilliSecondsToSamples(sound, 340.0f), DBToAmplitude(TDecibels(-23.0f)) },
            { MilliSecondsToSamples(sound, 470.0f), DBToAmplitude(TDecibels(-17.0f)) },
            { MilliSecondsToSamples(sound, 532.0f), DBToAmplitude(TDecibels(-21.0f)) },
            { MilliSecondsToSamples(sound, 662.0f), DBToAmplitude(TDecibels(-13.0f)) },
        }
    );

    // load the wave file if we can
    std::vector&lt;TAmplitude&gt; inputData;
    if (!ReadWaveFile(&quot;in.wav&quot;, inputData, sound.m_sampleRate.Value()))
    {
        printf(&quot;could not load wave file!&quot;);
        return 0;
    }

    // allocate space for the output file
    std::vector&lt;TAmplitude&gt; samples;
    samples.resize(inputData.size());

    //apply the delay effect to the file
    const TSamples c_envelopeSize = MilliSecondsToSamples(sound, 50.0f);
    for (TSamples index = TSamples(0), numSamples(samples.size()); index &lt; numSamples; ++index)
    {
        // calculate envelope at front and end of sound.
        TAmplitude envelope(1.0f);
        if (index &lt; c_envelopeSize)
            envelope = TAmplitude((float)index.Value() / (float)c_envelopeSize.Value());
        else if (index &gt;(numSamples - c_envelopeSize))
            envelope = TAmplitude(1.0f) - TAmplitude((float)(index - (numSamples - c_envelopeSize)).Value() / (float)c_envelopeSize.Value());

        // put our input through the reverb process
        TAmplitude outSample = reverb.ProcessSample(inputData[index.Value()]);

        // mix the sample with the offset sample and apply the envelope for the front and back of the sound
        samples[index.Value()] = outSample * envelope;
    }

    // normalize the amplitude of the samples to make sure they are as loud as possible without clipping
    // give 3db of headroom
    NormalizeSamples(samples, DBToAmplitude(TDecibels(-3.0f)));

    // save as a wave file
    WriteWaveFile&lt;int16_t&gt;(&quot;out.wav&quot;, samples, sound);

    return 0;
}
[/code]


<h2>Links</h2>

Even though this is a pretty ghetto way to do reverb, it can be passable, and is not as expensive as some other reverb methods computationally.

There will soon be a post on how to do convoultion reverb, which is how the pros do reverb.  It also makes it a lot easier to get the exact reverb type sound you want, because it lets you use a "reference recording" of the particular reverb you want.  It's cool stuff!

<a href="http://www.soundonsound.com/sos/may12/articles/designer-delay.htm" target="_blank">Sound On Sound: Creating & Using Custom Delay Effects</a>
<a href="http://en.wikipedia.org/wiki/Reverberation" target="_blank">Wikipedia: Reverberation</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2084</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 19:01:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-18 03:01:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synth-multitap-reverb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend.wav
793904
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal.wav
693104
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/legend_mtr.wav
793844
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/cymbal_mtr.wav
693044
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495522238;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2110;}i:1;a:1:{s:2:"id";i:2055;}i:2;a:1:{s:2:"id";i:31;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DIY Synth: Convolution Reverb &amp; 1D Discrete Convolution of Audio Samples</title>
		<link>http://blog.demofox.org/2015/03/23/diy-synth-convolution-reverb-1d-discrete-convolution-of-audio-samples/</link>
		<pubDate>Mon, 23 Mar 2015 19:50:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2110</guid>
		<description></description>
		<content:encoded><![CDATA[This is a part of the <a href="http://blog.demofox.org/diy-synthesizer/" target="_blank">DIY Synthesizer</a> series of posts where each post is roughly built upon the knowledge of the previous posts. If you are lost, check the earlier posts!

I just learned about this technique a couple weeks ago and am SUPER stoked to be able to share this info.  Honestly, it's kind of bad ass and a little magical.

If there is a physical location that has the reverb you are looking for (a church, a cave, your bathroom, the subway, whatever), you can go there and record the sound of some short, loud sound (a clap, a starter pistol, whatever).  Now that you have this sound file, you can use a mathematical technique called "Discrete Convolution" (not as difficult as it sounds) to apply that reverb to other sounds.

Not only that, you can use convolution to apply various properties of one sound to another sound.  Like you could convolve a saw wave and a recording of a voice and make it sound robotic.

This is pretty cool right?

<h2>Convolution</h2>

There are two types of convolution out there... continuous convolution and discrete convolution.

Continuous convolution is a method where you can take two formulas and perform some operations (algebra, calculus, etc) to get a third formula.

In the cases that us programmers usually work with, however, you usually only have data, and not a mathematical formula describing that data.

When you have specific data points instead of an equation, you can use something called discrete convolution instead.

Discrete convolution is a method where you take two streams of data (IE two arrays of data!) and perform some operations (only looping, addition and multiplication!) to get a third stream of data.

Interestingly, this third stream of data will be the size of the first stream of data, plus the size of the second stream of data, minus one.

This link explains discrete convolution much better than I could, and even has an interactive demo, so check it out: <a href="http://www-rohan.sdsu.edu/~jiracek/DAGSAW/4.3.html" target="_blank">Discrete Convolution</a>

Here is some pseudo code that shows how discrete convolution works.

[code language="cpp"]
// We are calculating bufferA * bufferB (discrete convolution)
// initialize out buffer to empty, and make sure it's the right size
outBuffer[sizeof(bufferA)+sizeof(bufferB)-1] = 0

// reverse one of the buffers in preperation of the convolution
reverse(bufferB);

// Convolve!
for (int outBufferIndex = 0; outBufferIndex < sizeof(outBuffer); ++outBufferIndex)
{
  bufferAIndex = 0;
  bufferBIndex = 0;
  if (outBufferIndex < sizeof(bufferB))
    bufferBIndex = sizeof(bufferB) - outBufferIndex - 1;
  else
    bufferAIndex = outBufferIndex - sizeof(bufferB);

  for (; bufferAIndex < sizeof(bufferA) && bufferBIndex < sizeof(bufferB); ++bufferAIndex, ++bufferBIndex)
  {
    outBuffer[outBufferIndex] += bufferA[bufferAIndex] * bufferB[bufferBIndex];
  }
}
[/code]

That's all there is to it!

<h2>Convolution Reverb</h2>

Like I mentioned above, to do convolution reverb you just convolve the audio file you want to add reverb to with the recorded sound from the place that has the reverb you want.  That second sound is called the Impulse Response, or IR for short.

Besides letting you choose a reverb model (like "cavernous" or "small hallway" or "bright tiled room"), many reverbs will have a "wetness" parameter that controls how much reverb you hear versus how much of the origional noise you hear.  A wetness of 1.0 means all you hear is the reverb (the convolution), while a wetness of 0.0 means all you hear is the origional sound (the dry sound).  It's just a percentage and literally is just used to lerp between the two signals. 

Here is an example of how changes in wetness can sound, and also give you a first glimpse of just how good this technique works!

Dry Sound: <a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a>
Impulse Response: <a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a>

Convolved with 100% wetness: <a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SBite.wav" target="_blank">c_RL_SBite.wav</a>
Convolved with 66% wetness: <a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SBite_66.wav" target="_blank">c_RL_SBite_66.wav</a>
Convolved with 33% wetness: <a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SBite_33.wav" target="_blank">c_RL_SBite_33.wav</a>

<h2>Sample Sound Files</h2>

Let's convolve some sounds together and see what results we get!

Here are 11 sounds convoled against each other (and themselves) at 100% wetness so all you hear is the convolution.  Convolution is commutative (A*B == B*A) so that cuts down on the number of combinations (66 instead of 121!)

There are 3 impulse responses, 4 short basic wave forms, 2 voice samples a cymbal drum pattern and a jaw harp twang.

Some of the results are pretty interesting, for instance check out SoundBite vs SoundCymbal.  The beat of the cymbal pattern remains, but the actual symbal sound itself is replaced by the words!

<table>
<tr>
<td></td>
<td colspan><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_RL.wav" target="_blank">c_RL_RL.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_RM.wav" target="_blank">c_RL_RM.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_RS.wav" target="_blank">c_RL_RS.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SBite.wav" target="_blank">c_RL_SBite.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SCymbal.wav" target="_blank">c_RL_SCymbal.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SJawharp.wav" target="_blank">c_RL_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SLegend.wav" target="_blank">c_RL_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SSaw.wav" target="_blank">c_RL_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SSine.wav" target="_blank">c_RL_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SSquare.wav" target="_blank">c_RL_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_STriangle.wav" target="_blank">c_RL_STriangle.wav</a></td></tr>

<tr>
<td></td>
<td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_RM.wav" target="_blank">c_RL_RM.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_RM.wav" target="_blank">c_RM_RM.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_RS.wav" target="_blank">c_RM_RS.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SBite.wav" target="_blank">c_RM_SBite.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SCymbal.wav" target="_blank">c_RM_SCymbal.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SJawharp.wav" target="_blank">c_RM_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SLegend.wav" target="_blank">c_RM_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SSaw.wav" target="_blank">c_RM_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SSine.wav" target="_blank">c_RM_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SSquare.wav" target="_blank">c_RM_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_STriangle.wav" target="_blank">c_RM_STriangle.wav</a></td></tr>

<tr>
<td></td>
<td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_RS.wav" target="_blank">c_RL_RS.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_RS.wav" target="_blank">c_RM_RS.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_RS.wav" target="_blank">c_RS_RS.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SBite.wav" target="_blank">c_RS_SBite.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SCymbal.wav" target="_blank">c_RS_SCymbal.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SJawharp.wav" target="_blank">c_RS_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SLegend.wav" target="_blank">c_RS_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SSaw.wav" target="_blank">c_RS_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SSine.wav" target="_blank">c_RS_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SSquare.wav" target="_blank">c_RS_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_STriangle.wav" target="_blank">c_RS_STriangle.wav</a></td></tr>

<tr>
<td></td>
<td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SBite.wav" target="_blank">c_RL_SBite.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SBite.wav" target="_blank">c_RM_SBite.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SBite.wav" target="_blank">c_RS_SBite.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SBite.wav" target="_blank">c_SBite_SBite.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SCymbal.wav" target="_blank">c_SBite_SCymbal.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SJawharp.wav" target="_blank">c_SBite_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SLegend.wav" target="_blank">c_SBite_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SSaw.wav" target="_blank">c_SBite_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SSine.wav" target="_blank">c_SBite_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SSquare.wav" target="_blank">c_SBite_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_STriangle.wav" target="_blank">c_SBite_STriangle.wav</a></td></tr>

<tr>
<td></td>
<td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SCymbal.wav" target="_blank">c_RL_SCymbal.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SCymbal.wav" target="_blank">c_RM_SCymbal.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SCymbal.wav" target="_blank">c_RS_SCymbal.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SCymbal.wav" target="_blank">c_SBite_SCymbal.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SCymbal.wav" target="_blank">c_SCymbal_SCymbal.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SJawharp.wav" target="_blank">c_SCymbal_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SLegend.wav" target="_blank">c_SCymbal_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSaw.wav" target="_blank">c_SCymbal_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSine.wav" target="_blank">c_SCymbal_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSquare.wav" target="_blank">c_SCymbal_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_STriangle.wav" target="_blank">c_SCymbal_STriangle.wav</a></td></tr>

<tr>
<td></td>
<td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SJawharp.wav" target="_blank">c_RL_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SJawharp.wav" target="_blank">c_RM_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SJawharp.wav" target="_blank">c_RS_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SJawharp.wav" target="_blank">c_SBite_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SJawharp.wav" target="_blank">c_SCymbal_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SJawharp.wav" target="_blank">c_SJawharp_SJawharp.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SLegend.wav" target="_blank">c_SJawharp_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSaw.wav" target="_blank">c_SJawharp_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSine.wav" target="_blank">c_SJawharp_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSquare.wav" target="_blank">c_SJawharp_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_STriangle.wav" target="_blank">c_SJawharp_STriangle.wav</a></td></tr>

<tr>
<td></td>
<td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SLegend.wav" target="_blank">c_RL_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SLegend.wav" target="_blank">c_RM_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SLegend.wav" target="_blank">c_RS_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SLegend.wav" target="_blank">c_SBite_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SLegend.wav" target="_blank">c_SCymbal_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SLegend.wav" target="_blank">c_SJawharp_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SLegend_SLegend.wav" target="_blank">c_SLegend_SLegend.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSaw.wav" target="_blank">c_SLegend_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSine.wav" target="_blank">c_SLegend_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSquare.wav" target="_blank">c_SLegend_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SLegend_STriangle.wav" target="_blank">c_SLegend_STriangle.wav</a></td></tr>

<tr>
<td></td>
<td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SSaw.wav" target="_blank">c_RL_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SSaw.wav" target="_blank">c_RM_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SSaw.wav" target="_blank">c_RS_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SSaw.wav" target="_blank">c_SBite_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSaw.wav" target="_blank">c_SCymbal_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSaw.wav" target="_blank">c_SJawharp_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSaw.wav" target="_blank">c_SLegend_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSaw.wav" target="_blank">c_SSaw_SSaw.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSine.wav" target="_blank">c_SSaw_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSquare.wav" target="_blank">c_SSaw_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSaw_STriangle.wav" target="_blank">c_SSaw_STriangle.wav</a></td></tr>

<tr>
<td></td>
<td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SSine.wav" target="_blank">c_RL_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SSine.wav" target="_blank">c_RM_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SSine.wav" target="_blank">c_RS_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SSine.wav" target="_blank">c_SBite_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSine.wav" target="_blank">c_SCymbal_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSine.wav" target="_blank">c_SJawharp_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSine.wav" target="_blank">c_SLegend_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSine.wav" target="_blank">c_SSaw_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSine_SSine.wav" target="_blank">c_SSine_SSine.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSine_SSquare.wav" target="_blank">c_SSine_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSine_STriangle.wav" target="_blank">c_SSine_STriangle.wav</a></td></tr>

<tr>
<td></td>
<td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_SSquare.wav" target="_blank">c_RL_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_SSquare.wav" target="_blank">c_RM_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_SSquare.wav" target="_blank">c_RS_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_SSquare.wav" target="_blank">c_SBite_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSquare.wav" target="_blank">c_SCymbal_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSquare.wav" target="_blank">c_SJawharp_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSquare.wav" target="_blank">c_SLegend_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSquare.wav" target="_blank">c_SSaw_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSine_SSquare.wav" target="_blank">c_SSine_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSquare_SSquare.wav" target="_blank">c_SSquare_SSquare.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSquare_STriangle.wav" target="_blank">c_SSquare_STriangle.wav</a></td></tr>

<tr>
<td></td>
<td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td>
</tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav" target="_blank">ReverbLarge</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RL_STriangle.wav" target="_blank">c_RL_STriangle.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav" target="_blank">ReverbMedium</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RM_STriangle.wav" target="_blank">c_RM_STriangle.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav" target="_blank">ReverbSmall</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_RS_STriangle.wav" target="_blank">c_RS_STriangle.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundBite.wav" target="_blank">SoundBite</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SBite_STriangle.wav" target="_blank">c_SBite_STriangle.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav" target="_blank">SoundCymbal</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SCymbal_STriangle.wav" target="_blank">c_SCymbal_STriangle.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav" target="_blank">SoundJawharp</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SJawharp_STriangle.wav" target="_blank">c_SJawharp_STriangle.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav" target="_blank">SoundLegend</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SLegend_STriangle.wav" target="_blank">c_SLegend_STriangle.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav" target="_blank">SoundSaw</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSaw_STriangle.wav" target="_blank">c_SSaw_STriangle.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSine.wav" target="_blank">SoundSine</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSine_STriangle.wav" target="_blank">c_SSine_STriangle.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav" target="_blank">SoundSquare</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_SSquare_STriangle.wav" target="_blank">c_SSquare_STriangle.wav</a></td></tr>
<tr><td><b><a href="https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav" target="_blank">SoundTriangle</a></b></td><td><a href="https://demofox2.files.wordpress.com/2015/03/c_STriangle_STriangle.wav" target="_blank">c_STriangle_STriangle.wav</a></td></tr>
</table>

<h2>Sample Code</h2>

Here is some sample code which will read in "in.wav" and "reverb.wav", do convolution on them and save the fully wet result (convolution result only, no original in.wav mixed into the output) as "out.wav".

Note that this code was used to process the sample sound files above.  Usual caveat: The sound loading code isn't bulletproof.  I've found it works best with 16 bit mono sound files.  If you need better sound loading, check out libsndfile!

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS
 
#include <array>
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <cmath>
#include <vector>
#include <chrono>
#include <ctime>
 
#define _USE_MATH_DEFINES
#include <math.h>
 
//=====================================================================================
// SNumeric - uses phantom types to enforce type safety
//=====================================================================================
template <typename T, typename PHANTOM_TYPE>
struct SNumeric
{
public:
    explicit SNumeric(const T &value) : m_value(value) { }
    SNumeric() : m_value() { }
    inline T& Value() { return m_value; }
    inline const T& Value() const { return m_value; }
 
    typedef SNumeric<T, PHANTOM_TYPE> TType;
    typedef T TInnerType;
 
    // Math Operations
    TType operator+ (const TType &b) const
    {
        return TType(this->Value() + b.Value());
    }
 
    TType operator- (const TType &b) const
    {
        return TType(this->Value() - b.Value());
    }
 
    TType operator* (const TType &b) const
    {
        return TType(this->Value() * b.Value());
    }
 
    TType operator/ (const TType &b) const
    {
        return TType(this->Value() / b.Value());
    }
 
    TType& operator+= (const TType &b)
    {
        Value() += b.Value();
        return *this;
    }
 
    TType& operator-= (const TType &b)
    {
        Value() -= b.Value();
        return *this;
    }
 
    TType& operator*= (const TType &b)
    {
        Value() *= b.Value();
        return *this;
    }
 
    TType& operator/= (const TType &b)
    {
        Value() /= b.Value();
        return *this;
    }
 
    TType& operator++ ()
    {
        Value()++;
        return *this;
    }
 
    TType& operator-- ()
    {
        Value()--;
        return *this;
    }
 
    // Extended Math Operations
    template <typename T>
    T Divide(const TType &b)
    {
        return ((T)this->Value()) / ((T)b.Value());
    }
 
    // Logic Operations
    bool operator< (const TType &b) const {
        return this->Value() < b.Value();
    }
    bool operator<= (const TType &b) const {
        return this->Value() <= b.Value();
    }
    bool operator> (const TType &b) const {
        return this->Value() > b.Value();
    }
    bool operator>= (const TType &b) const {
        return this->Value() >= b.Value();
    }
    bool operator== (const TType &b) const {
        return this->Value() == b.Value();
    }
    bool operator!= (const TType &b) const {
        return this->Value() != b.Value();
    }
 
private:
    T m_value;
};
 
//=====================================================================================
// Typedefs
//=====================================================================================
 
typedef uint8_t uint8;
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef int16_t int16;
typedef int32_t int32;
 
// type safe types!
typedef SNumeric<float, struct S__Frequency>      TFrequency;
typedef SNumeric<uint32, struct S__TimeMs>        TTimeMs;
typedef SNumeric<uint32, struct S__Samples>       TSamples;
typedef SNumeric<float, struct S__FractSamples>   TFractionalSamples;
typedef SNumeric<float, struct S__Decibels>       TDecibels;
typedef SNumeric<float, struct S__Amplitude>      TAmplitude;
typedef SNumeric<float, struct S__Phase>          TPhase;
 
//=====================================================================================
// Constants
//=====================================================================================
 
static const float c_pi = (float)M_PI;
static const float c_twoPi = c_pi * 2.0f;
 
//=====================================================================================
// Structs
//=====================================================================================
 
struct SSoundSettings
{
    TSamples        m_sampleRate;
};
 
//=====================================================================================
// Conversion Functions
//=====================================================================================
inline TDecibels AmplitudeToDB(TAmplitude volume)
{
    return TDecibels(log10(volume.Value()));
}
 
inline TAmplitude DBToAmplitude(TDecibels dB)
{
    return TAmplitude(pow(10.0f, dB.Value() / 20.0f));
}
 
TSamples SecondsToSamples(const SSoundSettings &s, float seconds)
{
    return TSamples((int)(seconds * (float)s.m_sampleRate.Value()));
}
 
TSamples MilliSecondsToSamples(const SSoundSettings &s, float milliseconds)
{
    return SecondsToSamples(s, milliseconds / 1000.0f);
}
 
TTimeMs SecondsToMilliseconds(float seconds)
{
    return TTimeMs((uint32)(seconds * 1000.0f));
}
 
TFrequency Frequency(float octave, float note)
{
    /* frequency = 440×(2^(n/12))
    Notes:
    0  = A
    1  = A#
    2  = B
    3  = C
    4  = C#
    5  = D
    6  = D#
    7  = E
    8  = F
    9  = F#
    10 = G
    11 = G# */
    return TFrequency((float)(440 * pow(2.0, ((double)((octave - 4) * 12 + note)) / 12.0)));
}
 
template <typename T>
T AmplitudeToAudioSample(const TAmplitude& in)
{
    const T c_min = std::numeric_limits<T>::min();
    const T c_max = std::numeric_limits<T>::max();
    const float c_minFloat = (float)c_min;
    const float c_maxFloat = (float)c_max;
 
    float ret = in.Value() * c_maxFloat;
 
    if (ret < c_minFloat)
        return c_min;
 
    if (ret > c_maxFloat)
        return c_max;
 
    return (T)ret;
}
 
TAmplitude GetLerpedAudioSample(const std::vector<TAmplitude>& samples, TFractionalSamples& index)
{
    // get the index of each sample and the fractional blend amount
    uint32 a = (uint32)floor(index.Value());
    uint32 b = a + 1;
    float fract = index.Value() - floor(index.Value());
 
    // get our two amplitudes
    float ampA = 0.0f;
    if (a >= 0 && a < samples.size())
        ampA = samples[a].Value();
 
    float ampB = 0.0f;
    if (b >= 0 && b < samples.size())
        ampB = samples[b].Value();
 
    // return the lerped result
    return TAmplitude(fract * ampB + (1.0f - fract) * ampA);
}
 
void NormalizeSamples(std::vector<TAmplitude>& samples, TAmplitude maxAmplitude, TSamples envelopeTimeFrontBack)
{
    // nothing to do if no samples
    if (samples.size() == 0)
        return;
 
    // 1) find the largest absolute value in the samples.
    TAmplitude largestAbsVal = TAmplitude(abs(samples.front().Value()));
    std::for_each(samples.begin() + 1, samples.end(), [&largestAbsVal](const TAmplitude &a)
        {
            TAmplitude absVal = TAmplitude(abs(a.Value()));
            if (absVal > largestAbsVal)
                largestAbsVal = absVal;
        }
    );
 
    // 2) adjust largestAbsVal so that when we divide all samples, none will be bigger than maxAmplitude
    // if the value we are going to divide by is <= 0, bail out
    largestAbsVal /= maxAmplitude;
    if (largestAbsVal <= TAmplitude(0.0f))
        return;
 
    // 3) divide all numbers by the largest absolute value seen so all samples are [-maxAmplitude,+maxAmplitude]
    // also apply front and back envelope
    const TSamples c_frontEnvelopeEnd(envelopeTimeFrontBack);
    const TSamples c_backEnvelopeStart(samples.size() - envelopeTimeFrontBack.Value());

    for (TSamples index(0), numSamples(samples.size()); index < numSamples; ++index)
    {
        // calculate envelope
        TAmplitude envelope(1.0f);
        if (index < c_frontEnvelopeEnd)
            envelope = TAmplitude(index.Divide<float>(envelopeTimeFrontBack));
        else if (index > c_backEnvelopeStart)
            envelope = TAmplitude(1.0f) - TAmplitude((index - c_backEnvelopeStart).Divide<float>(envelopeTimeFrontBack));

        // apply envelope while normalizing
        samples[index.Value()] = samples[index.Value()] * envelope / largestAbsVal;

    }
}
 
void ResampleData(std::vector<TAmplitude>& samples, int srcSampleRate, int destSampleRate)
{
    //if the requested sample rate is the sample rate it already is, bail out and do nothing
    if (srcSampleRate == destSampleRate)
        return;
 
    //calculate the ratio of the old sample rate to the new
    float fResampleRatio = (float)destSampleRate / (float)srcSampleRate;
 
    //calculate how many samples the new data will have and allocate the new sample data
    int nNewDataNumSamples = (int)((float)samples.size() * fResampleRatio);
 
    std::vector<TAmplitude> newSamples;
    newSamples.resize(nNewDataNumSamples);
 
    //get each lerped output sample.  There are higher quality ways to resample
    for (int nIndex = 0; nIndex < nNewDataNumSamples; ++nIndex)
        newSamples[nIndex] = GetLerpedAudioSample(samples, TFractionalSamples((float)nIndex / fResampleRatio));
 
    //free the old data and set the new data
    std::swap(samples, newSamples);
}
 
void ChangeNumChannels(std::vector<TAmplitude>& samples, int nSrcChannels, int nDestChannels)
{
    //if the number of channels requested is the number of channels already there, or either number of channels is not mono or stereo, return
    if (nSrcChannels == nDestChannels ||
        nSrcChannels < 1 || nSrcChannels > 2 ||
        nDestChannels < 1 || nDestChannels > 2)
    {
        return;
    }
 
    //if converting from mono to stereo, duplicate the mono channel to make stereo
    if (nDestChannels == 2)
    {
        std::vector<TAmplitude> newSamples;
        newSamples.resize(samples.size() * 2);
        for (size_t index = 0; index < samples.size(); ++index)
        {
            newSamples[index * 2] = samples[index];
            newSamples[index * 2 + 1] = samples[index];
        }
 
        std::swap(samples, newSamples);
    }
    //else converting from stereo to mono, mix the stereo channels together to make mono
    else
    {
        std::vector<TAmplitude> newSamples;
        newSamples.resize(samples.size() / 2);
        for (size_t index = 0; index < samples.size() / 2; ++index)
            newSamples[index] = samples[index * 2] + samples[index * 2 + 1];
 
        std::swap(samples, newSamples);
    }
}
 
float PCMToFloat(unsigned char *pPCMData, int nNumBytes)
{
    switch (nNumBytes)
    {
    case 1:
    {
        uint8 data = pPCMData[0];
        return (float)data / 255.0f;
    }
    case 2:
    {
        int16 data = pPCMData[1] << 8 | pPCMData[0];
        return ((float)data) / ((float)0x00007fff);
    }
    case 3:
    {
        int32 data = pPCMData[2] << 16 | pPCMData[1] << 8 | pPCMData[0];
        return ((float)data) / ((float)0x007fffff);
    }
    case 4:
    {
        int32 data = pPCMData[3] << 24 | pPCMData[2] << 16 | pPCMData[1] << 8 | pPCMData[0];
        return ((float)data) / ((float)0x7fffffff);
    }
    default:
    {
        return 0.0f;
    }
    }
}
 
//=====================================================================================
// Wave File Writing Code
//=====================================================================================
struct SMinimalWaveFileHeader
{
    //the main chunk
    unsigned char m_szChunkID[4];      //0
    uint32        m_nChunkSize;        //4
    unsigned char m_szFormat[4];       //8
 
    //sub chunk 1 "fmt "
    unsigned char m_szSubChunk1ID[4];  //12
    uint32        m_nSubChunk1Size;    //16
    uint16        m_nAudioFormat;      //18
    uint16        m_nNumChannels;      //20
    uint32        m_nSampleRate;       //24
    uint32        m_nByteRate;         //28
    uint16        m_nBlockAlign;       //30
    uint16        m_nBitsPerSample;    //32
 
    //sub chunk 2 "data"
    unsigned char m_szSubChunk2ID[4];  //36
    uint32        m_nSubChunk2Size;    //40
 
    //then comes the data!
};
 
//this writes a wave file
template <typename T>
bool WriteWaveFile(const char *fileName, const std::vector<TAmplitude> &samples, const SSoundSettings &sound)
{
    //open the file if we can
    FILE *file = fopen(fileName, "w+b");
    if (!file)
        return false;
 
    //calculate bits per sample and the data size
    const int32 bitsPerSample = sizeof(T) * 8;
    const int dataSize = samples.size() * sizeof(T);
 
    SMinimalWaveFileHeader waveHeader;
 
    //fill out the main chunk
    memcpy(waveHeader.m_szChunkID, "RIFF", 4);
    waveHeader.m_nChunkSize = dataSize + 36;
    memcpy(waveHeader.m_szFormat, "WAVE", 4);
 
    //fill out sub chunk 1 "fmt "
    memcpy(waveHeader.m_szSubChunk1ID, "fmt ", 4);
    waveHeader.m_nSubChunk1Size = 16;
    waveHeader.m_nAudioFormat = 1;
    waveHeader.m_nNumChannels = 1;
    waveHeader.m_nSampleRate = sound.m_sampleRate.Value();
    waveHeader.m_nByteRate = sound.m_sampleRate.Value() * 1 * bitsPerSample / 8;
    waveHeader.m_nBlockAlign = 1 * bitsPerSample / 8;
    waveHeader.m_nBitsPerSample = bitsPerSample;
 
    //fill out sub chunk 2 "data"
    memcpy(waveHeader.m_szSubChunk2ID, "data", 4);
    waveHeader.m_nSubChunk2Size = dataSize;
 
    //write the header
    fwrite(&waveHeader, sizeof(SMinimalWaveFileHeader), 1, file);
 
    //write the wave data itself, converting it from float to the type specified
    std::vector<T> outSamples;
    outSamples.resize(samples.size());
    for (size_t index = 0; index < samples.size(); ++index)
        outSamples[index] = AmplitudeToAudioSample<T>(samples[index]);
    fwrite(&outSamples[0], dataSize, 1, file);
 
    //close the file and return success
    fclose(file);
    return true;
}
 
//loads a wave file in.  Converts from source format into the specified format
// TOTAL HONESTY: some wave files seem to have problems being loaded through this function and I don't have
// time to investigate why.  It seems to work best with 16 bit mono wave files.
// If you need more robust file loading, check out libsndfile at http://www.mega-nerd.com/libsndfile/
bool ReadWaveFile(const char *fileName, std::vector<TAmplitude>& samples, int32 sampleRate)
{
    //open the file if we can
    FILE *File = fopen(fileName, "rb");
    if (!File)
    {
        return false;
    }
 
    //read the main chunk ID and make sure it's "RIFF"
    char buffer[5];
    buffer[4] = 0;
    if (fread(buffer, 4, 1, File) != 1 || strcmp(buffer, "RIFF"))
    {
        fclose(File);
        return false;
    }
 
    //read the main chunk size
    uint32 nChunkSize;
    if (fread(&nChunkSize, 4, 1, File) != 1)
    {
        fclose(File);
        return false;
    }
 
    //read the format and make sure it's "WAVE"
    if (fread(buffer, 4, 1, File) != 1 || strcmp(buffer, "WAVE"))
    {
        fclose(File);
        return false;
    }
 
    long chunkPosFmt = -1;
    long chunkPosData = -1;
 
    while (chunkPosFmt == -1 || chunkPosData == -1)
    {
        //read a sub chunk id and a chunk size if we can
        if (fread(buffer, 4, 1, File) != 1 || fread(&nChunkSize, 4, 1, File) != 1)
        {
            fclose(File);
            return false;
        }
 
        //if we hit a fmt
        if (!strcmp(buffer, "fmt "))
        {
            chunkPosFmt = ftell(File) - 8;
        }
        //else if we hit a data
        else if (!strcmp(buffer, "data"))
        {
            chunkPosData = ftell(File) - 8;
        }
 
        //skip to the next chunk
        fseek(File, nChunkSize, SEEK_CUR);
    }
 
    //we'll use this handy struct to load in 
    SMinimalWaveFileHeader waveData;
 
    //load the fmt part if we can
    fseek(File, chunkPosFmt, SEEK_SET);
    if (fread(&waveData.m_szSubChunk1ID, 24, 1, File) != 1)
    {
        fclose(File);
        return false;
    }
 
    //load the data part if we can
    fseek(File, chunkPosData, SEEK_SET);
    if (fread(&waveData.m_szSubChunk2ID, 8, 1, File) != 1)
    {
        fclose(File);
        return false;
    }
 
    //verify a couple things about the file data
    if (waveData.m_nAudioFormat != 1 ||       //only pcm data
        waveData.m_nNumChannels < 1 ||        //must have a channel
        waveData.m_nNumChannels > 2 ||        //must not have more than 2
        waveData.m_nBitsPerSample > 32 ||     //32 bits per sample max
        waveData.m_nBitsPerSample % 8 != 0 || //must be a multiple of 8 bites
        waveData.m_nBlockAlign > 8)           //blocks must be 8 bytes or lower
    {
        fclose(File);
        return false;
    }
 
    //figure out how many samples and blocks there are total in the source data
    int nBytesPerBlock = waveData.m_nBlockAlign;
    int nNumBlocks = waveData.m_nSubChunk2Size / nBytesPerBlock;
    int nNumSourceSamples = nNumBlocks * waveData.m_nNumChannels;
 
    //allocate space for the source samples
    samples.resize(nNumSourceSamples);
 
    //maximum size of a block is 8 bytes.  4 bytes per samples, 2 channels
    unsigned char pBlockData[8];
    memset(pBlockData, 0, 8);
 
    //read in the source samples at whatever sample rate / number of channels it might be in
    int nBytesPerSample = nBytesPerBlock / waveData.m_nNumChannels;
    for (int nIndex = 0; nIndex < nNumSourceSamples; nIndex += waveData.m_nNumChannels)
    {
        //read in a block
        if (fread(pBlockData, waveData.m_nBlockAlign, 1, File) != 1)
        {
            fclose(File);
            return false;
        }
 
        //get the first sample
        samples[nIndex].Value() = PCMToFloat(pBlockData, nBytesPerSample);
 
        //get the second sample if there is one
        if (waveData.m_nNumChannels == 2)
        {
            samples[nIndex + 1].Value() = PCMToFloat(&pBlockData[nBytesPerSample], nBytesPerSample);
        }
    }
 
    //re-sample the sample rate up or down as needed
    ResampleData(samples, waveData.m_nSampleRate, sampleRate);
 
    //handle switching from mono to stereo or vice versa
    ChangeNumChannels(samples, waveData.m_nNumChannels, 1);
 
    return true;
}
 
//=====================================================================================
// Oscilators
//=====================================================================================
 
void AdvancePhase(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    phase += TPhase(frequency.Value() / (float)sampleRate.Value());
    while (phase >= TPhase(1.0f))
        phase -= TPhase(1.0f);
    while (phase < TPhase(0.0f))
        phase += TPhase(1.0f);
}
 
TAmplitude AdvanceOscilator_Sine(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(sin(phase.Value()*c_twoPi));
}
 
TAmplitude AdvanceOscilator_Saw(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(phase.Value() * 2.0f - 1.0f);
}
 
TAmplitude AdvanceOscilator_Square(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    return TAmplitude(phase.Value() > 0.5f ? 1.0f : -1.0f);
}
 
TAmplitude AdvanceOscilator_Triangle(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
    if (phase > TPhase(0.5f))
        return TAmplitude((((1.0f - phase.Value()) * 2.0f) * 2.0f) - 1.0f);
    else
        return TAmplitude(((phase.Value() * 2.0f) * 2.0f) - 1.0f);
}
 
TAmplitude AdvanceOscilator_Saw_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
 
    // sum the harmonics
    TAmplitude ret(0.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        TPhase harmonicPhase = phase * TPhase((float)harmonicIndex);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / (float)harmonicIndex);
    }
 
    //adjust the volume
    ret *= TAmplitude(2.0f / c_pi);
 
    return ret;
}
 
TAmplitude AdvanceOscilator_Square_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
 
    // sum the harmonics
    TAmplitude ret(0.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        float harmonicFactor = (float)harmonicIndex * 2.0f - 1.0f;
        TPhase harmonicPhase = phase * TPhase(harmonicFactor);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / harmonicFactor);
    }
 
    //adjust the volume
    ret *= TAmplitude(4.0f / c_pi);
 
    return ret;
}
 
TAmplitude AdvanceOscilator_Triangle_BandLimited(TPhase &phase, TFrequency frequency, TSamples sampleRate)
{
    AdvancePhase(phase, frequency, sampleRate);
 
    // sum the harmonics
    TAmplitude ret(0.0f);
    TAmplitude signFlip(1.0f);
    for (int harmonicIndex = 1; harmonicIndex <= 4; ++harmonicIndex)
    {
        float harmonicFactor = (float)harmonicIndex * 2.0f - 1.0f;
        TPhase harmonicPhase = phase * TPhase(harmonicFactor);
        ret += TAmplitude(sin(harmonicPhase.Value()*c_twoPi) / (harmonicFactor*harmonicFactor)) * signFlip;
        signFlip *= TAmplitude(-1.0f);
    }
 
    //adjust the volume
    ret *= TAmplitude(8.0f / (c_pi*c_pi));
 
    return ret;
}
 
//=====================================================================================
// Main
//=====================================================================================
int main(int argc, char **argv)
{
    // wetness parameter of reverb.  It's a percentage from 0 to 1.  
    TAmplitude c_reverbWetness(1.0f);

    // keep track of when the process started so we can report how long it took
    auto start = std::chrono::system_clock::now().time_since_epoch();

    //our desired sound parameters
    SSoundSettings sound;
    sound.m_sampleRate = TSamples(44100);
 
    // load the input wave file if we can and normalize it
    std::vector<TAmplitude> inputData;
    if (!ReadWaveFile("in.wav", inputData, sound.m_sampleRate.Value()))
    {
        printf("could not load input wave file!");
        return 0;
    }
    NormalizeSamples(inputData, TAmplitude(1.0f), TSamples(0));

    // load the reverb wave file if we can and normalize it
    std::vector<TAmplitude> reverbData;
    if (!ReadWaveFile("reverb.wav", reverbData, sound.m_sampleRate.Value()))
    {
        printf("could not load reverb wave file!");
        return 0;
    }
    NormalizeSamples(reverbData, TAmplitude(1.0f), TSamples(0));

    // allocate space for the output file - which will be the number of samples in the two input files minus 1
    // initialize it to silence!
    std::vector<TAmplitude> samples;
    samples.resize(inputData.size() + reverbData.size() - 1);
    std::fill(samples.begin(), samples.end(), TAmplitude(0.0f));

    // reverse the reverb data in preparation of convolution
    std::reverse(reverbData.begin(), reverbData.end());

    // report the number of samples of each file
    printf("Input samples = %u\n", inputData.size());
    printf("Reverb samples = %u\n", reverbData.size());

    // apply the convolution for each output sample
    float lastPercentageReported = 0.0f;
    char percentageText[512];
    percentageText[0] = 0;
    printf("Progress: ");
    for (TSamples sampleIndex(0), numSamples(samples.size()); sampleIndex < numSamples; ++sampleIndex)
    {
        // print some periodic output since this can take a while!
        float percentage = sampleIndex.Divide<float>(numSamples);
        if (percentage >= lastPercentageReported + 0.01f)
        {
            // erase the last progress text
            for (int i = 0, c = strlen(percentageText); i < c; ++i)
                printf("%c %c", 8, 8);

            // calculte and show progress text
            lastPercentageReported = percentage;
            auto duration = std::chrono::system_clock::now().time_since_epoch() - start;
            auto millis = std::chrono::duration_cast<std::chrono::milliseconds>(duration).count();
            float expectedMillis = millis / percentage;
            sprintf(percentageText, "%i%%  %0.2f / %0.2f seconds (%0.2f remaining)", int(percentage*100.0f), ((float)millis) / 1000.0f, expectedMillis / 1000.0f, (expectedMillis - millis) / 1000.0f);
            printf("%s", percentageText);
        }

        // get a reference to our output sample
        TAmplitude &outputSample = samples[sampleIndex.Value()];

        // figure out the first reverb index and input index we should process.
        TSamples startReverbIndex(0);
        TSamples startInputIndex(0);
        if (sampleIndex < TSamples(reverbData.size()))
            startReverbIndex = TSamples(reverbData.size()) - sampleIndex - TSamples(1);
        else
            startInputIndex = sampleIndex - TSamples(reverbData.size());

        // for each reverb sample
        for (TSamples reverbIndex(startReverbIndex), numReverbSamples(reverbData.size()), inputIndex(startInputIndex), numInputSamples(inputData.size());
            reverbIndex < numReverbSamples && inputIndex < numInputSamples;
            ++reverbIndex, ++inputIndex)
        {
            const TAmplitude &inputSample = inputData[inputIndex.Value()];
            const TAmplitude &reverbSample = reverbData[reverbIndex.Value()];
            outputSample += inputSample * reverbSample;
        }
    }

    // normalize the reverb to the wetness volume level
    NormalizeSamples(samples, c_reverbWetness, TSamples(0));

    // apply the dry sound on top, per the wetness settings
    for (TSamples inputIndex = TSamples(0), numInputSamples(inputData.size()); inputIndex < numInputSamples; ++inputIndex)
    {
        const TAmplitude &inputSample = inputData[inputIndex.Value()];
        TAmplitude &outputSample = samples[inputIndex.Value()];
        outputSample += inputSample * (TAmplitude(1.0f) - c_reverbWetness);
    }

    // normalize the amplitude of the samples to make sure they are as loud as possible without clipping.
    // give 3db of headroom and also put an envelope on the front and back that is 50ms
    NormalizeSamples(samples, DBToAmplitude(TDecibels(-3.0f)), MilliSecondsToSamples(sound, 50.0f));
 
    // save as a wave file
    WriteWaveFile<int16_t>("out.wav", samples, sound);
    return 0;
}
[/code]

<h2>Intuition</h2>

I had to think about it for a bit but the intuition for why this works is actually pretty straight forward!

The impulse response represents all the echos that occur over time if you make a single sample of 1.0 amplitude.  This is your guide for how all samples in an impulse source (IS) should be transformed, where IS is the sound you want to add reverb to.

So, starting out, you put the entire IR into your output buffer starting at output[0] (the first sample in the output buffer), multiplied by IS[0] (the first sample of the sound you are reverbing).

This leaves you with the proper reverb of the first sample in your IS, and your total output buffer length is the same length as your IR.

We only have one sample reverbed though, so we move to the next...

Next, you put the entire IR into the output buffer again, but this time start at output[1] (the second sample in the output buffer) and those IR values you are writing need to be multiplied by IS[1] (the second sample of the sound you are reverbing).

You now have the proper reverb for the first two samples in your IS, and your total output buffer length is the length of your IR + 1.

Rinse and repeat for all samples in your IS, and at the end, the reverb of all samples in your IS will be accounted for in your output buffer, and the size of your output buffer will be the length of your IR plus the length of your IS, minus one.

Pretty simple and intuitive right?

You are essentially playing the IR in the output buffer length(IS) times, where IS[outputBufferIndex] determines the volume (amplitude) that you need to play the IR at.

Convolution does exactly this, which turns out to be pretty slow due to it being a lot of math to preform.

If you have a source file (IS) you are reverbing that is 4 seconds long, running at 44100 samples per second (176,400 samples total), and you have a reverb impulse response (IR) that is 2 seconds long at 44100 samples per second (88,200 samples total), that means that you are going to essentially be mixing the IR into an output buffer 176,400 times.

Each time you play the IR you need to do a multiplication per IR sample (to scale it to the IS[index] amplitude) and an addition to add it to the resulting output buffer.

At 88,200 IR samples with a multiply and add for each sample, and doing that 176,400 times, that means at the end you will need to do 15,558,480,000 (15.5 billion) multiplies and adds.

And remember... that is only for a 4 second sound that is receiving a 2 second reverb... those are pretty small sound files involved!  And, that is only a single channel.  That would double in stereo, and be even worse in 5.1 or 7.1 surround sound!

<h2>More Info</h2>

So, this method works, but unfortunately it's pretty darn slow (it took like 5 minutes for me to convolve the legend quote with the large reverb).  It could be made faster by introducing threading and SSE instructions, but there is a better way that gives us an even bigger speed up.

Having audio samples means you are working in the "time domain".  If you take a fourier transform of the audio samples, you'll have the information in the "frequency domain".  As it turns out, if you do a multiplication in the frequency domain, that is equivalent to doing a convolution in the time domain.  Using the fast fourier transform on your input sound and multiplying that by the pre-transformed FFT of the impulse response, and then doing an inverse FFT on the result to get back into the time domain (aka audio samples) is MUCH FASTER than doing actual convolution.

Another problem with convolution reverb is that you need the full sound you are convolving, which makes it basically impossible to use in a live setup.  The solution to this is that people convolve windows of data at a time, instead of the whole sound.  I think a common window size is 256 samples.

I'll make a post in the future that addresses both those issues to allow for fast, real time convolution reverb via windowed FFT multiplication.

Also, I said in the last post that this technique is what the pros do.  We'll I should add that this is what they do SOMETIMES.  Other times they use DSP algorithms involving comb filters and multi tap delays (and other things) to make fast reverb that sounds pretty decent without needing to do convolution or FFT/IFFT.  Check the links section for a link to the details of one such algorithm.

Regarding IR samples (Impulse Response recordings), if you record your own, it should work as is.  However, a common thing that people do is remove the loud sound from the impulse response (via deconvolution i think?) to get ONLY the impulse response.  It basically makes it so that the IR really is just an IR of that room as if you had a single sample of a "1.0" echoing in the area.  Without this step, your reverb convolution will still work, but you'll get "smearing" of the sound, due to it not being a true 1.0 sample (or in other words, not a true dirac delta).

Luckily there are IR's available for download online as well.  Some are free, some are pay.  Check the links section for a few links I found for that (:

Lastly, this post basically teaches you how to do 1 dimensional convolution, showing you an application for it.  You can do convolution in higher dimensions as well though, and in fact if you have used photoshop and know about things like gaussian blur, sharpen mask, etc, those guys work by 2d convolution.  Bokeh is even apparently convolution, as is a "Minkowski Sum" if you have done work in game physics.

Ill make a graphics related 2d convolution post in the future as well to delve into that stuff a bit deeper.

As one final sound sample, check out this CROSS CORRELATION (not convolution) of SoundBite.wav and ReverbLarge.  Cross correlation is the same as convolution except you don't reverse one of the samples.  So, in effect, it's like I convolved SoundBite.wav with ReverbLarge.wav played backwards.

<a href="https://demofox2.files.wordpress.com/2015/03/c_ReverseRL_SBite.wav" target="_blank">c_ReverseRL_SBite.wav</a>

More info on cross correlation coming soon.  It has uses in audio, but more often it's used for finding time delays of sounds compared to other sounds, recognizing patterns in sound data even with the presence of noise / distortion, versus having actual audible uses (although there are some of those too!).

<h2>Links</h2>

<a href="http://www.songho.ca/dsp/convolution/convolution.html" target="_blank">A good read explaining 1d and 2d convolution</a>
<a href="http://www.bhphotovideo.com/find/newsLetter/Convolution-Reverb.jsp/" target="_blank">More info on convolution reverb</a>
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/convolution.html" target="_blank">Even more info on convolution reverb</a>
<a href="http://www-rohan.sdsu.edu/~jiracek/DAGSAW/4.3.html" target="_blank">Explains discrete convolution and has an interactive demo</a>
<a href="https://www.khanacademy.org/math/differential-equations/laplace-transform/convolution-integral/v/introduction-to-the-convolution" target="_blank">Khan Academy: Continuous Convolution</a>
<a href="https://ccrma.stanford.edu/~keunsup/earlypart_control.html" target="_blank">Info on faked reverb</a>
<a href="https://ccrma.stanford.edu/~keunsup/projects.html" target="_blank">More info on faked reverb</a>
<a href="https://valhalladsp.wordpress.com/" target="_blank">A reverb blog!</a>
<a href="http://www.audioease.com/IR/audioeaseirs.html" target="_blank">Some free IRs you can download</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2110</wp:post_id>
		<wp:post_date><![CDATA[2015-03-23 11:50:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 19:50:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[diy-synth-convolution-reverb-1d-discrete-convolution-of-audio-samples]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundBite.wav
103298
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/ReverbLarge.wav
533714
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SBite.wav
636846
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SBite_66.wav
636846
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SBite_33.wav
636846
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_RL.wav
1067262
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/ReverbMedium.wav
88304
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_RM.wav
621852
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/ReverbSmall.wav
66254
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_RS.wav
599802
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundCymbal.wav
591926
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SCymbal.wav
1125474
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundJawharp.wav
88304
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SJawharp.wav
621852
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundLegend.wav
617504
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SLegend.wav
1151052
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundSaw.wav
11130
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SSaw.wav
544678
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundSine.wav
11130
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SSine.wav
544678
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundSquare.wav
11130
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_SSquare.wav
544678
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/SoundTriangle.wav
11130
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RL_STriangle.wav
544678
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_RM.wav
176442
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_RS.wav
154392
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SBite.wav
191436
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SCymbal.wav
680064
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SJawharp.wav
176442
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SLegend.wav
705642
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SSaw.wav
99268
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SSine.wav
99268
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_SSquare.wav
99268
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RM_STriangle.wav
99268
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_RS.wav
132342
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SBite.wav
169386
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SCymbal.wav
658014
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SJawharp.wav
154392
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SLegend.wav
683592
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SSaw.wav
77218
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SSine.wav
77218
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_SSquare.wav
77218
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_RS_STriangle.wav
77218
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SBite.wav
206430
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SCymbal.wav
695058
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SJawharp.wav
191436
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SLegend.wav
720636
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SSaw.wav
114262
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SSine.wav
114262
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_SSquare.wav
114262
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SBite_STriangle.wav
114262
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SCymbal.wav
1183686
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SJawharp.wav
680064
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SLegend.wav
1209264
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSaw.wav
602890
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSine.wav
602890
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_SSquare.wav
602890
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SCymbal_STriangle.wav
602890
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SJawharp.wav
176442
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SLegend.wav
705642
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSaw.wav
99268
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSine.wav
99268
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_SSquare.wav
99268
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SJawharp_STriangle.wav
99268
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SLegend_SLegend.wav
1234842
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSaw.wav
628468
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSine.wav
628468
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SLegend_SSquare.wav
628468
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SLegend_STriangle.wav
628468
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSaw.wav
22094
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSine.wav
22094
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSaw_SSquare.wav
22094
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSaw_STriangle.wav
22094
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSine_SSine.wav
22094
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSine_SSquare.wav
22094
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSine_STriangle.wav
22094
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSquare_SSquare.wav
22094
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_SSquare_STriangle.wav
22094
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_STriangle_STriangle.wav
22094
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/03/c_ReverseRL_SBite.wav
636846
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495717579;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2285;}i:1;a:1:{s:2:"id";i:3022;}i:2;a:1:{s:2:"id";i:2084;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Decibels (dB) and Amplitude</title>
		<link>http://blog.demofox.org/2015/04/14/decibels-db-and-amplitude/</link>
		<pubDate>Tue, 14 Apr 2015 19:20:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2268</guid>
		<description></description>
		<content:encoded><![CDATA[If you are a programmer, chances are that when you think of volume or volume adjustments of audio signals (or other streams of data), you are thinking in terms of amplitude.

For instance, to make an audio stream quieter, you are probably going to multiply all the samples by 0.5 to bring it down in volume.  That 0.5 is a scalar value in amplitude space.

If you work with musicians or other audio folk, chances are they are not going to think in amplitude, may not be able to easily adjust to thinking in amplitude, and instead will talk to you in terms of decibels or dB, which is as foreign to you as amplitude is to them.

The main issue is that our ears do not hear linear adjustments in amplitude as linear adjustments in loudness, but linear adjustments in dB do sound like they are linear adjustments in loudness.

dB is a bit easier to understand as well.  0dB means full volume and positive numbers means a boost in volume, while negative numbers mean a decrease in volume.

dB combines linearly, unlike amplitudes which have to multiply together.  -6db means that the volume has been cut in half, and -12db means that it has been cut in half again (so is 1/4 as loud) and -18db means that it has been cut in half yet again (now 1/8 as loud).   Doing the same with amplitude, 0.5 means that the volume is cut in half, and then you multiply that by 0.5 to get 0.25 to make it 1/4 as loud, and multiply again to get 0.125 which is 1/8 as loud.

A fun byproduct of this is that using dB you can never describe zero (silence) exactly.  People will usually adopt a convention of saying that below -60dB is silence, or below -96dB is silence.  This has a nice side benefit that you can make the cutoff point of "assumed silence" be above the level that floating point denormals are (very small numbers that need special processing and are slower to work with than regular floating point numbers), so that in effect you can use this to remove denormals from your processing, which can boost the performance of your code.

<h2>Conversion Functions</h2>

To convert from amplitude to dB, the formula is:
[code language="cpp"]dB = 20 * log10(amplitude)[/code]

To convert from dB to amplitude, the formula is:
[code language="cpp"]amplitude = 10^(db/20)[/code]

Note that when converting audio samples to dB, you want to take the absolute value of the audio sample, since sign doesn't matter for loudness.  -1 and +1 have the same loudness (0dB).

Here's some c++ code which does those two operations:
[code language="cpp"]
inline float AmplitudeTodB(float amplitude)
{
  return 20.0f * log10(amplitude);
}

inline float dBToAmplitude(float dB)
{
  return pow(10.0f, db/20.0f);
}
[/code]

<h2>Conversion Table</h2>

Here are some dB values and corresponding amplitude values to help you better understand how dB and amplitude are related.

<b>Decreasing Volume:</b>
<table>
<tr><td><b>dB</b></td><td><b>Amplitude</b></td></tr>
<tr><td>-1</td><td>0.891</td></tr>
<tr><td>-3</td><td>0.708</td></tr>
<tr><td>-6</td><td>0.501</td></tr>
<tr><td>-12</td><td>0.251</td></tr>
<tr><td>-18</td><td>0.126</td></tr>
<tr><td>-20</td><td>0.1</td></tr>
<tr><td>-40</td><td>0.01</td></tr>
<tr><td>-60</td><td>0.001</td></tr>
<tr><td>-96</td><td>0.00002</td></tr>
</table>

<b>Increasing Volume:</b>
<table>
<tr><td><b>dB</b></td><td><b>Amplitude</b></td></tr>
<tr><td>1</td><td>1.122</td></tr>
<tr><td>3</td><td>1.413</td></tr>
<tr><td>6</td><td>1.995</td></tr>
<tr><td>12</td><td>3.981</td></tr>
<tr><td>18</td><td>7.943</td></tr>
<tr><td>20</td><td>10</td></tr>
<tr><td>40</td><td>100</td></tr>
<tr><td>60</td><td>1000</td></tr>
<tr><td>96</td><td>63095.734</td></tr>
</table>

<h2>Next Up</h2>

I'm just about finished doing the research for a fourier synthesis post to show how to use the inverse fourier transform to turn frequency information into audio samples.  Look for that in the next couple days!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2268</wp:post_id>
		<wp:post_date><![CDATA[2015-04-14 11:20:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-14 19:20:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[decibels-db-and-amplitude]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495460085;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2285;}i:1;a:1:{s:2:"id";i:31;}i:2;a:1:{s:2:"id";i:4555;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Frequency Domain Audio Synthesis - With IFFT and Oscillators</title>
		<link>http://blog.demofox.org/2015/04/19/frequency-domain-audio-synthesis-with-ifft-and-oscillators/</link>
		<pubDate>Mon, 20 Apr 2015 05:03:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2285</guid>
		<description></description>
		<content:encoded><![CDATA[One way to look at sounds is to think about what frequencies they contain, at which strengths (amplitudes), and how those amplitudes change over time.

For instance, if you remember the details of the post about how to synthesis a drum sound (<a href="http://blog.demofox.org/2015/03/14/diy-synth-basic-drum/" target="_blank">DIY Synth: Basic Drum</a>), a drum has low frequencies, but also, the frequencies involved get lower over the duration, which gives it that distinctive sound.

Being able to analyze the frequency components of a sound you want to mimic, and then being able to generate audio samples based on a description of frequency components over time is a powerful tool in audio synthesis.

This post will talk about exactly that, using both oscillators as well as the inverse fast Fourier transform (IFFT).

We've already gone over the basics of using oscillators to create sounds in a previous post so we'll start with IFFT.  For a refresher on those basics of additive synthesis check out this link: <a href="http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/" target="_blank">DIY Synth 3: Sampling, Mixing, and Band Limited Wave Forms</a>

All sample sound files were generated with the sample code at the end of this post.  The sample code is a single, standalone c++ file which only includes standard headers and doesn't rely on any libraries.  You should be able to compile it and start using the techniques from this post right away!

<h2>What is the IFFT?</h2>

Audio samples are considered samples in the "time domain".  If you instead describe sound based on what frequencies they contain, what amplitudes they are at, and what phase (angle offset) the sinusoid wave starts at, what you have is samples in the "frequency domain".

The process for converting time domain to frequency domain is called the "Fourier Transform".  If you want to go the opposite way, and convert frequency domain into time domain, you use the "Inverse Fourier Transform".

These transforms come in two flavors: continuous and discrete.

The continuous Fourier transform and continuous inverse Fourier transform work with continuous functions.  That is, they will transform a function from time domain to frequency domain, or from frequency domain to time domain.

The discrete version of the fourier  transform - often refered to as DFT, short for "discrete fourier transform" - and inverse fourier transform work with data samples instead of functions.

Naively computing the DFT or IDFT is a very processor intensive operation.  Luckily for us, there is an algorithm called "Fast Fourier Transform" or FFT that can do it a lot faster, if you are ok with the constraints of the data it gives you.  It also has an inverse, IFFT.

IFFT is what we are going to be focusing on in this post, to convert frequency domain samples into time domain samples.  Also, like i said above, we are also going to be using oscillators to achieve the same result!

<h2>Using the IFFT</h2>

Here's something interesting... where time domain samples are made up of "real numbers" (like 0.5 or -0.9 or even 1.5 etc), frequency domain samples are made up of complex numbers, which are made up of a real number and an imaginary number.  An example of a complex number is "3.1 + 2i" where i is the square root of negative 1.

If you look at the complex number as a 2d vector, the magnitude of the vector is the amplitude of the frequency, and the angle of the vector is the phase (angle) that the sinusoid (cosine wave) starts at for that frequency component.

You can use these formulas to create the complex number values:

[code language="cpp"]
real = amplitude * cos(phase);
imaginary = amplitude * sin(phase);
[/code]

Or you could use std::polar if you want to (:

BTW thinking of complex numbers as 2d vectors might be a little weird but there's precedent. Check this out: <a href="http://blog.demofox.org/2014/12/27/using-imaginary-numbers-to-rotate-2d-vectors/" target="_blank">Using Imaginary Numbers To Rotate 2D Vectors</a>

When using the IFFT, the number of frequency domain samples you decide to use is what decides the frequencies of those samples.  After preforming the IFFT, you will also have the same number of time domain samples as frequency domain samples you started with.  That might sound like it's going to be complex, but don't worry, it's actually pretty simple!

Let's say that you have 4 buckets of frequency domain data, that means you will end up with 4 time domain audio samples after running IFFT.  Here are the frequencies that each frequency domain sample equates to:

<ul>
<li>index 0: 0hz.  This is the data for the 0hz frequency, or DC... yes, as in DC current!  DC represents a constant added to all samples in the time domain.  If you put a value in only this bucket and run the IFFT, all samples will be the same constant value.</li>
<li>index 1: 1hz.  If you put a value in only this bucket and run the IFFT, you'll end up with one full cosine wave (0-360 degrees aka 0-2pi radians), across the 4 time domain samples.  4 samples isn't very many samples for a cosine wave though so it will look pretty blocky, but those 4 samples will be correct!</li>
<li>index 2: 2hz.  If you put a value in only this bucket and run the IFFT, you'll end up with two full cosine waves (0-720 degrees aka 0-4pi radians) across the 4 time domain samples.</li>
<li>index 3: -1hz.</li>
</ul>

You might wonder what that negative frequency at index 3 is all about.  A negative frequency probably seems weird, but it's really the same as it's positive frequency, just with a negative phase.  It's basically a cosine wave that decreases in angle as it goes, instead of increasing.

Why is it there though?  Well, there's something called the Nyquist–Shannon Sampling Theorem which states that if you have N time domain audio samples, the maximum frequency you can store in those audio samples is N/2 cycles.  That frequency is called the Nyquist frequency and any frequency above that results in "aliasing".  If you've ever seen a car tire spin in reverse on tv when the care was moving forward, that is an example of the same aliasing I'm talking about.  In manifests in audio as high pitches and in general terrible sounding sound.  Before I knew how to avoid aliasing in audio, my now wife used to complain that my sounds hurt her ears.  Once i removed the aliasing, she says it no longer hurts her ears.  Go back and check the early DIY synth posts for audible examples of aliasing (;

Since we have 4 frequency domain samples, which translates to 4 time domain audio samples, we can only store up to 2hz, and anything above that will alias and seem to go backwards.  That's why index 3 is -1hz instead of 3hz.

So basically, if you have N frequency domain samples (or bins as they are sometimes called), the first bin, at index 0, is always 0hz / DC.   Then from 1 up to N/2, the frequency of the bin is equal to it's index.  Then, at N/2+1 up to N-1, there are negative frequencies (frequencies beyond the Nyquist frequency) reflected in that upper half of the bins, starting at N/2 and counting back up to -1.

In many common situations (including the ones we are facing in this post), you don't need to worry about the negative frequency bins.  You can leave them as zero if doing IFFT work, or ignore their values if doing FFT then IFFT work.

Ready for one last piece of complexity?  I hope so... it's the last before moving onto the next step! :P

Sounds are obviously much longer than 4 samples, so a 4 bin (sample) IFFT just isn't going to cut it.  1000 bins would to be too few, and Frankly, at 44,100 samples per second (a common audio sampling rate), 88,200 bins is only 2 seconds of audio which isn't very much at all!  Even with the "Fast Fourier Transform" (FFT), that is a huge number of bins and would take a long time to calculate.

One way to deal with this would be to have fewer bins than audio samples that you want to end up with, use IFFT to generate the audio samples, and then use interpolation to get the audio samples between the ones generated by IFFT.  We aren't going to be doing that today but if you like the option, you can most certainly use it!

One of the ways we are going to deal with using a small number of bins to generate a lot of noise is that we are going to use the IFFT to generate wave forms, and then we are going to repeat those wave forms several times.

Another one of the things we are going to do is use IFFT bins to generate a small number of samples, and then modify the IFFT bins to generate the next number of samples, repeating until we have all of our audio samples generated.

In both cases, the frequency buckets need some conversion from the IFFT bin frequencies to the frequencies as they will actually appear in the final audio samples.

To calculate the true frequency of an FFT bin, you can use this formula:

[code language="cpp"]frequency = binNumber * sampleRate / numBins;[/code]

Where binNumber is the IFFT bin number, sampleRate is how many samples the resulting sound has per second, and numBins is the total number of IFFT bins.

<h2>Simple Wave Forms</h2>

The simplest of the wave forms you can create is a cosine wave.  You just put the complex number "1 + 0i" into one of the IFFT bins, that represents an amplitude of 1.0 and a starting phase of 0 degrees.  After you do that and run ifft, you'll get a nice looking cosine wave:

<img src="https://demofox2.files.wordpress.com/2015/04/cosine.png"/>

Note that the wave repeats multiple times.  This is because I repeat the IFFT data over and over.  If I didn't repeat the IFFT data, the number of cycles that would appear would depend completely on which IFFT bin I used.  If I used bin 1, it would have only one cycle.  If i used bin 2, it would have two cycles.

Also note that since the IFFT deals with INTEGER frequencies only, that means that the wave forms begin and end at the same phase (angle) and thus the same amplitude, which means that if you repeat them end to end, there will be no discontinuities or popping.  Pretty cool huh?

If you instead put in the complex number "0 - 1i" into one of the IFFT bins, that represents an amplitude of 1.0 and a starting phase of 270 degrees (or -90 degrees), which results in a sine wave:

<img src="https://demofox2.files.wordpress.com/2015/04/sine.png"/>

We don't have to stop there though.  Once again thinking back to the info in <a href="http://blog.demofox.org/2012/06/18/diy-synth-3-sampling-mixing-and-band-limited-wave-forms/" target="_blank">DIY Synth 3: Sampling, Mixing, and Band Limited Wave Forms</a>, the frequency components of a saw wave are described as:

<blockquote>
If you have a saw wave of frequency 100, that means it contains a sine wave of frequency 100 (1 * fundamental frequency), another of frequency 200 (2 * fundamental frequency), another of 300 (3 * fundamental frequency) and so on into infinity.

The amplitude (volume) of each sine wave (harmonic) is 1 over the harmonic number. So in our example, the sine wave at frequency 100 has an amplitude of 1 (1/1). The sine wave at frequency 200 has an amplitude of 0.5 (1/2), the sine wave at frequency 300 has an amplitude of 0.333 (1/3) and so on into infinity.

After that you’ll need to multiply your sample by 2 / PI to get back to a normalized amplitude.
</blockquote>

We can describe the same thing in IFFT frequency bins believe it or not!

Let's say that we have 50 bins and that we want a 5hz saw wave.  The first harmonic is 5hz and should be full amplitude, so we put an entry in bin 5 for amplitude 1.0 * 2/pi and phase -90 degrees (to make a sine wave instead of a cosine wave).

The next harmonic should be double the frequency, and 1/2 the amplitude, so in bin 10 (double the frequency of bin 5), we put an entry for amplitude 0.5 * 2/pi, phase -90 degrees.  Next should be triple the original frequency at 1/3 the amplitude, so at bin 15 we put amplitude 0.33 * 2/pi, phase -90 degrees.  Then, bin 20 gets amplitude 0.25 * 2/pi, -90 degrees phase.  Bin 25 is the Nyquist frequency so we should stop here, and leave the actual Nyquist frequency empty.

If you run the IFFT on that, you'll get a bandlimited saw wave!

<img src="https://demofox2.files.wordpress.com/2015/04/saw.png"/>

You can do the same for bandlimited triangle and square waves, and also you can use a random phase and amplitude for each bin to generate noise! The source code for this post generates those in fact (:

<h2>Phase Adjusted Wave Forms</h2>

While we are dealing in frequency space, I want to run something kind of gnarly by you.  Using the technique described above, you can add frequencies with specific amplitudes to make a band limited saw wave.  But, believe it or not, the starting phase of the frequencies don't have to be -90 degrees.  If you use a different phase, you'll get a resulting wave form that looks different but sounds the same.  Check these out, it's a trip!

<img src="https://demofox2.files.wordpress.com/2015/04/sawphase.png"/>

Here are the sound files pictured above, so you can hear that they really do all sound the same!
<a href="https://demofox2.files.wordpress.com/2015/04/saw_270.wav" target="_blank">270 degrees</a><br>
<a href="https://demofox2.files.wordpress.com/2015/04/saw_0.wav" target="_blank">0 degrees</a><br>
<a href="https://demofox2.files.wordpress.com/2015/04/saw_60.wav" target="_blank">60 degrees</a><br>
<a href="https://demofox2.files.wordpress.com/2015/04/saw_120.wav" target="_blank">120 degrees</a><br>
<a href="https://demofox2.files.wordpress.com/2015/04/saw_180.wav" target="_blank">180 degrees</a><br>

<h2>Bins Changing Over Time</h2>

If you are like me, when you think about designing sound in the frequency domain you think everything must be rainbows and glitter, and that you have no limitations and everything is wonderful.

Well, as happens so many times when the rubber hits the road, that isn't quite true.  Let's go through an example of using IFFT on some bins that change over time so I can show you a really big limitation with IFFT.

In our example, let's say that we have a single frequency in our IFFT data (so we are generating a single sinusoid wave) but that we want it's amplitude (volume) to change over time.  Let's say we want the amplitude of the wave to be controlled by another sinusoid, so that it smoothly goes up and down in amplitude over time.

We immediately hit two problems, but the first is more obvious if you listen:

<a href="https://demofox2.files.wordpress.com/2015/04/IFFTTest1.wav" target="_blank">IFFTTest1.wav</a>

Hear all that popping?  It's basically making a discontinuity at every IFFT window because we are changing the amplitude at the edge of each window.  We can't change it during the window (caveat: without some pretty advanced math i won't go into), so changing at the end of the window is our only option.  Check out this image to see the problem visually:

<img src="https://demofox2.files.wordpress.com/2015/04/IFFTTest1.png"/>

We can fix those discontinuities.  If we change the phase of the wave from cosine (0 degrees) to sine (270 degrees), we make it so that the edge of the window is always at amplitude 0 (sine(0) = 0, while cos(0) = 1!).  This means that when we change the amplitude of the wave, since it happens when the wave is at zero, there is no discontinuity, and so no more pops:

<img src="https://demofox2.files.wordpress.com/2015/04/IFFTTest2.png"/>

Let's have a listen:
<a href="https://demofox2.files.wordpress.com/2015/04/IFFTTest2.wav" target="_blank">IFFTTest2.wav</a>

WHAT?! There is still some periodic noise... it is tamed a little bit but not fixed.  The reason for this is that even though we are first order continuous we aren't 2nd order continuous (etc).  So, by having a jump in amplitude, even constraining it at zero crossings, we've essentially added some frequencies into our resulting sound wave that we didn't want to add, which we can hear in the results.  

So yeah... basically, if you want to change your IFFT bins over time, you are going to have some audio artifacts from doing that.  Boo hoo!

There are ways around this. One way involves complex math to add frequencies to your bins that make it APPEAR as if you are adjusting the amplitude of the wave smoothly over the duration of the window.  Another way involves doing things like overlapping the output of your IFFT windows and blending between them.  There are other ways too, including some IDFT algorithms which do allow you to alter the amplitude over time in a window, but are costlier to compute.

Anyways, you can also just generate the sound descibed in your IFFT bins with oscillators, literally adding together all the frequencies with the specified phase offsets to make the correct resulting time domain samples.  I've done just that to solve the popping problem as well as the issue where you can't have smooth volume adjustments because you can only change amplitude at the end of each window:

<a href="https://demofox2.files.wordpress.com/2015/04/IFFTTest3.wav" target="_blank">IFFTTest3.wav</a>

You can also see it in action:
<img src="https://demofox2.files.wordpress.com/2015/04/IFFTTest3.png"/>
 
Here's another failure case to check out:
<img src="https://demofox2.files.wordpress.com/2015/04/drumsifftosc.png"/>

<a href="https://demofox2.files.wordpress.com/2015/04/drums_ifft.wav" target="_blank">drums_ifft.wav</a> - made with ifft
<a href="https://demofox2.files.wordpress.com/2015/04/drums_osc.wav" target="_blank">drums_osc.wav</a> - made with oscillators

<h2>Convolution</h2>

If you read the post about convolution reverb (<a href="http://blog.demofox.org/2015/03/23/diy-synth-convolution-reverb-1d-discrete-convolution-of-audio-samples/" target="_blank">DIY Synth: Convolution Reverb & 1D Discrete Convolution of Audio Samples</a>), you'll recall that convolution is super slow, but that convolution in the time domain is equivelant to multiplication in the frequency domain.

We are in the frequency domain, so how about we try some convolution?!

Let's multiply the bins of a 1hz saw wave and a 1hz square wave and see what we get if we IFFT the result:

<img src="https://demofox2.files.wordpress.com/2015/04/ConvolutionIFFT.png"/>

That result is definitely not right.  First of all, the convolution is the same length as the inputs, when it should be length(a)+length(b)-1 samples.  Basically it should be twice as long as it is.

Secondly, that is not what the convolution looks like.  Doing convolution in the time domain of those samples looks like this:

<img src="https://demofox2.files.wordpress.com/2015/04/ConvolutionLin.png"/>

So what's the deal?  Well as it turns out, when you do multiplication in the frequency domain, you are really doing CIRCULAR convolution, which is a bit different than the convolution i described before which is LINEAR convolution.  Circular convolution is essentially used for cyclical data (or functions) and basically makes it so that if you try to read "out of bounds", it will wrap around and use an in bounds value instead.  It's kind of like "texture wrap" if you are a graphics person.

Normally how this is gotten around, when doing convolution in the frequency domain, is to put a bunch of zeros on the end of your time domain samples before you bring them into the frequency domain.  You pad them with those zeros to be the correct size (length(a)+length(b)-1, or longer is fine too) and then when you end up doing the "circular convolution", there are no "out of bounds" values looked at, and you end up with the linear convolution output, even though you technically did circular convolution.

Unfortunately, since we are STARTING in frequency domain and have no time domain samples to bad before going into frequency domain, we are basically out of luck.  I've tried asking DSP experts and nobody I talked to knows of a way to start in frequency domain and zero pad the time domain so that you could do a linear convolution - at least nobody knows of GENERAL case solution.

Those same experts though say that circular convolution isn't a bad thing, and is many times exactly what you want to do, or is a fine stand in for linear convolution.  I'm sure we'll explore that in a future post (:

In the example code, i also have the code generate the circular convolution in the time domain so that you can confirm that circular convolution is really what is going on in the above image, when working in frequency domain.

<h2>Strike Two IFFT!</h2>

Luckily using IDFT to generate sounds (sometimes called Fourier Synthesis) isn't across the board a losing strategy.  If you want a static, repeating wave form, it can be really nice.  Or, for dynamic waave forms, if you change your amplitude only a very small amount across window samples, it won't noticeably degrade the quality of your audio.

The neat thing about IFFT is that it's a "constant time process".  When using oscillators, the more frequencies you want to appear, the more computationally expensive it gets.  With IFFT, it doesn't matter if all the bins are full or empty or somewhere inbetween, it has the same computational complexity.

Here's a non trivial sound generated both with IFFT and Oscillators.  The difference is pretty negligible right?  

<a href="https://demofox2.files.wordpress.com/2015/04/alien_ifft.wav" target="_blank">alien_ifft.wav</a> - made with IFFT
<a href="https://demofox2.files.wordpress.com/2015/04/alien_ifft.wav" target="_blank">alien_osci.wav</a> - made with oscillators

<h2>Sample Code</h2>

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS
  
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <cmath>
#include <vector>
#include <chrono>
#include <ctime>
#include <complex>
#include <valarray>
#include <functional>
#include <algorithm>
#include <vector>
  
#define _USE_MATH_DEFINES
#include <math.h>
  
//=====================================================================================
// SNumeric - uses phantom types to enforce type safety
//=====================================================================================
template <typename T, typename PHANTOM_TYPE>
struct SNumeric
{
public:
    explicit SNumeric(const T &value) : m_value(value) { }
    SNumeric() : m_value() { }
    inline T& Value() { return m_value; }
    inline const T& Value() const { return m_value; }
  
    typedef SNumeric<T, PHANTOM_TYPE> TType;
    typedef T TInnerType;
  
    // Math Operations
    TType operator+ (const TType &b) const
    {
        return TType(this->Value() + b.Value());
    }
  
    TType operator- (const TType &b) const
    {
        return TType(this->Value() - b.Value());
    }
  
    TType operator* (const TType &b) const
    {
        return TType(this->Value() * b.Value());
    }
  
    TType operator/ (const TType &b) const
    {
        return TType(this->Value() / b.Value());
    }

    TType operator% (const TType &b) const
    {
        return TType(this->Value() % b.Value());
    }
  
    TType& operator+= (const TType &b)
    {
        Value() += b.Value();
        return *this;
    }
  
    TType& operator-= (const TType &b)
    {
        Value() -= b.Value();
        return *this;
    }
  
    TType& operator*= (const TType &b)
    {
        Value() *= b.Value();
        return *this;
    }
  
    TType& operator/= (const TType &b)
    {
        Value() /= b.Value();
        return *this;
    }
  
    TType& operator++ ()
    {
        Value()++;
        return *this;
    }
  
    TType& operator-- ()
    {
        Value()--;
        return *this;
    }
  
    // Extended Math Operations
    template <typename T>
    T Divide(const TType &b)
    {
        return ((T)this->Value()) / ((T)b.Value());
    }
  
    // Logic Operations
    bool operator< (const TType &b) const {
        return this->Value() < b.Value();
    }
    bool operator<= (const TType &b) const {
        return this->Value() <= b.Value();
    }
    bool operator> (const TType &b) const {
        return this->Value() > b.Value();
    }
    bool operator>= (const TType &b) const {
        return this->Value() >= b.Value();
    }
    bool operator== (const TType &b) const {
        return this->Value() == b.Value();
    }
    bool operator!= (const TType &b) const {
        return this->Value() != b.Value();
    }
  
private:
    T m_value;
};
  
//=====================================================================================
// Typedefs
//=====================================================================================
  
typedef uint8_t uint8;
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef int16_t int16;
typedef int32_t int32;
  
// type safe types!
typedef SNumeric<float, struct S__Frequency>        TFrequency;
typedef SNumeric<size_t, struct S_FFTBin>           TFFTBin;
typedef SNumeric<uint32, struct S__TimeMs>          TTimeMs;
typedef SNumeric<float, struct S__TimeS>            TTimeS;
typedef SNumeric<uint32, struct S__Samples>         TSamples;
typedef SNumeric<float, struct S__FractSamples>     TFractionalSamples;
typedef SNumeric<float, struct S__Decibels>         TDecibels;
typedef SNumeric<float, struct S__Amplitude>        TAmplitude;
typedef SNumeric<float, struct S__Radians>          TRadians;
typedef SNumeric<float, struct S__Degrees>          TDegrees;
  
//=====================================================================================
// Constants
//=====================================================================================

static const float c_pi = (float)M_PI;
static const float c_twoPi = c_pi * 2.0f;

//=====================================================================================
// Structs
//=====================================================================================
  
struct SSoundSettings
{
    TSamples        m_sampleRate;
    TSamples        m_sampleCount;
};
  
//=====================================================================================
// Conversion Functions
//=====================================================================================

inline TFFTBin FrequencyToFFTBin(TFrequency frequency, TFFTBin numBins, TSamples sampleRate)
{
    // bin = frequency * numBin / sampleRate
    return TFFTBin((uint32)(frequency.Value() * (float)numBins.Value() / (float)sampleRate.Value()));
}

inline TFrequency FFTBinToFrequency(TFFTBin bin, TFFTBin numBins, TSamples sampleRate)
{
    // frequency = bin * SampleRate / numBins
    return TFrequency((float)bin.Value() * (float)sampleRate.Value() / (float)numBins.Value());
}

inline TRadians DegreesToRadians(TDegrees degrees)
{
    return TRadians(degrees.Value() * c_pi / 180.0f);
}

inline TDegrees RadiansToDegrees(TRadians radians)
{
    return TDegrees(radians.Value() * 180.0f / c_pi);
}

inline TDecibels AmplitudeToDB(TAmplitude volume)
{
    return TDecibels(20.0f * log10(volume.Value()));
}
  
inline TAmplitude DBToAmplitude(TDecibels dB)
{
    return TAmplitude(pow(10.0f, dB.Value() / 20.0f));
}

TTimeS SamplesToSeconds(const SSoundSettings &s, TSamples samples)
{
    return TTimeS(samples.Divide<float>(s.m_sampleRate));
}
  
TSamples SecondsToSamples(const SSoundSettings &s, TTimeS seconds)
{
    return TSamples((int)(seconds.Value() * (float)s.m_sampleRate.Value()));
}
  
TSamples MilliSecondsToSamples(const SSoundSettings &s, TTimeMs milliseconds)
{
    return SecondsToSamples(s, TTimeS((float)milliseconds.Value() / 1000.0f));
}
  
TTimeMs SecondsToMilliseconds(TTimeS seconds)
{
    return TTimeMs((uint32)(seconds.Value() * 1000.0f));
}
  
TFrequency Frequency(float octave, float note)
{
    /* frequency = 440×(2^(n/12))
    Notes:
    0  = A
    1  = A#
    2  = B
    3  = C
    4  = C#
    5  = D
    6  = D#
    7  = E
    8  = F
    9  = F#
    10 = G
    11 = G# */
    return TFrequency((float)(440 * pow(2.0, ((double)((octave - 4) * 12 + note)) / 12.0)));
}
  
template <typename T>
T AmplitudeToAudioSample(const TAmplitude& in)
{
    const T c_min = std::numeric_limits<T>::min();
    const T c_max = std::numeric_limits<T>::max();
    const float c_minFloat = (float)c_min;
    const float c_maxFloat = (float)c_max;
  
    float ret = in.Value() * c_maxFloat;
  
    if (ret < c_minFloat)
        return c_min;
  
    if (ret > c_maxFloat)
        return c_max;
  
    return (T)ret;
}

//=====================================================================================
// Audio Utils
//=====================================================================================

void EnvelopeSamples(std::vector<TAmplitude>& samples, TSamples envelopeTimeFrontBack)
{
    const TSamples c_frontEnvelopeEnd(envelopeTimeFrontBack);
    const TSamples c_backEnvelopeStart(samples.size() - envelopeTimeFrontBack.Value());

    for (TSamples index(0), numSamples(samples.size()); index < numSamples; ++index)
    {
        // calculate envelope
        TAmplitude envelope(1.0f);
        if (index < c_frontEnvelopeEnd)
            envelope = TAmplitude(index.Divide<float>(envelopeTimeFrontBack));
        else if (index > c_backEnvelopeStart)
            envelope = TAmplitude(1.0f) - TAmplitude((index - c_backEnvelopeStart).Divide<float>(envelopeTimeFrontBack));

        // apply envelope
        samples[index.Value()] *= envelope;
    }
}
  
void NormalizeSamples(std::vector<TAmplitude>& samples, TAmplitude maxAmplitude)
{
    // nothing to do if no samples
    if (samples.size() == 0)
        return;
  
    // 1) find the largest absolute value in the samples.
    TAmplitude largestAbsVal = TAmplitude(abs(samples.front().Value()));
    std::for_each(samples.begin() + 1, samples.end(), [&largestAbsVal](const TAmplitude &a)
        {
            TAmplitude absVal = TAmplitude(abs(a.Value()));
            if (absVal > largestAbsVal)
                largestAbsVal = absVal;
        }
    );
  
    // 2) adjust largestAbsVal so that when we divide all samples, none will be bigger than maxAmplitude
    // if the value we are going to divide by is <= 0, bail out
    largestAbsVal /= maxAmplitude;
    if (largestAbsVal <= TAmplitude(0.0f))
        return;
  
    // 3) divide all numbers by the largest absolute value seen so all samples are [-maxAmplitude,+maxAmplitude]
    for (TSamples index(0), numSamples(samples.size()); index < numSamples; ++index)
        samples[index.Value()] = samples[index.Value()] / largestAbsVal;
}

//=====================================================================================
// Wave File Writing Code
//=====================================================================================
struct SMinimalWaveFileHeader
{
    //the main chunk
    unsigned char m_szChunkID[4];      //0
    uint32        m_nChunkSize;        //4
    unsigned char m_szFormat[4];       //8
  
    //sub chunk 1 "fmt "
    unsigned char m_szSubChunk1ID[4];  //12
    uint32        m_nSubChunk1Size;    //16
    uint16        m_nAudioFormat;      //18
    uint16        m_nNumChannels;      //20
    uint32        m_nSampleRate;       //24
    uint32        m_nByteRate;         //28
    uint16        m_nBlockAlign;       //30
    uint16        m_nBitsPerSample;    //32
  
    //sub chunk 2 "data"
    unsigned char m_szSubChunk2ID[4];  //36
    uint32        m_nSubChunk2Size;    //40
  
    //then comes the data!
};
  
//this writes a wave file
template <typename T>
bool WriteWaveFile(const char *fileName, const std::vector<TAmplitude> &samples, const SSoundSettings &sound)
{
    //open the file if we can
    FILE *file = fopen(fileName, "w+b");
    if (!file)
        return false;
  
    //calculate bits per sample and the data size
    const int32 bitsPerSample = sizeof(T) * 8;
    const int dataSize = samples.size() * sizeof(T);
  
    SMinimalWaveFileHeader waveHeader;
  
    //fill out the main chunk
    memcpy(waveHeader.m_szChunkID, "RIFF", 4);
    waveHeader.m_nChunkSize = dataSize + 36;
    memcpy(waveHeader.m_szFormat, "WAVE", 4);
  
    //fill out sub chunk 1 "fmt "
    memcpy(waveHeader.m_szSubChunk1ID, "fmt ", 4);
    waveHeader.m_nSubChunk1Size = 16;
    waveHeader.m_nAudioFormat = 1;
    waveHeader.m_nNumChannels = 1;
    waveHeader.m_nSampleRate = sound.m_sampleRate.Value();
    waveHeader.m_nByteRate = sound.m_sampleRate.Value() * 1 * bitsPerSample / 8;
    waveHeader.m_nBlockAlign = 1 * bitsPerSample / 8;
    waveHeader.m_nBitsPerSample = bitsPerSample;
  
    //fill out sub chunk 2 "data"
    memcpy(waveHeader.m_szSubChunk2ID, "data", 4);
    waveHeader.m_nSubChunk2Size = dataSize;
  
    //write the header
    fwrite(&waveHeader, sizeof(SMinimalWaveFileHeader), 1, file);
  
    //write the wave data itself, converting it from float to the type specified
    std::vector<T> outSamples;
    outSamples.resize(samples.size());
    for (size_t index = 0; index < samples.size(); ++index)
        outSamples[index] = AmplitudeToAudioSample<T>(samples[index]);
    fwrite(&outSamples[0], dataSize, 1, file);
  
    //close the file and return success
    fclose(file);
    return true;
}

//=====================================================================================
// FFT / IFFT
//=====================================================================================

// Thanks RosettaCode.org!
// http://rosettacode.org/wiki/Fast_Fourier_transform#C.2B.2B
// In production you'd probably want a non recursive algorithm, but this works fine for us

// for use with FFT and IFFT
typedef std::complex<float> Complex;
typedef std::valarray<Complex> CArray;

// Cooley–Tukey FFT (in-place)
void fft(CArray& x)
{
    const size_t N = x.size();
    if (N <= 1) return;
 
    // divide
    CArray even = x[std::slice(0, N/2, 2)];
    CArray  odd = x[std::slice(1, N/2, 2)];
 
    // conquer
    fft(even);
    fft(odd);
 
    // combine
    for (size_t k = 0; k < N/2; ++k)
    {
        Complex t = std::polar(1.0f, -2 * c_pi * k / N) * odd[k];
        x[k    ] = even[k] + t;
        x[k+N/2] = even[k] - t;
    }
}
 
// inverse fft (in-place)
void ifft(CArray& x)
{
    // conjugate the complex numbers
    x = x.apply(std::conj);
 
    // forward fft
    fft( x );
 
    // conjugate the complex numbers again
    x = x.apply(std::conj);
 
    // scale the numbers
    x /= (float)x.size();
}

//=====================================================================================
// Wave forms
//=====================================================================================

void SineWave(CArray &frequencies, TFFTBin bin, TRadians startingPhase)
{
    // set up the single harmonic
    frequencies[bin.Value()] = std::polar(1.0f, startingPhase.Value());
}

void SawWave(CArray &frequencies, TFFTBin bin, TRadians startingPhase)
{
    // set up each harmonic
    const float volumeAdjustment = 2.0f / c_pi;
    const size_t bucketWalk = bin.Value();
    for (size_t harmonic = 1, bucket = bin.Value(); bucket < frequencies.size() / 2; ++harmonic, bucket += bucketWalk)
        frequencies[bucket] = std::polar(volumeAdjustment / (float)harmonic, startingPhase.Value());
}

void SquareWave(CArray &frequencies, TFFTBin bin, TRadians startingPhase)
{
    // set up each harmonic
    const float volumeAdjustment = 4.0f / c_pi;
    const size_t bucketWalk = bin.Value() * 2;
    for (size_t harmonic = 1, bucket = bin.Value(); bucket < frequencies.size() / 2; harmonic += 2, bucket += bucketWalk)
        frequencies[bucket] = std::polar(volumeAdjustment / (float)harmonic, startingPhase.Value());
}

void TriangleWave(CArray &frequencies, TFFTBin bin, TRadians startingPhase)
{
    // set up each harmonic
    const float volumeAdjustment = 8.0f / (c_pi*c_pi);
    const size_t bucketWalk = bin.Value() * 2;
    for (size_t harmonic = 1, bucket = bin.Value(); bucket < frequencies.size() / 2; harmonic += 2, bucket += bucketWalk, startingPhase *= TRadians(-1.0f))
        frequencies[bucket] = std::polar(volumeAdjustment / ((float)harmonic*(float)harmonic), startingPhase.Value());
}

void NoiseWave(CArray &frequencies, TFFTBin bin, TRadians startingPhase)
{
    // give a random amplitude and phase to each frequency
    for (size_t bucket = 0; bucket < frequencies.size() / 2; ++bucket)
    {
        float amplitude = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
        float phase = 2.0f * c_pi * static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
        frequencies[bucket] = std::polar(amplitude, phase);
    }
}

//=====================================================================================
// Tests
//=====================================================================================

template <typename W>
void ConsantBins(
    const W &waveForm,
    TFrequency &frequency,
    bool repeat,
    const char *fileName,
    bool normalize,
    TAmplitude multiplier,
    TRadians startingPhase = DegreesToRadians(TDegrees(270.0f))
)
{
    const TFFTBin c_numBins(4096);

    //our desired sound parameters
    SSoundSettings sound;
    sound.m_sampleRate = TSamples(44100);
    sound.m_sampleCount = MilliSecondsToSamples(sound, TTimeMs(500));

    // allocate space for the output file and initialize it
    std::vector<TAmplitude> samples;
    samples.resize(sound.m_sampleCount.Value());
    std::fill(samples.begin(), samples.end(), TAmplitude(0.0f));

    // make test data
    CArray data(c_numBins.Value());
    waveForm(data, FrequencyToFFTBin(frequency, c_numBins, sound.m_sampleRate), startingPhase);

    // inverse fft - convert from frequency domain (frequencies) to time domain (samples)
    // need to scale up amplitude before fft
    data *= (float)data.size();
    ifft(data);

    // convert to samples
    if (repeat)
    {
        //repeat results in the output buffer
        size_t dataSize = data.size();
        for (size_t i = 0; i < samples.size(); ++i)
            samples[i] = TAmplitude((float)data[i%dataSize].real());
    }
    else
    {
        //put results in the output buffer once.  Useful for debugging / visualization
        for (size_t i = 0; i < samples.size() && i < data.size(); ++i)
            samples[i] = TAmplitude((float)data[i].real());
    }

    // normalize our samples if we should
    if (normalize)
        NormalizeSamples(samples, DBToAmplitude(TDecibels(-3.0f)));

    // apply the multiplier passed in
    std::for_each(samples.begin(), samples.end(), [&](TAmplitude& amplitude) {
        amplitude *= multiplier;
    });

    // write the wave file
    WriteWaveFile<int16_t>(fileName, samples, sound);
}

void Convolve_Circular(const std::vector<TAmplitude>& a, const std::vector<TAmplitude>& b, std::vector<TAmplitude>& result)
{
    // NOTE: Written for readability, not efficiency
    TSamples ASize(a.size());
    TSamples BSize(b.size());

    // NOTE: the circular convolution result doesn't have to be the size of a, i just chose this size to match the ifft
    // circular convolution output.
    result.resize(ASize.Value());
    std::fill(result.begin(), result.end(), TAmplitude(0.0f));

    for (TSamples outputSampleIndex(0), numOutputSamples(ASize); outputSampleIndex < numOutputSamples; ++outputSampleIndex)
    {
        TAmplitude &outputSample = result[outputSampleIndex.Value()];
        for (TSamples sampleIndex(0), numSamples(ASize); sampleIndex < numSamples; ++sampleIndex)
        {
            TSamples BIndex = (outputSampleIndex + ASize - sampleIndex) % ASize;
            if (BIndex < BSize)
            {
                const TAmplitude &ASample = a[sampleIndex.Value()];
                const TAmplitude &BSample = b[BIndex.Value()];
                outputSample += BSample * ASample;
            }
        }
    }
}

void Convolve_Linear(const std::vector<TAmplitude>& a, const std::vector<TAmplitude>& b, std::vector<TAmplitude>& result)
{
    // NOTE: Written for readability, not efficiency
    TSamples ASize(a.size());
    TSamples BSize(b.size());

    result.resize(ASize.Value() + BSize.Value() - 1);
    std::fill(result.begin(), result.end(), TAmplitude(0.0f));

    for (TSamples outputSampleIndex(0), numOutputSamples(result.size()); outputSampleIndex < numOutputSamples; ++outputSampleIndex)
    {
        TAmplitude &outputSample = result[outputSampleIndex.Value()];
        for (TSamples sampleIndex(0), numSamples(ASize); sampleIndex < numSamples; ++sampleIndex)
        {
            if (outputSampleIndex >= sampleIndex)
            {
                TSamples BIndex = outputSampleIndex - sampleIndex;
                if (BIndex < BSize)
                {
                    const TAmplitude &ASample = a[sampleIndex.Value()];
                    const TAmplitude &BSample = b[BIndex.Value()];
                    outputSample += BSample * ASample;
                }
            }
        }
    }
}


template <typename W1, typename W2>
void DoConvolution(const W1 &waveForm1, const W2 &waveForm2)
{
    const TFFTBin c_numBins(4096);

    //our desired sound parameters
    SSoundSettings sound;
    sound.m_sampleRate = TSamples(44100);
    sound.m_sampleCount = TSamples(c_numBins.Value());

    // make the frequency data for wave form 1
    CArray data1(c_numBins.Value());
    waveForm1(data1, TFFTBin(1), DegreesToRadians(TDegrees(270.0f)));

    // make the frequency data for wave form 2
    CArray data2(c_numBins.Value());
    waveForm2(data2, TFFTBin(1), DegreesToRadians(TDegrees(270.0f)));

    // do circular convolution in time domain by doing multiplication in the frequency domain
    CArray data3(c_numBins.Value());
    data3 = data1 * data2;

    // write out the first convolution input (in time domain samples)
    std::vector<TAmplitude> samples1;
    samples1.resize(sound.m_sampleCount.Value());
    std::fill(samples1.begin(), samples1.end(), TAmplitude(0.0f));
    {
        data1 *= (float)data1.size();
        ifft(data1);

        // convert to samples
        for (size_t i = 0; i < samples1.size() && i < data1.size(); ++i)
            samples1[i] = TAmplitude((float)data1[i].real());

        // write the wave file
        WriteWaveFile<int16_t>("_convolution_A.wav", samples1, sound);
    }

    // write out the second convolution input (in time domain samples)
    std::vector<TAmplitude> samples2;
    samples2.resize(sound.m_sampleCount.Value());
    std::fill(samples2.begin(), samples2.end(), TAmplitude(0.0f));
    {
        data2 *= (float)data2.size();
        ifft(data2);

        // convert to samples
        for (size_t i = 0; i < samples2.size() && i < data2.size(); ++i)
            samples2[i] = TAmplitude((float)data2[i].real());

        // write the wave file
        WriteWaveFile<int16_t>("_convolution_B.wav", samples2, sound);
    }

    // write the result of the convolution (in time domain samples)
    {
        data3 *= (float)data3.size();
        ifft(data3);

        // convert to samples
        std::vector<TAmplitude> samples3;
        samples3.resize(sound.m_sampleCount.Value());
        for (size_t i = 0; i < samples3.size() && i < data3.size(); ++i)
            samples3[i] = TAmplitude((float)data3[i].real());

        // write the wave file
        NormalizeSamples(samples3, TAmplitude(1.0f));
        WriteWaveFile<int16_t>("_convolution_out_ifft.wav", samples3, sound);
    }

    // do linear convolution in the time domain and write out the wave file
    {
        std::vector<TAmplitude> samples4;
        Convolve_Linear(samples1, samples2, samples4);
        NormalizeSamples(samples4, TAmplitude(1.0f));
        WriteWaveFile<int16_t>("_convolution_out_lin.wav", samples4, sound);
    }

    // do circular convolution in time domain and write out the wave file
    {
        std::vector<TAmplitude> samples4;
        Convolve_Circular(samples1, samples2, samples4);
        NormalizeSamples(samples4, TAmplitude(1.0f));
        WriteWaveFile<int16_t>("_convolution_out_cir.wav", samples4, sound);
    }
}

//=====================================================================================
// Frequency Over Time Track Structs
//=====================================================================================

struct SBinTrack
{
    SBinTrack() { }

    SBinTrack(
        TFFTBin bin,
        std::function<TAmplitude(TTimeS, TTimeS)> amplitudeFunction,
        TRadians phase = DegreesToRadians(TDegrees(270.0f))
    )
        : m_bin(bin)
        , m_amplitudeFunction(amplitudeFunction)
        , m_phase(phase) {}

    TFFTBin                                     m_bin;
    std::function<TAmplitude(TTimeS, TTimeS)>   m_amplitudeFunction;
    TRadians                                    m_phase;
};

//=====================================================================================
// Frequency Amplitude Over Time Test
//=====================================================================================

void TracksToSamples_IFFT_Window(const std::vector<SBinTrack> &tracks, CArray &windowData, TTimeS time, TTimeS totalTime)
{
    // clear out the window data
    windowData = Complex(0.0f, 0.0f);

    // gather the bin data
    std::for_each(tracks.begin(), tracks.end(), [&](const SBinTrack &track) {
        windowData[track.m_bin.Value()] = std::polar(track.m_amplitudeFunction(time, totalTime).Value(), track.m_phase.Value());
    });

    // convert it to time samples
    windowData *= (float)windowData.size();
    ifft(windowData);
}

void TracksToSamples_IFFT(const std::vector<SBinTrack> &tracks, std::vector<TAmplitude> &samples, TTimeS totalTime, TFFTBin numBins)
{
    // convert the tracks to samples, one window of numBins at a time
    CArray windowData(numBins.Value());
    for (TSamples startSample(0), numSamples(samples.size()); startSample < numSamples; startSample += TSamples(numBins.Value()))
    {
        // Convert the tracks that we can into time samples using ifft
        float percent = startSample.Divide<float>(numSamples);
        TTimeS time(totalTime.Value() * percent);
        TracksToSamples_IFFT_Window(tracks, windowData, time, totalTime);

        // convert window data to samples
        const size_t numWindowSamples = std::min(numBins.Value(), (numSamples - startSample).Value());
        for (size_t i = 0; i < numWindowSamples; ++i)
            samples[startSample.Value() + i] = TAmplitude((float)windowData[i].real());
    }
}

void TracksToSamples_Oscilators(const std::vector<SBinTrack> &tracks, std::vector<TAmplitude> &samples, TTimeS totalTime, TFFTBin numBins)
{
    // Render each time/amplitude track in each frequency bin to actual cosine samples
    float samplesPerSecond = (float)samples.size() / totalTime.Value();
    float ratio = samplesPerSecond / (float)numBins.Value();
    for (size_t i = 0, c = samples.size(); i < c; ++i)
    {
        float percent = (float)i / (float)c;
        TTimeS time(totalTime.Value() * percent);
        samples[i].Value() = 0.0f;
        std::for_each(tracks.begin(), tracks.end(),
            [&](const SBinTrack &track)
            {
                TAmplitude amplitude = track.m_amplitudeFunction(time, totalTime);
                samples[i] += TAmplitude(cos(time.Value()*c_twoPi*ratio*(float)track.m_bin.Value() + track.m_phase.Value())) * amplitude;
            }
        );
    }
}

struct SFadePair
{
    TTimeS m_time;
    TAmplitude m_amplitude;
};

std::function<TAmplitude(TTimeS, TTimeS)> MakeFadeFunction(std::initializer_list<SFadePair> fadePairs)
{
    // if no faid pairs, 0 amplitude always
    if (fadePairs.size() == 0)
    {
        return [](TTimeS time, TTimeS totalTime) -> TAmplitude
        {
            return TAmplitude(0.0f);
        };
    }

    // otherwise, use the fade info to make an amplitude over time track
    // NOTE: assume amplitude 0 at time 0 and totalTime
    return [fadePairs](TTimeS time, TTimeS totalTime) -> TAmplitude
    {
        TTimeS lastFadeTime(0.0f);
        TAmplitude lastFadeAmplitude(0.0f);

        for (size_t i = 0; i < fadePairs.size(); ++i)
        {
            if (time < fadePairs.begin()[i].m_time)
            {
                TAmplitude percent(((time - lastFadeTime) / (fadePairs.begin()[i].m_time - lastFadeTime)).Value());
                return percent * (fadePairs.begin()[i].m_amplitude - lastFadeAmplitude) + lastFadeAmplitude;
            }
            lastFadeTime = fadePairs.begin()[i].m_time;
            lastFadeAmplitude = fadePairs.begin()[i].m_amplitude;
        }
        if (time < totalTime)
        {
            TAmplitude percent(((time - lastFadeTime) / (totalTime - lastFadeTime)).Value());
            return percent * (TAmplitude(0.0f) - lastFadeAmplitude) + lastFadeAmplitude;
        }

        return TAmplitude(0.0f);
    };
}

void DynamicBins(TFFTBin numBins, const std::vector<SBinTrack>& tracks, const char *fileNameFFT, const char * fileNameOsc)
{
    //our desired sound parameters
    SSoundSettings sound;
    sound.m_sampleRate = TSamples(44100);
    sound.m_sampleCount = MilliSecondsToSamples(sound, TTimeMs(2000));

    // allocate space for the output file and initialize it
    std::vector<TAmplitude> samples;
    samples.resize(sound.m_sampleCount.Value());
    std::fill(samples.begin(), samples.end(), TAmplitude(0.0f));

    const TTimeS totalTime = SamplesToSeconds(sound, sound.m_sampleCount);

    // convert our frequency over time descriptions to time domain samples using IFFT
    if (fileNameFFT)
    {
        TracksToSamples_IFFT(tracks, samples, totalTime, numBins);
        NormalizeSamples(samples, DBToAmplitude(TDecibels(-3.0f)));
        EnvelopeSamples(samples, MilliSecondsToSamples(sound, TTimeMs(50)));
        WriteWaveFile<int16_t>(fileNameFFT, samples, sound);
    }

    // convert our frequency over time descriptions to time domain samples using Oscillators
    // and additive synthesis
    if (fileNameOsc)
    {
        TracksToSamples_Oscilators(tracks, samples, totalTime, numBins);
        NormalizeSamples(samples, DBToAmplitude(TDecibels(-3.0f)));
        EnvelopeSamples(samples, MilliSecondsToSamples(sound, TTimeMs(50)));
        WriteWaveFile<int16_t>(fileNameOsc, samples, sound);
    }
}

//=====================================================================================
// Main
//=====================================================================================
int main(int argc, char **argv)
{
     // make some basic wave forms with IFFT
    ConsantBins(NoiseWave, Frequency(3, 8), true, "_noise.wav", true, TAmplitude(1.0f));
    ConsantBins(SquareWave, Frequency(3, 8), true, "_square.wav", true, TAmplitude(1.0f));
    ConsantBins(TriangleWave, Frequency(3, 8), true, "_triangle.wav", true, TAmplitude(1.0f));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw.wav", true, TAmplitude(1.0f));
    ConsantBins(SineWave, Frequency(3, 8), true, "_cosine.wav", true, TAmplitude(1.0f), TRadians(0.0f));
    ConsantBins(SineWave, Frequency(3, 8), true, "_sine.wav", true, TAmplitude(1.0f));

    // show saw wave phase shifted.  Looks different but sounds the same!
    // You can do the same with square, saw, triangle (and other more complex wave forms)
    // We take the saw waves down 12 db though because some variations have large peaks so would clip otherwise.
    // we don't normalize because we want you to hear them all at the same loudness to tell that they really do sound the same.
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_0.wav"  , false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(0.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_15.wav" , false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(15.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_30.wav" , false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(30.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_45.wav" , false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(45.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_60.wav" , false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(60.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_75.wav" , false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(75.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_90.wav" , false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(90.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_105.wav", false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(105.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_120.wav", false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(120.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_135.wav", false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(135.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_150.wav", false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(150.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_165.wav", false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(165.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_180.wav", false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(180.0f)));
    ConsantBins(SawWave, Frequency(3, 8), true, "_saw_270.wav", false, DBToAmplitude(TDecibels(-12.0f)), DegreesToRadians(TDegrees(270.0f)));

    // show how IFFT can have popping at window edges
    {
        std::vector<SBinTrack> tracks;
        tracks.emplace_back(SBinTrack(TFFTBin(10), [](TTimeS time, TTimeS totalTime) -> TAmplitude
        {
            return TAmplitude(cos(time.Value()*c_twoPi*4.0f) * 0.5f + 0.5f);
        }));

        // make a version that starts at a phase of 0 degrees and has popping at the
        // edges of each IFFT window
        tracks.front().m_phase = TRadians(0.0f);
        DynamicBins(TFFTBin(1024), tracks, "_IFFTTest1.wav", nullptr);

        // make a version that starts at a phase of 270 degrees and is smooth at the
        // edges of each IFFT window but can only change amplitude at the edges of
        // each window.
        tracks.front().m_phase = TRadians(DegreesToRadians(TDegrees(270.0f)));
        DynamicBins(TFFTBin(1024), tracks, "_IFFTTest2.wav", nullptr);

        // make a version with oscillators and additive synthesis which has no
        // popping and can also change amplitude anywhere in the wave form.
        DynamicBins(TFFTBin(1024), tracks, nullptr, "_IFFTTest3.wav");
    }

    // make an alien sound using both IFFT and oscillators (additive synthesis)
    {
        std::vector<SBinTrack> tracks;
        tracks.emplace_back(SBinTrack(TFFTBin(1), MakeFadeFunction({ { TTimeS(0.5f), TAmplitude(1.0f) }, { TTimeS(1.0f), TAmplitude(0.5f) } })));
        tracks.emplace_back(SBinTrack(TFFTBin(2), MakeFadeFunction({ { TTimeS(1.0f), TAmplitude(1.0f) } })));
        tracks.emplace_back(SBinTrack(TFFTBin(3), MakeFadeFunction({ { TTimeS(1.5f), TAmplitude(1.0f) } })));
        tracks.emplace_back(SBinTrack(TFFTBin(5), MakeFadeFunction({ { TTimeS(1.25f), TAmplitude(1.0f) } })));
        tracks.emplace_back(SBinTrack(TFFTBin(10), [](TTimeS time, TTimeS totalTime) -> TAmplitude
        {
            float value = (cos(time.Value()*c_twoPi*4.0f) * 0.5f + 0.5f) * 0.5f;
            if (time < totalTime * TTimeS(0.5f))
                value *= (time / (totalTime*TTimeS(0.5f))).Value();
            else
                value *= 1.0f - ((time - totalTime*TTimeS(0.5f)) / (totalTime*TTimeS(0.5f))).Value();
            return TAmplitude(value);
        }));
        DynamicBins(TFFTBin(1024), tracks, "_alien_ifft.wav", "_alien_osc.wav");
    }

    // Make some drum beats
    {
        // frequency = bin * SampleRate / numBins
        // frequency = bin * 44100 / 4096
        // frequency ~= bin * 10.75
        // up to 22050hz at bin 2048

        TFFTBin c_numBins(4096);
        TSamples c_sampleRate(44100);

        std::vector<SBinTrack> tracks;

        const TTimeS timeMultiplier(1.1f);

        // base drum: 100-200hz every half second
        {
            const TFFTBin start(FrequencyToFFTBin(TFrequency(100.0f), c_numBins, c_sampleRate));
            const TFFTBin end(FrequencyToFFTBin(TFrequency(200.0f), c_numBins, c_sampleRate));
            const TFFTBin step(5);

            auto beat = [&](TTimeS time, TTimeS totalTime)->TAmplitude
            {
                time *= timeMultiplier;
                time = TTimeS(std::fmod(time.Value(), 0.5f));
                const TTimeS attack(0.01f);
                const TTimeS release(TTimeS(0.2f) - attack);
                const TTimeS totalBeatTime(attack + release);

                TAmplitude ret;
                if (time < attack)
                    ret = TAmplitude(time.Divide<float>(attack));
                else if (time < totalBeatTime)
                    ret = TAmplitude(1.0f) - TAmplitude((time - attack).Divide<float>(release));
                else
                    ret = TAmplitude(0.0f);
                return ret * TAmplitude(10.0f);
            };
            for (TFFTBin i = start; i <= end; i += step)
                tracks.emplace_back(SBinTrack(i, beat));
        }

        // chirp: 750-1000hz every second + 0.25s
        {
            const TFFTBin start(FrequencyToFFTBin(TFrequency(750.0f), c_numBins, c_sampleRate));
            const TFFTBin end(FrequencyToFFTBin(TFrequency(1000.0f), c_numBins, c_sampleRate));
            const TFFTBin step(5);

            auto beat = [&](TTimeS time, TTimeS totalTime)->TAmplitude
            {
                time *= timeMultiplier;
                time = TTimeS(std::fmod(time.Value() + 0.25f, 1.0f));
                const TTimeS attack(0.025f);
                const TTimeS release(TTimeS(0.075f) - attack);
                const TTimeS totalBeatTime(attack + release);

                TAmplitude ret;
                if (time < attack)
                    ret = TAmplitude(time.Divide<float>(attack));
                else if (time < totalBeatTime)
                    ret = TAmplitude(1.0f) - TAmplitude((time - attack).Divide<float>(release));
                else
                    ret = TAmplitude(0.0f);
                return ret;
            };
            for (TFFTBin i = start; i <= end; i += step)
                tracks.emplace_back(SBinTrack(i, beat));
        }

        // a higher sound yet: every second + 0.75s
        {
            const TFFTBin start(FrequencyToFFTBin(TFrequency(2000.0f), c_numBins, c_sampleRate));
            const TFFTBin end(FrequencyToFFTBin(TFrequency(3000.0f), c_numBins, c_sampleRate));
            const TFFTBin step(10);

            auto beat = [&](TTimeS time, TTimeS totalTime)->TAmplitude
            {
                time *= timeMultiplier;
                time = TTimeS(std::fmod(time.Value() + 0.75f, 1.0f));
                const TTimeS attack(0.025f);
                const TTimeS release(TTimeS(0.075f) - attack);
                const TTimeS totalBeatTime(attack + release);

                TAmplitude ret;
                if (time < attack)
                    ret = TAmplitude(time.Divide<float>(attack));
                else if (time < totalBeatTime)
                    ret = TAmplitude(1.0f) - TAmplitude((time - attack).Divide<float>(release));
                else
                    ret = TAmplitude(0.0f);
                return ret;
            };
            for (TFFTBin i = start; i <= end; i += step)
                tracks.emplace_back(SBinTrack(i, beat));
        }

        // render the result with both ifft and oscillators
        DynamicBins(c_numBins, tracks, "_drums_ifft.wav", "_drums_osc.wav");
    }

    // do our convolution tests
    DoConvolution(SawWave, SquareWave);

    return 0;
}
[/code]

<h2>Links</h2>

So, frequency domain audio synthesis with IFFT is kind of a mixed bag.  It can be good so long as you are ok with it's limitations, but if you aren't, it's better to stick to oscillators and do additive synthesis.

Working in the frequency domain in general is pretty cool though.  If you bust out a spectrograph and analyze the frequency of a type of sound, once you understand the frequency domain makeup of that sound, you can go back and synthesize it yourself using either oscillators or IFFT.  You can go down this route to make your own synth guitar sound, or trumpet, or you could try to mimic sound effects.  The world is your oyster!  Well, almost... things like "voice synthesis" are actually pretty complex, and this method for matching musical instruments will only get you so far.  More to come in future posts!

Here are some links to dive a bit deeper into this stuff:

<ul>
<li><a href="http://rosettacode.org/wiki/Fast_Fourier_transform#C.2B.2B" target="_blank">rosetta code: C++ fft & inverse fft</a></li>
<li><a href="http://stackoverflow.com/questions/4364823/how-do-i-obtain-the-frequencies-of-each-value-in-a-fft" target="_blank">Stack Overflow: Explaining frequency of each fft bucket</a></li>
<li><a href="http://www.theory.physics.ubc.ca/341-current/pluck/pluck.html" target="_blank">Shows analasys of guitar sound in frequency domain, and then re-produces it with additive synthesis</a></li>
<li><a href="http://en.wikipedia.org/wiki/Convolution" target="_blank">Wikipedia: linear convolution</a></li>
<li><a href="http://en.wikipedia.org/wiki/Circular_convolution" target="_blank">Wikipedia: circular convolution</a></li>
<li><a href="http://en.wikipedia.org/wiki/Fast_Fourier_transform" target="_blank">Wikipedia: FFT</a></li>
<li><a href="http://en.wikipedia.org/wiki/Negative_frequency" target="_blank">Wikipedia: Negative Frequency</a></li>
<li><a href="http://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem" target="_blank">Wikipedia: Nyquist - Shannon Sampling Theorem</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Short-time_Fourier_transform" target="_blank">Wikipediate: STFT - Short Time Fourier Transform</a></li>
<li><a href="http://photosounder.com/examples.php" target="_blank">Photosounder: using images as IFFT bucket data and playing back the result!</a></li>
<li><a href="http://www.dspguide.com/ch12/2.htm" target="_blank">How the FFT algorithm works</a></li>
</ul>

I think I might be burned out on audio for a while, my thoughts are turning towards graphics so look for some graphics posts soon :P]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2285</wp:post_id>
		<wp:post_date><![CDATA[2015-04-19 21:03:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-20 05:03:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[frequency-domain-audio-synthesis-with-ifft-and-oscillators]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw_270.wav
44144
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw_0.wav
44144
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw_60.wav
44144
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw_120.wav
44144
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/saw_180.wav
44144
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/IFFTTest1.wav
176444
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/IFFTTest2.wav
176444
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/IFFTTest3.wav
176444
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/drums_ifft.wav
176444
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/drums_osc.wav
176444
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2015/04/alien_ifft.wav
176444
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495702695;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:7;}i:1;a:1:{s:2:"id";i:31;}i:2;a:1:{s:2:"id";i:1940;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quincunx Antialiasing</title>
		<link>http://blog.demofox.org/2015/04/22/quincunx-antialiasing/</link>
		<pubDate>Wed, 22 Apr 2015 14:29:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2370</guid>
		<description></description>
		<content:encoded><![CDATA[If you are looking for a quick and easy antialiasing implementation, quincunx could be what you are looking for.

Quincunx is part of the family of anti aliasing called supersampling antialiasing (SSAA), which all work by taking multiple samples per pixel, each sample being offset by some amount, and then adding the samples back together with various weightings to get the final antialiased pixel color.

Quincunx antialiasing works by mixing five samples per pixel, in the pattern of the diagram below with the specified weights.  The real interesting and useful thing about it though is that the 4 corner samples are each re-used by 4 other pixels, which makes it so that even though you take five samples per pixel, you are in effect really only rendering TWO samples per pixel to get results similar to 5x supersampling antialiasing!

Basically, the performance cost is about the same as 2x SSAA, but gives you results similar to 4x-5x SSAA.

<img src="https://demofox2.files.wordpress.com/2016/06/quincunx.png"/>

Trivial Note: The word quincunx describes the position of those 5 dots, which is the same configuration you see for the number five on a six sided die.

Since the corners are a half pixel offset from the center pixel, the algorithm for doing quincunx sampling is as follows:
<ol>
<li>Render your scene to a full size buffer (same size as your output render target), offsetting your camera in screen space by (0.5,0.5) pixels</li>
<li>Next, render your scene to the usual render target as normal</li>
<li>Run a full screen pixel shader post effect on your normal "output render target". For each pixel:</li>
<ol>
<li>Multiply the pixel color channels by 0.5</li>
<li>Add in these four offsets from the current pixel location, in the "offset" buffer (the first one rendered), multiplying the color channels by 0.125:  (-1,-1), (-1,0), (0,-1), (0,0).</li>
</ol>
</ol>

That's all there is to it!  Click the image below to be taken to an animated shadertoy I made which does quincunx antialiasing in a WebGL pixel shader.  Shadertoy unfortunately doesn't let you render to texture, so i have to do all 5 samples per pixel, but you can see see the effect compared to no anti aliasing at all, and the results are pretty nice!

The left half of the image is quincunx antialiased while the right side is not antialiased at all.

<a href="https://www.shadertoy.com/view/4l2GWm" target="_blank"><img src="https://demofox2.files.wordpress.com/2015/04/quincunxst.png"/></a>

A few more creative supersampling AA algorithms coming next (:

<a href="https://www.shadertoy.com/view/4l2GWm" target="_blank">Shadertoy: Quincunx Anti Aliasing</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2370</wp:post_id>
		<wp:post_date><![CDATA[2015-04-22 06:29:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-22 14:29:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[quincunx-antialiasing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495648828;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2405;}i:1;a:1:{s:2:"id";i:2391;}i:2;a:1:{s:2:"id";i:1127;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4-Rook Antialiasing (RGSS)</title>
		<link>http://blog.demofox.org/2015/04/23/4-rook-antialiasing-rgss/</link>
		<pubDate>Thu, 23 Apr 2015 14:29:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2391</guid>
		<description></description>
		<content:encoded><![CDATA[The last post was about quincunx antialiasing which used 5 samples per pixel, but allowed you to share 4 of those samples with 4 other pixels each, making it so you only had to render 2 samples per pixel to get those 5 samples per pixel.

I also mentioned that shadertoy didn't allow you to render to texture so in my shadertoy demo, i had to actually just do 5 samples per pixel to be able to show you the quincunx effect.

If you ever find yourself in that sort of a situation where you can't (or don't want) to render your scene twice, 4-Rook Antialiasing may be more what you are looking for.

4-Rook anti aliasing takes 4 samples per pixel, and does so in the pattern below with the specified blend weights.  This pattern is also sometimes called rotated grid supersampling (RGSS) and is also a subset of "N-Rook" supersampling where your sample points within a pixel don't share a vertical or horizontal line with any other sample point.  The N-Rook sample patterns are good at breaking up horizontal or vertical aliasing.

<img src="https://demofox2.files.wordpress.com/2015/04/4rook.png"/>

Interestingly, 4-Rook AA looks less blurry than quincunx so is higher quality.  Intuitively, I'd have to say that makes sense, especially since it is more expensive to do (you render 4 samples per pixel instead of 2!), and also, while quincunx technically has 5 samples per pixel, and 4-Rook only has 4, those 4 samples are all NEW information used only once, while 4 of the samples in quincunx are "old news" and just the old information repeated again.

I think of it like this... the difference between a blur and real SSAA is that in a blur, you try to improve the image with no added information, while in SSAA you try to improve the image WITH added information.  Quincunx is on the spectrum between those two since it re-uses 4 samples (minimal "new information"), while 4-rook's samples are all new information.

Note that you could implement this anti aliasing by rendering your scene 4 times, each time offset by one of the 4 offsets.  You would then do a final full screen pass to average each pixel across all 4 renders.  In other words: Output[x][y] = (A[X][Y] + B[X][Y] + C[X][Y] + D[X][Y])/4.

Click the image below to be taken to the shadertoy demo of 4-rook anti aliasing.

<a href="https://www.shadertoy.com/view/llj3Dw" target="_blank"><img src="https://demofox2.files.wordpress.com/2015/04/4rookst.png"/></a>

Here is the quincunx image again for reference, note how it looks blurier in comparison to the 4-Rook image above (check out the red/blue rectangles to see that best), and that the spiral squares don't quite look as good (they look more aliased?) and that the background grid is ever so slightly darker than the 4-rook version above (or the aliased version of the grid in either picture)!

<img src="https://demofox2.files.wordpress.com/2015/04/quincunxst.png"/>

<a href="https://www.shadertoy.com/view/llj3Dw" target="_blank">Shadertoy: 4-Rook Antialiasing (RGSS)</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2391</wp:post_id>
		<wp:post_date><![CDATA[2015-04-23 06:29:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-23 14:29:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[4-rook-antialiasing-rgss]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495546895;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2405;}i:1;a:1:{s:2:"id";i:2370;}i:2;a:1:{s:2:"id";i:1127;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FlipQuad &amp; FlipTri Antialiasing</title>
		<link>http://blog.demofox.org/2015/04/23/flipquad-fliptri-antialiasing/</link>
		<pubDate>Fri, 24 Apr 2015 05:06:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2405</guid>
		<description></description>
		<content:encoded><![CDATA[Here are the last two SSAA algorithms/sampling patterns that I wanted to share - FlipQuad and FlipTri.

<h2>FlipQuad</h2>

The last post talked about 4-Rook antialiasing which took 4 samples per pixel to do antialiasing.

Before that we talked about quincunx which was able to get 5 samples per pixel, while only rendering 2 samples per pixel.  It was able to do that by sharing "corner samples" among 4 pixels.

If you combine the ideas from the last two posts, you could start with the 4-rook sampling points and push them to the edge of the pixel so that the edge samples can be shared between the pixels that share the edge.

If you do that though, you'll actually have two samples on each edge.  To solve this and keep the same number of sample points per pixel, you could flip every other pixel's sample points.

Ta-Da!  That is exactly what FlipQuad is.  Check out the sampling pattern below, which shows the samples for a 2x2 grid of pixels.  You'd just repeat this pattern for as many pixels as you had.

<img src="https://demofox2.files.wordpress.com/2015/04/FlipQuadSamples.png"/>

Here's an image that shows FlipQuad in action - anti aliased on the left, regular image on the right.  You can click on the image to see the shadertoy demo of it.

<a href="https://www.shadertoy.com/view/MtSGRG" target="_blank"><img src="https://demofox2.files.wordpress.com/2015/04/FlipQuadST.png"/></a>

It works pretty well, but it is pretty blurry, especially the textures!  Kind of makes sense because quincunx was blurry due to shared samples.  We have ONLY shared samples in this pattern, so it's understandable that it's kind of blurry.  There's less unique information per pixel than in the other SSAA techniques shown so far.

This essentially is 2 samples rendered per pixel to get 4x SSAA.

<a href="https://www.shadertoy.com/view/MtSGRG" target="_blank"/>ShaderToy: FlipQuad AntiAliasing</a>

<h2>FlipTri</h2>

Flipquad worked decently, but instead of using a quad, could we use a triangle?  Yes we can, check out the 2x2 pixel sampling pattern below:

<img src="https://demofox2.files.wordpress.com/2015/04/FlipTriSamples.png"/>

Here's an image that shows FlipTri in action - anti aliased on the left, regular image on the right.  You can click on the image to see the shadertoy demo of it.

<a href="https://www.shadertoy.com/view/MtB3RG" target="_blank"><img src="https://demofox2.files.wordpress.com/2015/04/FlipTriST.png"/></a>

This essentially is 1.25 samples rendered per pixel to get 3x SSAA!  It really doesn't look that different to my eyes than the flipquad method, but it uses quite a fewer number of samples!

<a href="https://www.shadertoy.com/view/MtB3RG" target="_blank"/>ShaderToy: FlipTri AntiAliasing</a>

<h2>Conclusion</h2>

So basically, there's a bunch of different ways to do SSAA style anti aliasing, even beyond the ones I showed, but in the end you are basically just taking more samples and/or sharing samples across multiple pixels to get a better resulting image.

SSAA is also a common technique in raytracing, where they will shoot multiple rays per pixel, and combine them together in this way, sometimes for things like movies, they will cast hundreds of rays per pixel!  You could also just render multiple times and do one of the methods we've talked about in the last couple post instead of explicitly shooting multiple rays per pixel.

At SIGGRAPH 2014, someone mentioned in the "advancements in realtime rendering" talk that they used the flipquad pattern along with temporal supersampling.  That made it so the 2 samples rendered per pixel was amortized across two frames and thus became one sample per pixel, which is pretty nifty.  I feel like you could extend that to flip tri's and perhaps render less than 1 sample per pixel each frame.

A big issue with implementing these in modern graphics situations is that it's difficult to render a sample once and share it across multiple pixels.  I have a way in mind involving rendering the scene a couple times with different sized buffers and offsets, but not sure yet if it's practical.  Temporal supersampling algorithms definitely seem like they could benefit from these exotic patterns more easily.

Up next I think I'm going to try and figure out MSAA, which has similar results as SSAA, but from the sound of things, performs a bit better.

<h2>Links</h2>
<a href="http://fileadmin.cs.lth.se/cs/Personal/Tomas_Akenine-Moller/pubs/flipquad_tr.pdf" target="_blank">FlipQuad Research Paper: FLIPQUAD: Low-Cost Multisampling
Rasterization</a><br><br>
<a href="http://fileadmin.cs.lth.se/cs/Personal/Tomas_Akenine-Moller/pubs/fliptri_tr.pdf" target="_blank">FlipTri Research Paper: An Extremely Inexpensive
Multisampling Scheme</a><br><br>
<a href="https://mediatech.aalto.fi/~samuli/publications/laine2006cgf_paper.pdf" target="_blank">A Weighted Error Metric and Optimization Method for
Antialiasing Patterns</a><br><br>
<a href="http://www.hpcg.purdue.edu/bbenes/classes/CGT511/lectures/CGT511-06-Aliasing.pdf" target="_blank">CGT 511
(Anti)aliasing</a><br><br>
<a href="http://bartwronski.com/2014/03/15/temporal-supersampling-and-antialiasing/" target="_blank">Bart Wronski: Temporal supersampling and antialiasing</a><br><br>
<a href="https://mediatech.aalto.fi/~samuli/publications/hasselgren2005cgf_paper.pdf" target="_blank">A Family of Inexpensive Sampling Schemes</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2405</wp:post_id>
		<wp:post_date><![CDATA[2015-04-23 21:06:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-24 05:06:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[flipquad-fliptri-antialiasing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495547838;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2391;}i:1;a:1:{s:2:"id";i:2370;}i:2;a:1:{s:2:"id";i:1127;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bilinear Filtering &amp; Bilinear Interpolation</title>
		<link>http://blog.demofox.org/2015/04/30/bilinear-filtering-bilinear-interpolation/</link>
		<pubDate>Fri, 01 May 2015 04:21:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2434</guid>
		<description></description>
		<content:encoded><![CDATA[Take a look at the picture below.  Can you calculate the values at points A,B and C?

<img src="https://demofox2.files.wordpress.com/2015/04/Square.png"/>

There's a technique for doing this called bilinear interpolation which extends the idea of linear interpolation into two dimensions.

To calculate bilinear interpolation, you just do linear interpolation on one axis, and then the other.

Check out these examples:

<b>Point A</b>
Point A has a coordinate of (0.2,0.8).  Let's start with the X axis.

Firstly, we'll do interpolation across the top of the square on the X axis.  That means we need to go 0.2 (20%) of the way from 7 to 0.  That 0.2 is our x axis coordinate.   To calculate that we do this:
7 + (0-7) * 0.2 = 5.6

Next, we'll do interpolation across the bottom of the square on the X axis.  So similar to above, we'll go 0.2 (20%) of the way from 3 to 5.  To calculate that we do this:
3 + (5-3) * 0.2 = 3.4

Now that we have interpolated across our X axis we need to interpolate across our Y axis.  We are now going to go 0.8 (80%) of the way from our bottom value (the value of Y = 0), to our top value (the value of Y = 1).  The bottom value is the bottom interpolation we did (3.4) and the top value is the top interpolation we did (5.6).

So, we need to go 0.8 (80%) of the way from 3.4 to 5.6.  To calculate that we do this:
3.4 + (5.6 - 3.4) * 0.8 = 5.16

So, the value at point A is 5.16.  The image below should help explain visually the process we went through.

<img src="https://demofox2.files.wordpress.com/2015/05/PointA.png"/>

<b>Point B</b>

Point B has a coordinates of (1.0,0.5).

Let's start with the X axis interpolation again (although you could easily start with Y first if you wanted to!  You'd end up with the same result).

Doing the X axis interpolation across the top, we need to go 1.0 (100%) of the way from 7 to 0.  I'm sure you can guess what the answer is but here it is calculated:
7 + (0-7) * 1.0 = 0

Similarly, let's do the X axis interpolation across the bottom.  We need to go 1.0 (100%) of the way from 3 to 5.
3 + (5-3) * 1.0 = 5

Next up comes the Y axis interpolation.  We need to go 0.5 (50%) of the way from 5 to 0.
5 + (0-5) * 0.5 = 2.5

There we go, the value at point B is 2.5.  That should make sense too by looking at the diagram.  It's basically 1d linear interpolation between 5 and 0, and is half way between them, so intuitively, the answer 2.5 should make sense.

<b>Point C</b>

Point C has a coordinate of (0.8,0.2).

Once again, let's do the X axis interpolation across the top of the box.  We need to go 0.8 (80%) of the way from 7 to 0.
7 + (0-7) * 0.8 = 1.4

Then, we need to do the x axis interpolation across the bottom of the box.  We need to go 0.8 (80%) of the way from 3 to 5.
3 + (5-3) * 0.8 = 4.6

Lastly, the y axis interpolation.  We need to go 0.2 (20%) from 4.6 to 1.4.
4.6 + (1.4-4.6) * 0.2 = 3.96

The value of point C is 3.96

<h2>Bilinear Filtering</h2>

While bilinear interpolation is useful if you have a grid of data that you want to interpolate values within (such as a height field that represents terrain?!), where this really shines in game development is in bilinear texture filtering.

Basically, when you have a texture coordinate that doesn't perfectly line up with the center of a pixel in the texture (because there's a remainder), it uses the fractional part of the coordinate within that pixel to do bilinear interpolation between the 4 pixels involved to come up with the final pixel color.  It does bilinear interpolation on each of the channels: Red, Green, Blue and Alpha.

The end result is pretty good!  Check out the image below to see it in action on a texture that we are zoomed in too far on.  The left side uses bilinear filtering, while the right side does not, and just shows you the nearest pixel.

<img src="https://demofox2.files.wordpress.com/2015/04/bilinear.png"/>

Consequently, bilinear texture filtering has to do 4 pixel reads to be able to interpolate between them, instead of a single pixel read like when doing nearest pixel sampling.  More pixel reads = more overhead, and not as cheap (computationally) to use.

<h2>Links</h2>

For some folks who are reading this, this info is pretty basic and you might be wondering why i bothered writing about it.  Look to the next post for something kind of bizarre regarding bilinear filtering.  This was needed as a stepping stone to the next thing I want to show you guys :P

<a href="http://en.wikipedia.org/wiki/Linear_interpolation" target="_blank">Wikipedia: Linear Interpolation</a><br><br>
<a href="http://en.wikipedia.org/wiki/Bilinear_interpolation" target="_blank">Wikipedia: Bilinear Interpolation</a><br><br>
<a href="http://en.wikipedia.org/wiki/Bilinear_filtering" target="_blank">Wikipedia: Bilinear Filtering</a>

<h2>The Dark Side of Bilinear Filtering</h2>

Check out these links for some deeper info about some shortcomings (and some workarounds) of hardware based bilinear sampling:
<a target="_blank" href="http://iquilezles.org/www/articles/hwinterpolation/hwinterpolation.htm">iq: hardware interpolation</a>
<a target="_blank" href="http://iquilezles.org/www/articles/texture/texture.htm">iq: improved texture interpolation</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2434</wp:post_id>
		<wp:post_date><![CDATA[2015-04-30 20:21:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-01 04:21:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bilinear-filtering-bilinear-interpolation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495719302;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5413;}i:1;a:1:{s:2:"id";i:2953;}i:2;a:1:{s:2:"id";i:5276;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>No Bad Code, Creeping Normality and Social Structure Code Organization</title>
		<link>http://blog.demofox.org/2015/05/24/no-bad-code-creeping-normality-and-social-structure-code-organization/</link>
		<pubDate>Sun, 24 May 2015 22:42:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2460</guid>
		<description></description>
		<content:encoded><![CDATA[In the last post I said that another post was coming regarding using bilinear texture sampling for something interesting.  Hopefully without sounding too pretentious, that interesting thing I wanted to write up has shown quite a bit of fruit, so I'm going to try to write it up and see about getting it put into <a href="http://jcgt.org/" target="_blank">The Journal of Computer Graphics Techniques</a>.  We'll see how that pans out, and I'll make sure and share once it's published (or if I can't get it published hehe) as well as a post on the process of trying to get something published, in case other people out there are interested in pursuing that sort of thing.

Today's post is a bit different than usual.  There are some interesting concepts that I've been exposed to that I think are worth sharing, and that I'm hoping you will also find interesting.

<h1>No Bad Code</h1>

One idea presented to me recently was the concept that there is no bad code.  The idea being that people make decisions in code based on the situations at the time, and that as situations change, code that once was totally reasonable, and most engineers would likely have made the same choices, no longer is seen as a good choice in the new sets of circumstances.

I'm going to be a bit cynical here and mention that I do believe there is bad code, and that it comes around due to bugs, as well as lack of knowledge, lack of experience, and lack of testing before deployment.  However, the idea of code that is now seen as bad, was once perfectly reasonable does make sense to me and is kind of interesting.

I know we've all hit code that we or others wrote that we despise, causes us grief, and gets in the way of us working what we ought to be working on.  This concept definitely does absolve SOME such code I've personally had to deal with. But, there is definitely plenty of code left that it doesn't.  In my personal examples, this mostly comes from shoddy third party middleware software, and also, just a lack of knowledge or experience on the part of the implementer.  I'm guilty of the second point, but I think we all are, and that is a sign we are learning and growing.

It's probably good to keep in mind that lousy code of the present may have been perfectly reasonable code of the past, and before deciding that code was lousy, or that a specific engineer is terrible, that you have to judge the code in the light that it was put in.

... Then refactor it.

<h1>Creeping Normality</h1>

Creeping normality is an interesting concept.  Basically, just like that old tale of a frog sitting in progressively hotter water til it boils (which by the way is debunked by <a href="http://www.snopes.com/critters/wild/frogboil.asp" target="_blank">snopes</a>), it's easy for individuals or companies to find themselves in situations that would NEVER be seen as ideal situations, but were arrived at by incremental mis-steps - or also just a changing landscape.

This relates to the last point a bit, because it can show how the needs of a piece of code can change over time, such that looking at it as a static snapshot in time, you might wonder why it's so complex and trying to do so many different things needlessly.

This can also happen to a company on a more global scale, and can explain some really odd, less than ideal behaviors a company might be doing, where you are pretty sure the people involved know better.

How do you fight creeping normality?  Good question... but when you are able to identify some oddness or problems that come up due to it, hopefully it's as early as possible, and hopefully the people with the power to make things right listen to you (:

<h1>Social Structure Code Organization</h1>

The last topic is kind of bizarre, but totally makes sense once you think about it.  The idea is that code will match the communication structure of the teams making the code.

This is Conway's law which says: "organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations".  Another good quote from the wikipedia page for <a href="http://en.wikipedia.org/wiki/Conway%27s_law" target="_blank">Conway's law</a> states that (paraphrased) "if you have four teams working on a compiler, you'll end up with a four pass compiler".

This can be seen a lot in situations where you have a game engineering team and an engine engineering team.  There will be a distinct line between the code bases, based on the responsibility of the teams.  If instead, you have some code where the engine and game team are the same, there will be no such line, and if you then try to split that team into being a game and engine team, it'll take some time to draw the line between responsibilities, separate the code along those lines, and possibly do something like get the code into separate projects and possibly code repositories, which all seems like a logical choice to do when you have separate teams.

I think this also relates back to the first point about "No Bad Code", because were someone to come into a team where the organization had recently changed, they are going to wonder why the code doesn't have nice abstracted API layers at the boundaries, like most folks would consider logical and good practice.  Perhaps too, this would be a case of creeping normality, or at least, if the project organization changed, it could be the result of a reaction AGAINST creeping normality.

In short, there are a lot of ways in which perfectly good code can go bad, and it's probably a good idea to think about that a bit before condemning code as inherently rotten.

HOWEVER, rotten code does exist.  I'd name some names, but it would probably be classified as slander, so i'll bite my tongue.  I'm sure you have plenty of examples of your own (;

Lastly, if you are responsible for crimes against code-manity in days past, either due to any of the reasons above, or because you didn't know things you know now, or even if you were just lazy or misguidedly purposefully malicious (?!), remember this:  You are not your mistakes!

OK, enough of that, next post will be on some cool programming technique, I promise :P]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2460</wp:post_id>
		<wp:post_date><![CDATA[2015-05-24 14:42:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-24 22:42:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[no-bad-code-creeping-normality-and-social-structure-code-organization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="gamedev-commentary"><![CDATA[Gamedev Commentary]]></category>
		<category domain="category" nicename="people-skills"><![CDATA[People Skills]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495547940;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5116;}i:1;a:1:{s:2:"id";i:5202;}i:2;a:1:{s:2:"id";i:3904;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Easy Binomial Expansion &amp; Bezier Curve Formulas</title>
		<link>http://blog.demofox.org/2015/05/25/easy-binomial-expansion-bezier-curve-formulas/</link>
		<pubDate>Tue, 26 May 2015 04:05:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2473</guid>
		<description></description>
		<content:encoded><![CDATA[In this post we are going to explore two things:
<ol>
<li>Learn how to easily be able to expand $latex (x+y)^N$ for <b>ANY</b> value $latex N$ using the binomial theorem (well, N has to be a positive integer...)</li>
<li>Use that for coming up with the equation for a Bezier curve of any degree (any number of control points)</li>
</ol>

<h2>Binomial Theorem</h2>

The binomial theorem is a way of easily expanding $latex (x+y)^N$.  As you probably know, if $latex N$ is 2, you can use FOIL (first, outer, inner, last).  If $latex N$ gets above 2, things start to get harrier though and more tedious.

Let's check out how the values look when $latex N$ is 1, 2 and 3:

<table>
<tr>
<td>$latex N$</td>
<td>$latex (x+y)^N$ Expanded</td>
</tr>
<tr>
<td>1</td>
<td>$latex x+y$</td>
</tr>
<tr>
<td>2</td>
<td>$latex x^2+2xy+y^2$</td>
</tr>
<tr>
<td>3</td>
<td>$latex x^3+3x^2y+3xy^2+y^3$</td>
</tr>
</table>

To help make the patterns more visible, let's make things a bit more explicit:

<table>
<tr>
<td>$latex N$</td>
<td>$latex (x+y)^N$ Expanded</td>
</tr>
<tr>
<td>1</td>
<td>$latex 1x^1y^0+1x^0y^1$</td>
</tr>
<tr>
<td>2</td>
<td>$latex 1x^2y^0+2x^1y^1+1x^0y^2$</td>
</tr>
<tr>
<td>3</td>
<td>$latex 1x^3y^0+3x^2y^1+3x^1y^2+1x^0y^3$</td>
</tr>
</table>

The easiest pattern to see is that there are N+1 terms.

The next pattern that might jump out at you looking at the above table, is that in the first term, y starts out at power 0, and the next term has a power of 1, and the power of y keeps increasing by 1 for each term left to right until we run out of terms.  Similarly, x starts out at a power of 0 on the last term, has a power of 1 on the second last term, and counts up going from right to left, until we run out of terms.

Those patterns explain how many terms there are and the powers of x and y for each term.  There is one piece left of the puzzle though, which is those constants that each term is multiplied by.

Those constants are called the "binomial coefficients" and they also appear as rows on pascal's triangle.  In short, each number in pascal's triangle is a sum of the numbers directly above it.  Below is an image to show what I'm talking about.  Check the links section at the end for more detailed info.

<img src="https://demofox2.files.wordpress.com/2015/05/pascal.png"/>

So if you notice, the 2nd row of pascal's triangle is "1,1".  Those are the constants multiplied by each term for the $latex N=1$ case.  The next row down is "1,2,1" which is the constants multiplied by each term for the $latex N=2$ case.  Lastly the next row down (fourth row) is "1,3,3,1" which is the constants multiplied by each term for the $latex N=3$ case.  Essentially, you just use the $latex N+1$th tow of pascals triangle to come up with the constants to multiply each term by.

There are algorithms for calculating the $latex N+1$th row of the pascal's triangle.  I have one such algorithm in the example code below, but also check the links section for more info on that.

TADA!  That is the binomial theorem.

<h2>Bezier Curve Equation Generalized (Again)</h2>

You may remember that I previously showed you a generalized way to get the equation for a bezier curve of any order in <a href="http://blog.demofox.org/2014/03/22/bezier-curves-part-2-and-bezier-surfaces/" target="_blank">Bezier Curves Part 2 (and Bezier Surfaces)</a>.

It wasn't too difficult, but it DID require you to manually expand $latex (x+y)^N$.  Now that we know how to do that more easily, thanks to the section above, let's revise how we come up with bezier curves of any order.

What you do is evaluate $latex P=(s+t)^N$, and then multiply each term by a unique control point (A,B,C,etc).  After you have your equation, you can optionally replace all $latex s$'s with $latex (1-t)$, or you can just remember that when you evaluate the equation, since the first form is less messy.

Boom, you are done, that's all!

Here's the quadratic (N=2) version to see the end result:
$latex P = As^2 + 2Bst + Ct^2$

<h2>Formalized Mathematical Description</h2>

The above makes a lot of sense and is easy to understand, wouldn't it be neat if math could describe it that way?

Well... it turns out it can, and does.  Here is the formal "explicit definition" of bezier curves:
$latex \\sum\\limits_{i=0}^n\\binom {n} {i}(1-t)^{n-i}t^iP_i$

If you remember from above, s is the same as (1-t) so you could also write it like this:
$latex \\sum\\limits_{i=0}^n\\binom {n} {i}s^{n-i}t^iP_i$

The $latex \\sum\\limits_{i=0}^n$ (Sigma, going from 0 to n) means that you are going to sum (add) together n+1 terms (it includes both 0 and n), using i as the loop variable in your summation.  It's basically a for loop, adding together each iteration of the for loop.  Everything that comes after is what happens during each iteration of the for loop that gets summed together.

The $latex \\binom {n} {i}$ part means to take the ith number from the (n+1)th row of Pascal's triangle.  More formally, this specifies to use specific binomial coefficients.

The next part $latex s^{n-i}t^i$ means that you multiply the binomial coefficient by s to the (n-i)th power, and t to the ith power.  This is the same as saying s starts at power n and counts down left to right, while t starts at 0 and counts up left to right.  This fits the pattern we saw above in binomial expansion.

Lastly comes $latex P_i$ which means to use the ith P.  So, P is basically an array with n+1 elements.  This array is the control points, so each P is a different control point.

So, to sum it all up, it's saying to make a for loop from 0 to n where you are going to add up the results of each for loop.  For each loop iteration, where i is the index variation of the loop, you are going to:
<ol>
<li>Start with the ith item from the (n+1)th row of pascals triangle</li>
<li>Multiply that by s^(n-i)t^i</li>
<li>Multiply that by a unique control point</li>
</ol>

There ya go, formalized math descriptions with crazy symbols can actually mean something useful.  Who would have thought?!

Here is the quadratic bezier curve again for you to look at (quadratic means n = 2), in a form that will help you when thinking about the steps above:
$latex P = 1s^2t^0A + 2s^1t^1B + 1s^0t^2C$

And when it's cleaned up, it looks more familiar:
$latex P = As^2 + 2Bst + Ct^2$

<h2>Example Code</h2>

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;vector&gt;

//=====================================================================================
void WaitForEnter ()
{
    printf(&quot;\nPress Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

//=====================================================================================
std::vector&lt;unsigned int&gt; PascalsTriangleRow(int row)
{
	std::vector&lt;unsigned int&gt; ret;
	ret.push_back(1);
    for (int i = 0; i &lt; row; ++i)
        ret.push_back(ret[i] * (row - i) / (i + 1));
	return ret;
}

//=====================================================================================
void main(void)
{
	printf(&quot;Expand (x+y)^N and give Bezier curve order N\n\nPlease enter N:\n&quot;);
	unsigned int N;
	// keeping it limited to a sane value. also protects against -1 being huge.
	// Also, so we don't run out of letters for control points!
	if (scanf(&quot;%u&quot;,&amp;N)==1 &amp;&amp; N &lt; 26)
	{
		auto row = PascalsTriangleRow(N);

		// binomial expansion
		printf(&quot;\nBinomial Expansion:\n&quot;);
		if (N == 0)
		{
			printf(&quot;1&quot;);
		}
		else
		{
			for (unsigned int i = 0, c = row.size(); i &lt; c; ++i)
			{
				if (i &gt; 0)
					printf(&quot; + &quot;);

				if (row[i] != 1)
					printf(&quot;%u&quot;, row[i]);

				unsigned int xPow = N - i;
				if (xPow &gt; 0)
				{
					printf(&quot;x&quot;);
					if (xPow &gt; 1)
						printf(&quot;^%i&quot;, xPow);
				}

				unsigned int yPow = i;
				if (yPow &gt; 0)
				{
					printf(&quot;y&quot;);
					if (yPow &gt; 1)
						printf(&quot;^%i&quot;, yPow);
				}
			}
		}

		// bezier curves
		printf(&quot;\n\nBezier Curve Order %u:\nP = &quot;, N);
		if (N == 0)
		{
			printf(&quot;A&quot;);
		}
		else
		{
			for (unsigned int i = 0, c = row.size(); i &lt; c; ++i)
			{
				if (i &gt; 0)
					printf(&quot; + &quot;);

				// control point name
				printf(&quot;%c*&quot;,'A'+i);

				if (row[i] != 1)
					printf(&quot;%u&quot;, row[i]);

				unsigned int sPow = N - i;
				if (sPow &gt; 0)
				{
					printf(&quot;s&quot;);
					if (sPow &gt; 1)
						printf(&quot;^%i&quot;, sPow);
				}

				unsigned int tPow = i;
				if (tPow &gt; 0)
				{
					printf(&quot;t&quot;);
					if (tPow &gt; 1)
						printf(&quot;^%i&quot;, tPow);
				}
			}
		}

		// bezier curves
		printf(&quot;\n\nOr:\nP = &quot;, N);
		if (N == 0)
		{
			printf(&quot;A&quot;);
		}
		else
		{
			for (unsigned int i = 0, c = row.size(); i &lt; c; ++i)
			{
				if (i &gt; 0)
					printf(&quot; + &quot;);

				// control point name
				printf(&quot;%c*&quot;,'A'+i);

				if (row[i] != 1)
					printf(&quot;%u&quot;, row[i]);

				unsigned int sPow = N - i;
				if (sPow &gt; 0)
				{
					printf(&quot;(1-t)&quot;);
					if (sPow &gt; 1)
						printf(&quot;^%i&quot;, sPow);
				}

				unsigned int tPow = i;
				if (tPow &gt; 0)
				{
					printf(&quot;t&quot;);
					if (tPow &gt; 1)
						printf(&quot;^%i&quot;, tPow);
				}
			}
		}

		printf(&quot;\n&quot;);
	}
	else
	{
		printf(&quot;Invalid value for N\n&quot;);
	}
	WaitForEnter();
}
[/code]

<h2>Example Output</h2>

Here are some runs of the program

<img src="https://demofox2.files.wordpress.com/2015/05/binomial1.png"/>
<img src="https://demofox2.files.wordpress.com/2015/05/binomial2.png"/>
<img src="https://demofox2.files.wordpress.com/2015/05/binomial3.png"/>
<img src="https://demofox2.files.wordpress.com/2015/05/binomial5.png"/>
<img src="https://demofox2.files.wordpress.com/2015/05/binomial10.png"/>

<h2>Links</h2>

Note that even though we talked about binomials, and bezier curves, these techniques can be expanded to trinomials and bezier triangles - and beyond!  (hint: there is such thing as Pascal's pyramid!)

Here are some links to more info about some of the topics talked about above:
<a target="_blank" href="http://en.wikipedia.org/wiki/Binomial_theorem">Wikipedia: Binomial Theorem</a>
<a target="_blank" href="http://en.wikipedia.org/wiki/Pascal%27s_triangle">Wikipedia: Pascal's Triangle</a>
<a target="_blank" href="http://en.wikipedia.org/wiki/Binomial_coefficient">Wikipedia: Binomial Coefficient</a>
<a target="_blank" href="http://stackoverflow.com/questions/15580291/how-to-efficiently-calculate-a-row-in-pascals-triangle">StackOverflow: How to efficiently calculate a row in pascal's triangle?</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2473</wp:post_id>
		<wp:post_date><![CDATA[2015-05-25 20:05:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-05-26 04:05:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[easy-binomial-expansion-bezier-curve-formulas]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495633248;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2661;}i:1;a:1:{s:2:"id";i:5276;}i:2;a:1:{s:2:"id";i:2697;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Fifth Way to Calculate Sine Without Trig</title>
		<link>http://blog.demofox.org/2015/06/14/a-fifth-way-to-calculate-sine-without-trig/</link>
		<pubDate>Sun, 14 Jun 2015 18:05:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2547</guid>
		<description></description>
		<content:encoded><![CDATA[In a previous post, I showed <a href="http://blog.demofox.org/2014/11/04/four-ways-to-calculate-sine-without-trig/">Four Ways to Calculate Sine Without Trig</a>.  While reading up on rational bezier curves, I came across a 5th way!

A rational bezier curve post will be coming in the (hopefully near) future, so I won't go into too many details of that, but the important thing to know is that with a rational 2d quadratic bezier curve, you can EXACTLY represent any conic section, including circle arcs.  With a regular (integral) bezier curve, you can't.

You can in fact see that in action in an interactive HTML5 demo i made here: <a target="_blank" href="http://demofox.org/bezquadrational.html">Rational Quadratic Bezier Curve</a>.  Note that on my main page, i have links to other 1d/2d bezier/trig rational/integral interactive curve demos.  go check them out if you are interested in seeing more:  <a target="_blank" href="http://demofox.org/">http://demofox.og</a>.

After I made the 2d quadratic bezier demo I realized something... The x and y positions of that curve are calculated independently of each other, and if you wanted to draw a circle in a program, you'd calculate the x and y positions independently, using sine for the y axis value and cosine for the x axis value.  That means that if rational curves can - as people say - perfectly represent conic sections, that the two 1d curves that control each axis of that circle arc curve must be exact representations of sine and cosine, at least for the 90 degrees of that arc.

It turns out that this is true enough.  I am seeing some variation, but have an open question on math stack exchange to try to get to the bottom of that.

Let's do some math to come up with our curve based sine equation!

<h2>Math Derivation - Skip If You Want To</h2>

A rational Bezier equation is defined like this, which is basically just one Bezier curve divided by another:

$latex \\bf{B}(t) = \\frac{\\sum\\limits_{i=0}^n\\binom {n} {i}(1-t)^{n-i}t^iW_iP_i}{\\sum\\limits_{i=0}^n\\binom {n} {i}(1-t)^{n-i}t^iW_i}$

So, here is the equation for a rational quadratic bezier curve (n = 2):

$latex \\bf{B}(t) = \\frac{(A*W_1*(1-t)^2 + B*W_2*2t(1-t) + C*W_3*t^2)}{(W_1*(1-t)^2 + W_2*2t(1-t) + W_3*t^2)}$

$latex A,B,C$ are the control points and $latex W_1,W_2,W_3$ are the weightings associated with those control points.

For the first 90 degrees of sine, $latex A=0, B=1, C = 1, W_1 = 1, W_2 = cos(arcAngle/2), W_3 = 1$.

arcAngle is 90 degrees in our case, so $latex W_2=cos(45)$ or $latex W_2=1/sqrt(2)$ or $latex W_2=0.70710678118$.

If we plug those values in and simplify, and treat it as an explicit (1d) equation of $latex y = f(x)$, instead of $latex P=f(t)$, we come up with the equation in the next section.

<h2>Final Equation</h2>

$latex y = \\frac{(0.70710678118*2x(1-x) + x^2)}{((1-x)^2 + 0.70710678118*2x(1-x) + x^2)}$

or, so you can copy paste it:
y=(0.70710678118*2x(1-x) + x^2) / ((1-x)^2 + 0.70710678118*2x(1-x) + x^2)

That gives us the first quadrant (first 90 degrees) of sine.  To get the second quadrant, we just horizontally flip the first quadrant.  To get the third quadrant, we vertically flip the first quadrant.  To get the fourth quadrant, we vertically and horizontally flip the first quadrant.

<h2>Equation In Action</h2>

Here's a screenshot from a shadertoy where I implemented this.  red = true sine value, green = the value made with the curve, yellow = where they overlap and are equal.  Any place you see red or green peaking out means they aren't quite equal.  I sort of expected it to be exactly dead on correct, but like I said, I have an open math stack exchange question to find out why it isn't and will update this with my findings if they are relevant or interesting.  It still is pretty darn good though.

Also, this formula may not be the most efficient way to calculate sine without trig that I've shown, but it is interesting, and that's why I wanted to show it (:

You can see this in action at <a target="_blank" href="https://www.shadertoy.com/view/XtfSRH">Shadertoy: Sin Without Trig IV</a>
<img src="https://demofox2.files.wordpress.com/2015/06/rationalsine.png"/>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2547</wp:post_id>
		<wp:post_date><![CDATA[2015-06-14 10:05:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-14 18:05:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[a-fifth-way-to-calculate-sine-without-trig]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495624659;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5413;}i:1;a:1:{s:2:"id";i:1176;}i:2;a:1:{s:2:"id";i:886;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Adventures in Learning How to Publish a Research Paper Part 1</title>
		<link>http://blog.demofox.org/2015/06/18/adventures-in-learning-how-to-publish-a-research-paper/</link>
		<pubDate>Thu, 18 Jun 2015 20:11:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2596</guid>
		<description></description>
		<content:encoded><![CDATA[So I'm in the process of trying to get a research paper published and wanted to share what I've learned so far.  I'll continue to write more beyond this post as I continue the process.  Yes, I know my writing is terrible (grammar etc), please don't take this as a representation of the final product :P

The world of published papers, journals and academia (not necessarily lumped into the same group) is a bit different than I expected.  On the whole, I've found that it's both more approachable than I expected, and less approachable than I expected, in different, unexpected ways.

<h2>Motivation</h2>

A handful of times in my life, I've come up with things, naiively thought that I had invented it, and then later found out that it already existed and was a known thing.

I've reached the point in my career and personal growth where I'm coming up with things that seem like finally, they may not actually yet be already known and exist.

A braver person may quit their job and start a software company and try to make it happen and then possibly fail 9 out of 10 attempts (hey look, im about to cite something that refutes that statement <a target="_blank" href="http://www.washingtonpost.com/blogs/fact-checker/wp/2014/01/27/do-9-out-of-10-new-businesses-fail-as-rand-paul-claims/">Washington Post: Do nine out of 10 new businesses fail, as Rand Paul claims?</a>).

Maybe a more cunning, yet less adventurous person would try and patent their idea, then sell the patent, or wait for someone to intrude and then sue for damages.  I don't like the idea of patenting my ideas or techniques because honestly, I want other people to do things with them, I just want to be the first, and I want people to know I was the first (petty perhaps but at least I'm being honest haha).

I happen to be taking perhaps the least risky road, but seemingly most altruistic path (more info on that later), and am thinking about publishing my techniques in a research journal of an appropriate field.  This way, everyone is free to use it, and I can see what other people do with it - if anything.  I will be known as "the guy who came up with this", but probably won't ever actually get to use it in my actual job.  Boo-hoo! (we'll see I guess...)

You never know though... having published papers definitely ought to lead to better career advancement opportunities, and frankly, maybe some dream job will come along where I get to work on these topics I'm publishing about, and do some cutting edge research towards practical results, and push the envelope of what people think can be achieved with current technology.  That would be pretty cool!  If you are a game (or related) company that is heavy in research, and also practical results, working within the realm of real time raytracing, unorthodox graphics techniques, VR, and other cool tech, and interested in a dude such as myself, drop me a line.  I'm happy where I am but never hurts to chat and network (;

Anyhow, with a 1 year old baby, a house payment, and the like, I need the stability.  I can't go starting a new company so a research paper it is!

A quick note to my son Loki, if he reads this in the future, a nice little time capsul for him :P

Hello Loki!  I love you very much and I hope you are doing well.  Your initials are LZW which is a compression algorithm, and your namesake is the norse god of mischief.  Your mom is a super smart psychologist, so I hope we've taught you well and that you are now a Robot Psychologist AI developer who somehow furthered the works of chaos theory for AI and data compression.  Or... you can play guitar at starbucks.  Whatever makes you happy (:  Talk to you later - dad.  PS bring me a beer pls!!

<h2>Misconceptions Untangled</h2>

Once the decision of publishing in a journal was made... it was time to figure out what the heck academia / research papers were all about.  As a near high school drop out with no degree, all I really know is what my near PHd wife (educational psychology) and more educated friends and family have told me.

Here were some of my misconceptions when I started out:
<ul>
<li>Publishing a paper is not for the likes of a mere mortal like me</li>
<li>When a paper makes a statement backed by a reference to something else that says so, that is irrefutable evidence that it is fact.</li>
<li>Publishing papers is all about advancing science, and perhaps a bit about one's ego, but not at all about money</li>
<li>When you publish something, it has to be new.  In fact, it has to be so novel that it can't be like anything else written EVER.</li>
<li>Google ought to be great at helping me find other related work that i can reference!</li>
</ul>

Let's address these points.

<h3><u>Publishing a paper is not for the likes of a mere mortal like me</u></h3>

Yes it is.  Flat out, it is for anyone who wants to participate.

YOU have something to contribute to the world, but even moreso, writing and publishing a paper isn't as impressive as it may sound. That thought will be continued below.

<h3><u>When a paper makes a statement backed by a reference to something else that says so, that is irrefutable evidence that it is fact</u></h3>

Wrong!  At best, all that means is that someone else said the same thing.  At worst, it means that they misinterpreted the thing they cited.

In either case, it's through "peer review" that we hope mistakes and fallacies are found and corrected before publication, but it's all humans involved, and humans are imperfect machines.

This is likely basic info for anyone who went to college, but for the rest of us simple folk, this translates to:  Check your sources, and make sure you have multiple sources that are in agreement.  Also try to understand and address any source that disagrees.

<h3><u>Publishing papers is all about advancing science, and perhaps a bit about one's ego, but not at all about money</u></h3>

Sure it is about advancing science, and perhaps a bit about one's ego, but there is more to it.

Certain professions are bound as part of their employment contract to fulfill a quota of published papers.  Kind of surprising isn't it?

Also, it costs MONEY to submit papers to journals.  Like 5 grand or more.  Where does that money go?  You'd hope it would go to fund other research, but I'm not really sure where it goes in general.  It also varies from journal to journal.

Furthermore, it costs money to READ papers in journals.  Yes, seriously.  Someone did science for the benefit of the world, and wanted to put it out there for the world to see and make use of, and the journals charge quite a bit of money to anyone who wants to read these papers.  In practice, only academic institutions likely have access to these papers.

Are you an independent researcher with something to share with the world?  Too bad!  Good luck even finding related work to cite or improve upon jerk! ha ha ha!

Basically, academic journals are there for academic folk to publish in, get well known in academic circles, get better academic jobs and kinda stay in that realm.

Similarly, those folks aren't likely to show things at E3.

It's just a different world with it's own rules and people in that system have different goals than us folk developing video games or graphics applications.

<h3><u>When you publish something, it has to be new.  In fact, it has to be so novel that it can't be like anything else written EVER.</u></h3>

Funny enough, it turns out this doesn't have to be true at all.

If you are patenting an idea, you need to look like it came from NO WHERE and that it's the first of it's kind and is super amazing and standalone.

If you are publishing a paper, it's kinda the reverse that is true.  To gain credibility you need to show how your work is based on work other folks have done, and how you've improved them.

Alternately, you could also just do a paper that is a survey of various techniques to show the pros and cons of each.

Lastly, you can even write about something someone else already wrote about, but just explain it better, or maybe explore some of the implications of their work that they didn't.

Yeah.  YOU right now, could write a research paper about something.  I guarantee you could.  It just will take some time and effort (and possibly money), which may or may not be worth it to you.

<h3><u>Google ought to be great at helping me find other related work that i can reference!</u></h3>

This is still a bit strange to me.  Google has been NO help in finding work related to what I've been working on.

On one hand, I can see that being true due to research almost always being behind a pay wall that google can't see behind, but on the other hand, there is a lot of research that isn't.  Also, the "Abstract" of papers (a ~4 sentence summary) is almost always able to be read for free.  Why does google not have knowledge of those?

But yeah... google has found NOTHING.  The references I have are things that I accidentally stumbled on, or that other people RANDOMLY happened to put something on twitter about, or talk about in graphics mailing lists.

I search for exact terms that should find things I now know exist, and it finds nothing.

WTF Google?!

<h2>Is it Worth it?</h2>

As a (professional?) (game?) programmer, is publishing a paper worth it?  It depends.

Is this something you have a desire to do?  I have always wanted to be a scientist and contribute to human progress, so that makes it worth while to me.

Also, it can't hurt the resume, but it can be expensive.

If interested, make sure and find out what your employer's policies are though, and also what your rights are which may be different than what your company would like you to do!

Then, in the end, do whatever you think is best (:

It's also a good idea to read the guidelines for submission from the journal, read the notes that they give to reviewers to help review your paper, and also you should read papers that have been published in that journal to get an idea of what qualities an accepted paper has.

<h2>Some Resources</h2>

Here are some nice resources I've found so far.

First and foremost is the journal I'm going to be trying to publish my first paper with.  They have some sort of partnership with SIGGRAPH which is awesome (because SIGGRAPH is amazing!!), and also, it's FREE to submit papers to, and FREE for people to read.  It's also aimed towards professional game / graphics programmers and focuses more on practicality and results, and less on purely theoretical things, or typical academic practices that don't really have a place in the non academic world (IMO).  Go right now and go read some of their articles!

<a href="http://jcgt.org/">http://jcgt.org/ - the Journal ofComputer Graphics Techniquespeer-reviewed, open access, and free to all</a>

Next, I encourage you to read the notes that jcgt gives to reviewers to help them review papers.  This ought to show you the mindset of both the journal and the reviewers.  They are literally there to try and help you succeed as much as possible.

<a href="http://jcgt.org/files/review-form.txt">JCGT - Review Form</a>

I also want to share this presentation with you, which is from Microsoft Research, Cambridge.

<a href="http://research.microsoft.com/en-us/um/people/simonpj/papers/giving-a-talk/writing-a-paper-slides.pdf">How to write a great research paper</a>

If you are someone like me who wishes for greatness, but feels like a "mere mortal", I really recomend reading the book "Masters of Doom" to see how John Carmack and related folk made such a splash in the world as game developers.  JC is someone I respect a lot, and a lot of things he does and has done in the past are things that are beyond my wildest dreams of success, but things I'd like to aspire to.  The path is a lot more humble than you might expect, and even a little bit shady at times.  <a target="_blank" href="http://www.amazon.com/Masters-Doom-Created-Transformed-Culture/dp/0812972155">Masters of Doom: How Two Guys Created an Empire and Transformed Pop Culture</a>.

Lastly, as I write my paper, I hope that this is the time that I finally have invented something that doesn't yet exist (please???!!!).  I've spent several months on doing experiments, writing code, doing research to help explain my results, and finding ways to work around problems encountered.  I've finally finished that phase and have started in on actually writing the paper (abstract v1 is finished, outline is work in progress).

RANDOMLY, last friday, someone posted a link to a paper in a graphics mailing list I'm on.  That paper had a title so similar to what I'm writing that i nearly fell out of my chair and started crying LOL (ok maybe exaggerating but i was scared).  I read it in a few passes, each time peeking out from between my fingers as i was covering my eyes, afraid of what I'd see, and after about 4 or 5 of those passes I gave a sigh of relief.  There are similarities, but it is a world of different-ness, and it's applications are way different than my paper.

PHEW.  That close call actually gave me the strongest reference I have to cite and actually gave me some references to other papers which explain some of the strange results I was getting in a specific situation, so solved a mystery for me.  Turned out to be a good thing, but man was I scared.

Believe it or not, the academia stack exchange site has been a great help too in finding answers to specific questions that you can't just ask google about:
<a href="https://academia.stackexchange.com/">https://academia.stackexchange.com/</a>

More coming in the future as I learn more, until then, ta ta!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2596</wp:post_id>
		<wp:post_date><![CDATA[2015-06-18 12:11:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-18 20:11:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[adventures-in-learning-how-to-publish-a-research-paper]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494409336;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5276;}i:1;a:1:{s:2:"id";i:1447;}i:2;a:1:{s:2:"id";i:549;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What is Pre-multiplied Alpha and Why Does it Matter?</title>
		<link>http://blog.demofox.org/2015/06/19/what-is-pre-multiplied-alpha-and-why-does-it-matter/</link>
		<pubDate>Fri, 19 Jun 2015 14:46:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2620</guid>
		<description></description>
		<content:encoded><![CDATA[The usual equation for blending two pixels with alpha is to use a source factor of "source alpha" and a destination factor of "one minus source alpha".

That results in this equation:

$latex \\bf{Out.RGB} = In.RGB * In.A + Out.RGB * (1.0 - In.A)$

In other words, it's just a linear interpolation between $latex In$ and $latex Out$, using the alpha of the pixel you are writing to determine the weighting for the lerp.

Just to be clear, $latex Out$ is the pixel in your frame buffer (ie the final result that shows up on your monitor) and $latex In$ is the new pixel you are trying to write or combine with the output image.

If you use pre-multiplied alpha, all that means is that $latex In.RGB$ is already multipled by $latex In.A$ which results in slightly less math:

$latex \\bf{Out.RGB} = In.RGB + Out.RGB * (1.0 - In.A)$

Less math for the same results is always a good thing due to increased efficiency, but this also results in a higher quality results in the case of using mips.  For more info on that check out this link: <a target="_blank" href="https://developer.nvidia.com/content/alpha-blending-pre-or-not-pre">NVIDIA GameWorks - Alpha Blending: To Pre or Not To Pre</a>

To achieve this in OpenGL or DirectX with pre-multiplied alpha textures, you just use a source factor of “one” and leave the destination factor at “one minus source alpha”.

If you are using alpha to write to a render target that also has an alpha channel, the math improvement is even better.  Here is the equation with regular (post-multiplied) alpha in that scenario for combining the RGB portion of the pixels:

$latex \\bf{Out.RGB} = \\frac{In.RGB * In.A + Out.RGB * Out.A * (1.0 - In.A)}{In.A + (1.0 - In.A) * Out.A}$

When working with pre-multiplied alpha it just goes back to the lerp:

$latex \\bf{Out.RGB} = In.RGB + Out.RGB * (1.0 - In.A)$

When blending to a target with alpha, the equation to combine alpha is the old familiar lerp:

$latex \\bf{Out.A} = In.A + Out.A * (1.0 - In.A)$

That makes the lerp form of color combining even nicer since it means the same math for all color channels of the pixel:

$latex \\bf{Out} = In + Out * (1.0 - In.A)$

Confused about why alpha combining using lerp makes sense?  It makes most sense to me when thinking about it like this... if you had something that was half opaque(Out.A = 0.5), then you looked at that through something that was 3/4 opaque (In.A = 0.75), only 25% of the light would get past the top layer (0.25), to reach the bottom layer.  Only 50% of the light that reached the bottom layer gets through, so we cut that 25% in half to get 12.5% (0.125).  Since alpha really means "opaqueness" (1.0 means no transparency), that means that the combined alpha is 1 - 0.125, or 0.875.

If you plug the numbers into the above equation you get the same result:

$latex \\bf{Out.A} = 0.75 + (1.0 - 0.75) * 0.5$
$latex \\bf{Out.A} = 0.75 + 0.25 * 0.5$
$latex \\bf{Out.A} = 0.75 + 0.125$
$latex \\bf{Out.A} = 0.875$

Note too that if you flip the order of what is getting mixed with what (ie make B mix into A instead of A mix into B), that you still get the same result.  Order doesn't matter.  This is how you can get away with not sorting transparent objects, and just rendering them in a second pass with z-writing off after the opaques have been rendered.

Here's a fun question... does alpha represent transparency, or does it represent how much of a pixel is covered by an opaque object?  To find out the answer give this a read!
<a target="_blank" href="http://jcgt.org/published/0004/02/03/">Jounral of Computer Graphics Techniques: Interpreting Alpha</a>




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2620</wp:post_id>
		<wp:post_date><![CDATA[2015-06-19 06:46:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-19 14:46:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[what-is-pre-multiplied-alpha-and-why-does-it-matter]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0851ec046d9edc50482d2bc32e40cc24]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_2a17989b90abae2d497f6ac4c81a9e4b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495681988;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2473;}i:1;a:1:{s:2:"id";i:5276;}i:2;a:1:{s:2:"id";i:4341;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The De Casteljau Algorithm for Evaluating Bezier Curves</title>
		<link>http://blog.demofox.org/2015/07/05/the-de-casteljeau-algorithm-for-evaluating-bezier-curves/</link>
		<pubDate>Sun, 05 Jul 2015 19:34:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2661</guid>
		<description></description>
		<content:encoded><![CDATA[Over the past year or so I've been digging fairly deeply into curves, mostly into Bezier curves specifically.

While digging around, I've found many mentions of the De Casteljau algorithm for evaluating Bezier curves, but never much in the way of a formal definition of what the algorithm actually is, or practical examples of it working.

Now that I understand the De Casteljau algorithm, I want to share it with you folks, and help there be more useful google search results for it.

The De Casteljau algorithm is more numerically stable than evaluating Bernstein polynomials, but it is slower.  Which method of evaluating Bezier curves is more appropriate is based on your specific usage case, so it's important to know both.

If you are looking for the mathematical equation of a Bezier curve (the Bernstein form which uses Bernstein basis functions), you have come to the right place, but the wrong page!  You can find that information here: <a href="http://blog.demofox.org/2015/05/25/easy-binomial-expansion-bezier-curve-formulas/">Easy Binomial Expansion & Bezier Curve Formulas</a>

Onto the algorithm!

<h2>The De Casteljau Algorithm</h2>

The De Casteljau algorithm is actually pretty simple.  If you know how to do a linear interpolation between two values, you have basically everything you need to be able to do this thing.

In short, the algorithm to evaluate a Bezier curve of any order $latex N$ is to just linearly interpolate between two curves of degree $latex N-1$.  Below are some examples to help show some details.

The simplest version of a Bezier curve is a linear curve, which has a degree of 1.  It is just a linear interpolation between two points $latex A$ and $latex B$ at time $latex t$, where $latex t$ is a value from 0 to 1.  When $latex t$ has a value of 0, you will get point $latex A$.  When $latex t$ has a value of 1, you will get point $latex B$.  For values of t between 0 and 1, you will get points along the line between $latex A$ and $latex B$.

The equation for this is super simple and something you've probably seen before:  $latex P(t) = A*(1-t) + B*t$.

The next simplest version of a Bezier curve is a quadratic curve, which has a degree of 2 and control points $latex A,B,C$.  A quadratic curve is just a linear interpolation between two curves of degree 1 (aka linear curves).  Specifically, you take a linear interpolation between $latex A,B$, and a linear interpolation between $latex B,C$, and then take a linear interpolation between those two results.  That will give you your quadratic curve.

<img src="https://demofox2.files.wordpress.com/2015/07/Bezier2.gif"/>

The next version is a cubic curve which has a degree of 3 and control points $latex A,B,C,D$.  A cubic curve is just a linear interpolation between two quadratic curves.  Specifically, the first quadratic curve is defined by control points $latex A,B,C$ and the second quadratic curve is defined by control points $latex B,C,D$.

<img src="https://demofox2.files.wordpress.com/2015/07/Bezier3.gif"/>

The next version is a quartic curve, which has a degree of 4 and control points $latex A,B,C,D,E$.  A quartic curve is just a linear interpolation between two cubic curves.  The first cubic curve is defined by control points $latex A,B,C,D$ and the second cubic curve is defined by control points $latex B,C,D,E$.

<img src="https://demofox2.files.wordpress.com/2015/07/Bezier4.gif"/>

So yeah, an order $latex N$ Bezier curve is made by linear interpolating between two Bezier curves of order $latex N-1$.

<h2>Redundancies</h2>

While simple, the De Casteljau has some redundancies in it, which is the reason that it is usually slower to calculate than the Bernstein form.  The diagram below shows how a quartic curve with control points $latex A,B,C,D,E$ is calculated via the De Casteljau algorithm.

<img src="https://demofox2.files.wordpress.com/2015/07/Decasteljeau1.png-0000011.png"/>

Compare that to the Bernstein form (where $latex s$ is just $latex (1-t)$)

$latex P(t) = A*s^4 + B*4s^3t + C*6s^2t^2 + D*4st^3 + E*t^4$

The Bernstein form removes the redundancies and gives you the values you want with the least amount of moving parts, but it comes at the cost of math operations that can give you less precision in practice, versus the tree of lerps (linear interpolations).

<h2>Sample Code</h2>

Pretty animations and intuitive explanations are all well and good, but here's some C++ code to help really drive home how simple this is. 

[code language="cpp"]
#include &lt;stdio.h&gt;

void WaitForEnter()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

float mix(float a, float b, float t)
{
    // degree 1
    return a * (1.0f - t) + b*t;
}

float BezierQuadratic(float A, float B, float C, float t)
{
    // degree 2
    float AB = mix(A, B, t);
    float BC = mix(B, C, t);
    return mix(AB, BC, t);
}

float BezierCubic(float A, float B, float C, float D, float t)
{
    // degree 3
    float ABC = BezierQuadratic(A, B, C, t);
    float BCD = BezierQuadratic(B, C, D, t);
    return mix(ABC, BCD, t);
}

float BezierQuartic(float A, float B, float C, float D, float E, float t)
{
    // degree 4
    float ABCD = BezierCubic(A, B, C, D, t);
    float BCDE = BezierCubic(B, C, D, E, t);
    return mix(ABCD, BCDE, t);
}

float BezierQuintic(float A, float B, float C, float D, float E, float F, float t)
{
    // degree 5
    float ABCDE = BezierQuartic(A, B, C, D, E, t);
    float BCDEF = BezierQuartic(B, C, D, E, F, t);
    return mix(ABCDE, BCDEF, t);
}

float BezierSextic(float A, float B, float C, float D, float E, float F, float G, float t)
{
    // degree 6
    float ABCDEF = BezierQuintic(A, B, C, D, E, F, t);
    float BCDEFG = BezierQuintic(B, C, D, E, F, G, t);
    return mix(ABCDEF, BCDEFG, t);
}

int main(int argc, char **argv)
{
    struct SPoint
    {
        float x;
        float y;
    };

    SPoint controlPoints[7] =
    {
        { 0.0f, 1.1f },
        { 2.0f, 8.3f },
        { 0.5f, 6.5f },
        { 5.1f, 4.7f },
        { 3.3f, 3.1f },
        { 1.4f, 7.5f },
        { 2.1f, 0.0f },
    };

    //calculate some points on a sextic curve!
    const float c_numPoints = 10;
    for (int i = 0; i &lt; c_numPoints; ++i)
    {
        float t = ((float)i) / (float(c_numPoints - 1));
        SPoint p;
        p.x = BezierSextic(controlPoints[0].x, controlPoints[1].x, controlPoints[2].x, controlPoints[3].x, controlPoints[4].x, controlPoints[5].x, controlPoints[6].x, t);
        p.y = BezierSextic(controlPoints[0].y, controlPoints[1].y, controlPoints[2].y, controlPoints[3].y, controlPoints[4].y, controlPoints[5].y, controlPoints[6].y, t);
        printf(&quot;point at time %0.2f = (%0.2f, %0.2f)\n&quot;, t, p.x, p.y);
    }

    WaitForEnter();
}
[/code]

Here's the output of the program:

<img src="https://demofox2.files.wordpress.com/2015/07/BezierOut.png"/>

Thanks to wikipedia for the awesome Bezier animations! <a target="_blank" href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">Wikipedia: Bézier curve</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2661</wp:post_id>
		<wp:post_date><![CDATA[2015-07-05 11:34:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-05 19:34:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[the-de-casteljeau-algorithm-for-evaluating-bezier-curves]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495633131;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4018;}i:1;a:1:{s:2:"id";i:4113;}i:2;a:1:{s:2:"id";i:5276;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lagrange Interpolation</title>
		<link>http://blog.demofox.org/2015/07/08/lagrange-interpolation/</link>
		<pubDate>Wed, 08 Jul 2015 20:18:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2697</guid>
		<description></description>
		<content:encoded><![CDATA[Lagrange interpolation is a way of crafting a function from a set of data points..

In the past I've seen reference to Lagrange interpolation in relation to audio programming like, for helping make a soft knee for a limiter, but it can be used wherever you need to make a function from some data points.

<h2>What's It Do?</h2>

Lagrange interpolation is a way of crafting a $latex y=f(x)$ function from a set of $latex (x,y)$ data pairs.  The resulting function passes through all the data points you give it (like a Catmull-Rom spline does), so can be used to find a function to interpolate between data sets.

You can't give two value pairs that have the same x value, but the data points don't have to be evenly spaced.

Also, if you give $latex N$ data points, you'll get out a function that is a $latex N-1$ degree polynomial.  So, if you interpolate two data points, you'll get a degree 1 polynomial (a line).  If you interpolate three data points, you'll get a degree 2 polynomial (a quadratic).

The function will be quite messy, but you can use algebra, or <a target="_blank" href="http://wolframalpha.com">wolframalpha.com</a> (or the like) to simplify it for you to a simpler equation.

Lagrange interpolation is subject to <a target="_blank" href="https://en.wikipedia.org/wiki/Runge's_phenomenon">Runge's Phenomenon</a>, so the more data points you have, the more the interpolation tends to get "squirly" near the edges and shoot off up high or down low, instead of smoothly interpolating between data values.

<h2>How's It Do It?</h2>

Well, to make any kind of curve from data points, if we want the curve to pass through those data points, one way would be to come up with a set of functions to multiply each data point by.

Each function must evaluate to 1 when the curve is at that control point, it should be zero when the curve is at any other control point.  Between control points, the function can take any value, but if you make it continuous / smooth, the curve will be continuous and smooth, so that's usually what is desired.

When we have those functions, to get a point on the curve we just multiply each control point by it's corresponding function (called a basis function), and we sum up the results.

The pseudocode below is how this works and is the basic functionality of most common curve types:

[code language="cpp"]
// The basic way to evaluate most any type of curve
float PointOnCurve (float t, float *controlPoints, int numControlPoints)
{
    float value = 0.0f;

    for (int i = 0; i &lt; numControlPoints; ++i)
        value += controlPoints[i] * ControlPointFunction(i, t);

    return value;
}

float ControlPointFunction (int i, float t)
{
  // return the ith control point function evaluated at time t.
  // aka return f(t) for the ith control point.
}
[/code]

What makes Lagrange interpolation different than other curve types is the basis functions it uses.

<h2>The Math</h2>

If you aren't used to seeing a capital pi, or a laplacian style cursive l in equations, it's about to get a bit mathy!

If you feel like skipping to the next section, I don't blame you, but if you are feeling brave, you should try and follow along, because I'm going to slowly walk through each and every symbol to help explain what's going on and why.

Let's say that you are want to be able to interpolate between $latex k+1$ data points:

$latex (x_0, y_0)\\ldots(x_k, y_k)$

The formula for calculating a Lagrange interpolated value is this:

$latex L(x) := \\sum_{j=0}^{k} y_j \\ell_j(x)$

The capital sigma ($latex \\sum_{j=0}^{k}$) just means that we are going to loop a variable j from 0 to k (including k), and we are going to sum up the total of everything on the right for all values of j.  When you see a capital sigma, think sum (note they both start with an s).

The next thing after the sigma is $latex y_j$.  That is just the y value from our jth control point.  That is essentially controlPoints[j].y.

After that comes the last part $latex \\ell_j(x)$. That is just the function for the jth control point that we multiply the control point by (aka the basis function), evaluated for the specific value x.

Since there is no operator between this function and the control point, that means we multiply them together.  So yeah... that crazy math just says "multiply each control point by it's basis function, and sum up the results", just like our pseudo code above does!

The second equation we need to look at is the definition of the basis functions for each control point.  Here is the formula that describes the jth basis function, for the jth control point:

$latex \\ell_j(x) := \\prod_{\\begin{smallmatrix}0\\le m\\le k\\\\ m\\neq j\\end{smallmatrix}} \\frac{x-x_m}{x_j-x_m}$

First is the capital pi $latex \\prod_{\\begin{smallmatrix}0\\le m\\le k\\\\ m\\neq j\\end{smallmatrix}}$.  This means that we are going to do a loop, but instead of adding the results of the loop, we are going to multiply them together.  Where a capital sigma means sum, capital pi means product.

The notation for product is a bit different here than in the sigma though which may be a bit tricky to read at first.  Instead of explicitly saying that $latex m$ should go from 0 to $latex k$, the notation $latex 0\\le m\\le k\\\\$ says that implicitly.  That same notation can be used with sigma, or the more explicit style notation could be used with pi.

The pi also has this notation next to it $latex m\\neq j$.  That means that the case where $latex m$ equals $latex j$ should be skipped.

Finally, on to the second part: $latex \\frac{x-x_m}{x_j-x_m}$.  This part is pretty easy to read.  $latex x$ is the parameter to the function of course, $latex x_m$ is just controlPoints[m].x where $latex m$ is the index variable of our product loop ($latex \\prod$), and $latex x_j$ is just controlPoints[j].x where $latex j$ is the index variable of our summation loop ($latex \\sum$).

Let's say that $latex k$ was 2 because we had 3 data pairs.  Our three basis functions would be:

$latex \\ell_0(x) := \\frac{x-x_1}{x_0-x_1} * \\frac{x-x_2}{x_0-x_2}$
$latex \\ell_1(x) := \\frac{x-x_0}{x_1-x_0} * \\frac{x-x_2}{x_1-x_2}$
$latex \\ell_2(x) := \\frac{x-x_0}{x_2-x_0} * \\frac{x-x_1}{x_2-x_1}$

Which means that our final Lagrange interpolation function would be:

$latex L(x) := y_0 * \\frac{x-x_1}{x_0-x_1} * \\frac{x-x_2}{x_0-x_2} + y_1 * \\frac{x-x_0}{x_1-x_0} * \\frac{x-x_2}{x_1-x_2} + y_2 * \\frac{x-x_0}{x_2-x_0} * \\frac{x-x_1}{x_2-x_1}$

That is quite a mouth full, but hopefully you understand how we came up with that!

$latex x_i$ is just controlPoints[i].x and $latex y_i$ is just controlPoints[i].y.

<h2>Math Intuition</h2>

The intuition here is that we need to come up with a set of functions to multiply each control point by, such that when the function's x value is at the control point's x value, the function should evaluate to 1.  When the function's x value is at a different control points x value, the function should evaluate to 0.  The rest of the time, the function can evaluate to whatever it wants, although again, having it have smooth values is nice to making a good curve.

So the first problem is, how do we make a function evaluate to 0 when x is at a different control point?

The easy way would be to multiply a bunch of terms together of this form $latex (x - x_i)$, but make sure and not include the x of the actual control point that we are multiplying against.

That is exactly what it does with the numerator in the product notation of the basis function.

$latex \\ell_j(x) := \\prod_{\\begin{smallmatrix}0\\le m\\le k\\\\ m\\neq j\\end{smallmatrix}} \\frac{x-x_m}{x_j-x_m}$

Note that $latex j$ is the index of the current control point that we are calculating the basis function for.  All values of x, that isn't the x value of a control point will evaluate to non zero.

The denominator value is there so that when x is the value of the control point that we care about, that the function will evaluate to 1.

It does this by figuring out what the value of the numerator will be when x is at the control point, and then makes that be the value that it divides by, so that it's 1 at that x value.

Not too much to it.  Pretty simple stuff, but powerful as well!

<h2>Extending to 2D and Beyond</h2>

Lagrange interpolation is a one dimensional interpolation scheme, meaning that if you have data points of the form (x,y), it can give you an interpolated y value based on an x value you give it.  The interpolation it does can never give two different y values for the same x.

If you want to extend this technique to interpolating a curve through two dimensional data points, or even higher, you need to do interpolation independently for each axis and use a "parametric" value for that axis.

For instance, if you needed to interpolate a curve through 3 dimensional points, you would have data points like this:

X Points = $latex (t_{x,0}, x_0)\\ldots(t_{x,k+1}, x_{k+1})$
Y Points = $latex (t_{y,0}, y_0)\\ldots(t_{y,k+1}, y_{k+1})$
Z Points = $latex (t_{z,0}, z_0)\\ldots(t_{z,k+1}, y_{k+1})$

And then you would interpolate on each axis by the t value to get your X, Y and Z axis values.  This should look familiar, because this is how higher dimensional Bezier curves work; you evaluate them per axis based on a parametric value per axis (s,t,u,etc).

You could use the same t values on each axis, or they could be completely independent.  You don't even need to have the same number of points for each axis!

You might wonder how this differs from the standard interpolation in the 2D case.  Check the demos in the link section below to really get a grasp of the difference, but in essence, with standard (1D) interpolation, you can never have two x values that evaluate to 2 different y values.  Extending it like the above into two dimensions by parameterizing each axis lets you get around that limitation and you can make true 2d shapes.

Lastly, it is possible to make Lagrange interpolated surfaces!  I won't go into the details (perhaps a future post!), but if you know how to make a bezier rectangle by doing a tensor product (basically having X axis Bezier curves, multiplied by Y axis Bezier curves), you can accomplish a Lagrange surface in a really similar way.

<h2>Sample Code</h2>

This sample code is written for readability, but could easily be optimized for faster execution.  Also, from what I hear, the second form of Barycentric Lagrange Interpolation is touted as the fastest form of Lagrange interpolation, since many values can be pre-calculated and re-used for different values of x.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;vector&gt;

struct SPoint
{
    float x;
    float y;
};

typedef std::vector&lt;SPoint&gt; TPointList;

void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

// calculates the lagrange basis function y value for control point &quot;controlPointIndex&quot; at x value &quot;x&quot;
float LagrangeBasis (const TPointList&amp; pointList, size_t controlPointIndex, float x)
{
    // this is the pi &quot;inner loop&quot; multiplication work
    float value = 1.0f;
    for (size_t i = 0, c = pointList.size(); i &lt; c; ++i) {
        if (i != controlPointIndex)
            value *= (x - pointList[i].x) / (pointList[controlPointIndex].x - pointList[i].x);
    }
    return value;
}

// returns a value at x, using lagrange interpolation over the specified list of (x,y) pairs
float LagrangeInterpolate (const TPointList&amp; pointList, float x)
{
    // this is the sigma &quot;outer loop&quot; summation work
    float sum = 0.0f;
    for (size_t controlPointIndex = 0, c = pointList.size(); controlPointIndex &lt; c; ++controlPointIndex)
        sum += pointList[controlPointIndex].y * LagrangeBasis(pointList, controlPointIndex, x);
    return sum;
}

int main (int argc, char **argv)
{
    // show some 1d interpolated values
    // note that the points don't need to be sorted on X, but it makes for easier to read examples
    {
        // (x,y) pairs
        const TPointList points =
        {
            { 0.0f, 1.1f },
            { 1.6f, 8.3f },
            { 2.3f, 6.5f },
            { 3.5f, 4.7f },
            { 4.3f, 3.1f },
            { 5.9f, 7.5f },
            { 6.8f, 0.0f }
        };

        // show values interpolated from x = 0, to x = max x
        printf(&quot;1d interpolated values.  y = L(t)\n&quot;);
        const float c_numPoints = 10;
        for (int i = 0; i &lt; c_numPoints; ++i)
        {
            float percent = ((float)i) / (float(c_numPoints - 1));
            float x = points.back().x * percent;
            float y = LagrangeInterpolate(points, x);
            printf(&quot;  (%0.2f, %0.2f)\n&quot;, x, y);
        }
        printf(&quot;\n&quot;);
    }

    // show some 2d interpolated values
    // also note that x and y don't have to have matching t values!
    {
        // (t, x) pairs
        const TPointList pointsX =
        {
            { 0.0, 0.0f},
            { 1.0, 1.6f},
            { 2.0, 2.3f},
            { 3.0, 3.5f},
            { 4.0, 4.3f},
            { 5.0, 5.9f},
            { 6.0, 6.8f}

        };
        // (t, y) pairs
        const TPointList pointsY =
        {
            { 0.0f, 1.1f },
            { 1.0f, 8.3f },
            { 2.0f, 6.5f },
            { 3.0f, 4.7f },
            { 4.0f, 3.1f },
            { 5.0f, 7.5f },
            { 6.0f, 0.0f }
        };

        // show values interpolated from t = 0, to t = max t, on each axis
        printf(&quot;2d interpolated values.  x = L(t_x), y = L(t_y)\n&quot;);
        const float c_numPoints = 10;
        for (int i = 0; i &lt; c_numPoints; ++i)
        {
            float percent = ((float)i) / (float(c_numPoints - 1));

            // calculate x
            float tx = pointsX.back().x * percent;
            float x = LagrangeInterpolate(pointsX, tx);

            // calculate y
            float ty = pointsY.back().x * percent;
            float y = LagrangeInterpolate(pointsY, ty);

            printf(&quot;  (%0.2f, %0.2f)\n&quot;, x, y);
        }
        printf(&quot;\n&quot;);
    }

    WaitForEnter();
    return 0;
}
[/code]

And here's the programs output:
<img src="https://demofox2.files.wordpress.com/2015/07/Lag.png"/>

<h2>Final Notes</h2>

Now that you know how to do all this stuff I wanted to share a couple more pieces of info.

Firstly, it's kind of weird to call this "Lagrange Interpolation".  A better term is to call this the "Lagrange Form of Polynomial Interpolation".  The reason for that is that if you have some number of data points, there exists only one unique minimal order polynomial (lowest degree of x possible) that fits those points.  That is due to the "unisolvence theorem" that you can read more about here: <a target="_blank" href="https://en.wikipedia.org/wiki/Polynomial_interpolation#Uniqueness_of_the_interpolating_polynomial">Wikipedia: Polynomial interpolation</a>.

What that means is that if you were to use a different type of polynomial interpolation - such as newton interpolation - the result you get out is algebraically equivalent to the one you'd get from this Lagrange form.  There are pros and cons to using different forms of polynomials, but that's out of the scope of this post so go read about them if you are interested!

Speaking of that, even though this sample code is focused on interpolation using the Lagrange form, this technique is really great at being able to just come up with some simpler f(x) function that passes through specific data points.  In this way, you can kind of "bake out" a custom f(x) function to do interpolation for specific values, that doesn't need all the moving parts of the Lagrange form.  For example, if you make the formula for lagrange interpolation of 3 specific value pairs and then simplify, will get out a simple quadratic function in the form of $latex y=Ax^2+Bx+C$!

<h2>Links</h2>

Here are some interactive demos I made to let you play with Lagrange interpolation to get a feel for how it works, and it's strengths and weaknesses:
<a target="_blank" href="http://demofox.org/lagrange1d.html">One Dimensional Lagrange Interpolation</a>
<a target="_blank" href="http://demofox.org/lagrange2d.html">Two Dimensional Lagrange Interpolation</a>

I also found these links really helpful in finally understanding this topic:
<a target="_blank" href="http://www2.lawrence.edu/fast/GREGGJ/Math420/Section_3_1.pdf">Lagrange Interpolation</a>
<a target="_blank" href="https://mat.iitm.ac.in/home/sryedida/public_html/caimna/interpolation/lagrange.html">Lagrange's Interpolation Formula</a>

Want to follow the rabbit hole a little deeper?  Check out how sinc interpolation relates to the Lagrange form!
<a target="_blank" href="https://fgiesen.wordpress.com/2010/10/25/sinc-and-polynomial-interpolation/">The ryg blog: sinc and Polynomial interpolation</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2697</wp:post_id>
		<wp:post_date><![CDATA[2015-07-08 12:18:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-08 20:18:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lagrange-interpolation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495663340;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5276;}i:1;a:1:{s:2:"id";i:4341;}i:2;a:1:{s:2:"id";i:2661;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rectangular Bezier Patches</title>
		<link>http://blog.demofox.org/2015/07/28/rectangular-bezier-patches/</link>
		<pubDate>Tue, 28 Jul 2015 19:36:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2754</guid>
		<description></description>
		<content:encoded><![CDATA[Rectangular Bezier Patches are one way to bring Bezier curves into the 3rd dimension as a Bezier surface.  Below is a rendered image of a quadratic Bezier rectangle (degree of (2,2)) and a cubic Bezier rectangle (degree of (3,3)) taken as screenshots from a shadertoy demo I created that renders these in real time.  Links at bottom of post!

<img src="https://demofox2.files.wordpress.com/2015/07/quadraticbezrect.png"/>
<img src="https://demofox2.files.wordpress.com/2015/07/cubicbezrect.png"/>

<h2>Intuition</h2>

Imagine that you had a Bezier curve with some number of control points.  Now, imagine that you wanted to animate those control points over time instead of having a static curve.

One way to do this would be to just have multiple sets of control points as key frames, and just linearly interpolate between the key frames over time.  You'd get something that might look like the image below (lighter red = farther back in time).

<img src="https://demofox2.files.wordpress.com/2015/07/CurveAnim.png"/>

That is a simple and intuitive way to animate a Bezier curve, and is probably what you thought of immediately.  Interestingly though, since linear interpolation is really a degree 1 Bezier curve, this method is actually using a degree 1 Bezier curve to control each control point!

What if we tried a higher order curve to animate each control point?  Well... we could have three sets of control points, so that each control point was controlled over time by a quadratic curve.  We could also try having four sets of control points, so that each control point was controlled over time by a cubic curve.

We could have any number of sets of control points, to be able to animate the control points over time using any degree curve.

Now, instead of animating the curve over TIME, what if we controlled it over DISTANCE (like, say, the z-axis, or "depth").  Look at the image above and think of it like you are looking at a surface from the side.  If you took a bunch of the time interpolations as slices and set them next to each other so that there were no gaps between them, you'd end up with a smooth surface.  TA-DA!  This is how a Rectangular Bezier Patch is made.

Note that the degree of the curve on one axis doesn't have to match the degree of the curve on the other axis.  You could have a cubic curve where each control point is controlled by a linear interpolation, or you could have a degree 5 curve where each control point is controlled by degree 7 curves.  Since there are two degrees involved in a Bezier rectangle, you describe it's order with two numbers.  The first example is degree (3,1) and the second example is degree (5,7).

<b>Higher Dimensions</b>

While you thinking about this, I wanted to mention that you could animate a bezier rectangle over time, using bezier curves to control those control points.  If you then laid that out over distance instead of time, you'd end up with a rectangular box Bezier solid.  If you are having trouble visualizing that, don't feel dumb, it's actually four dimensional!

You can think of it like a box that has a value stored at every (x,y,z) location, and those values are controlled by Bezier formulas so are smooth and are based on control points.  It's kind of a strange concept but is useful in some situations.

Say you made a 3d hot air baloon game and wanted to model temperature of the air at differently locations to simulate thermals.  One way you could do this would be to store a bunch of temperatures in a 3d grid.  Another way might involve using a grid of rectangular box Bezier solids perhaps.  One benefit to the Bezier solid representation is that the data points are much smoother than a grid would be, and another is that you could make the grid much less dense.

Now, let's say that you wanted to animate the thermals over time.  You could use a fifth dimensional bezier hypercube solid. Let's move on, my brain hurts :P

<img src="https://demofox2.files.wordpress.com/2015/07/BezierOcean.png"/>

<h2>Math</h2>

The equation for a Bezier Rectangle is:

$latex \\mathbf{p}(u, v) = \\sum_{i=0}^n \\sum_{j=0}^m B_i^n(u) \\; B_j^m(v) \\; \\mathbf{k}_{i,j}$

$latex \\mathbf{p}(u, v)$ is the point on the surface that you get after you plug in the parameters.  $latex u$ and $latex v$ are the parameters to the surface and should be within the range 0 to 1.  These are the same thing as the $latex t$ you see in Bezier curves, but there are two of them since there are two axes.

There are two Sigmas (summations) which mean that it's a double for loop.

One of the for loops make $latex i$ go from 0 to $latex n$ and the other makes $latex j$ go from 0 to $latex m$.  $latex m$ and $latex n$ are the degree of each axis.

$latex B_i^n(u)$ and $latex B_i^n(u)$ are Bernstein polynomials (aka binomial expansion terms) just as you see in Bezier Curves - there is just one per axis.

Lastly comes the control points $latex \\mathbf{k}_{i,j}$.  The number of control on one axis are multiplied by the number of control points on the other axis.

A biquadratic Bezier patch has a degree of (2,2) and has 3 control points on one axis, and 3 control points on the other.  That means that it has 9 control points total.

A bicubic Bezier patch has a degree of (3,3) with 4 control points on each axis, for a total of 16 control points.

If you had a patch of degree (7,1), it would have 8 control points on one axis and 2 control points on the other axis, and so would also have 16 control points total, but they would be laid out differently than a bicubic Bezier patch.

As far as actually calculating points on a curve, the above only calculates the value for a single axis for the final point on the curve.  If you have three dimensional control points (X,Y,Z), you have to do the above math for each one to get the final result.  This is the same as how it works for evaluating Bezier curves.

<h2>Code</h2>

[code language="cpp"]
#include <stdio.h>
#include <array>

typedef std::array<float, 3> TFloat3;
typedef std::array<TFloat3, 3> TFloat3x3;

const TFloat3x3 c_ControlPointsX =
{
    {
        { 0.7f, 0.8f, 0.9f },
        { 0.2f, 0.5f, 0.4f },
        { 0.6f, 0.3f, 0.1f },
    }
};

const TFloat3x3 c_ControlPointsY =
{
    {
        { 0.2f, 0.8f, 0.5f },
        { 0.6f, 0.9f, 0.3f },
        { 0.7f, 0.1f, 0.4f },
    }
};

const TFloat3x3 c_ControlPointsZ =
{
    {
        { 0.6f, 0.5f, 0.3f },
        { 0.7f, 0.1f, 0.9f },
        { 0.8f, 0.4f, 0.2f },
    }
};

void WaitForEnter ()
{
    printf("Press Enter to quit");
    fflush(stdin);
    getchar();
}

float QuadraticBezier (const TFloat3& p, float t)
{
    float s = 1.0f - t;
    float s2 = s * s;
    float t2 = t * t;

    return
        p[0] * s2 +
        p[1] * 2.0f * s * t +
        p[2] * t2;
}

float BiquadraticBezierPatch(const TFloat3x3& p, float u, float v)
{
    TFloat3 uValues;
    uValues[0] = QuadraticBezier(p[0], u);
    uValues[1] = QuadraticBezier(p[1], u);
    uValues[2] = QuadraticBezier(p[2], u);
    return QuadraticBezier(uValues, v);
}

int main(int argc, char **argv)
{
    // how many values to display on each axis. Limited by console resolution!
    const int c_numValues = 4;

    printf("Bezier rectangle:\n");
    for (int i = 0; i < c_numValues; ++i)
    {
        float iPercent = ((float)i) / ((float)(c_numValues - 1));
        for (int j = 0; j < c_numValues; ++j)
        {
            if (j == 0)
                printf("  ");
            float jPercent = ((float)j) / ((float)(c_numValues - 1));
            float valueX = BiquadraticBezierPatch(c_ControlPointsX, jPercent, iPercent);
            float valueY = BiquadraticBezierPatch(c_ControlPointsY, jPercent, iPercent);
            float valueZ = BiquadraticBezierPatch(c_ControlPointsZ, jPercent, iPercent);
            printf("(%0.2f, %0.2f, %0.2f) ", valueX, valueY, valueZ);
        }
        printf("\n");
    }
    printf("\n");

    WaitForEnter();
    return 0;
}
[/code]

And here is the output it gives:
<img src="https://demofox2.files.wordpress.com/2015/07/ProgramRun.png"/>

Note that in the program above, I evaluate the surface points by evaluating one axis and then the other.  This is basically the same as how I explained it at the top, where I'm effectively animating the control points over distance, then evaluating the curve slice of the surface at that specific distance.

You could also write it another way though, where you literally expand the mathematical formula to get just one expression to evaluate that takes all control points at once.  I like the simplicity (of understanding) of the method I used, but the other method works just as well.

<h2>The Rendering</h2>

It's easy enough to calculate values on a Bezier Rectangle, but what if you want to draw one?

One way is to tessellate it, or break it up into triangles and then render the triangles.  You can think of it like trying to render a grid, where each point of the grid is moved to be where ever the Bezier rectangle function says it should be. 

Raytracing against these objects in the general case is very difficult however, because it basically comes down to solving equations of very high degree.

Raymarching against these objects is also difficult unfortunately because while raymarching only needs to know "am i above the shape, or underneath it?", knowing what u,v to plug into the equation to get the height most relevant to a random point in space is also very difficult.  Not as difficult as the raytracing equations, but probably just as much out of reach.

But never fear, as always, you can cheat!

If you read my post about one dimensional (explicit) Bezier curves (<a target="_blank" href="http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/">One Dimensional Bezier Curves</a>), you may remember that math gets easier if you use one dimensional control points.  The same is actually true with Bezier rectangles!

For the ray marching case, you can march a point through space, and plug the x,z coordinate of the point into the Bezier rectangle function as u,v values and the number that comes out you can treat as a y coordinate.

Now, ray marching a Bezier rectangle is the same as ray marching any old height map (check links section for more info on that).

What I did in my demos, is since i knew that the curve was constrained to 0-1 on the x and z axis, and the y axis min and max was the control point min and maxes, I did a raytrace of that bounding box to get a minimum and maximum distance that the ray was inside that box.  From there, I did raymarching from that min time to the max time along the ray, considering the ray as hitting the surface whenever the distance from the ray to the surface on the y axis (rayPos.y - bezierRectangle.y) changed sign.

After I had a hit, I got the height of the curve slightly offset on the x axis, then slightly offset on the z axis to get a triangle that I could calculate a surface normal from, to do lighting and shading with.

There is room for improvement in the ray marching though.  I evenly divide the space through the box by a specific amount to control the size of the steps.  A better way to do this I think would be to get the gradient of the function and use that to get a distance estimate (check links section below for more information).  I could use that value to control the distance the ray marches at each step, and should be able to march through the box much quicker.

Also, as the link on terrain marching explains, you can usually take farther steps when the ray is farther from the camera, because the eye notices less detail.  I removed that since the Bezier rectangles are pretty close to the camera, but it probably still would be helpful.  Also, it would DEFINITELY be helpful in the case of the "Infinite Bezier Rectangles" scene.

I am pretty sure you could directly raytrace an explicit Bezier rectangle (one who has one dimensional control points) - at least for low degrees.  I personally don't know how you would do that, but I think it might boil down to solving a 4th degree function or something else "reasonable" based on a similar question I had about Bezier triangles on the mathematics stack exchange site (link below).

<b>Another Way To Render</b>

There is another way to render Bezier surfaces using ray based methods that I didn't use but want to mention.

A property of Bezier curves and surfaces is that they are guaranteed to be completely contained by the convex hull created by their control points.

Another property of Bezier curves and surfaces is that you can use the De Casteljeau algorithm to cut them up.  For instance you could cut a Bezier curve into two different Bezier curves, and the same holds for Bezier surfaces.

Using these two properties, there is an interesting way to be able to tell if a ray intersects a bezier curve or not, which is:

<ol>
<li>If the line misses the convex hull, return a miss</li>
<li>If the convex hull is smaller than a pixel, return a hit</li>
<li>Otherwise, cut the Bezier object into a couple smaller Bezier objects</li>
<li>Recurse for each smaller Bezier object</li>
</ol>

Yes, believe it or not, that is a real technique!  It's called Bezier Clipping and there is a research paper in the links section below that talks about some of the details of using that rendering technique.

<h2>Links</h2>

Lastly, I wanted to mention that the above is completely about Bezier rectangles, but there is no reason you couldn't extend these rectangles to use rational Bezier functions, or be based on B-splines or NURBS, or even go a different direction and make hermite surfaces or catmull-rom surfaces, or even make surfaces that used exotic basis functions of your own crafting based on trigonometric functions or whatever else!

Here are the shadertoy demos I made:
<a target="_blank" href="https://www.shadertoy.com/view/4tfXz2">Shadertoy: Cubic Bezier Rectangle</a>
<a target="_blank" href="https://www.shadertoy.com/view/XtfSRj">Shadertoy: Quadratic Bezier Rectangle</a>
<a target="_blank" href="https://www.shadertoy.com/view/4lsSzj">Shadertoy: Infinite Bezier Rectangles</a>

And some other links about this stuff:
<a target="_blank" href="http://www.iquilezles.org/www/articles/terrainmarching/terrainmarching.htm">IQ - terrain raymarching</a>
<a target="_blank" href="http://iquilezles.org/www/articles/distance/distance.htm">IQ - distance estimation (using function gradients)</a>
<a target="_blank" href="http://math.stackexchange.com/questions/1327034/ray-intersection-with-explicit-1-axis-bezier-triangle">Math Stack Exchange - Ray intersection with explicit (1 axis) Bezier triangle?</a>
<a target="_blank" href="http://math.stackexchange.com/questions/729123/intersect-ray-line-vs-quadratic-bezier-triangle">Math Stack Exchange - Intersect Ray (Line) vs Quadratic Bezier Triangle</a>
<a target="_blank" href="http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/surface/bezier-de-casteljau.html">Bézier Surfaces: de Casteljau's Algorithm</a>
<a target="_blank" href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.18.5646&rep=rep1&type=pdf">Ray Tracing Triangular Bézier Patches (including Bezier clipping)</a>
<a target="_blank" href="https://en.wikipedia.org/wiki/B%C3%A9zier_surface">Wikipedia: Bezier Surface</a>
<a target="_blank" href="https://en.wikipedia.org/wiki/B%C3%A9zier_triangle">Wikipedia: Bezier Triangle</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2754</wp:post_id>
		<wp:post_date><![CDATA[2015-07-28 11:36:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-28 19:36:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[rectangular-bezier-patches]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495577478;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5413;}i:1;a:1:{s:2:"id";i:886;}i:2;a:1:{s:2:"id";i:928;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Finite Differences</title>
		<link>http://blog.demofox.org/2015/08/02/finite-differences/</link>
		<pubDate>Sun, 02 Aug 2015 18:23:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2825</guid>
		<description></description>
		<content:encoded><![CDATA[Finite differences are numerical methods for approximating function derivatives - otherwise known as the slope of a function at a specific point on the graph.  This can be helpful if it's undesirable or impossible to calculate the actual derivative of a specific function.

This post talks about three methods: central difference, backwards difference and forward difference.  They are all based on evaluating the function at two points and using the slope between those points as the derivative estimate.  

The distance between those sample points is called an epsilon, and the smaller it is, the more accurate the approximation is in theory.  In practice, extremely small values (like FLT_MIN) may hit numerical problems due to floating points number usage, and also you could hit performance problems due to using floating point denormals. Check the links section at the bottom for more info on denormals.

<h2>Central Difference</h2>

The central difference is the most accurate technique of the three.  You can find information about comparitive accuracy of these three techniques in the links section at the end.  In practical terms, this may also be the slowest method too - or the most computationally expensive - which i'll explain further down.

If you want to know the derivative of some function $latex y=f(x)$ at a specific value of x, you pick an epsilon e and then you calculate both $latex f(x-e)$ and $latex f(x+e)$.  You subtract the first one from the second and divide by 2*e to get an approximated slope of the function at the specific value of x.

Remembering that the slope is just rise over run, and that the derivative at a point on a function is just the slope of the function at that point, this should hopefully make sense and be pretty intuitive why it works.

The resulting equation looks like:

$latex m = \\frac{f(x+e)-f(x-e)}{2e}$

This process is visualized below.  The black line is the actual slope at 0.4 and the orange line is the estimated slope.  The orange dots are the sample points taken.  The epsilon in this case is 0.2.

<img src="https://demofox2.files.wordpress.com/2015/08/CentralDifference.png"/>

Interestingly, when dealing with quadratic (or linear) functions, the central difference method will give you the correct result.  The picture above uses a quadratic function, so you can see no matter what value of e we use, it will always be parallel to the actual slope at that point.  For cubic and higher functions, that won't always be true.

<h2>Backward Difference</h2>

The backward difference works just like the central difference except uses different sample points.  It evaluates $latex f(x-e)$ and $latex f(x)$, subtracts the 1st one from the second one and divides the result by e.

The resulting equation looks like this:

$latex m = \\frac{f(x)-f(x-e)}{e}$

A neat property shared by both this and the forward difference is that many times you are already going to be evaluating f(x) for other uses, so in practice this will just mean that you only have to evaluate f(x-e), and will already have the f(x) value.  That can make it more efficient than the central difference method, but it can be less precise.

Also, if you are walking down a function (say, rendering a Bezier curve, and wanting the slope at each point to do something with), you may very well be able to use the f(x) of the previous point as your f(x-e) function, which means that you could possibly calculate the backwards difference by using the previous point, instead of evaluating the function extra times in your loop!

Check out the image below to see how different values of e result in different quality approximations. The smaller the epsilon value, the more accurate the result.  An infinitely small epsilon would give the exact right answer.

<img src="https://demofox2.files.wordpress.com/2015/08/BackwardDifference.png"/>

<h3>Forward Difference</h3>

The forward difference is just like the backwards difference but it evaluates forward instead of backwards.

The equation looks like this:

$latex m = \\frac{f(x+e)-f(x)}{e}$

Below you can see it visually.  Note again that smaller values of e make the estimation closer to correct.

<img src="https://demofox2.files.wordpress.com/2015/08/ForwardDifference.png"/>

<h2>On the GPU</h2>

If you've ever encountered the glsl functions dFdx and dFdy and wondered how they work, they actually use these same techniques.

Shaders run in groups, and using dFdx, the shader just looks to it's neighbor for the value that was passed to it's dFdx, then using "local differencing" (per the docs), gives each shader the derivative it was able to calculate.

<h2>Links</h2>
<a href="https://www.opengl.org/sdk/docs/man/html/dFdx.xhtml" target="_blank">GLSL: dFdx, dFdy</a>
<a href="https://en.wikipedia.org/wiki/Finite_difference" target="_blank">Wikipediate: Finite Difference</a> - The wikipedia page talks about more details, including how to calculate 2nd derivatives and higher!
<a href="http://blogs.mathworks.com/cleve/2014/07/21/floating-point-denormals-insignificant-but-controversial-2/" target="_blank">Floating Point Denormals, Insignificant But Controversial</a>
<a href="http://mathforcollege.com/nm/simulations/nbm/02dif/nbm_dif_sim_comparedif.pdf" target="_blank">Comparing Methods of First Derivative Approximation Forward, Backward and Central Divided Difference</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2825</wp:post_id>
		<wp:post_date><![CDATA[2015-08-02 10:23:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-02 18:23:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[finite-differences]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495596401;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5949;}i:1;a:1:{s:2:"id";i:5999;}i:2;a:1:{s:2:"id";i:6201;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lagrange Rectangles</title>
		<link>http://blog.demofox.org/2015/08/05/lagrange-rectangles/</link>
		<pubDate>Wed, 05 Aug 2015 14:16:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2877</guid>
		<description></description>
		<content:encoded><![CDATA[In this post we are going to Frankenstein ideas from two other recent posts.  If you haven't seen these yet you should probably give them a read!

Ingredient 1: <a href="http://blog.demofox.org/2015/07/08/lagrange-interpolation/">Lagrange interpolation</a>
Ingredient 2: <a href="http://blog.demofox.org/2015/07/28/rectangular-bezier-patches/">Rectangular Bezier Patches</a>

<h2>Lagrange Surface</h2>

Lets say you have a grid of size MxN and you want to make a 3d surface for that grid.

You could use a Bezier rectangle but lets say that you really need the surface to pass through the control points.  Bezier curves and surfaces only generally pass through the end / edge control points.

So what do you do?  How about using Lagrange interpolation instead?

Just like how Bezier rectangles work, you interpolate on one axis, and then take those values and interpolate on the other axis.

Doing that, you get something like the below:

<img src="https://demofox2.files.wordpress.com/2015/08/lagrangerectangle.png"/>

This comes at a price though.  Whereas a Bezier curve or surface will be completely contained by it's control points, a Lagrange rectangle isn't always.  Also, they are subject to something called <a target="_blank" href="https://en.wikipedia.org/wiki/Runge%27s_phenomenon">Runge's Phenomenon</a> which basically means that the more control points you add, the more likely a surface is to get a bit "squirly".  You can see this effect when you add a lot of control points to my 1d lagrange interpolation demo as well: <a href="http://demofox.org/lagrange1d.html" target="_blank">HTML5 1d Lagrange Interpolation</a>.

Below is a picture of a bicubic Lagrange rectangle using the same control points the cubic Bezier rectangles used.  Notice how much more extreme the peaks and valleys are!  In the screenshot above, i scaled down the control points to 1/3 of what they were in the Bezier demo to make it look more reasonably well behaved.

<img src="https://demofox2.files.wordpress.com/2015/08/lagrangerectangle2.png"/>

<h2>Code</h2>

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;
 
typedef std::array&lt;float, 3&gt; TFloat3;
typedef std::array&lt;TFloat3, 3&gt; TFloat3x3;
 
const TFloat3x3 c_ControlPointsX =
{
    {
        { 0.7f, 0.8f, 0.9f },
        { 0.2f, 0.5f, 0.4f },
        { 0.6f, 0.3f, 0.1f },
    }
};
 
const TFloat3x3 c_ControlPointsY =
{
    {
        { 0.2f, 0.8f, 0.5f },
        { 0.6f, 0.9f, 0.3f },
        { 0.7f, 0.1f, 0.4f },
    }
};
 
const TFloat3x3 c_ControlPointsZ =
{
    {
        { 0.6f, 0.5f, 0.3f },
        { 0.7f, 0.1f, 0.9f },
        { 0.8f, 0.4f, 0.2f },
    }
};
 
void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}
 
//=======================================================================================
float QuadraticLagrange (const TFloat3&amp; p, float t)
{
	float c_x0 = 0.0 / 2.0;
	float c_x1 = 1.0 / 2.0;
	float c_x2 = 2.0 / 2.0;

    return
        p[0] * 
        (
            (t - c_x1) / (c_x0 - c_x1) * 
            (t - c_x2) / (c_x0 - c_x2)
        ) +
        p[1] * 
        (
            (t - c_x0) / (c_x1 - c_x0) * 
            (t - c_x2) / (c_x1 - c_x2)
        ) +
        p[2] * 
        (
            (t - c_x0) / (c_x2 - c_x0) * 
            (t - c_x1) / (c_x2 - c_x1)
        );
}
 
float BiquadraticLagrangePatch(const TFloat3x3&amp; p, float u, float v)
{
    TFloat3 uValues;
    uValues[0] = QuadraticLagrange(p[0], u);
    uValues[1] = QuadraticLagrange(p[1], u);
    uValues[2] = QuadraticLagrange(p[2], u);
    return QuadraticLagrange(uValues, v);
}
 
int main(int argc, char **argv)
{
    // how many values to display on each axis. Limited by console resolution!
    const int c_numValues = 4;
 
    printf(&quot;Lagrange rectangle:\n&quot;);
    for (int i = 0; i &lt; c_numValues; ++i)
    {
        float iPercent = ((float)i) / ((float)(c_numValues - 1));
        for (int j = 0; j &lt; c_numValues; ++j)
        {
            if (j == 0)
                printf(&quot;  &quot;);
            float jPercent = ((float)j) / ((float)(c_numValues - 1));
            float valueX = BiquadraticLagrangePatch(c_ControlPointsX, jPercent, iPercent);
            float valueY = BiquadraticLagrangePatch(c_ControlPointsY, jPercent, iPercent);
            float valueZ = BiquadraticLagrangePatch(c_ControlPointsZ, jPercent, iPercent);
            printf(&quot;(%0.2f, %0.2f, %0.2f) &quot;, valueX, valueY, valueZ);
        }
        printf(&quot;\n&quot;);
    }
    printf(&quot;\n&quot;);
 
    WaitForEnter();
    return 0;
}
[/code]

And here is the output:
<img src="https://demofox2.files.wordpress.com/2015/08/lagrangerectangle3.png"/>

Compare that to the output of the Bezier rectangles code which used the same control points:
<img src="https://demofox2.files.wordpress.com/2015/07/ProgramRun.png"/>

<h2>Links</h2>

<a target="_blank" href="https://www.shadertoy.com/view/MtlSzX">Shadertoy: Cubic Lagrange Rectangle</a>

Note that the above uses Lagrange interpolation on a grid.  The paper below talks about a way to make a Lagrange surface without using a grid:
<a href="https://www.siam.org/students/siuro/vol1issue1/S01002.pdf" target="_blank">A Simple Expression for Multivariate Lagrange Interpolation</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2877</wp:post_id>
		<wp:post_date><![CDATA[2015-08-05 06:16:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-05 14:16:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lagrange-rectangles]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495676845;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2754;}i:1;a:1:{s:2:"id";i:5413;}i:2;a:1:{s:2:"id";i:2697;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cubic Hermite Interpolation</title>
		<link>http://blog.demofox.org/2015/08/08/cubic-hermite-interpolation/</link>
		<pubDate>Sat, 08 Aug 2015 17:04:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2894</guid>
		<description></description>
		<content:encoded><![CDATA[It's a big wide world of curves out there and I have to say that most of the time, I consider myself a Bezier man.

Well let me tell you... cubic Hermite splines are technically representable in Bezier form, but they have some really awesome properties that I never fully appreciated until recently.

<b>Usefulness For Interpolation</b>

If you have a set of data points on some fixed interval (like for audio data, but could be anything), you can use a cubic Hermite spline to interpolate between any two data points.  It interpolates the value between those points (as in, it passes through both end points), but it also interpolates a derivative that is consistent if you approach the point from the left or the right.

In short, this means you can use cubic Hermite splines to interpolate data such that the result has $latex C1$ continuity everywhere!

<b>Usefulness As Curves</b>

If you have any number $latex N$ control points on a fixed interval, you can treat it as a bunch of piece wise cubic Hermite splines and evaluate it that way.

The end result is that you have a curve that is $latex C1$ continuous everywhere, it has local control (moving any control point only affects the two curve sections to the left and the two curve sections to the right), and best of all, the computational complexity doesn't rise as you increase the number of control points!

The image below was taken as a screenshot from one of the HTML5 demos I made for you to play with.  You can find links to them at the end of this post.

<img src="https://demofox2.files.wordpress.com/2015/08/cubichermite3.png"/>

<h2>Cubic Hermite Splines</h2>

Cubic Hermite splines have four control points but how it uses the control points is a bit different than you'd expect.

The curve itself passes only through the middle two control points, and the end control points are there to help calculate the tangent at the middle control points.

Let's say you have control points $latex P_{-1}, P_0, P_1, P_2$.  The curve at time 0 will be at point $latex P_0$ and the slope will be the same slope as a line would have if going from $latex P_{-1}$ to $latex P_1$.  The curve at time 1 will be at point $latex P_1$ and the slope will be the same slope as a line would have if going from $latex P_0$ to $latex P_2$.

Check out the picture below to see what I mean visually.

<img src="https://demofox2.files.wordpress.com/2015/08/cubichermite.png"/>

That sounds like a strange set of properties, but they are actually super useful.

What this means is that you can treat any group of 4 control points / data points as a separate cubic hermite spline, but when you put it all together, it is a single smooth curve.

Note that you can either interpolate 1d data, or you can interpolate 2d data points by doing this interpolation on each axis.  You could also use this to make a surface, which will likely be the next blog post!

<h2>The Math</h2>

I won't go into how the formula is derived, but if you are interested you should check out <a href="http://dsp.stackexchange.com/questions/18265/bicubic-interpolation/18273#18273" target="_blank">Signal Processing: Bicubic Interpolation</a>.

The formula is:

$latex a*t^3+b*t^2+c*t+d$

Where...

$latex a = \\frac{-P_{-1} + 3*P_0 - 3*P_1 + P_2}{2}$
$latex b = P_{-1} - \\frac{5*P_0}{2} + 2*P_1 - \\frac{P_2}{2}$
$latex c = \\frac{-P_{-1} + P_1}{2}$
$latex d = P_0$

Note that t is a value that goes from 0 to 1.  When t is 0, your curve will be at $latex P_1$ and when t is 1, your curve will be at $latex P_2$.  $latex P_{-1}$ and $latex P_{2}$ are used to be able to make this interpolation $latex C1$ continuous.

Here it is in some simple C++:
[code language="cpp"]
// t is a value that goes from 0 to 1 to interpolate in a C1 continuous way across uniformly sampled data points.
// when t is 0, this will return B.  When t is 1, this will return C.
static float CubicHermite (float A, float B, float C, float D, float t)
{
    float a = -A/2.0f + (3.0f*B)/2.0f - (3.0f*C)/2.0f + D/2.0f;
    float b = A - (5.0f*B)/2.0f + 2.0f*C - D / 2.0f;
    float c = -A/2.0f + C/2.0f;
    float d = B;

    return a*t*t*t + b*t*t + c*t + d;
}
[/code]

<h2>Code</h2>

Here is an example C++ program that interpolates both 1D and 2D data.

[code language="cpp"]#include &lt;stdio.h&gt;
#include &lt;vector&gt;
#include &lt;array&gt;
 
typedef std::vector&lt;float&gt; TPointList1D;
typedef std::vector&lt;std::array&lt;float,2&gt;&gt; TPointList2D;
 
void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

// t is a value that goes from 0 to 1 to interpolate in a C1 continuous way across uniformly sampled data points.
// when t is 0, this will return B.  When t is 1, this will return C.
float CubicHermite (float A, float B, float C, float D, float t)
{
    float a = -A/2.0f + (3.0f*B)/2.0f - (3.0f*C)/2.0f + D/2.0f;
    float b = A - (5.0f*B)/2.0f + 2.0f*C - D / 2.0f;
    float c = -A/2.0f + C/2.0f;
    float d = B;
 
    return a*t*t*t + b*t*t + c*t + d;
}

template &lt;typename T&gt;
inline T GetIndexClamped(const std::vector&lt;T&gt;&amp; points, int index)
{
    if (index &lt; 0)
        return points[0];
    else if (index &gt;= int(points.size()))
        return points.back();
    else
        return points[index];
}

int main (int argc, char **argv)
{
    const float c_numSamples = 13;

    // show some 1d interpolated values
    {
        const TPointList1D points =
        {
            0.0f,
            1.6f,
            2.3f,
            3.5f,
            4.3f,
            5.9f,
            6.8f
        };

        printf(&quot;1d interpolated values.  y = f(t)\n&quot;);
        for (int i = 0; i &lt; c_numSamples; ++i)
        {
            float percent = ((float)i) / (float(c_numSamples - 1));
            float x = (points.size()-1) * percent;

            int index = int(x);
            float t = x - floor(x);
            float A = GetIndexClamped(points, index - 1);
            float B = GetIndexClamped(points, index + 0);
            float C = GetIndexClamped(points, index + 1);
            float D = GetIndexClamped(points, index + 2);

            float y = CubicHermite(A, B, C, D, t);
            printf(&quot;  Value at %0.2f = %0.2f\n&quot;, x, y);
        }
        printf(&quot;\n&quot;);
    }

    // show some 2d interpolated values
    {
        const TPointList2D points =
        {
            { 0.0f, 1.1f },
            { 1.6f, 8.3f },
            { 2.3f, 6.5f },
            { 3.5f, 4.7f },
            { 4.3f, 3.1f },
            { 5.9f, 7.5f },
            { 6.8f, 0.0f }
        };

        printf(&quot;2d interpolated values.  x = f(t), y = f(t)\n&quot;);
        for (int i = 0; i &lt; c_numSamples; ++i)
        {
            float percent = ((float)i) / (float(c_numSamples - 1));
            float x = 0.0f;
            float y = 0.0f;

            float tx = (points.size() -1) * percent;
            int index = int(tx);
            float t = tx - floor(tx);

            std::array&lt;float, 2&gt; A = GetIndexClamped(points, index - 1);
            std::array&lt;float, 2&gt; B = GetIndexClamped(points, index + 0);
            std::array&lt;float, 2&gt; C = GetIndexClamped(points, index + 1);
            std::array&lt;float, 2&gt; D = GetIndexClamped(points, index + 2);
            x = CubicHermite(A[0], B[0], C[0], D[0], t);
            y = CubicHermite(A[1], B[1], C[1], D[1], t);

            printf(&quot;  Value at %0.2f = (%0.2f, %0.2f)\n&quot;, tx, x, y);
        }
        printf(&quot;\n&quot;);
    }
 
    WaitForEnter();
    return 0;
}
[/code]

The output of the program is below:

<img src="https://demofox2.files.wordpress.com/2015/08/cubichermite2.png"/>

<h2>Links</h2>

Here are some interactive HTML5 demos i made:
<a href="http://demofox.org/cubichermite1d.html" target="_blank">1D cubic hermite interpolation</a>
<a href="http://demofox.org/cubichermite2d.html" target="_blank">2D cubic hermite interpolation</a>

More info here:
<a href="https://en.wikipedia.org/wiki/Cubic_Hermite_spline" target="_blank">Wikipedia: Cubic Hermite Spline</a>

Closely related to cubic hermite splines, catmull-rom splines allow you to specify a "tension" parameter to make the result more or less curvy:
<a href="https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Catmull.E2.80.93Rom_spline" target="_blank">Catmull-Rom spline</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2894</wp:post_id>
		<wp:post_date><![CDATA[2015-08-08 09:04:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-08 17:04:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cubic-hermite-interpolation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495704867;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2754;}i:1;a:1:{s:2:"id";i:2661;}i:2;a:1:{s:2:"id";i:5413;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cubic Hermite Rectangles</title>
		<link>http://blog.demofox.org/2015/08/09/cubic-hermite-rectangles/</link>
		<pubDate>Sun, 09 Aug 2015 19:13:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2937</guid>
		<description></description>
		<content:encoded><![CDATA[Time for another Frankenstein post.  This time we are going to combine the following:

<ol>
<li><a href="http://blog.demofox.org/2015/08/08/cubic-hermite-interpolation/">Cubic Hermite Interpolation</a></li>
<li><a href="http://blog.demofox.org/2015/07/28/rectangular-bezier-patches/">Rectangular Bezier Patches</a></li>
</ol>

The end result is going to be a Cubic Hermite Rectangle Surface like the below.  Note that the curve only passes through the inner four control points, and the outer ring of 12 control points are used to determine the slope.

<img src="https://demofox2.files.wordpress.com/2015/08/hermitesurface.png"/>

Just like the cubic hermite curve counterpart, a cubic hermite rectangle surface is C1 continuous everywhere, which is great for use as a way of modeling geometry, as well as just for interpolation of multidimensional data.  In the image below, each checkerboard square is an individual hermite rectangle.

<img src="https://demofox2.files.wordpress.com/2015/08/hermitesurface2.png"/>

The links section at the bottom has links to the shadertoys I made that I got the screenshots from.

<h2>Code</h2>

Here's some C++ code that does bicubic hermite interpolation

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;
  
typedef std::array&lt;float, 4&gt; TFloat4;
typedef std::array&lt;TFloat4, 4&gt; TFloat4x4;
  
const TFloat4x4 c_ControlPointsX =
{
    {
        { 0.7f, 0.8f, 0.9f, 0.3f },
        { 0.2f, 0.5f, 0.4f, 0.1f },
        { 0.6f, 0.3f, 0.1f, 0.4f },
        { 0.8f, 0.4f, 0.2f, 0.7f },
    }
};
  
const TFloat4x4 c_ControlPointsY =
{
    {
        { 0.2f, 0.8f, 0.5f, 0.6f },
        { 0.6f, 0.9f, 0.3f, 0.8f },
        { 0.7f, 0.1f, 0.4f, 0.9f },
        { 0.6f, 0.5f, 0.3f, 0.2f },
    }
};
  
const TFloat4x4 c_ControlPointsZ =
{
    {
        { 0.6f, 0.5f, 0.3f, 0.2f },
        { 0.7f, 0.1f, 0.9f, 0.5f },
        { 0.8f, 0.4f, 0.2f, 0.7f },
        { 0.6f, 0.3f, 0.1f, 0.4f },
    }
};
  
void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}
  
// t is a value that goes from 0 to 1 to interpolate in a C1 continuous way across uniformly sampled data points.
// when t is 0, this will return p[1].  When t is 1, this will return p[2].
// p[0] and p[3] are used to calculate slopes at the edges.
float CubicHermite(const TFloat4&amp; p, float t)
{
    float a = -p[0] / 2.0f + (3.0f*p[1]) / 2.0f - (3.0f*p[2]) / 2.0f + p[3] / 2.0f;
    float b = p[0] - (5.0f*p[1]) / 2.0f + 2.0f*p[2] - p[3] / 2.0f;
    float c = -p[0] / 2.0f + p[2] / 2.0f;
    float d = p[1];

    return a*t*t*t + b*t*t + c*t + d;
}
  
float BicubicHermitePatch(const TFloat4x4&amp; p, float u, float v)
{
    TFloat4 uValues;
    uValues[0] = CubicHermite(p[0], u);
    uValues[1] = CubicHermite(p[1], u);
    uValues[2] = CubicHermite(p[2], u);
    uValues[3] = CubicHermite(p[2], u);
    return CubicHermite(uValues, v);
}
  
int main(int argc, char **argv)
{
    // how many values to display on each axis. Limited by console resolution!
    const int c_numValues = 4;
  
    printf(&quot;Cubic Hermite rectangle:\n&quot;);
    for (int i = 0; i &lt; c_numValues; ++i)
    {
        float iPercent = ((float)i) / ((float)(c_numValues - 1));
        for (int j = 0; j &lt; c_numValues; ++j)
        {
            if (j == 0)
                printf(&quot;  &quot;);
            float jPercent = ((float)j) / ((float)(c_numValues - 1));
            float valueX = BicubicHermitePatch(c_ControlPointsX, jPercent, iPercent);
            float valueY = BicubicHermitePatch(c_ControlPointsY, jPercent, iPercent);
            float valueZ = BicubicHermitePatch(c_ControlPointsZ, jPercent, iPercent);
            printf(&quot;(%0.2f, %0.2f, %0.2f) &quot;, valueX, valueY, valueZ);
        }
        printf(&quot;\n&quot;);
    }
    printf(&quot;\n&quot;);
  
    WaitForEnter();
    return 0;
}
[/code]

And here's the output.  Note that the four corners of the output correspond to the four inner most points defined in the data!
<img src="https://demofox2.files.wordpress.com/2015/08/hermitesurface3.png"/>

<h2>On The GPU / Links</h2>

While cubic Hermite rectangles pass through all of their control points like Lagrange surfaces do (and like Bezier rectangle's don't), they don't suffer from <a href="https://en.wikipedia.org/wiki/Runge%27s_phenomenon" target="_blank">Runge's Phenomenon</a> like Lagrange surfaces do.

However, just like Lagrange surfaces, Hermite surfaces don't have the nice property that Bezier surfaces have, where the surface is guaranteed to stay inside of the convex hull defined by the control points.

Since Hermite surfaces are just cubic functions though, you could calculate the minimum and maximum value that they can reach using some calculus and come up with a bounding box by going that direction.  The same thing is technically true of Lagrange surfaces as well for what it's worth.

Check out the links below to see cubic Hermite rectangles rendered in real time in WebGL using raytracing and raymarching:
<a href="https://www.shadertoy.com/view/ltsXzl" target="_blank">Shadertoy: Cubic Hermite Rectangle</a>
<a href="https://www.shadertoy.com/view/MtsXzl" target="_blank">Shadertoy: Infinite Hermite Rectangles</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2937</wp:post_id>
		<wp:post_date><![CDATA[2015-08-09 11:13:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-09 19:13:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cubic-hermite-rectangles]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495676820;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2894;}i:1;a:1:{s:2:"id";i:2877;}i:2;a:1:{s:2:"id";i:2754;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Resizing Images With Bicubic Interpolation</title>
		<link>http://blog.demofox.org/2015/08/15/resizing-images-with-bicubic-interpolation/</link>
		<pubDate>Sat, 15 Aug 2015 14:16:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=2953</guid>
		<description></description>
		<content:encoded><![CDATA[In the last post we saw how to do cubic interpolation on a grid of data.

Strangely enough, when that grid is a grid of pixel data, bicubic interpolation is a common method for resizing images!

Bicubic interpolation can also used in realtime rendering to make textures look nicer when scaled than standard bilinear texture interpolation.

This technique works when making images larger as well as smaller, but when making images smaller, you can still have problems with aliasing.  There are are better algorithms to use when making an image smaller.  Check the links section at the bottom for more details!

<h2>Example</h2>

Here's the old man from The Legend of Zelda who gives you the sword.
<img src="https://demofox2.files.wordpress.com/2015/08/LozMan.bmp"/>

Here he is scaled up 4x with nearest neighbor, bilinear interpolation and bicubic interpolation.
<img src="https://demofox2.files.wordpress.com/2015/08/lozman_4_0.bmp"/>
<img src="https://demofox2.files.wordpress.com/2015/08/lozman_4_1.bmp"/>
<img src="https://demofox2.files.wordpress.com/2015/08/lozman_4_2.bmp"/>

Here he is scaled up 16x with nearest neighbor, bilinear interpolation and bicubic interpolation.
<img src="https://demofox2.files.wordpress.com/2015/08/lozman_16_0.bmp"/>
<img src="https://demofox2.files.wordpress.com/2015/08/lozman_16_1.bmp"/>
<img src="https://demofox2.files.wordpress.com/2015/08/lozman_16_2.bmp"/>

<h2>Shadertoy</h2>

I made a shadertoy to show you how to do this in a GLSL pixel shader as well.  <a target="_blank" href="https://www.shadertoy.com/view/MllSzX"/>Shadertoy: Bicubic Texture Filtering</a>

In the screenshot below, going from left to right it uses: Nearest Neighbor, Bilinear, Lagrange Bicubic interpolation (only interpolates values, not slopes), Hermite Bicubic interpolation.
<img src="https://demofox2.files.wordpress.com/2015/08/Shadertoy.png"/>

<h2>Sample Code</h2>

Here's the code that I used to resize the images in the examples above.

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS

#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;array&gt;
#include &lt;vector&gt;
#include &lt;windows.h&gt;  // for bitmap headers.  Sorry non windows people!

#define CLAMP(v, min, max) if (v &lt; min) { v = min; } else if (v &gt; max) { v = max; } 

typedef uint8_t uint8;

struct SImageData
{
    SImageData()
        : m_width(0)
        , m_height(0)
    { }

    long m_width;
    long m_height;
    long m_pitch;
    std::vector&lt;uint8&gt; m_pixels;
};

void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

bool LoadImage (const char *fileName, SImageData&amp; imageData)
{
    // open the file if we can
    FILE *file;
    file = fopen(fileName, &quot;rb&quot;);
    if (!file)
        return false;

    // read the headers if we can
    BITMAPFILEHEADER header;
    BITMAPINFOHEADER infoHeader;
    if (fread(&amp;header, sizeof(header), 1, file) != 1 ||
        fread(&amp;infoHeader, sizeof(infoHeader), 1, file) != 1 ||
        header.bfType != 0x4D42 || infoHeader.biBitCount != 24)
    {
        fclose(file);
        return false;
    }

    // read in our pixel data if we can. Note that it's in BGR order, and width is padded to the next power of 4
    imageData.m_pixels.resize(infoHeader.biSizeImage);
    fseek(file, header.bfOffBits, SEEK_SET);
    if (fread(&amp;imageData.m_pixels[0], imageData.m_pixels.size(), 1, file) != 1)
    {
        fclose(file);
        return false;
    }

    imageData.m_width = infoHeader.biWidth;
    imageData.m_height = infoHeader.biHeight;

    imageData.m_pitch = imageData.m_width*3;
    if (imageData.m_pitch &amp; 3)
    {
        imageData.m_pitch &amp;= ~3;
        imageData.m_pitch += 4;
    }

    fclose(file);
    return true;
}

bool SaveImage (const char *fileName, const SImageData &amp;image)
{
    // open the file if we can
    FILE *file;
    file = fopen(fileName, &quot;wb&quot;);
    if (!file)
        return false;

    // make the header info
    BITMAPFILEHEADER header;
    BITMAPINFOHEADER infoHeader;

    header.bfType = 0x4D42;
    header.bfReserved1 = 0;
    header.bfReserved2 = 0;
    header.bfOffBits = 54;

    infoHeader.biSize = 40;
    infoHeader.biWidth = image.m_width;
    infoHeader.biHeight = image.m_height;
    infoHeader.biPlanes = 1;
    infoHeader.biBitCount = 24;
    infoHeader.biCompression = 0;
    infoHeader.biSizeImage = image.m_pixels.size();
    infoHeader.biXPelsPerMeter = 0;
    infoHeader.biYPelsPerMeter = 0;
    infoHeader.biClrUsed = 0;
    infoHeader.biClrImportant = 0;

    header.bfSize = infoHeader.biSizeImage + header.bfOffBits;

    // write the data and close the file
    fwrite(&amp;header, sizeof(header), 1, file);
    fwrite(&amp;infoHeader, sizeof(infoHeader), 1, file);
    fwrite(&amp;image.m_pixels[0], infoHeader.biSizeImage, 1, file);
    fclose(file);
    return true;
}

// t is a value that goes from 0 to 1 to interpolate in a C1 continuous way across uniformly sampled data points.
// when t is 0, this will return B.  When t is 1, this will return C.  Inbetween values will return an interpolation
// between B and C.  A and B are used to calculate slopes at the edges.
float CubicHermite (float A, float B, float C, float D, float t)
{
    float a = -A / 2.0f + (3.0f*B) / 2.0f - (3.0f*C) / 2.0f + D / 2.0f;
    float b = A - (5.0f*B) / 2.0f + 2.0f*C - D / 2.0f;
    float c = -A / 2.0f + C / 2.0f;
    float d = B;

    return a*t*t*t + b*t*t + c*t + d;
}

float Lerp (float A, float B, float t)
{
    return A * (1.0f - t) + B * t;
}

const uint8* GetPixelClamped (const SImageData&amp; image, int x, int y)
{
    CLAMP(x, 0, image.m_width - 1);
    CLAMP(y, 0, image.m_height - 1);    
    return &amp;image.m_pixels[(y * image.m_pitch) + x * 3];
}

std::array&lt;uint8, 3&gt; SampleNearest (const SImageData&amp; image, float u, float v)
{
    // calculate coordinates
    int xint = int(u * image.m_width);
    int yint = int(v * image.m_height);

    // return pixel
    auto pixel = GetPixelClamped(image, xint, yint);
    std::array&lt;uint8, 3&gt; ret;
    ret[0] = pixel[0];
    ret[1] = pixel[1];
    ret[2] = pixel[2];
    return ret;
}

std::array&lt;uint8, 3&gt; SampleLinear (const SImageData&amp; image, float u, float v)
{
    // calculate coordinates -&gt; also need to offset by half a pixel to keep image from shifting down and left half a pixel
    float x = (u * image.m_width) - 0.5f;
    int xint = int(x);
    float xfract = x - floor(x);

    float y = (v * image.m_height) - 0.5f;
    int yint = int(y);
    float yfract = y - floor(y);

    // get pixels
    auto p00 = GetPixelClamped(image, xint + 0, yint + 0);
    auto p10 = GetPixelClamped(image, xint + 1, yint + 0);
    auto p01 = GetPixelClamped(image, xint + 0, yint + 1);
    auto p11 = GetPixelClamped(image, xint + 1, yint + 1);

    // interpolate bi-linearly!
    std::array&lt;uint8, 3&gt; ret;
    for (int i = 0; i &lt; 3; ++i)
    {
        float col0 = Lerp(p00[i], p10[i], xfract);
        float col1 = Lerp(p01[i], p11[i], xfract);
        float value = Lerp(col0, col1, yfract);
        CLAMP(value, 0.0f, 255.0f);
        ret[i] = uint8(value);
    }
    return ret;
}

std::array&lt;uint8, 3&gt; SampleBicubic (const SImageData&amp; image, float u, float v)
{
    // calculate coordinates -&gt; also need to offset by half a pixel to keep image from shifting down and left half a pixel
    float x = (u * image.m_width) - 0.5;
    int xint = int(x);
    float xfract = x - floor(x);

    float y = (v * image.m_height) - 0.5;
    int yint = int(y);
    float yfract = y - floor(y);

    // 1st row
    auto p00 = GetPixelClamped(image, xint - 1, yint - 1);
    auto p10 = GetPixelClamped(image, xint + 0, yint - 1);
    auto p20 = GetPixelClamped(image, xint + 1, yint - 1);
    auto p30 = GetPixelClamped(image, xint + 2, yint - 1);

    // 2nd row
    auto p01 = GetPixelClamped(image, xint - 1, yint + 0);
    auto p11 = GetPixelClamped(image, xint + 0, yint + 0);
    auto p21 = GetPixelClamped(image, xint + 1, yint + 0);
    auto p31 = GetPixelClamped(image, xint + 2, yint + 0);

    // 3rd row
    auto p02 = GetPixelClamped(image, xint - 1, yint + 1);
    auto p12 = GetPixelClamped(image, xint + 0, yint + 1);
    auto p22 = GetPixelClamped(image, xint + 1, yint + 1);
    auto p32 = GetPixelClamped(image, xint + 2, yint + 1);

    // 4th row
    auto p03 = GetPixelClamped(image, xint - 1, yint + 2);
    auto p13 = GetPixelClamped(image, xint + 0, yint + 2);
    auto p23 = GetPixelClamped(image, xint + 1, yint + 2);
    auto p33 = GetPixelClamped(image, xint + 2, yint + 2);

    // interpolate bi-cubically!
    // Clamp the values since the curve can put the value below 0 or above 255
    std::array&lt;uint8, 3&gt; ret;
    for (int i = 0; i &lt; 3; ++i)
    {
        float col0 = CubicHermite(p00[i], p10[i], p20[i], p30[i], xfract);
        float col1 = CubicHermite(p01[i], p11[i], p21[i], p31[i], xfract);
        float col2 = CubicHermite(p02[i], p12[i], p22[i], p32[i], xfract);
        float col3 = CubicHermite(p03[i], p13[i], p23[i], p33[i], xfract);
        float value = CubicHermite(col0, col1, col2, col3, yfract);
        CLAMP(value, 0.0f, 255.0f);
        ret[i] = uint8(value);
    }
    return ret;
}

void ResizeImage (const SImageData &amp;srcImage, SImageData &amp;destImage, float scale, int degree)
{
    destImage.m_width = long(float(srcImage.m_width)*scale);
    destImage.m_height = long(float(srcImage.m_height)*scale);
    destImage.m_pitch = destImage.m_width * 3;
    if (destImage.m_pitch &amp; 3)
    {
        destImage.m_pitch &amp;= ~3;
        destImage.m_pitch += 4;
    }
    destImage.m_pixels.resize(destImage.m_pitch*destImage.m_height);

    uint8 *row = &amp;destImage.m_pixels[0];
    for (int y = 0; y &lt; destImage.m_height; ++y)
    {
        uint8 *destPixel = row;
        float v = float(y) / float(destImage.m_height - 1);
        for (int x = 0; x &lt; destImage.m_width; ++x)
        {
            float u = float(x) / float(destImage.m_width - 1);
            std::array&lt;uint8, 3&gt; sample;

            if (degree == 0)
                sample = SampleNearest(srcImage, u, v);
            else if (degree == 1)
                sample = SampleLinear(srcImage, u, v);
            else if (degree == 2)
                sample = SampleBicubic(srcImage, u, v);

            destPixel[0] = sample[0];
            destPixel[1] = sample[1];
            destPixel[2] = sample[2];
            destPixel += 3;
        }
        row += destImage.m_pitch;
    }
}

int main (int argc, char **argv)
{
    float scale = 1.0f;
    int degree = 0;

    bool showUsage = argc &lt; 5 ||
        (sscanf(argv[3], &quot;%f&quot;, &amp;scale) != 1) ||
        (sscanf(argv[4], &quot;%i&quot;, &amp;degree) != 1);

    char *srcFileName = argv[1];
    char *destFileName = argv[2];

    if (showUsage)
    {
        printf(&quot;Usage: &lt;source&gt; &lt;dest&gt; &lt;scale&gt; &lt;degree&gt;\ndegree 0 = nearest, 1 = bilinear, 2 = bicubic.\n\n&quot;);
        WaitForEnter();
        return 1;
    }

    printf(&quot;Attempting to resize a 24 bit image.\n&quot;);
    printf(&quot;  Source = %s\n  Dest = %s\n  Scale = %0.2f\n\n&quot;, srcFileName, destFileName, scale);

    SImageData srcImage;
    if (LoadImage(srcFileName, srcImage))
    {
        printf(&quot;%s loaded\n&quot;, srcFileName);
        SImageData destImage;
        ResizeImage(srcImage, destImage, scale, degree);
        if (SaveImage(destFileName, destImage))
            printf(&quot;Resized image saved as %s\n&quot;, destFileName);
        else
            printf(&quot;Could not save resized image as %s\n&quot;, destFileName);
    }
    else
        printf(&quot;could not read 24 bit bmp file %s\n\n&quot;, srcFileName);
    return 0;
}
[/code]

<h2>Links</h2>

<a href="http://www.cplusplus.com/articles/GwvU7k9E/" target="_blank">A small tutorial about how to load a bitmap file</a><br>
<a href="https://web.archive.org/web/20080912171714/http://www.fortunecity.com/skyscraper/windows/364/bmpffrmt.html" target="_blank">The BMP Format</a><br>
<a href="http://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf" target="_blank">Reconstruction Filters in Computer Graphics</a><br>
<br>
The link below talks about how to do cubic texture sampling on the GPU without having to do 16 texture reads!
<a href="http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter20.html" target="_blank">GPU Gems 2 Chapter 20. Fast Third-Order Texture Filtering</a><br>
<br>
This link is from Inigo Quilez, where he transforms a texture coordinate before passing it to the bilinear filtering, to get higher quality texture sampling without having to do extra texture reads.  That is pretty cool.
<a href="http://iquilezles.org/www/articles/texture/texture.htm" target="_blank">IQ: improved texture interpolation</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2953</wp:post_id>
		<wp:post_date><![CDATA[2015-08-15 06:16:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-15 14:16:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[resizing-images-with-bicubic-interpolation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495705306;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3986;}i:1;a:1:{s:2:"id";i:3967;}i:2;a:1:{s:2:"id";i:2434;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gaussian Blur</title>
		<link>http://blog.demofox.org/2015/08/19/gaussian-blur/</link>
		<pubDate>Thu, 20 Aug 2015 04:11:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3009</guid>
		<description></description>
		<content:encoded><![CDATA[In this post we are going to take the concepts we went over in the last post (Box Blur) and apply them to Gaussian blurring.

At a high level, Gaussian blurring works just like box blurring in that there is a weight per pixel and that for each pixel, you apply the weights to that pixel and it's neighbors to come up with the final value for the blurred pixel.

With true Gaussian blurring however, the function that defines the weights for each pixel technically never reaches zero, but gets smaller and smaller over distance.  In theory this makes a Gaussian kernel infinitely large.  In practice though, you can choose a cut off point and call it good enough.

The parameters to a Gaussian blur are:
<ul>
	<li>Sigma ($latex \\sigma$) - This defines how much blur there is.  A larger number is a higher amount of blur.</li>
	<li>Radius - The size of the kernel in pixels.  The appropriate pixel size can be calculated for a specific sigma, but more information on that lower down.</li>
</ul>

Just like a box blur, a Gaussian blur is separable which means that you can either apply a 2d convolution kernel, or you can apply a 1d convolution kernel on each axis.  Doing a single 2d convolution means more calculations, but you only need one buffer to put the results into.  Doing two 1d convolutions (one on each axis), ends up being fewer calculations, but requires two buffers to put the results into (one intermediate buffer to hold the first axis results).

Here is a 3 pixel 1d Gaussian Kernel for a sigma of 1.0:
<img src="https://demofox2.files.wordpress.com/2015/08/Gaussian1d.png"/>

Below is a 3x3 pixel 2d Gaussian Kernel also with a sigma of 1.0.  Note that this can be calculated as an outer product (tensor product) of 1d kernels!
<img src="https://demofox2.files.wordpress.com/2015/08/Weights.png"/>

An interesting property of Gaussian blurs is that you can apply multiple smaller blurs and it will come up with the result as if you did a larger Blur.  Unfortunately it's more calculations doing multiple smaller blurs so is not usually worth while.

If you apply multiple blurs, the equivalent blur is the square root of the sum of the squares of the blur.  Taking wikipedia's example, if you applied a blur with radius 6 and a blur with a radius of 8, you'd end up with the equivelant of a radius 10 blur.  This is because $latex \\sqrt{6^2 + 8^2} = 10$.

<h2>Calculating The Kernel</h2>

There are a couple ways to calculate a Gaussian kernel.

Believe it or not, Pascal's triangle approaches the Gaussian bell curve as the row number reaches infinity.  If you remember, Pascal's triangle also represents the numbers that each term is calculated by after expanding binomials $latex (x+y)^N$.  So technically, you could use a row from Pascal's triangle as a 1d kernel and normalize the result, but it isn't the most accurate.

A better way is to use the Gaussian function which is this:

$latex e^{-x^2/(2*\\sigma^2)}$

Where the sigma is your blur amount and x ranges across your values from the negative to the positive.  For instance if your kernel was 5 values, it would range from -2 to +2.

An even better way would be to integrate the Gaussian function instead of just taking point samples.  You can read about it in the link at the bottom "Gaussian Kernel Calculator", but it's also what we do in the example code.

Whatever way you do it, make sure and normalize the result so that the weights add up to 1.  This makes sure that your blurring doesn't make the image get brighter (greater than 1) or dimmer (less than 1).

<h2>Calculating The Kernel Size</h2>

Given a sigma value, you can calculate the size of the kernel you need by using this formula:

$latex 1+2 \\sqrt{-2 \\sigma^2 \\ln 0.005}$

That formula makes a Kernel large enough such that it cuts off when the value in the kernel is less than 0.5%.  You can adjust the number in there to higher or lower depending on your desires for speed versus quality.

<h2>Examples</h2>

Once again, here is the unaltered image we are working with:
<img src="https://demofox2.files.wordpress.com/2015/08/Florida.bmp"/>

Here is the image blurred with a sigma of 3,3  (3 on the x axis and 3 on the y axis):
<img src="https://demofox2.files.wordpress.com/2015/08/FloridaBlur3_3.png"/>

Here is the image blurred with a sigma of 20,3:
<img src="https://demofox2.files.wordpress.com/2015/08/FloridaBlur20_3.png"/>

Here is the image blurred with a sigma of 50,50:
<img src="https://demofox2.files.wordpress.com/2015/08/FloridaBlur50_50.png"/>

<h2>Shadertoy</h2>

Here's a shadertoy implementing Gaussian Blur: <a href="https://www.shadertoy.com/view/MtlSWj" target="_blank">Shadertoy:DF Gaussian Blur</a>
<img src="https://demofox2.files.wordpress.com/2015/08/shadertoy.png"/>

<h2>Code</h2>

Here's the source code I used to blur the examples above:

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS
 
#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;array&gt;
#include &lt;vector&gt;
#include &lt;functional&gt;
#include &lt;windows.h&gt;  // for bitmap headers.  Sorry non windows people!
 
typedef uint8_t uint8;

const float c_pi = 3.14159265359f;

struct SImageData
{
    SImageData()
        : m_width(0)
        , m_height(0)
    { }
 
    long m_width;
    long m_height;
    long m_pitch;
    std::vector&lt;uint8&gt; m_pixels;
};
 
void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}
 
bool LoadImage (const char *fileName, SImageData&amp; imageData)
{
    // open the file if we can
    FILE *file;
    file = fopen(fileName, &quot;rb&quot;);
    if (!file)
        return false;
 
    // read the headers if we can
    BITMAPFILEHEADER header;
    BITMAPINFOHEADER infoHeader;
    if (fread(&amp;header, sizeof(header), 1, file) != 1 ||
        fread(&amp;infoHeader, sizeof(infoHeader), 1, file) != 1 ||
        header.bfType != 0x4D42 || infoHeader.biBitCount != 24)
    {
        fclose(file);
        return false;
    }
 
    // read in our pixel data if we can. Note that it's in BGR order, and width is padded to the next power of 4
    imageData.m_pixels.resize(infoHeader.biSizeImage);
    fseek(file, header.bfOffBits, SEEK_SET);
    if (fread(&amp;imageData.m_pixels[0], imageData.m_pixels.size(), 1, file) != 1)
    {
        fclose(file);
        return false;
    }
 
    imageData.m_width = infoHeader.biWidth;
    imageData.m_height = infoHeader.biHeight;
 
    imageData.m_pitch = imageData.m_width*3;
    if (imageData.m_pitch &amp; 3)
    {
        imageData.m_pitch &amp;= ~3;
        imageData.m_pitch += 4;
    }
 
    fclose(file);
    return true;
}
 
bool SaveImage (const char *fileName, const SImageData &amp;image)
{
    // open the file if we can
    FILE *file;
    file = fopen(fileName, &quot;wb&quot;);
    if (!file)
        return false;
 
    // make the header info
    BITMAPFILEHEADER header;
    BITMAPINFOHEADER infoHeader;
 
    header.bfType = 0x4D42;
    header.bfReserved1 = 0;
    header.bfReserved2 = 0;
    header.bfOffBits = 54;
 
    infoHeader.biSize = 40;
    infoHeader.biWidth = image.m_width;
    infoHeader.biHeight = image.m_height;
    infoHeader.biPlanes = 1;
    infoHeader.biBitCount = 24;
    infoHeader.biCompression = 0;
    infoHeader.biSizeImage = image.m_pixels.size();
    infoHeader.biXPelsPerMeter = 0;
    infoHeader.biYPelsPerMeter = 0;
    infoHeader.biClrUsed = 0;
    infoHeader.biClrImportant = 0;
 
    header.bfSize = infoHeader.biSizeImage + header.bfOffBits;
 
    // write the data and close the file
    fwrite(&amp;header, sizeof(header), 1, file);
    fwrite(&amp;infoHeader, sizeof(infoHeader), 1, file);
    fwrite(&amp;image.m_pixels[0], infoHeader.biSizeImage, 1, file);
    fclose(file);
    return true;
}

int PixelsNeededForSigma (float sigma)
{
    // returns the number of pixels needed to represent a gaussian kernal that has values
    // down to the threshold amount.  A gaussian function technically has values everywhere
    // on the image, but the threshold lets us cut it off where the pixels contribute to
    // only small amounts that aren't as noticeable.
    const float c_threshold = 0.005f; // 0.5%
    return int(floor(1.0f + 2.0f * sqrtf(-2.0f * sigma * sigma * log(c_threshold)))) + 1;
}

float Gaussian (float sigma, float x)
{
    return expf(-(x*x) / (2.0f * sigma*sigma));
}

float GaussianSimpsonIntegration (float sigma, float a, float b)
{
    return
        ((b - a) / 6.0f) *
        (Gaussian(sigma, a) + 4.0f * Gaussian(sigma, (a + b) / 2.0f) + Gaussian(sigma, b));
}

std::vector&lt;float&gt; GaussianKernelIntegrals (float sigma, int taps)
{
    std::vector&lt;float&gt; ret;
    float total = 0.0f;
    for (int i = 0; i &lt; taps; ++i)
    {
        float x = float(i) - float(taps / 2);
        float value = GaussianSimpsonIntegration(sigma, x - 0.5f, x + 0.5f);
        ret.push_back(value);
        total += value;
    }
    // normalize it
    for (unsigned int i = 0; i &lt; ret.size(); ++i)
    {
        ret[i] /= total;
    }
    return ret;
}

const uint8* GetPixelOrBlack (const SImageData&amp; image, int x, int y)
{
    static const uint8 black[3] = { 0, 0, 0 };
    if (x &lt; 0 || x &gt;= image.m_width ||
        y &lt; 0 || y &gt;= image.m_height)
    {
        return black;
    }

    return &amp;image.m_pixels[(y * image.m_pitch) + x * 3];
}

void BlurImage (const SImageData&amp; srcImage, SImageData &amp;destImage, float xblursigma, float yblursigma, unsigned int xblursize, unsigned int yblursize)
{
    // allocate space for copying the image for destImage and tmpImage
    destImage.m_width = srcImage.m_width;
    destImage.m_height = srcImage.m_height;
    destImage.m_pitch = srcImage.m_pitch;
    destImage.m_pixels.resize(destImage.m_height * destImage.m_pitch);

    SImageData tmpImage;
    tmpImage.m_width = srcImage.m_width;
    tmpImage.m_height = srcImage.m_height;
    tmpImage.m_pitch = srcImage.m_pitch;
    tmpImage.m_pixels.resize(tmpImage.m_height * tmpImage.m_pitch);

    // horizontal blur from srcImage into tmpImage
    {
        auto row = GaussianKernelIntegrals(xblursigma, xblursize);

        int startOffset = -1 * int(row.size() / 2);

        for (int y = 0; y &lt; tmpImage.m_height; ++y)
        {
            for (int x = 0; x &lt; tmpImage.m_width; ++x)
            {
                std::array&lt;float, 3&gt; blurredPixel = { 0.0f, 0.0f, 0.0f };
                for (unsigned int i = 0; i &lt; row.size(); ++i)
                {
                    const uint8 *pixel = GetPixelOrBlack(srcImage, x + startOffset + i, y);
                    blurredPixel[0] += float(pixel[0]) * row[i];
                    blurredPixel[1] += float(pixel[1]) * row[i];
                    blurredPixel[2] += float(pixel[2]) * row[i];
                }
                
                uint8 *destPixel = &amp;tmpImage.m_pixels[y * tmpImage.m_pitch + x * 3];

                destPixel[0] = uint8(blurredPixel[0]);
                destPixel[1] = uint8(blurredPixel[1]);
                destPixel[2] = uint8(blurredPixel[2]);
            }
        }
    }

    // vertical blur from tmpImage into destImage
    {
        auto row = GaussianKernelIntegrals(yblursigma, yblursize);

        int startOffset = -1 * int(row.size() / 2);

        for (int y = 0; y &lt; destImage.m_height; ++y)
        {
            for (int x = 0; x &lt; destImage.m_width; ++x)
            {
                std::array&lt;float, 3&gt; blurredPixel = { 0.0f, 0.0f, 0.0f };
                for (unsigned int i = 0; i &lt; row.size(); ++i)
                {
                    const uint8 *pixel = GetPixelOrBlack(tmpImage, x, y + startOffset + i);
                    blurredPixel[0] += float(pixel[0]) * row[i];
                    blurredPixel[1] += float(pixel[1]) * row[i];
                    blurredPixel[2] += float(pixel[2]) * row[i];
                }

                uint8 *destPixel = &amp;destImage.m_pixels[y * destImage.m_pitch + x * 3];

                destPixel[0] = uint8(blurredPixel[0]);
                destPixel[1] = uint8(blurredPixel[1]);
                destPixel[2] = uint8(blurredPixel[2]);
            }
        }
    }
}

int main (int argc, char **argv)
{
    float xblursigma, yblursigma;
 
    bool showUsage = argc &lt; 5 ||
        (sscanf(argv[3], &quot;%f&quot;, &amp;xblursigma) != 1) ||
        (sscanf(argv[4], &quot;%f&quot;, &amp;yblursigma) != 1);
 
    char *srcFileName = argv[1];
    char *destFileName = argv[2];
 
    if (showUsage)
    {
        printf(&quot;Usage: &lt;source&gt; &lt;dest&gt; &lt;xblur&gt; &lt;yblur&gt;\nBlur values are sigma\n\n&quot;);
        WaitForEnter();
        return 1;
    }
    
    // calculate pixel sizes, and make sure they are odd 
    int xblursize = PixelsNeededForSigma(xblursigma) | 1;
    int yblursize = PixelsNeededForSigma(yblursigma) | 1;

    printf(&quot;Attempting to blur a 24 bit image.\n&quot;);
    printf(&quot;  Source=%s\n  Dest=%s\n  blur=[%0.1f, %0.1f] px=[%d,%d]\n\n&quot;, srcFileName, destFileName, xblursigma, yblursigma, xblursize, yblursize);
 
    SImageData srcImage;
    if (LoadImage(srcFileName, srcImage))
    {
        printf(&quot;%s loaded\n&quot;, srcFileName);
        SImageData destImage;
        BlurImage(srcImage, destImage, xblursigma, yblursigma, xblursize, yblursize);
        if (SaveImage(destFileName, destImage))
            printf(&quot;Blurred image saved as %s\n&quot;, destFileName);
        else
        {
            printf(&quot;Could not save blurred image as %s\n&quot;, destFileName);
            WaitForEnter();
            return 1;
        }
    }
    else
    {
        printf(&quot;could not read 24 bit bmp file %s\n\n&quot;, srcFileName);
        WaitForEnter();
        return 1;
    }
    return 0;
}
[/code]

<h2>Links</h2>

Here is a really great explanation of the Gaussian blur.
<a href="http://patrick-fuller.com/gaussian-blur-image-processing-for-scientists-and-engineers-part-4/" target="_blank">Gaussian Blur - Image processing for scientists and engineers, Part 4</a>
I highly recommend reading the 6 part series about image processing (DSP) from the beginning because it's really informative and very easy to read!
<a href="http://patrick-fuller.com/images-are-data-an-introduction-to-image-processing-for-scientists-and-engineers/" target="_blank">Images are data - Image processing for scientists and engineers, Part 1</a><br>
<br>
<a href="http://www.stat.wisc.edu/~mchung/teaching/MIA/reading/diffusion.gaussian.kernel.pdf.pdf" target="_blank">The Gaussian Kernel</a><br>
<a href="http://dev.theomader.com/gaussian-kernel-calculator/" target="_blank">Gaussian Kernel Calculator</a><br>
<a href="http://dsp.stackexchange.com/q/10057/15130" target="_blank">DSP Stack Exchange: Gaussian Blur - standard deviation, radius and kernel size</a><br>
<a href="https://en.wikipedia.org/wiki/Gaussian_blur" target="_blank">Wikipedia: Gaussian blur</a><br>
<br>
If you want to take this from theory / hobby level up to pro level, give this link a read from intel:
<a href="https://software.intel.com/en-us/blogs/2014/07/15/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms" target="_blank">Intel: An investigation of fast real-time GPU-based image blur algorithms</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3009</wp:post_id>
		<wp:post_date><![CDATA[2015-08-19 20:11:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-20 04:11:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[gaussian-blur]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495709006;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3022;}i:1;a:1:{s:2:"id";i:6208;}i:2;a:1:{s:2:"id";i:4744;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Box Blur</title>
		<link>http://blog.demofox.org/2015/08/18/box-blur/</link>
		<pubDate>Tue, 18 Aug 2015 19:44:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3022</guid>
		<description></description>
		<content:encoded><![CDATA[If you ever have heard the terms "Box Blur", "Boxcar Function", "Box Filter", "Boxcar Integrator" or other various combinations of those words, you may have thought it was some advanced concept that is hard to understand and hard to implement.  If that's what you thought, prepare to be surprised!

A box filter is nothing more than taking N samples of data (or NxN samples of data, or NxNxN etc) and averaging them!  Yes, that is all there is to it :P

In this post, we are going to implement a box blur by averaging pixels.

<h2>1D Case</h2>

For the case of a 1d box filter, let's say we wanted every data point to be the result of averaging it with it's two neighbors.  It'd be easy enough to program that by just doing it, but let's look at it a different way.  What weight would we need to multiply each of the three values by (the value and it's two neighbors) to make it come up with the average?

<img src="https://demofox2.files.wordpress.com/2015/08/Boxcar3.png"/>

Yep, you guessed it!  For every data value, you multiply it and it's neighbors by 1/3 to come up with the average value.  We could easily increase the size of the filter to 5 pixels, and multiply each pixel by 1/5 instead.  We could continue the pattern as high as we wanted.

One thing you might notice is that if we want a buffer with all the results, we can't just alter the source data as we go, because we want the unaltered source values of the data to use those weights with, to get the correct results.  Because of that, we need to make a second buffer to put the results of the filtering into.

Believe it or not, that diagram above is a convolution kernel, and how we talked about applying it is how you do convolution in 1d!  It just so happens that this convolution kernel averages three pixels into one, which also happens to provide a low pass filter type effect. 

Low pass filtering is what is done before down sampling audio data to prevent aliasing (frequencies higher than the sample rate can handle, which makes audio sound bad).

Surprise... blurring can also be seen as low pass filtering, which is something you can do before scaling an image down in size, to prevent aliasing.  

<h2>2D Case</h2>

The 2d case isn't much more difficult to understand than the 1d case.  Instead of only averaging on one axis, we average on two instead:
<img src="https://demofox2.files.wordpress.com/2015/08/boxweights.png"/>

Something interesting to note is that you can either use this 3x3 2d convolution kernel, or, you could apply the 1d convolution kernel described above on the X axis and then the Y axis.  The methods are mathematically equivalent.

Using the 2d convolution kernel would result in 9 multiplications per pixel, but if going with the separated axis X and then Y 1d kernel, you'd only end up doing 6 multiplications per pixel (3 multiplications per axis).  In general, if you have a seperable 2d convolution kernel (meaning that you can break it into a per axis 1d convolution), you will end up doing N^2 multiplications when using the 2d kernel, versus N*2 multiplications when using the 1d kernels.  You can see that this would add up quickly in favor of using 1d kernels, but unfortunately not all kernels are separable.

Doing two passes does come at a cost though.  Since you have to use a temporary buffer for each pass, you end up having to create two temporary buffers instead of one.

You can build 2d kernels from 1d kernels by multiplying them as a row vector, by a column vector.  For instance, you can see how multiplying the (1/3,1/3,1/3) kernel by itself as a column vector would create the 2nd kernel, that is 3x3 and has 1/9 in every spot.

The resulting 3x3 matrix is called an outer product, or a tensor product.  Something interesting to note is that you don't have to do the same operation on each axis!

<h2>Examples</h2>

Here are some examples of box blurring with different values, using the sample code provided below.

The source image:
<img src="https://demofox2.files.wordpress.com/2015/08/Florida.bmp"/>

Now blurred by a 10x10 box car convolution kernel:
<img src="https://demofox2.files.wordpress.com/2015/08/florida_10_10.bmp"/>

Now blurred by a 100x10 box car convolution kernel:
<img src="https://demofox2.files.wordpress.com/2015/08/florida_100_10.bmp"/>

<h2>Shadertoy</h2>

You can find a shadertoy implementation of box blurring here: <a href="https://www.shadertoy.com/view/MllSDj" target="_blank">Shadertoy:DF Box Blur</a>
<img src="https://demofox2.files.wordpress.com/2015/08/boxblur.png"/>

<h2>Code</h2>

Here's the code I used to blur the example images above:

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS
  
#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;array&gt;
#include &lt;vector&gt;
#include &lt;functional&gt;
#include &lt;windows.h&gt;  // for bitmap headers.  Sorry non windows people!
  
typedef uint8_t uint8;
 
const float c_pi = 3.14159265359f;
 
struct SImageData
{
    SImageData()
        : m_width(0)
        , m_height(0)
    { }
  
    long m_width;
    long m_height;
    long m_pitch;
    std::vector&lt;uint8&gt; m_pixels;
};
  
void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}
  
bool LoadImage (const char *fileName, SImageData&amp; imageData)
{
    // open the file if we can
    FILE *file;
    file = fopen(fileName, &quot;rb&quot;);
    if (!file)
        return false;
  
    // read the headers if we can
    BITMAPFILEHEADER header;
    BITMAPINFOHEADER infoHeader;
    if (fread(&amp;header, sizeof(header), 1, file) != 1 ||
        fread(&amp;infoHeader, sizeof(infoHeader), 1, file) != 1 ||
        header.bfType != 0x4D42 || infoHeader.biBitCount != 24)
    {
        fclose(file);
        return false;
    }
  
    // read in our pixel data if we can. Note that it's in BGR order, and width is padded to the next power of 4
    imageData.m_pixels.resize(infoHeader.biSizeImage);
    fseek(file, header.bfOffBits, SEEK_SET);
    if (fread(&amp;imageData.m_pixels[0], imageData.m_pixels.size(), 1, file) != 1)
    {
        fclose(file);
        return false;
    }
  
    imageData.m_width = infoHeader.biWidth;
    imageData.m_height = infoHeader.biHeight;
  
    imageData.m_pitch = imageData.m_width*3;
    if (imageData.m_pitch &amp; 3)
    {
        imageData.m_pitch &amp;= ~3;
        imageData.m_pitch += 4;
    }
  
    fclose(file);
    return true;
}
  
bool SaveImage (const char *fileName, const SImageData &amp;image)
{
    // open the file if we can
    FILE *file;
    file = fopen(fileName, &quot;wb&quot;);
    if (!file)
        return false;
  
    // make the header info
    BITMAPFILEHEADER header;
    BITMAPINFOHEADER infoHeader;
  
    header.bfType = 0x4D42;
    header.bfReserved1 = 0;
    header.bfReserved2 = 0;
    header.bfOffBits = 54;
  
    infoHeader.biSize = 40;
    infoHeader.biWidth = image.m_width;
    infoHeader.biHeight = image.m_height;
    infoHeader.biPlanes = 1;
    infoHeader.biBitCount = 24;
    infoHeader.biCompression = 0;
    infoHeader.biSizeImage = image.m_pixels.size();
    infoHeader.biXPelsPerMeter = 0;
    infoHeader.biYPelsPerMeter = 0;
    infoHeader.biClrUsed = 0;
    infoHeader.biClrImportant = 0;
  
    header.bfSize = infoHeader.biSizeImage + header.bfOffBits;
  
    // write the data and close the file
    fwrite(&amp;header, sizeof(header), 1, file);
    fwrite(&amp;infoHeader, sizeof(infoHeader), 1, file);
    fwrite(&amp;image.m_pixels[0], infoHeader.biSizeImage, 1, file);
    fclose(file);
    return true;
}

const uint8* GetPixelOrBlack (const SImageData&amp; image, int x, int y)
{
    static const uint8 black[3] = { 0, 0, 0 };
    if (x &lt; 0 || x &gt;= image.m_width ||
        y &lt; 0 || y &gt;= image.m_height)
    {
        return black;
    }
 
    return &amp;image.m_pixels[(y * image.m_pitch) + x * 3];
}
 
void BlurImage (const SImageData&amp; srcImage, SImageData &amp;destImage, unsigned int xblur, unsigned int yblur)
{
    // allocate space for copying the image for destImage and tmpImage
    destImage.m_width = srcImage.m_width;
    destImage.m_height = srcImage.m_height;
    destImage.m_pitch = srcImage.m_pitch;
    destImage.m_pixels.resize(destImage.m_height * destImage.m_pitch);
 
    SImageData tmpImage;
    tmpImage.m_width = srcImage.m_width;
    tmpImage.m_height = srcImage.m_height;
    tmpImage.m_pitch = srcImage.m_pitch;
    tmpImage.m_pixels.resize(tmpImage.m_height * tmpImage.m_pitch);
 
    // horizontal blur from srcImage into tmpImage
    {
        float weight = 1.0f / float(xblur);
        int half = xblur / 2;
        for (int y = 0; y &lt; tmpImage.m_height; ++y)
        {
            for (int x = 0; x &lt; tmpImage.m_width; ++x)
            {
                std::array&lt;float, 3&gt; blurredPixel = { 0.0f, 0.0f, 0.0f };
                for (int i = -half; i &lt;= half; ++i)
                {
                    const uint8 *pixel = GetPixelOrBlack(srcImage, x + i, y);
                    blurredPixel[0] += float(pixel[0]) * weight;
                    blurredPixel[1] += float(pixel[1]) * weight;
                    blurredPixel[2] += float(pixel[2]) * weight;
                }
                 
                uint8 *destPixel = &amp;tmpImage.m_pixels[y * tmpImage.m_pitch + x * 3];
 
                destPixel[0] = uint8(blurredPixel[0]);
                destPixel[1] = uint8(blurredPixel[1]);
                destPixel[2] = uint8(blurredPixel[2]);
            }
        }
    }
 
    // vertical blur from tmpImage into destImage
    {
        float weight = 1.0f / float(yblur);
        int half = yblur / 2;
 
        for (int y = 0; y &lt; destImage.m_height; ++y)
        {
            for (int x = 0; x &lt; destImage.m_width; ++x)
            {
                std::array&lt;float, 3&gt; blurredPixel = { 0.0f, 0.0f, 0.0f };
                for (int i = -half; i &lt;= half; ++i)
                {
                    const uint8 *pixel = GetPixelOrBlack(tmpImage, x, y + i);
                    blurredPixel[0] += float(pixel[0]) * weight;
                    blurredPixel[1] += float(pixel[1]) * weight;
                    blurredPixel[2] += float(pixel[2]) * weight;
                }
 
                uint8 *destPixel = &amp;destImage.m_pixels[y * destImage.m_pitch + x * 3];
 
                destPixel[0] = uint8(blurredPixel[0]);
                destPixel[1] = uint8(blurredPixel[1]);
                destPixel[2] = uint8(blurredPixel[2]);
            }
        }
    }
}
 
int main (int argc, char **argv)
{
    int xblur, yblur;
  
    bool showUsage = argc &lt; 5 ||
        (sscanf(argv[3], &quot;%i&quot;, &amp;xblur) != 1) ||
        (sscanf(argv[4], &quot;%i&quot;, &amp;yblur) != 1);
  
    char *srcFileName = argv[1];
    char *destFileName = argv[2];
  
    if (showUsage)
    {
        printf(&quot;Usage: &lt;source&gt; &lt;dest&gt; &lt;xblur&gt; &lt;yblur&gt;\n\n&quot;);
        WaitForEnter();
        return 1;
    }
     
    // make sure blur size is odd
    xblur = xblur | 1;
    yblur = yblur | 1;
 
    printf(&quot;Attempting to blur a 24 bit image.\n&quot;);
    printf(&quot;  Source=%s\n  Dest=%s\n  blur=[%d,%d]\n\n&quot;, srcFileName, destFileName, xblur, yblur);
  
    SImageData srcImage;
    if (LoadImage(srcFileName, srcImage))
    {
        printf(&quot;%s loaded\n&quot;, srcFileName);
        SImageData destImage;
        BlurImage(srcImage, destImage, xblur, yblur);
        if (SaveImage(destFileName, destImage))
            printf(&quot;Blurred image saved as %s\n&quot;, destFileName);
        else
        {
            printf(&quot;Could not save blurred image as %s\n&quot;, destFileName);
            WaitForEnter();
            return 1;
        }
    }
    else
    {
        printf(&quot;could not read 24 bit bmp file %s\n\n&quot;, srcFileName);
        WaitForEnter();
        return 1;
    }
    return 0;
}
[/code]

<h2>Next Up</h2>

Next up will be a Gaussian blur, and I'm nearly done w/ that post but wanted to make this one first as an introductory step!

Before we get there, I wanted to mention that if you do multiple box blurs in a row, it will start to approach Gaussian blurring.  I've heard that three blurs in a row will make it basically indistinguishable from a Gaussian blur.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3022</wp:post_id>
		<wp:post_date><![CDATA[2015-08-18 11:44:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-18 19:44:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[box-blur]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495676963;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3009;}i:1;a:1:{s:2:"id";i:4423;}i:2;a:1:{s:2:"id";i:2697;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Super Simple Symmetric Leveled Homomorphic Encryption Implementation</title>
		<link>http://blog.demofox.org/2015/09/05/super-simple-symmetric-leveled-homomorphic-encryption-implementation/</link>
		<pubDate>Sat, 05 Sep 2015 19:07:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3077</guid>
		<description></description>
		<content:encoded><![CDATA[Homomorphic encryption is a pretty interesting thing.  It allows you to do calculations on encrypted data such that when you decrypt the results, it's as if you did the calculations on the unencrypted data.  This allows computation to happen without the person doing the computation knowing what the data actually is!

<h2>Brief History</h2>

For a long time, cryptographers wondered if fully homomorphic encryption was even possible.  There were various encryption algorithms that could perform SOME operations homomorphically (RSA can do multiplication for instance!), but there weren't any that could do ALL operations.  In other words, you couldn't execute arbitrary computations.

Those types of algorithms are called "Partially Homomorphic Encryption" or PHE.

Another problem standing in the way of fully homomorphic encryption was that many algorithms would only have a limited count of operations they could perform before error would accumulate and they would start giving incorrect answers.  In essence they were limited to evaluating low degree polynomials.

Those types of algorithms are called "Somewhat Homomorphic Encryption" or SWHE.

In contrast, Fully Homomorphic Encryption (FHE) can perform an unlimited number of homomorphic operations, and it can perform any operation homomorphically.  It is unbounded in both ways.

Amazingly, In 2009 Craig Gentry figured out the first fully homomorphic encryption scheme!  With his setup, you can calculate both XOR and AND on encrypted bits, which makes it Turing complete.  It is also able to keep errors from becoming too large by using an ingenious bootstrapping technique to decrease accumulated error.  Here's a link to his PHd thesis: <a target="_blank" href="http://crypto.stanford.edu/craig/craig-thesis.pdf">A Fully Homomorphic Encryption Scheme</a>.

Unfortunately, the current implementations of secure FHE take too much computational power to be practical in most situations - like 30 minutes to calculate an AND between 2 bits!

In this post I'm going to show you a super simple HE implementation that will be very easy to understand.  It won't be fully homomorphic, but it will be "leveled" (or, somewhat homomorphic), meaning it is Turing complete, but the count of calculations you can perform are limited due to error creeping in.  It also won't be secure - due to making it easy to understand - but it will be lightning fast.

This will be a symmetric key algorithm, but as we'll explore in future posts, it can also be used for public key algorithms.

<h2>Why Is HE Useful?</h2>

One thing you could do with HE is store your financial transactions encrypted on a server.  The server could run queries and calculations on your financial data and send back the results.  You could then unencrypt the result and see what the values are, even though the server itself - which generated the values - has no idea what the numbers actually are.

Another use could be in games.  Whether you are playing a first person shooter, or a real time strategy game, many different types of games send information about each player to every other player in the game.  Hashes of game state can be used to make sure that everyone is in agreement about calculations to prevent a player from cheating by WRITING to a value they shouldn't be writing to (or, at least you can detect when they do, and use majority rule to boot them out of the game), but how do you stop a player from READING a value they shouldn't be reading?

Using HE, you could encrypt the data you need to send to players that they shouldn't be able to read.  With this, they could still do game play logic calculations on the data, and calculate hashes of the encrypted results to ensure that all players were in agreement, but with HE, they wouldn't gain knowledge of the data they were working with.

In other words, player A could verify that player B's state is correct and they haven't cheated, without player A getting details about player B's state.

In theory this could eliminate or at least help combat things like wall hacks and other "data read" based cheats.  In practice there would be some complications to work out, even if it wasn't crazy slow to calculate, but the fact that there is a path to addressing these issues is pretty exciting!  People are working on improving speed, and games don't need the same level of security that other usage cases do.

<h2>How To Do It</h2>

Here are the details of this super simple leveled homomorphic symmetric key algorithm.

By the way, all the percent signs below mean "modulus" which is just the remainder of a division.  25 % 4 = 1 for instance, because 25/4 = 6 with a remainder of 1.  That remainder of 1 is what we get when we take the modulus.  A term you'll see more often if reading through this stuff on your own will be "residue".  Don't let that word scare you, it is just another name for the remainder.

<b>Making A Secret Key</b>

To make a key, generate an odd random number between 2^(N-1) and 2^N.  In other words, it will be N random bits, except the highest and lowest bit will be set to 1.  N is the size of your secret key.  Larger keys are more secure, and allow more computations to be done in a row, but they also take more storage space.  If you are using a fixed size int - like say a uint32 - a larger key will make you run out of those 32 bits sooner.

[code language="cpp"]
key = RandomNumber(0, (1 &lt;&lt; N) - 1) | 1 | (1 &lt;&lt; (N - 1));
[/code]

<b>Encrypt</b>

To encrypt a bit, the encrypted value is just the key plus the value of the unencrypted bit (0 or 1).

[code language="cpp"]
encryptedBit = key + value ? 1 : 0;
[/code]

<b>Decrypt</b>

To decrypt a bit, you take the encrypted bit modulo the key, and then modulo 2.

[code language="cpp"]
decryptedBit = (encryptedBit % key) % 2;
[/code]

<b>XOR</b>

To do an XOR of two encrypted bits, you just add the two values together.

[code language="cpp"]
xorResult = encryptedBit1 + encryptedBit2;
[/code]

<b>AND</b>

To do an AND of two encrypted bits, you just multiply the two values together.

[code language="cpp"]
andResult = encryptedBit1 * encryptedBit2;
[/code]

<h2>Example</h2>

Let's run through an example to see this in action.

We'll use a 4 bit key, and say that the key is 13 (1101 in binary).

Let's encrypt some bits:

$latex
trueBitEncrypted = key + 1 = 13 + 1 = 14 \\newline
falseBitEncrypted = key + 0 = 13 + 0 = 13
$ 

Let's do some logical operations:

$latex
Xor00 = falseBitEncrypted + falseBitEncrypted = 13 + 13 = 26 \\newline
Xor01 = falseBitEncrypted + trueBitEncrypted  = 13 + 14 = 27 \\newline
Xor10 = trueBitEncrypted  + falseBitEncrypted = 14 + 13 = 27 \\newline
Xor11 = trueBitEncrypted  + trueBitEncrypted  = 14 + 14 = 28 \\newline
\\newline
And00 = falseBitEncrypted * falseBitEncrypted = 13 * 13 = 169 \\newline
And01 = falseBitEncrypted * trueBitEncrypted  = 13 * 14 = 182 \\newline
And10 = trueBitEncrypted  * falseBitEncrypted = 14 * 13 = 182 \\newline
And11 = trueBitEncrypted  * trueBitEncrypted  = 14 * 14 = 196 \\newline
\\newline
FalseXorFalseAndTrue = falseBitEncrypted + falseBitEncrypted * trueBitEncrypted = 13 + 13 * 14 = 195
$

Notice how AND is a multiplication where XOR is an addition, and that the result of an AND operation is a larger number than an XOR operation.  This means that if you are working with a specific sized number (again, such as a uint32), that you can do fewer ANDs than XORs before you run out of bits.  When you run out of bits and your number has integer overflow, you have hit the cieling of this leveled HE scheme.  That means that ANDs are more expensive than XORs when considering the number of computations you can do.

Ok, time to decrypt our XOR values!

$latex
Xor00Decrypted = ((Xor00 \\% key) \\% 2) = (26 \\% 13) \\% 2 = 0 \\newline
Xor01Decrypted = ((Xor01 \\% key) \\% 2) = (27 \\% 13) \\% 2 = 1 \\newline
Xor10Decrypted = ((Xor10 \\% key) \\% 2) = (27 \\% 13) \\% 2 = 1 \\newline
Xor11Decrypted = ((Xor11 \\% key) \\% 2) = (28 \\% 13) \\% 2 = 0 \\newline
$

XOR is looking correct, how about AND?

$latex
And00Decrypted = ((And00 \\% key) \\% 2) = (169 \\% 13) \\% 2 = 0 \\newline
And01Decrypted = ((And01 \\% key) \\% 2) = (182 \\% 13) \\% 2 = 0 \\newline
And10Decrypted = ((And10 \\% key) \\% 2) = (182 \\% 13) \\% 2 = 0 \\newline
And11Decrypted = ((And11 \\% key) \\% 2) = (196 \\% 13) \\% 2 = 1 \\newline
$

AND is looking good as well.  Lastly let's decrypt the compound operation:

$latex
FalseXorFalseAndTrueDecrypted = ((FalseXorFalseAndTrue \\% key) \\% 2) = (195 \\% 13) \\% 2 = 0
$

Lookin good!

<h2>Intuition</h2>

Let's get some intuition for why this works...

<b>Key Generation</b>

First up, why is it that the key needs to have it's high bit set?  Well, on one hand, larger keys are more secure, and allow more room for error accumulation so allow more operations to be done.  On the other hand, this is kind of misleading to say.  If you generate ANY random odd integer, there will be a highest bit set to 1 SOMEWHERE.  You technically don't need to store the zeros above that.  So i guess you could look at it like you are just generating ANY random odd integer, and you could figure out N FROM that value (the position of the highest bit).  Thinking about it the way we do though, it lets us specify how many bits we actually want to commit to for the key which gives us more consistent behavior, upper bound storage space, etc.

Secondly, why does the key need to be odd?

Let's say that you have two numbers A and B where A represents an encrypted bit and B represents the encryption key.  If B is even, then A % B will always have the same parity (whether it's even or odd) as A.  Since we are trying to hide whether our encrypted bit is 0 or 1 (even or odd), that makes it very bad encryption since you can recover the plain text bit by doing encryptedValue % 2.  If on the other hand, B is odd, A % B will have the same parity as A only if A / B is even.

This doesn't really make much of a difference in the scheme in this post, because A / B will always be 1 (since the encrypted bit is the key plus the plain text bit), but in the next scheme it is more important because A / B will be a random number, which means that it will be random with a 50/50 chance whether or not the parity of the encrypted bit matches the parity of the plain text bit.  Since it's an even chance whether it matches or not, that means that an attacker can't use that information to their advantage.

While it's true that when generating a random key, there is a 50/50 chance of whether you will get an even or odd key, you can see how we'd be in a situation where 75% of the time the parity of the ciphertext would match the parity of the plaintext if we allowed both even and off keys.

That would mean that while an attacker couldn't know for CERTAIN whether an encrypted bit is 1 or 0 based on the cipher text, they can guess with 75% confidence that the unencrypted bit will just be the cipher text % 2, which is no good!  So, we are better off sticking with an odd numbered key in this scheme.  But again, that won't really matter until the next post!

<b>XOR as Addition</b>

I know that I'm going to butcher this explanation a bit in the eyes of someone who knows this math stuff better than me.  If you are reading this and see that I have indeed done that, please drop me a line or leave a comment and let me know what I've missed or could explain better.  I suspect there's something about rings going on here (;

Believe it or not, when you add two numbers together and then take the modulus, you get the same answer as if you did the modulus on the two numbers, added them together, and then took the modulus again.

In other words, adding two numbers can be seen as adding their residue (remainder).

Let me show you an example.

$latex
15 + 28 = 43 \\newline
\\newline
((15 \\% 13) + (28 \\% 13)) \\% 13 = 43 \\% 13 \\newline
(2 + 2) \\% 13 = 4 \\newline
4 = 4
$

Let's try another one.  I'm picking these numbers "randomly" out of my head :P

$latex
28 + 47 = 75 \\newline
\\newline
((28 \\% 8) + (47 \\% 8)) \\% 8 = 75 \\% 8 \\newline
(4 + 7) \\% 8 = 3 \\newline
3 = 3
$

OK makes sense, but who cares about that?

Well, believe it or not, 1 bit addition is the same as XOR!  This means that you can add numbers together, which adds the modulus of their key together, which then in turn adds that number mod 2 together, to preserve the encrypted parity (odd or even-ness).

Check out this 2 bit binary math.  Keep in mind that with 1 bit results, you would only keep the right most binary digit.  I'm showing two digits to show you that it is in fact binary addition, and that the right most bit is in fact the same as XOR.

$latex
0 + 0 = 00 \\newline
0 + 1 = 01 \\newline
1 + 0 = 01 \\newline
1 + 1 = 10
$

One thing to note before we move on is that since we are doing a modulus against the key, when the remainder gets to be too large it rolls over.  When it rolls over, we start getting the wrong answers and have hit our ceiling of how many operations we can do.  So, our encrypted value modulo the key divided by the key can be seen as where we are at by percentage towards our error ceiling.

To avoid hitting the problem of error getting too high too quickly and limiting your calculation count too much you can increase the key size.  When you do that you'll then run out of bits in your fixed size integer storage faster.  To avoid THAT problem you can use "multi precision math libraries" to allow your integers to use an arbitrary number of bytes.  This is what many real crypto algorithms use when they need to deal with very large numbers.

<b>AND as Multiplication</b>

Similar to the above, when you multiply two numbers and take a modulus of the result, it's the same as if you took the modulus of the two numbers, multiplied that, and then took the modulus of the result.

In other words, when you multiply two numbers, you can think of it as also multiplying their residue (remainder).

Using the first example numbers from above:

$latex
15 * 28 = 420 \\newline
\\newline
((15 \\% 13) * (28 \\% 13)) \\% 13 = 420 \\% 13 \\newline
(2 * 2) \\% 13 = 4 \\newline
4 = 4
$

And the second:

$latex
28 * 47 = 1316 \\newline
\\newline
((28 \\% 8) * (47 \\% 8)) \\% 8 = 1316 \\% 8 \\newline
(4 * 7) \\% 8 = 4 \\newline
4 = 4
$

A bit of a coincidence that they both worked out to 4 this time :P

Similar to XOR being the same as 1 bit addition, 1 bit multiplication is actually the same as AND, check it out:

$latex
0 * 0 = 0 \\newline
0 * 1 = 0 \\newline
1 * 0 = 0 \\newline
1 * 1 = 1
$

Since AND multiplies residue, and XOR adds residue, and residue is what limits our homomorphic instruction count, you can see that AND is a more expensive operation compared to XOR, since it eats into our instruction budget a lot faster.

<b>Error In Action</b>

To see why rolling over is a problem, let's say that our key is 9 and we want to XOR two encrypted bits  8 and 1, which represent 0 and 1 respectively.

To do an XOR, we add them together:  8 + 1 = 9.

Now, when we decrypt it we do this:  (9 % 9) % 2 = 0

That result tells us that 0 XOR 1 is 0, which is incorrect!  Our residue got too large and we hit the ceiling of our homomorphic instruction budget.

If the first bit was 6 instead of 8, the result of the XOR would have been 7, and (7 % 9) % 2 comes out to 1.  That re-affirms to us that if we are under the error budget, we are good to go, but if our residue gets too large, we will have problems!

<h2>Sample Code</h2>

[code language="cpp"]
// Note that this encryption scheme is insecure so please don't actually use it
// in production!  A false bit with a given key is the same value every time, and
// so is a true bit.  Also, the encrypted true bit value will always be the
// encrypted false bit plus 1.  Even worse, an encrypted false bit is the key itself!
// This is just for demonstration purposes to see how the basics of homomorphic
// encryption work.  The next blog post will increase security.

#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;random&gt;
#include &lt;array&gt;
#include &lt;inttypes.h&gt;

typedef uint64_t uint64;

// Increase this value to increase the size of the key, and also the maximum
// size of the error allowed.
// If you set it too high, operations will fail when they run out of storage space
// in the 64 bit ints.  If you set it too low, you will not be able to do very many
// operations in a row.
const size_t c_numKeyBits = 6;

#define Assert(x) if (!(x)) ((int*)nullptr)[0] = 0;

//=================================================================================
// TODO: Replace with something crypto secure if desired!
uint64 RandomUint64 (uint64 min, uint64 max)
{
    static std::random_device rd;
    static std::mt19937 gen(rd());
    std::uniform_int_distribution&lt;uint64&gt; dis(min, max);
    return dis(gen);
}

//=================================================================================
void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

//=================================================================================
uint64 GenerateKey ()
{
    // Generate an odd random number in [2^(N-1), 2^N)
    // N is the number of bits in our key
    // The key also defines the maximum amount of error allowed, and thus the number
    // of operations allowed in a row.
    return RandomUint64(0, (1 &lt;&lt; c_numKeyBits) - 1) | 1 | (1 &lt;&lt; (c_numKeyBits - 1));
}

//=================================================================================
bool Decrypt (uint64 key, uint64 value)
{
    return ((value % key) % 2) == 1;
}

//=================================================================================
uint64 Encrypt (uint64 key, bool value)
{
    uint64 ret = key + (value ? 1 : 0);
    Assert(Decrypt(key, ret) == value);
    return ret;
}

//=================================================================================
uint64 XOR (uint64 A, uint64 B)
{
    return A + B;
}

//=================================================================================
uint64 AND (uint64 A, uint64 B)
{
    return A * B;
}

//=================================================================================
int GetErrorPercent (uint64 key, uint64 value)
{
    // Returns what % of maximum error this value has in it.  When error &gt;= 100%
    // then we have hit our limit and start getting wrong answers.
    return int(100.0f * float(value % key) / float(key));
}

//=================================================================================
uint64 FullAdder (uint64 A, uint64 B, uint64 &amp;carryBit)
{
    // homomorphically add the encrypted bits A and B
    // return the single bit sum, and put the carry bit into carryBit
    // From http://en.wikipedia.org/w/index.php?title=Adder_(electronics)&amp;oldid=381607326#Full_adder
    uint64 sumBit = XOR(XOR(A, B), carryBit);
    carryBit = XOR(AND(A, B), AND(carryBit, XOR(A, B)));
    return sumBit;
}

//=================================================================================
int main (int argc, char **argv)
{
    // run this test a bunch to show that it works.  If you get a divide by zero
    // in an Assert, that means that it failed, and hopefully it's because you
    // increased c_numKeyBits to be too large!
    printf(&quot;Verifying 10000 truth tables.  Details of first one:\n&quot;);
    for (int index = 0; index &lt; 10000; ++index)
    {
        // make our key and a true and false bit
        uint64 key = GenerateKey();
        uint64 falseBit = Encrypt(key, false);
        uint64 trueBit = Encrypt(key, true);

        // Verify truth tables for XOR and AND
        Assert(Decrypt(key, XOR(falseBit, falseBit)) == false);
        Assert(Decrypt(key, XOR(falseBit, trueBit )) == true );
        Assert(Decrypt(key, XOR(trueBit , falseBit)) == true );
        Assert(Decrypt(key, XOR(trueBit , trueBit )) == false);

        Assert(Decrypt(key, AND(falseBit, falseBit)) == false);
        Assert(Decrypt(key, AND(falseBit, trueBit )) == false);
        Assert(Decrypt(key, AND(trueBit , falseBit)) == false);
        Assert(Decrypt(key, AND(trueBit , trueBit )) == true );

        // report the results for the first iteration of the loop
        if (index == 0)
        {
            printf(&quot;Key 0x%&quot; PRIx64 &quot;, false 0x%&quot; PRIx64 &quot;, true 0x%&quot; PRIx64 &quot;\n&quot;, key, falseBit, trueBit);
            printf(&quot;  [0 xor 0] = 0   0x%&quot; PRIx64 &quot; xor(+) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, falseBit, falseBit, XOR(falseBit, falseBit), Decrypt(key, XOR(falseBit, falseBit)) ? 1 : 0, GetErrorPercent(key, XOR(falseBit, falseBit)));
            printf(&quot;  [0 xor 1] = 1   0x%&quot; PRIx64 &quot; xor(+) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, falseBit, trueBit , XOR(falseBit, trueBit ), Decrypt(key, XOR(falseBit, trueBit )) ? 1 : 0, GetErrorPercent(key, XOR(falseBit, trueBit )));
            printf(&quot;  [1 xor 0] = 1   0x%&quot; PRIx64 &quot; xor(+) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, trueBit , falseBit, XOR(trueBit , falseBit), Decrypt(key, XOR(trueBit , falseBit)) ? 1 : 0, GetErrorPercent(key, XOR(trueBit , falseBit)));
            printf(&quot;  [1 xor 1] = 0   0x%&quot; PRIx64 &quot; xor(+) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, trueBit , trueBit , XOR(trueBit , trueBit ), Decrypt(key, XOR(trueBit , trueBit )) ? 1 : 0, GetErrorPercent(key, XOR(trueBit , trueBit )));
            printf(&quot;  [0 and 0] = 0   0x%&quot; PRIx64 &quot; and(*) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, falseBit, falseBit, AND(falseBit, falseBit), Decrypt(key, AND(falseBit, falseBit)) ? 1 : 0, GetErrorPercent(key, XOR(falseBit, falseBit)));
            printf(&quot;  [0 and 1] = 0   0x%&quot; PRIx64 &quot; and(*) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, falseBit, trueBit , AND(falseBit, trueBit ), Decrypt(key, AND(falseBit, trueBit )) ? 1 : 0, GetErrorPercent(key, XOR(falseBit, trueBit )));
            printf(&quot;  [1 and 0] = 0   0x%&quot; PRIx64 &quot; and(*) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, trueBit , falseBit, AND(trueBit , falseBit), Decrypt(key, AND(trueBit , falseBit)) ? 1 : 0, GetErrorPercent(key, XOR(trueBit , falseBit)));
            printf(&quot;  [1 and 1] = 1   0x%&quot; PRIx64 &quot; and(*) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, trueBit , trueBit , AND(trueBit , trueBit ), Decrypt(key, AND(trueBit , trueBit )) ? 1 : 0, GetErrorPercent(key, XOR(trueBit , trueBit )));
        }
    }

    // Do multi bit addition as an example of using compound circuits to
    // do meaningful work.
    const size_t c_numBitsAdded = 5;
    printf(&quot;\nDoing 10000 Multibit Additions.  Details of first one:\n&quot;);
    std::array&lt;uint64, c_numBitsAdded&gt; numberAEncrypted;
    std::array&lt;uint64, c_numBitsAdded&gt; numberBEncrypted;
    std::array&lt;uint64, c_numBitsAdded&gt; resultEncrypted;
    for (int index = 0; index &lt; 10000; ++index)
    {
        // generate the numbers we want to add
        uint64 numberA = RandomUint64(0, (1 &lt;&lt; c_numBitsAdded) - 1);
        uint64 numberB = RandomUint64(0, (1 &lt;&lt; c_numBitsAdded) - 1);

        // generate our key
        uint64 key = GenerateKey();

        // encrypt our bits
        for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
        {
            numberAEncrypted[bitIndex] = Encrypt(key, (numberA &amp; (uint64(1) &lt;&lt; uint64(bitIndex))) != 0);
            numberBEncrypted[bitIndex] = Encrypt(key, (numberB &amp; (uint64(1) &lt;&lt; uint64(bitIndex))) != 0);
        }

        // do our multi bit addition!
        // we could initialize the carry bit to 0 or the encrypted value of 0. either one works since 0 and 1
        // are also poor encryptions of 0 and 1 in this scheme!
        uint64 carryBit = Encrypt(key, false);
        for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
            resultEncrypted[bitIndex] = FullAdder(numberAEncrypted[bitIndex], numberBEncrypted[bitIndex], carryBit);

        // decrypt our result
        uint64 resultDecrypted = 0;
        for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
        {
            if (Decrypt(key, resultEncrypted[bitIndex]))
                resultDecrypted |= uint64(1) &lt;&lt; uint64(bitIndex);
        }

        // make sure that the results match, keeping in mind that the 4 bit encryption may have rolled over
        Assert(resultDecrypted == ((numberA + numberB) % (1 &lt;&lt; c_numBitsAdded)));

        // report the results for the first iteration of the loop
        if (index == 0)
        {
            printf(&quot;Key 0x%&quot; PRIx64 &quot;, %&quot; PRId64 &quot; + %&quot; PRId64 &quot; in %i bits = %&quot; PRId64 &quot;\n&quot;, key, numberA, numberB, c_numBitsAdded, (numberA + numberB) % (1 &lt;&lt; c_numBitsAdded));
            for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
                printf(&quot;  A[%i] = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, bitIndex, numberAEncrypted[bitIndex], Decrypt(key, numberAEncrypted[bitIndex]), GetErrorPercent(key, numberAEncrypted[bitIndex]));
            printf(&quot;+\n&quot;);
            for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
                printf(&quot;  B[%i] = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, bitIndex, numberBEncrypted[bitIndex], Decrypt(key, numberBEncrypted[bitIndex]), GetErrorPercent(key, numberBEncrypted[bitIndex]));
            printf(&quot;=\n&quot;);
            for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
                printf(&quot;  Result[%i] = 0x%&quot; PRIx64 &quot; (%i err=%i%%)\n&quot;, bitIndex, resultEncrypted[bitIndex], Decrypt(key, resultEncrypted[bitIndex]), GetErrorPercent(key, resultEncrypted[bitIndex]));
            printf(&quot;result decrypted = %&quot; PRId64 &quot;\n&quot;, resultDecrypted);
        }
    }

    WaitForEnter();
    return 0;
}
[/code]

Here is the output of a run of the program:
<img src="https://demofox2.files.wordpress.com/2015/08/SuperSimpleHE.png"/>

<h2>What if I Need Constants?!</h2>

If you are thinking how you might actually use this code in a real setting, you might be thinking to yourself "it's great to be able to multiply two encrypted numbers together, but what if I just need to multiply them by a constant like 43?"

Well, interestingly, you can literally just use 0 and 1 in this scheme as constants to perform operations against the encrypted bits.

The reason that this works is that you can see 0 and 1 as just very poor encryptions :P

(0 % KEY) % 2 = 0
(1 % KEY) % 2 = 1

As long as KEY is >= 2, the above is always true, no matter what the key actually is!

So there you go, add your own constants into the calculations all you want.  They also happen to have very low residue/error (actually, they have the least amount possible!), so are much more friendly to use, versus having someone provide you with an encrypted table of constants to use in your calculations.  It's also more secure for the person doing the encrypting for them to provide you less encrypted data that you know the plain text for.  It limits your (and anyone else's) ability to do a known plain text attack.

<h2>The Other Shoe Drops</h2>

You might notice that in our scheme, given the same key, every true bit will be the same value, and every false bit will be the same value.  Unfortunately, the true bit is also always the false bit + 1.  As an attacker, this means that once you have seen both a true bit and a false bit, you will then have broken the encryption.

Even worse, when you encrypt a false bit, it gives you back the key itself!

We'll improve that in the next post by adding a few more simple operations to the encryption process.

This leveled HE encryption scheme comes directly from the paper below.  If you want to give it a look, what we covered is only part of the first two pages!
<a target="_blank" href="https://eprint.iacr.org/2009/616.pdf">Fully Homomorphic Encryption over the Integers</a>

The links below are where I started reading up on HE.  They go a different route with FHE that you might find interesting, and also have a lot more commentary about the usage cases of HE:
<a target="blank" href="http://windowsontheory.org/2012/05/01/the-swiss-army-knife-of-cryptography/">The Swiss Army Knife of Cryptography</a><br>
<a target="blank" href="http://windowsontheory.org/2012/05/02/building-the-swiss-army-knife/">Building the Swiss Army Knife</a>

In the scheme in those links, I haven't figured out how multiplication is supposed to work yet (or bootstrapping, but one thing at a time).  If you figure it out, let me know!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3077</wp:post_id>
		<wp:post_date><![CDATA[2015-09-05 11:07:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-05 19:07:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[super-simple-symmetric-leveled-homomorphic-encryption-implementation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<category domain="category" nicename="encryption-security"><![CDATA[Encryption + Security]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495479436;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5090;}i:1;a:1:{s:2:"id";i:3167;}i:2;a:1:{s:2:"id";i:4281;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Improving the Security of the Super Simple Symmetric Leveled Homomorphic Encryption Implementation</title>
		<link>http://blog.demofox.org/2015/09/05/improving-the-security-of-the-super-simple-symmetric-leveled-homomorphic-encryption-implementation/</link>
		<pubDate>Sat, 05 Sep 2015 19:08:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3167</guid>
		<description></description>
		<content:encoded><![CDATA[The last post showed a super simple encryption algorithm that let an untrusted person perform calculations with encrypted data such that when they gave the results back to you, you could decrypt them and get the results of the calculation as if they were done on the unencrypted values.  The best part was that this untrusted party had no knowledge of the data it was doing the calculations on.

While it was (hopefully) easy to understand, there were a lot of problems with it's security.  The biggest of which probably was the fact that the encryption of a false bit was the secret key itself!

This post is going to slightly increase the complexity of the encryption operation to match what the paper that I'm getting this stuff from says to do (<a target="_blank" href="https://eprint.iacr.org/2009/616.pdf">Fully Homomorphic Encryption over the Integers</a>).

All of the other operations - like XOR, AND, Decryption, use of constants - remain the same.  It's just the process of turning a plain text bit into a cipher text bit that is going to change.

Disclaimer: I am a game programmer, not a cryptographer, and you should REALLY do your own investigation and consult experts before actually rolling anything out to production or trusting that what I say is correct!

<h2>Improvement #1 - Multiply Key By Random Number</h2>

The scheme to encrypt a plaintext bit from the last blog post was this:
[code language="cpp"]encryptedBit = key + value ? 1 : 0;[/code]

A major problem with that scheme is that if you encrypt a false bit, you get the key itself.

Another problem that we touched on was that the parity of the plain text bit (whether it was odd or even, aka a 1 or a 0) was always opposite of the parity of the cipher text.

Yet another problem was that for the same key, 0 always encrypted to the same value, and 1 always encrypted to the same value, which was the "0" encrypted value, plus 1.

We are going to address all of these problems by adding a simple operation to encryption.  We are just going to multiply the key by a random number before adding the plain text bit in.  That gives us the following:
[code language="cpp"]encryptedBit = key*randomNumber + value ? 1 : 0;[/code]

Where randomNumber is at least 1.

This above helps in the following ways:
<ul>
	<li>Encrypting false doesn't always just give you the key anymore!</li>
	<li>Since the cipherBit divided by the key is now a random number (and since the key is an odd number), it will be random whether the parity of the cipher text matches or mismatches the plain text.  You can no longer use that information to figure out the value of the encrypted bit!</li>
	<li>If you encrypt a false value, you will get different values each time. Same when encrypting a true value.  When looking at two ciphertexts that have the same underlying plaintext value, you will no longer be able to tell that they are equal just by looking at them, or be able to tell that one is larger than the other so must be the true bit!</li>
</ul>

That is a pretty good improvement, but we can do a little better.

<h2>Improvement #2 - Add Random Noise</h2>

The second improvement we are going to do is add random noise to our encrypted value.  This will make it so encrypting a false bit will not result in a multiple of the key, but will instead result in NEARLY a multiple of the key, which is a harder problem to figure out as an attacker.

You might ask how we are going to preserve our encrypted value if we are adding random noise into the result.  Well, in actuality, all we really need to preserve is the lowest bit, so we are going to add an EVEN NUMBERED amount of noise.

That makes our encryption scheme become this:
[code language="cpp"]encryptedBit = key*randomNumber1 + 2*randomNumber2 + value ? 1 : 0;[/code]

While this increases our security, it also increases the noise (error) in our encrypted data, which makes it so we can do fewer operations before the error gets too large and we start getting wrong answers.

There we are, our encryption scheme now matches the one described in the paper.  All the rest of our operations remain unchanged.

<h2>Security</h2>

The above looks good, but what range of values should be we use for randomNumber1 and randomNumber2 and the actual size of the key?

The paper refers to a security parameter lambda ($latex \\lambda$) that everything else is based on.

It says that the size of the key (N) should be ($latex \\lambda^2$) bits, randomNumber1 should be around $latex 2^{N^3}$ ($latex N^3$ bits) and that randomNumber2 should be around $latex 2^{\\sqrt{N}}$ ($latex \\sqrt{N}$ bits).

It also says that the best known attack against this algorithm takes about $latex 2^{N^2}$ operations and that you can assume an attacker is going to be able to do a billion operations per second (per this info <a target="_blank" href="http://crypto.stackexchange.com/questions/27793/key-size-for-symmetric-homomorphic-encryption-over-the-integers/">here</a>).  Note that 1 billion operations per second is a typical computer, not a super computer or a distributed attack using a bot network!

Let's look at some example values for lambda!

<table>
<tr><td><b>Lambda</b></td><td><b>Key Size</b></td><td><b>RN1 Size</b></td><td><b>RN2 Size</b></td><td><b>Attack Time</b></td></tr>
<tr><td>80</td><td>800B</td><td>30.5GB</td><td>10B</td><td>38 million years</td></tr>
<tr><td>60</td><td>450B</td><td>5.4GB</td><td>8B</td><td>36 years</td></tr>
<tr><td>40</td><td>200B</td><td>488MB</td><td>5B</td><td>17 minutes</td></tr>
<tr><td>20</td><td>50B</td><td>7.6MB</td><td>3B</td><td>< 1 second</td></tr>
</table>

Ouch! RandomNumber1 sure is huge isn't it?  I've double and tripple checked and that really does seem to be correct.  Encrypting a single bit is essentially going to be as large as RandomNumber1.  That is so unwieldy it's ridiculous.  I'm going to quadruple check that I think because that is just insane...

BTW quick tangent.  An interesting thing to note is that if your key is an even number, instead of an odd number, noise/error can grow as much as it wants, and will never give you the wrong result!  That means that by using an even numbered key, this scheme is fully homomorphic.  However, using an even key, encryptedBit % 2 == decryptedBit, so it's super insecure.

I've been thinking about it quite a bit, but I can't think of any avenues to use an even numbered key but still have any semblance of real security.  If you can think of a way, go publish a paper about it and become famous! :P

<h2>Example Code</h2>

Here is some sample code from last post with the new encryption routine.  I had to decrease the number of bits in the addition tests, and I had to tone down the security quite a bit to make it fit within 64 bits.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;random&gt;
#include &lt;array&gt;
#include &lt;inttypes.h&gt;

typedef uint64_t uint64;

// Increase this value to increase the size of the key, and also the maximum
// size of the error allowed.
// If you set it too high, operations will fail when they run out of storage space
// in the 64 bit ints.  If you set it too low, you will not be able to do very many
// operations in a row.
// The recomended values for good security for these numbers are way too large to
// fit in a uint64, so adjusting them down to show their effects while using uint64s
const size_t c_numKeyBits = 15;
const size_t c_numNoiseBits = 3; //size_t(sqrt(c_numKeyBits));
const size_t c_numMultiplierBits = 4; //c_numKeyBits * c_numKeyBits * c_numKeyBits;

#define Assert(x) if (!(x)) ((int*)nullptr)[0] = 0;

//=================================================================================
// TODO: Replace with something crypto secure if desired!
uint64 RandomUint64 (uint64 min, uint64 max)
{
    static std::random_device rd;
    static std::mt19937 gen(rd());
    std::uniform_int_distribution&lt;uint64&gt; dis(min, max);
    return dis(gen);
}

//=================================================================================
void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

//=================================================================================
uint64 GenerateKey ()
{
    // Generate an odd random number in [2^(N-1), 2^N)
    // N is the number of bits in our key
    // The key also defines the maximum amount of error allowed, and thus the number
    // of operations allowed in a row.
    uint64 key = RandomUint64(0, (uint64(1) &lt;&lt; uint64(c_numKeyBits)) - 1);
    key = key | (uint64(1) &lt;&lt; uint64(c_numKeyBits - 1));
    key = key | 1;
    return key;
}

//=================================================================================
bool Decrypt (uint64 key, uint64 value)
{
    return ((value % key) % 2) == 1;
}

//=================================================================================
uint64 Encrypt (uint64 key, bool value)
{
    uint64 keyMultiplier = RandomUint64(0, (1 &lt;&lt; c_numMultiplierBits) - 2) + 1;
    uint64 noise = RandomUint64(0, (1 &lt;&lt; c_numNoiseBits) - 1);
    uint64 ret = key * keyMultiplier + 2 * noise + (value ? 1 : 0);
    Assert(Decrypt(key, ret) == value);
    return ret;
}

//=================================================================================
uint64 XOR (uint64 A, uint64 B)
{
    return A + B;
}

//=================================================================================
uint64 AND (uint64 A, uint64 B)
{
    return A * B;
}

//=================================================================================
float GetErrorPercent (uint64 key, uint64 value)
{
    // Returns what % of maximum error this value has in it.  When error &gt;= 100%
    // then we have hit our limit and start getting wrong answers.
    return 100.0f * float(value % key) / float(key);
}

//=================================================================================
uint64 FullAdder (uint64 A, uint64 B, uint64 &amp;carryBit)
{
    // homomorphically add the encrypted bits A and B
    // return the single bit sum, and put the carry bit into carryBit
    // From http://en.wikipedia.org/w/index.php?title=Adder_(electronics)&amp;oldid=381607326#Full_adder
    uint64 sumBit = XOR(XOR(A, B), carryBit);
    carryBit = XOR(AND(A, B), AND(carryBit, XOR(A, B)));
    return sumBit;
}

//=================================================================================
int main (int argc, char **argv)
{
    // run this test a bunch to show that it works.  If you get a divide by zero
    // in an Assert, that means that it failed, and hopefully it's because you
    // increased c_numKeyBits to be too large!
    printf(&quot;Verifying 10000 truth tables.  Details of first one:\n&quot;);
    for (int index = 0; index &lt; 10000; ++index)
    {
        // make our key and a true and false bit
        uint64 key = GenerateKey();
        uint64 falseBit1 = Encrypt(key, false);
        uint64 falseBit2 = Encrypt(key, false);
        uint64 trueBit1  = Encrypt(key, true);
        uint64 trueBit2  = Encrypt(key, true);

        // report the results for the first iteration of the loop
        if (index == 0)
        {
            printf(&quot;Key 0x%&quot; PRIx64 &quot;, false = 0x%&quot; PRIx64 &quot;, 0x%&quot; PRIx64 &quot; true = 0x%&quot; PRIx64 &quot; 0x%&quot; PRIx64 &quot;\n&quot;, key, falseBit1, falseBit2, trueBit1, trueBit2);
            printf(&quot;  [0 xor 0] = 0   0x%&quot; PRIx64 &quot; xor(+) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, falseBit1, falseBit2, XOR(falseBit1, falseBit2), Decrypt(key, XOR(falseBit1, falseBit2)) ? 1 : 0, GetErrorPercent(key, XOR(falseBit1, falseBit2)));
            printf(&quot;  [0 xor 1] = 1   0x%&quot; PRIx64 &quot; xor(+) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, falseBit1, trueBit2 , XOR(falseBit1, trueBit2 ), Decrypt(key, XOR(falseBit1, trueBit2 )) ? 1 : 0, GetErrorPercent(key, XOR(falseBit1, trueBit2 )));
            printf(&quot;  [1 xor 0] = 1   0x%&quot; PRIx64 &quot; xor(+) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, trueBit1 , falseBit2, XOR(trueBit1 , falseBit2), Decrypt(key, XOR(trueBit1 , falseBit2)) ? 1 : 0, GetErrorPercent(key, XOR(trueBit1 , falseBit2)));
            printf(&quot;  [1 xor 1] = 0   0x%&quot; PRIx64 &quot; xor(+) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, trueBit1 , trueBit2 , XOR(trueBit1 , trueBit2 ), Decrypt(key, XOR(trueBit1 , trueBit2 )) ? 1 : 0, GetErrorPercent(key, XOR(trueBit1 , trueBit2 )));
            printf(&quot;  [0 and 0] = 0   0x%&quot; PRIx64 &quot; and(*) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, falseBit1, falseBit2, AND(falseBit1, falseBit2), Decrypt(key, AND(falseBit1, falseBit2)) ? 1 : 0, GetErrorPercent(key, XOR(falseBit1, falseBit2)));
            printf(&quot;  [0 and 1] = 0   0x%&quot; PRIx64 &quot; and(*) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, falseBit1, trueBit2 , AND(falseBit1, trueBit2 ), Decrypt(key, AND(falseBit1, trueBit2 )) ? 1 : 0, GetErrorPercent(key, XOR(falseBit1, trueBit2 )));
            printf(&quot;  [1 and 0] = 0   0x%&quot; PRIx64 &quot; and(*) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, trueBit1 , falseBit2, AND(trueBit1 , falseBit2), Decrypt(key, AND(trueBit1 , falseBit2)) ? 1 : 0, GetErrorPercent(key, XOR(trueBit1 , falseBit2)));
            printf(&quot;  [1 and 1] = 1   0x%&quot; PRIx64 &quot; and(*) 0x%&quot; PRIx64 &quot; = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, trueBit1 , trueBit2 , AND(trueBit1 , trueBit2 ), Decrypt(key, AND(trueBit1 , trueBit2 )) ? 1 : 0, GetErrorPercent(key, XOR(trueBit1 , trueBit2 )));
        }

        // Verify truth tables for XOR and AND
        Assert(Decrypt(key, XOR(falseBit1, falseBit2)) == false);
        Assert(Decrypt(key, XOR(falseBit1, trueBit2 )) == true );
        Assert(Decrypt(key, XOR(trueBit1 , falseBit2)) == true );
        Assert(Decrypt(key, XOR(trueBit1 , trueBit2 )) == false);

        Assert(Decrypt(key, AND(falseBit1, falseBit2)) == false);
        Assert(Decrypt(key, AND(falseBit1, trueBit2 )) == false);
        Assert(Decrypt(key, AND(trueBit1 , falseBit2)) == false);
        Assert(Decrypt(key, AND(trueBit1 , trueBit2 )) == true );
    }

    // Do multi bit addition as an example of using compound circuits to
    // do meaningful work.
    const size_t c_numBitsAdded = 3;
    printf(&quot;\nDoing 10000 Multibit Additions.  Details of first one:\n&quot;);
    std::array&lt;uint64, c_numBitsAdded&gt; numberAEncrypted;
    std::array&lt;uint64, c_numBitsAdded&gt; numberBEncrypted;
    std::array&lt;uint64, c_numBitsAdded&gt; resultEncrypted;
    std::array&lt;uint64, c_numBitsAdded&gt; carryEncrypted;
    for (int index = 0; index &lt; 10000; ++index)
    {
        // generate the numbers we want to add
        uint64 numberA = RandomUint64(0, (1 &lt;&lt; c_numBitsAdded) - 1);
        uint64 numberB = RandomUint64(0, (1 &lt;&lt; c_numBitsAdded) - 1);

        // generate our key
        uint64 key = GenerateKey();

        // encrypt our bits
        for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
        {
            numberAEncrypted[bitIndex] = Encrypt(key, (numberA &amp; (uint64(1) &lt;&lt; uint64(bitIndex))) != 0);
            numberBEncrypted[bitIndex] = Encrypt(key, (numberB &amp; (uint64(1) &lt;&lt; uint64(bitIndex))) != 0);
        }

        // do our multi bit addition!
        // we could initialize the carry bit to 0 or the encrypted value of 0. either one works since 0 and 1
        // are also poor encryptions of 0 and 1 in this scheme!
        uint64 carryBit = Encrypt(key, false);
        for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
        {
            carryEncrypted[bitIndex] = carryBit;
            resultEncrypted[bitIndex] = FullAdder(numberAEncrypted[bitIndex], numberBEncrypted[bitIndex], carryBit);
        }

        // decrypt our result
        uint64 resultDecrypted = 0;
        for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
        {
            if (Decrypt(key, resultEncrypted[bitIndex]))
                resultDecrypted |= uint64(1) &lt;&lt; uint64(bitIndex);
        }

        // report the results for the first iteration of the loop
        if (index == 0)
        {
            printf(&quot;Key 0x%&quot; PRIx64 &quot;, %&quot; PRId64 &quot; + %&quot; PRId64 &quot; in %i bits = %&quot; PRId64 &quot;\n&quot;, key, numberA, numberB, c_numBitsAdded, (numberA + numberB) % (1 &lt;&lt; c_numBitsAdded));
            for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
                printf(&quot;  A[%i] = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, bitIndex, numberAEncrypted[bitIndex], Decrypt(key, numberAEncrypted[bitIndex]), GetErrorPercent(key, numberAEncrypted[bitIndex]));
            printf(&quot;+\n&quot;);
            for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
                printf(&quot;  B[%i] = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, bitIndex, numberBEncrypted[bitIndex], Decrypt(key, numberBEncrypted[bitIndex]), GetErrorPercent(key, numberBEncrypted[bitIndex]));
            printf(&quot;=\n&quot;);
            for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
                printf(&quot;  Result[%i] = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, bitIndex, resultEncrypted[bitIndex], Decrypt(key, resultEncrypted[bitIndex]), GetErrorPercent(key, resultEncrypted[bitIndex]));
            printf(&quot;Carry Bits =\n&quot;);
            for (int bitIndex = 0; bitIndex &lt; c_numBitsAdded; ++bitIndex)
                printf(&quot;  Result[%i] = 0x%&quot; PRIx64 &quot; (%i err=%0.2f%%)\n&quot;, bitIndex, carryEncrypted[bitIndex], Decrypt(key, carryEncrypted[bitIndex]), GetErrorPercent(key, carryEncrypted[bitIndex]));
            printf(&quot;result decrypted = %&quot; PRId64 &quot;\n&quot;, resultDecrypted);
        }

        // make sure that the results match, keeping in mind that the 4 bit encryption may have rolled over
        Assert(resultDecrypted == ((numberA + numberB) % (1 &lt;&lt; c_numBitsAdded)));
    }

    WaitForEnter();
    return 0;
}
[/code]

Here's the output of an example run.

<img src="https://demofox2.files.wordpress.com/2015/09/SimpleHEBetter.png"/>

<h2>Links</h2>

Another paper about symmetric HE over the integers: <a target="_blank" href="http://bogdankulynych.me/papers/vdghv.pdf">Symmetric Somewhat Homomorphic Encryption over the Integers</a>

An implementation of FHE: <a target="_blank" href="https://github.com/coron/fhe">Implementation of the DGHV fully homomorphic encryption scheme</a>

<h2>Next Up</h2>

Here are some interesting avenues to explore with this stuff.  More blog posts coming in the future about these topics, but for now, here they are in case you want to check them out yourself:
<ul>
	<li>Making the public / private key implementation</li>
	<li>Make this stuff work with multi precision math to be able to make realistically sized and see what sort of perf it gives</li>
	<li>Show how to achieve fully homomorphic encryption using boot strapping and/or modulus switching</li>
	<li>Further explore tuning down security parameters to get game quality HE</li>
	<li>Explore the other known methods for implementing HE.  HE over the integers is apparently very easy to understand compared to other methods, but other methods may have different characteristics - like maybe not being crazy gigantic</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3167</wp:post_id>
		<wp:post_date><![CDATA[2015-09-05 11:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-05 19:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[improving-the-security-of-the-super-simple-symmetric-leveled-homomorphic-encryption-implementation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<category domain="category" nicename="encryption-security"><![CDATA[Encryption + Security]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495640012;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3077;}i:1;a:1:{s:2:"id";i:5090;}i:2;a:1:{s:2:"id";i:4281;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Modular Multiplicative Inverse</title>
		<link>http://blog.demofox.org/2015/09/10/modular-multiplicative-inverse/</link>
		<pubDate>Thu, 10 Sep 2015 14:35:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3209</guid>
		<description></description>
		<content:encoded><![CDATA[This post is a pre-requisite for the next thing I want to talk about so may not make a whole lot of sense or be all that interesting until shown in that context.

Say you have a function like this:

$latex (a*x) \\mod m = n$

If you know the values of a, m and n, how do you solve for x?  Note in this post we are only dealing with integers, so we are looking for the integer solution for x.

It might be hard to visualize with so many symbols, so here it is with some constants:

$latex (5*x) \\mod 7 = 3$

How would you solve that for x?  In other words, what do you need to multiply 5 by, so that when you divide the result by 7, that you get 3 as the remainder?

One way to solve for x would be brute force.  We could try plugging every value from 0 to 6 into x (every value from 0 to n-1), and see if any gives us the result we are looking for.  

Brute force can be a challenge if the numbers are really large, like in some cryptographic situations.

Interestingly, there might not even be a valid answer for x that satisfies the equation!  The below has no answer for instance:

$latex (2*x) \\mod 8 = 5$

<h2>Better Than Brute Force</h2>

There's something called the "Modular Multiplicative Inverse" which looks eerily familiar:

$latex (a*x) \\mod m = 1$

Where a and m are known, and the inverse itself is the value of x.

Using the same constants we did above, that gives us this:

$latex (5*x) \\mod 7 = 1$

In this case, the inverse (x) is 3.  You can verify that by seeing that (5*3) % 7 is 1.

Once you have the inverse, if you wanted to solve the original equation where the modulus end up being 3, you just multiply the inverse by the desired modulus amount.  Since the inverse is 3 and the desired modulus value is 3, you multiply them together and get 9.  Plugging the numbers in, we can see that (5*9) % 7 = 3. 

Pretty cool, but how to calculate the inverse?  You can calculate it by using something called the "Extended Euclidean Algorithm".

The regular Euclidean algorithm is in a post here: <a target="_blank" href="http://blog.demofox.org/2015/01/24/programmatically-calculating-gcd-and-lcm/">Programmatically Calculating GCD and LCM</a>.

The extended euclidean algorithm is explained really well on wikipedia: <a target="_blank" href="https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm">Wikipedia: Extended Euclidean Algorithm</a>.

<h2>Sample Code</h2>

Here's some sample code that asks the user for input and solves these style of equations for x.  Below the code I'll show some example runs and talk about a few more things.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;algorithm&gt;
#include &lt;array&gt;

//=================================================================================
unsigned int ExtendedEuclidianAlgorithm (int smaller, int larger, int &amp;s, int &amp;t)
{
    // make sure A &lt;= B before starting
    bool swapped = false;
    if (larger &lt; smaller)
    {
        swapped = true;
        std::swap(smaller, larger);
    }

    // set up our storage for the loop.  We only need the last two values so will
    // just use a 2 entry circular buffer for each data item
    std::array&lt;int, 2&gt; remainders = { larger, smaller };
    std::array&lt;int, 2&gt; ss = { 1, 0 };
    std::array&lt;int, 2&gt; ts = { 0, 1 };
    int indexNeg2 = 0;
    int indexNeg1 = 1;

    // loop
    while (1)
    {
        // calculate our new quotient and remainder
        int newQuotient = remainders[indexNeg2] / remainders[indexNeg1];
        int newRemainder = remainders[indexNeg2] - newQuotient * remainders[indexNeg1];

        // if our remainder is zero we are done.
        if (newRemainder == 0)
        {
            // return our s and t values as well as the quotient as the GCD
            s = ss[indexNeg1];
            t = ts[indexNeg1];
            if (swapped)
                std::swap(s, t);
            return remainders[indexNeg1];
        }

        // calculate this round's s and t
        int newS = ss[indexNeg2] - newQuotient * ss[indexNeg1];
        int newT = ts[indexNeg2] - newQuotient * ts[indexNeg1];

        // store our values for the next iteration
        remainders[indexNeg2] = newRemainder;
        ss[indexNeg2] = newS;
        ts[indexNeg2] = newT;

        // move to the next iteration
        std::swap(indexNeg1, indexNeg2);
    }
}

//=================================================================================
void WaitForEnter ()
{
    printf(&quot;\nPress Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

//=================================================================================
int main(int argc, char **argv)
{
    // get user input
    int a, m, n;
    printf(&quot;Given a, m and n, solves for X.\n(a * X) %% m = n\n\n&quot;);
    printf(&quot;a = &quot;);
    scanf(&quot;%i&quot;, &amp;a);
    printf(&quot;m = &quot;);
    scanf(&quot;%i&quot;, &amp;m);
    printf(&quot;n = &quot;);
    scanf(&quot;%i&quot;, &amp;n);

    // show details of what they entered
    printf(&quot;\n(%i * X) mod %i = %i\n&quot;, a, m, n);

    // Attempt brute force
    printf(&quot;\nBrute Force Testing X from 0 to %i:\n&quot;, (m-1));
    for (int i = 0; i &lt; m; ++i) {
        if ((a*i) % m == n)
        {
            printf(&quot;  X = %i\n&quot;, i);
            printf(&quot;  %i mod %i = %i\n&quot;, a*i, m, (a*i) % m);
            break;
        }
        else if (i == (m - 1))
        {
            printf(&quot;  No solution!\n&quot;);
        }
    }

    // Attempt inverse via Extended Euclidean Algorithm
    printf(&quot;\nExtended Euclidean Algorithm:\n&quot;);
    int s, t;
    int GCD = ExtendedEuclidianAlgorithm(a, m, s, t);

    // report failure if we couldn't do inverse
    if (GCD != 1)
    {
        printf(&quot;  Values are not co-prime, cannot invert! GCD = %i\n&quot;, GCD);
    }
    // Else report details of inverse and show that it worked
    else
    {
        printf(&quot;  Inverse = %i\n&quot;, t);
        printf(&quot;  X = Inverse * n = %i\n&quot;, t*n);
        printf(&quot;  %i mod %i = %i\n&quot;, a*t*n, m, (a*t*n) % m);
    }

    WaitForEnter();
    return 0;
}
[/code]

<h2>Example Runs</h2>

Here is a normal run that solves $latex (7*x) \\mod 9 = 2$, to come up with a value of 8 for x.

<img src="https://demofox2.files.wordpress.com/2015/09/7_9_2.png"/>

Here is a run that solves $latex (5*x) \\mod 7 = 3$.  Brute force gives us a value of 2 for x, while the inverse gives us a value of 9.  Both are valid, and in fact are equivalent since 9 % 7 = 2.  This shows that getting the inverse and then multiplying it to get the desired answer doesn't always give you the smallest possible value of x.

<img src="https://demofox2.files.wordpress.com/2015/09/5_7_3.png"/>

Here is a large number run that solves $latex (7*x) \\mod 1000001 = 538$.  Brute force gives a value of 571,506 for x, while using the inversion method gives us a value of 230,571,736.

<img src="https://demofox2.files.wordpress.com/2015/09/7_1m1_538.png"/>

Lastly, here is a run that solves $latex (8*x) \\mod 6 = 4$.  Brute force gives us a value of 2 for x, but interestingly, it isn't invertible, so the inversion based solution can't even find us an answer!

<img src="https://demofox2.files.wordpress.com/2015/09/8_6_4.png"/>

This happens when a and m are not co-prime.  In other words, if they have a GCD that isn't 1, they aren't coprime, and the modulus can't be inverted.

<h2>Links</h2>

You can read more about the modular multiplicative inverse here: <a target="_blank" href="https://en.wikipedia.org/wiki/Modular_multiplicative_inverse">Wikipedia: Modular Multiplicative Inverse</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3209</wp:post_id>
		<wp:post_date><![CDATA[2015-09-10 06:35:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-10 14:35:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[modular-multiplicative-inverse]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<category domain="category" nicename="encryption-security"><![CDATA[Encryption + Security]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495671953;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3239;}i:1;a:1:{s:2:"id";i:3673;}i:2;a:1:{s:2:"id";i:4341;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solving Simultaneous Congruences (Chinese Remainder Theorem)</title>
		<link>http://blog.demofox.org/2015/09/12/solving-simultaneous-congruences-chinese-remainder-theorem/</link>
		<pubDate>Sat, 12 Sep 2015 15:37:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3239</guid>
		<description></description>
		<content:encoded><![CDATA[$latex x \\equiv 2 \\pmod{3}$

The equation above is a congruence.  What it says is that x % 3 is 2.

The equals sign with three bars means "is equivalent to", so more literally what the equation says is "x is equivalent to 2, when we are looking at only the integers mod 3".

5 is a solution, so is 8, so is 11 and so is -1!

The general solution for x is $latex x = 2 +3*N$ where N is any integer, aka $latex N \\in \\mathbb{Z}$.

What if you were trying to find an integer value x that satisfied the multiple congruences below?  How would you solve it?

$latex x \\equiv 2 \\pmod{3}$
$latex x \\equiv 2 \\pmod{4}$
$latex x \\equiv 1 \\pmod{5}$

You could use brute force, but you'd have to check every value from 0 to 60 (not including 60) since 60 is the least common multiple (In this case, you calculate LCM 3*4*5 = 60, since the numbers have a greatest common divisor of 1, aka they are co-prime).

As the number of equations grew, or the mod values were larger, brute force could grow to be a large problem very quickly.

Well luckily there is a better way called the Chinese Remainder Theorem.

BTW - the answer is 26.  Or 26 mod 60 more correctly, or 26 + 60*N where N is any integer.

<h2>The Chinese Remainder Theorem</h2>

The CRT was first published sometime in the 3rd-5th centuries by Sun Tzu - but not the Sun Tzu that wrote "The Art of War", that was a different person.  It was later proven to be true by Gauss in 1801.

When trying to learn the CRT, I found this amazing video that explains it extremely well.  You should give it a look: <a target="_blank" href="https://www.youtube.com/watch?v=ru7mWZJlRQg">The Chinese Remainder Theorem made easy</a>.

In that video, it talks about modular inversion.  You can read about the details of that in the last post I made: <a href="http://blog.demofox.org/2015/09/10/modular-multiplicative-inverse/" target="_blank">Modular Multiplicative Inverse</a>.

<h2>An Example</h2>

Let's work through an example that you can follow along with just to make sure you understand it, since I pointed you elsewhere for explanations :P

Here is our set of congruences:
$latex x \\equiv 5 \\pmod{7}$
$latex x \\equiv 8 \\pmod{11}$
$latex x \\equiv 2 \\pmod{3}$

First up, we want to break it into 3 sections, combined with addition.
$latex x = \\_\\_\\_\\_\\_ + \\_\\_\\_\\_\\_ + \\_\\_\\_\\_\\_$

In the above, the first empty space will be the solution to the first equation, the second empty space will be the solution to the second equation, and the third empty space will be the solution to the third equation.

Each section is going to get a co-efficient which is the mods for every equation multiplied together, except the one we are trying to solve.  We still have an unknown though per term that we are going to solve in a moment.

$latex x = 11*3*N_1 + 7*3*N_2 + 7*11*N_3$
or
$latex x = 33*N_1 + 21*N_2 + 77*N_3$

The reason we make those coefficients is because it isolates our terms so that we can solve each equation individually then combine them to get the combined solution.

This works because you can see that in the first term, no matter what we end up choosing for $latex N_1$, it will always be a perfect multiple of 3 and 11, which means that the value will be zero in the other terms / other equations, so won't affect whatever value we come up for them.

Next up, we need to solve for the N's.

The first term needs to have an $latex N_1$ such that $latex 33*N_1 \\pmod 7 = 5$.

How do we solve that?  We could use brute force, testing every number 0 through 6 (otherwise known as 7-1), but in the last post we showed a better way to do it using the extended euclidean algorithm.  So, that link once again is: <a href="http://blog.demofox.org/2015/09/10/modular-multiplicative-inverse/" target="_blank">Modular Multiplicative Inverse</a>.

The answer when solving using inversion comes out to be 15.  Note that our answer is in "mod 7" space, so you could use any value $latex 1+7*I $ where $latex I \\in \\mathbb{Z}$, but we can stick to using 15 to make it easier to follow.

That gives us this:
$latex x = 33*15 + 21*N_2 + 77*N_3$
or
$latex x = 495 + 21*N_2 + 77*N_3$

The value of N2 and N3 end up being -8 and -2 respectively.  That gives us:
$latex x = 33*15 + 21*-8 + 77*-2$
or
$latex x = 495 - 168 - 154$
or
$latex x = 173$

Since this is just one of many solutions, the real answer is:
$latex x = 173 \\pmod{231}$
or
$latex x = 173 + 231*N$ where $latex N \\in \\mathbb{Z}$

Let's check our result and see if we got it right...

173 % 7 is indeed 5.
173 % 11 is 8.
173 % 3 is 2.

Woot, it worked!

<h2>Example Code</h2>

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;algorithm&gt;
#include &lt;array&gt;

// x = a mod m
struct SEquation
{
    int a;
    int m;
};
 
//=================================================================================
unsigned int ExtendedEuclidianAlgorithm (int smaller, int larger, int &amp;s, int &amp;t)
{
    // make sure A &lt;= B before starting
    bool swapped = false;
    if (larger &lt; smaller)
    {
        swapped = true;
        std::swap(smaller, larger);
    }
 
    // set up our storage for the loop.  We only need the last two values so will
    // just use a 2 entry circular buffer for each data item
    std::array&lt;int, 2&gt; remainders = { larger, smaller };
    std::array&lt;int, 2&gt; ss = { 1, 0 };
    std::array&lt;int, 2&gt; ts = { 0, 1 };
    int indexNeg2 = 0;
    int indexNeg1 = 1;
 
    // loop
    while (1)
    {
        // calculate our new quotient and remainder
        int newQuotient = remainders[indexNeg2] / remainders[indexNeg1];
        int newRemainder = remainders[indexNeg2] - newQuotient * remainders[indexNeg1];
 
        // if our remainder is zero we are done.
        if (newRemainder == 0)
        {
            // return our s and t values as well as the quotient as the GCD
            s = ss[indexNeg1];
            t = ts[indexNeg1];
            if (swapped)
                std::swap(s, t);
            return remainders[indexNeg1];
        }
 
        // calculate this round's s and t
        int newS = ss[indexNeg2] - newQuotient * ss[indexNeg1];
        int newT = ts[indexNeg2] - newQuotient * ts[indexNeg1];
 
        // store our values for the next iteration
        remainders[indexNeg2] = newRemainder;
        ss[indexNeg2] = newS;
        ts[indexNeg2] = newT;
 
        // move to the next iteration
        std::swap(indexNeg1, indexNeg2);
    }
}
 
//=================================================================================
void WaitForEnter ()
{
    printf(&quot;\nPress Enter to quit&quot;);
    fflush(stdin);
    getchar();
}
 
//=================================================================================
int main(int argc, char **argv)
{
    const SEquation equations[] =
    {
        { 2, 3 },
        { 2, 4 },
        { 1, 5 }
    };

    const int c_numEquations = sizeof(equations) / sizeof(equations[0]);

    // print out the equations
    printf(&quot;Solving for x:\n&quot;);
    for (int i = 0; i &lt; c_numEquations; ++i)
        printf(&quot;eq %i:  x = %i mod %i\n&quot;, i, equations[i].a, equations[i].m);
    printf(&quot;\n&quot;);

    // make sure the m's are pairwise co-prime
    for (int i = 0; i &lt; c_numEquations; ++i)
    {
        for (int j = i + 1; j &lt; c_numEquations; ++j)
        {
            int s, t;
            int gcd = ExtendedEuclidianAlgorithm(equations[i].m, equations[j].m, s, t);
            if (gcd != 1)
            {
                printf(&quot;%i and %i are not co-prime (index %i and %i)\n&quot;, equations[i].m, equations[j].m, i, j);
                WaitForEnter();
                return 0;
            }
        }
    }

    // calculate the coefficients for each term
    std::array &lt; int, c_numEquations &gt; coefficients;
    coefficients.fill(1);
    for (int i = 0; i &lt; c_numEquations; ++i)
    {
        for (int j = 0; j &lt; c_numEquations; ++j)
        {
            if (i != j)
                coefficients[i] *= equations[j].m;
        }
    }

    // now figure out how much to multiply each coefficient by to make it have the specified modulus residue (remainder)
    int result = 0;
    for (int i = 0; i &lt; c_numEquations; ++i)
    {
        int s, t;
        ExtendedEuclidianAlgorithm(coefficients[i], equations[i].m, s, t);
        coefficients[i] *= t * equations[i].a;
    }

    // calculate result and simplify it to the smallest positive integer mod lcm
    // lcm is the product when they are pairwise coprime, as the gcd of any two is 1.
    int lcm = 1;
    for (int i = 0; i &lt; c_numEquations; ++i)
    {
        lcm *= equations[i].m;
        result += coefficients[i];
    }
    result = result % lcm;
    if (result &lt; 0)
        result += lcm;

    // print out the answer
    printf(&quot;x = %i mod %i\nor...\n&quot;, result, lcm);
    printf(&quot;x = %i + %i*N\nWhere N is any positive or negative integer.\n\n&quot;, result, lcm);

    // verify that our result is correct
    printf(&quot;Verifying Equations:\n&quot;);
    for (int i = 0; i &lt; c_numEquations; ++i)
        printf(&quot;eq %i:  %i mod %i = %i (%s)\n&quot;, i, result, equations[i].m, result % equations[i].m, (result % equations[i].m == equations[i].a) ? &quot;PASS&quot; : &quot;!!FAIL!!&quot;);

    WaitForEnter();
    return 0;
}
[/code]

Here's the output of the program:
<img src="https://demofox2.files.wordpress.com/2015/09/CRT.png"/>

<h2>Links</h2>

One final note.  If the program can't find an answer, it doesn't necessarily mean that there is no answer.  For instance, you could imagine multiplying everything by 2, which would make the modulus values not be co-prime (they would have 2 as a common denominator).  That would make this algorithm fail, even though there was a valid answer.

You can try the method of successive substitution as an alternate method when that happens. 

<a href="https://en.wikipedia.org/wiki/Chinese_remainder_theorem" target="_blank">Wikipedia: The Chinese Remainder Theorem</a>

<a href="https://en.wikipedia.org/wiki/Method_of_successive_substitution" target="_blank">Wikipedia: Method Of Successive Substitution</a>

Also, it looks like Khan Academy has a good bit on modular math!

<a target="_blank" href="https://www.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">Khan Academy: What is Modular Arithmetic?</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3239</wp:post_id>
		<wp:post_date><![CDATA[2015-09-12 07:37:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-12 15:37:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[solving-simultaneous-congruences-chinese-remainder-theorem]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495720427;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3276;}i:1;a:1:{s:2:"id";i:4341;}i:2;a:1:{s:2:"id";i:3673;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solving Nested Modulus Equations</title>
		<link>http://blog.demofox.org/2015/09/15/solving-nested-modulus-equations/</link>
		<pubDate>Wed, 16 Sep 2015 04:55:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3276</guid>
		<description></description>
		<content:encoded><![CDATA[$latex x \\% 2 = 1$

The above equation is pretty easy to solve, it just means that x is any value that when you divide by 2, gives a remainder of 1.  x is all odd numbers.  The more formal answer is:

$latex x \\equiv 1 + 2\\mathbb{Z}$

That reads as "x is equivalent to 1 plus 2 times any integer".  x has infinitely many solutions, so long as they fit that constraint.

That's easy enough to figure out, but how would you solve this equation?

$latex (x \\% 5) \\%2 = 1$

or this one?

$latex ((x \\% 7) \\% 5) \\%2 = 1$

<h2>One Level (Simple Case)</h2>

There is something called the quotient remainder theorem that lets us change an equation like this:

$latex A \\% B = C$

Into one like this:

$latex A \\equiv C + B \\mathbb{Z}$

The Z means "all integers" which implies that there are infinitely many solutions to A. This reads as "A is equivelant to C plus B times any integer".

Let's work out a couple examples.

$latex x \\% 5 = 3$

That transforms to:

$latex x \\equiv 3 + 5 \\mathbb{Z}$

If you try plugging any positive or negative integer in place of Z, you'll see that you get a number that satisfies the first equation.

Here's another one:

$latex x \\% 538 = 211$

That transforms to:

$latex x \\equiv 211 + 538 \\mathbb{Z}$

Once again you can plug any positive or negative integer in for Z and get a value for x that satisfies the original equation.

Pretty easy and pretty handy right?  Let's get a little more complex.

<h2>Two Levels</h2>

Let's say you want to solve this equation from the intro.

$latex (x \\% 5) \\%2 = 1$

The first thing you might do is transform it to the below.

$latex x \\% 5 \\equiv 1 + 2 N_1$ where $latex N_1 \\in \\mathbb{Z}$.

What now?  Can we transform it again?  If we do, we get this:

$latex x \\equiv 1 + 2 N_1+ 5 N_2$ where $latex N_i \\in \\mathbb{Z}$.

plugging 1 in for the N1 and N2, we get 8, which does satisfy the original equation.

If we plug 3 in for N1 and 1 in for N2 though, we get 12 which DOESN'T satisfy the original equation.  What gives??

Well it turns out there are subtle restrictions on our equations that got lost in the shuffle.  Let's start over...

$latex (x \\% 5) \\%2 = 1$

In effect, what that equation says is "Something divided by two gives a remainder of 1" where the something happens to be x % 5, but we don't really care about what the something actually is right now.

The equation also implies that the right side of the equation is a value modulo two, and it's only valid values are {0,1}.  Another way to write this is to say that the right side $latex \\in \\mathbb Z_2$ which reads as "in all integers mod 2".

1 is obviously in the set of valid values {0,1}, so we don't need any special notation just yet, but let's keep it in mind as we move onto the next step.

$latex x \\% 5 \\equiv 1 + 2 \\mathbb Z$

The above says that x divided by 5 gives a remainder that is 1 plus two times all integers.  However there is a catch.  There right side of the equation is a mod 5 value, which means it's only valid values are {0,1,2,3,4}.  In other words, the right side of the equation is $latex \\in \\mathbb Z_5$.

This has an effect of implicitly limiting the valid values that we can plug in to Z.  It limits it to values of Z where 1+2*Z is in {0,1,2,3,4}.  Let's write this out a little more formally.

$latex x \\% 5 \\equiv a$ where $latex a = 1 + 2 \\mathbb Z$ and $latex a \\in \\mathbb Z_5$

Let's transform the equation again to solve for x:

$latex x \\equiv a + 5\\mathbb Z$ where $latex a = 1 + 2 \\mathbb Z$ and $latex a \\in \\mathbb Z_5$

Note that there is no modulus on the left side of the equation now, so the right side of the equation is unlimited into the valid values it can have.

How do we use this resulting formula though to find valid values of x?

First we figure out the valid values of a.  $latex a = 1 + 2 \\mathbb Z$ where $latex a \\in \\mathbb Z_5$, so it's only valid values have to be a subset of {0,1,2,3,4}.

Plugging a -1 in for Z, we get a value for a of -1, which isn't a valid answer so we throw it away.

Plugging a 0 in for Z, we get a value for a of 1.  That is a valid answer so we keep it!

Plugging a 1 in gives us 3 which is valid, so we keep that too.

Plugging a 2 in gives us a value of 5, which isn't valid, so we throw it away and know that we are done.

Our values for a are {1,3}.

The solution we got was this:
$latex x \\equiv a + 5\\mathbb Z$

Plugging in each value of a means that we get two equations as a solution for x.  Valid values of x are the union of these two lists - both equations give valid answers.

$latex x \\equiv 1 + 5\\mathbb Z$<br/>
$latex x \\equiv 3 + 5\\mathbb Z$

The first equation gives us values of {..., -4, 1, 6, 11, ...}<br/>
The second equation gives us values of {..., -2, 3, 8, 13, ...}

Taking the union of those, our solutions for x are:
{..., -4, -2, 1, 3, 6, 8, 11, 13, ...}

If you plug those into the original equation $latex (x \\% 5) \\%2 = 1$, you'll see that they are valid solutions!  Those equations also represent ALL solutions, so they aren't only valid, they are also complete.

Let's step it up just one more notch.

<h2>Three Levels (Boss Mode)</h2>

Let's solve the hardest equation from the intro:

$latex ((x \\% 7) \\% 5) \\%2 = 1$

This starts off just like the two leveled equation.  Something on the left mod 2 is equation to 1.  The 1 on the right side is $latex \\in \\mathbb Z_2$, but since that's obviously true for this constant, we don't need to do anything special.  So, we transform it to the below:

$latex (x \\% 7) \\% 5 \\equiv a$<br>
$latex a = 1 + 2 \\mathbb Z$<br>
$latex a \\in \\mathbb Z_5$

Then we do another transformation:
$latex x \\% 7 \\equiv b$<br>
$latex b = a + 5 \\mathbb Z$<br>
$latex a = 1 + 2 \\mathbb Z$<br>
$latex a \\in \\mathbb Z_5$<br>
$latex b \\in \\mathbb Z_7$

Then for the last transformation, we get this:
$latex x \\equiv b + 7 \\mathbb Z$<br>
$latex b = a + 5 \\mathbb Z$<br>
$latex a = 1 + 2 \\mathbb Z$<br>
$latex a \\in \\mathbb Z_5$<br>
$latex b \\in \\mathbb Z_7$

Now that we have our equations worked out, we need to start finding out what the values actually are.  We start with a because it's what b and x are based on, and is made up of constants.  We get {1,3} again as the valid values of a.  That gives us:
$latex x \\equiv b + 7 \\mathbb Z$<br>
$latex b = a + 5 \\mathbb Z$<br>
$latex a = [1,3]$<br>
$latex b \\in \\mathbb Z_7$

Now we want to plug each value of a into b and find all the valid values for b.  When we plug 1 into b for a, it becomes $latex b = 1 + 5 \\mathbb Z$, $latex b \\in \\mathbb Z_7$.  The valid values for that are {1,6}.

When we plug 3 into b for a, it becomes $latex b = 3 + 5 \\mathbb Z$, $latex b \\in \\mathbb Z_7$.  The only valid value there is {3}.

That means that our valid values for b are {1,3,6}.  It's the union of the valid values we found for each value of a.

That makes our equations into this:
$latex x \\equiv b + 7 \\mathbb Z$<br>
$latex b = [1,3,6]$

If we plug those values of b into the equation for x, we get these three equations:

$latex x \\equiv 1 + 7 \\mathbb Z$<br>
$latex x \\equiv 3 + 7 \\mathbb Z$<br>
$latex x \\equiv 6 + 7 \\mathbb Z$<br>

The first equation gives us some x values of {..., -6, 1, 8, 15, ...}.  The second equation gives us x values of {..., -4, 3, 10, 17, ...}.  The third equation gives us x values of {..., -1, 6, 13, 20, ...}.

Taking the union of all of those, we get...
{..., -6, -4, -1, 1, 3, 6, 8, 10, 13, 15, 17, 20, ...}

If you plug those numbers into the original equation $latex ((x \\% 7) \\% 5) \\%2 = 1$, you can see that they are valid solutions!

When you are performing this algorithm, if you ever hit a case where there are no valid answers in one of the steps - like say, there were no valid answers for equation b in the above - that means that there is no solution to your equation.

<h2>Sample Code</h2>

Since solving these equations can be pretty manual and tedious, here is some code that can solve these equations for you.  If you were confused at all by the explanation above, the code may also be able to show you how it works better, especially if you step through it and see what it's doing.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;
#include &lt;vector&gt;

//=================================================================================
void WaitForEnter()
{
    printf(&quot;\nPress Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

//=================================================================================
void AddSolutions(std::vector&lt;int&gt;&amp; solutions, int add, int multiply, int mod)
{
    int Z = 0;
    while (1)
    {
        int value = multiply * Z + add;
        if (value &lt; mod)
            solutions.push_back(value);
        else
            return;
        ++Z;
    }
}

//=================================================================================
void AddSolutionsFromSolutions (std::vector&lt;int&gt;&amp; solutions, const std::vector&lt;int&gt;&amp; adds, int multiply, int mod)
{
    std::for_each(
        adds.begin(),
        adds.end(),
        [&amp;solutions, multiply, mod] (int add)
        {
            AddSolutions(solutions, add, multiply, mod);
        }
    );
}

//=================================================================================
int main(int argc, char **argv)
{
    // a,b,c,d...
    // ((x % a) % b) % c = d
    // etc.
    //const int c_values[] = {7, 5, 2, 1};
    const int c_values[] = { 12, 9, 7, 5, 3, 2 };
    const size_t c_numValues = sizeof(c_values) / sizeof(c_values[0]);
    
    // print the equation
    printf(&quot;Solving for x:\n&quot;);
    for (size_t i = 0; i &lt; c_numValues - 1; ++i)
        printf(&quot;(&quot;);
    printf(&quot;x&quot;);
    for (size_t i = 0; i &lt; c_numValues - 1; ++i)
        printf(&quot; %% %i)&quot;, c_values[i]);
    printf(&quot; = %i\n\n&quot;, c_values[c_numValues-1]);

    // print the solution equations
    for (size_t i = 0; i &lt; c_numValues - 2; ++i)
    {
        char eqn = i &gt; 0 ? 'A' + i - 1 : 'x';
        char eq = i &gt; 0 ? '=' : 0xF0;

        printf(&quot;%c %c %c + %i*Z&quot;, eqn, eq, 'B' + i - 1, c_values[i]);
        if (i &gt; 0)
            printf(&quot; (in Z_%i)\n&quot;, c_values[i-1]);
        else
            printf(&quot; (in Z)\n&quot;);
    }
    printf(&quot;%c = %i + %i*Z (in Z_%i)\n\n&quot;, 'A' + c_numValues - 2 - 1, c_values[c_numValues - 1], c_values[c_numValues - 2], c_values[c_numValues - 3]);

    // gather up the permutation of solutions for each equation, starting with the lowest equation which has only constants
    std::array&lt;std::vector&lt;int&gt;, c_numValues - 2&gt; solutions;
    AddSolutions(solutions[c_numValues - 3], c_values[c_numValues - 1], c_values[c_numValues - 2], c_values[c_numValues - 3]);
    for (size_t i = c_numValues - 3; i &gt; 0; --i)
        AddSolutionsFromSolutions(solutions[i-1], solutions[i], c_values[i], c_values[i-1]);

    // Detect empty set
    if (solutions[0].size() == 0)
    {
        printf(&quot;No solutions!\n&quot;);
        WaitForEnter();
        return 0;
    }

    // Print the more specific solution equations
    printf(&quot;x = &quot;);
    for (size_t i = 0, c = solutions[0].size(); i &lt; c; ++i)
    {
        if (i &lt; c - 1)
            printf(&quot;%c U &quot;, 'a' + i);
        else
            printf(&quot;%c\n&quot;, 'a' + i);
    }
    std::sort(solutions[0].begin(), solutions[0].end());
    for (size_t i = 0, c = solutions[0].size(); i &lt; c; ++i)
        printf(&quot;%c = %i + %iZ\n&quot;, 'a' + i, solutions[0][i], c_values[0]);
  
    // Print specific examples of solutions (first few numbers in each)
    std::vector&lt;int&gt; xValues;
    printf(&quot;\n&quot;);
    for (size_t i = 0, c = solutions[0].size(); i &lt; c; ++i)
    {
        printf(&quot;%c = {..., &quot;, 'a' + i);
        for (int z = 0; z &lt; 3; ++z)
        {
            printf(&quot;%i, &quot;, solutions[0][i] + z * c_values[0]);
            xValues.push_back(solutions[0][i] + z * c_values[0]);
        }
        printf(&quot;...}\n&quot;);
    }

    // Show the list of specific values of X
    std::sort(xValues.begin(), xValues.end());
    printf(&quot;\nx = {..., &quot;);
    std::for_each(xValues.begin(), xValues.end(), [](int v) {printf(&quot;%i, &quot;, v); });
    printf(&quot;...}\n&quot;);

    // Test the solutions to verify that they are valid!
    bool valuesOK = true;
    for (size_t i = 0, c = xValues.size(); i &lt; c; ++i)
    {
        int value = xValues[i];
        for (size_t j = 0; j &lt; c_numValues - 1; ++j)
            value = value % c_values[j];

        if (value != c_values[c_numValues - 1])
        {
            printf(&quot;Solution %i is invalid!!\n&quot;, xValues[i]);
            valuesOK = false;
        }
    }
    if (valuesOK)
        printf(&quot;\nAll solutions shown tested valid!\n&quot;);

    WaitForEnter();
    return 0;
}
[/code]

Here's an example run, where it solves a 5 level equation.

<img src="https://demofox2.files.wordpress.com/2015/09/Nested.png"/>

<h2>Links</h2>

If you know of a better way to solve this type of equation let me know.  This is what I found when trying to figure this stuff out, but it doesn't mean it's the only way to do it.

The one thing I don't like about this technique is that when you find solutions, it's very manual, and very specific to the values used.  Imagine if one of the modulus divisors was a variable instead of them all being constants.  How would you solve it then?  I'm not really sure...

Have some links!

<a target="_blank" href="http://math.stackexchange.com/questions/1434181/how-to-solve-nested-congruences">Math Stack Exchange: How to solve nested congruences?</a>

<a target="_blank" href="https://www.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">Khan Academy: The Quotient Remainder Theorem</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3276</wp:post_id>
		<wp:post_date><![CDATA[2015-09-15 20:55:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-16 04:55:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[solving-nested-modulus-equations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495710279;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3239;}i:1;a:1:{s:2:"id";i:4341;}i:2;a:1:{s:2:"id";i:4281;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum Computing References</title>
		<link>http://blog.demofox.org/2015/10/12/quantum-computing-references/</link>
		<pubDate>Mon, 12 Oct 2015 19:22:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3334</guid>
		<description></description>
		<content:encoded><![CDATA[I'm in the middle of some research to better understand quantum computing so that I can write a short series of blog posts entitled "Quantum Computing for Programmers".

These posts will be light on - and possibly completely absent of - hardcore math and physics, and instead speak more to programmers.  It will aim to show the rules of quantum computing, explain which operations are fast and which aren't, show the basic building blocks of quantum logic, combine those simple gates into more complicated quantum circuits, and most importantly it will have simple sample C++ code which shows this stuff in action, so you can do your own (simulated) quantum computing experimentation and exploration on your own computer.

This page is a list of the references I've found so far, and I'll keep updating it as I find new, useful references.

<h2>Gentle Introduction</h2>

<a target="blank" href="http://arstechnica.com/science/2010/01/a-tale-of-two-qubits-how-quantum-computers-work/">Ars Technica - A tale of two qubits: how quantum computers work</a>

<h2>Technical Details, Very Well Explained</h2>

<a target="blank" href="http://twistedoakstudios.com/blog/Post8887_what-quantum-computers-do-faster-with-caveats">Twisted Oak Studios - What Quantum Computers Do Faster, with Caveats</a>

<a target="blank" href="http://twistedoakstudios.com/blog/Post2644_grovers-quantum-search-algorithm">Twisted Oak Studios - Grover’s Quantum Search Algorithm</a>

<h2>A Bit More Advanced, Still Very Readable</h2>

<a target="blank" href="http://www.scottaaronson.com/democritus/lec9.html">Scott Aaronson - Lecture 9: Quantum</a>

<a target="blank" href="http://www.scottaaronson.com/democritus/lec10.html">Scott Aaronson - Lecture 10: Quantum Computing</a>

<h2>Good Info, More Mathy</h2>

<a target="blank" href="http://jeremykun.com/2014/12/08/a-motivation-for-quantum-computing/">Math ∩ Programming - A Motivation for Quantum Computing</a>

<a target="blank" href="http://jeremykun.com/2014/12/15/the-quantum-bit/">Math ∩ Programming - The Quantum Bit</a>

<a target="blank" href="http://jeremykun.com/2015/01/26/multiple-qubits-and-the-quantum-circuit/">Math ∩ Programming - Multiple Qubits and the Quantum Circuit</a>

<h2>Useful Wikipedia Pages</h2>

<a target="blank" href="https://en.wikipedia.org/wiki/Quantum_gate#Commonly_used_gates">Wikipedia - Commonly Used Quantum Gates</a>

<a target="blank" href="https://en.wikipedia.org/wiki/Quantum_circuit">Wikipedia - Quantum Circuit</a>

<a target="blank" href="https://en.wikipedia.org/wiki/Deutsch%E2%80%93Jozsa_algorithm">Wikipedia - Deutsch–Jozsa algorithm</a>

<h2>Quantum Algorithm Stuff</h2>

<a target="blank" href="http://algorithmicassertions.com/quantum/2015/05/01/Quantum-Network-Flow-Puzzle.html">A Quantum Network Flow Puzzle</a>

<a target="blank" href="http://algorithmicassertions.com/quantum/2014/03/07/Building-your-own-Quantum-Fourier-Transform.html">Building your own Quantum Fourier Transform</a>

<a target="blank" href="http://algorithmicassertions.com/quantum/2015/10/11/Bell-Tests-vs-No-Communication.html">An interactive page that shows you how quantum pseudo telepathy is not communication</a>

<a target="blank" href="http://twistedoakstudios.com/blog/Post6536_implementing-quantum-pseudo-telepathy">Twisted Oak Studios - Implementing Quantum Pseudo-Telepathy</a>

<h2>Other</h2>

<a target="blank" href="http://m.phys.org/news/2015-05-quantum-emulated-classical.html">An article on some people who are working on emulating (not simulating) quantum computers using sound waves</a>

<a target="blank" href="http://www.technologyreview.com/view/427998/a-photonic-c-not-gate-breakthrough-for-quantum-computing/">A Photonic C-NOT Gate Breakthrough for Quantum Computing</a>

<a target="blank" href="http://demonstrations.wolfram.com/GeneratingEntangledQubits/">Wolfram Alpha Demonstrations: Generating Entangled Qubits</a>

<a target="blank" href="https://en.wikipedia.org/wiki/Simon%27s_problem">Wikipedia: Simon's problem</a>

<a target="blank" href="http://www.davyw.com/quantum/">Quantum Circuit Simulator in a Web Page</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3334</wp:post_id>
		<wp:post_date><![CDATA[2015-10-12 11:22:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-12 19:22:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[quantum-computing-references]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="quantum-computing"><![CDATA[Quantum Computing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494743232;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3349;}i:1;a:1:{s:2:"id";i:3465;}i:2;a:1:{s:2:"id";i:3434;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum Computing For Programmers Part I: One Qubit</title>
		<link>http://blog.demofox.org/2015/10/17/quantum-computing-for-programmers-part-i-one-qubit/</link>
		<pubDate>Sat, 17 Oct 2015 17:22:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3349</guid>
		<description></description>
		<content:encoded><![CDATA[Are you a programmer?  Do you have interest in learning how quantum computing works?  Does hard core math and crazy abstract "philosophical" type physics questions about the nature of reality make you feel like you could never understand quantum computing?

If so, me too, welcome to the club!  We are programmers, not mathematicians or physicists, but we are masters of our realm - computation and logic.  With that, I say that quantum computing is ultimately meant for us, since it is computing and programming, so lets figure it out and do some interesting stuff :P

Before we start, I want to mention that these posts should be able to be read stand alone, but if you want to get into the deeper details, you probably want to give this list of references I'm using a read at some point.  Perhaps before reading my posts, or after, or both!<br>
<a target="blank" href="http://blog.demofox.org/2015/10/12/quantum-computing-references/">Quantum Computing References</a>

Lastly, to be clear, quantum computers seem like they are a long way off from being common place objects.  These posts will show how quantum computers work, and allow you to <strong>simulate</strong> quantum computers on your own computer with some simple C++.  The code won't run as fast as it would on a real quantum computer (obviously!), but it should let you better understand how Quantum Computing (QC) works and let you explore and experiment on your own machine.

<h2>Probabilities (aka SuperPositons)</h2>

At the core of QC is the qubit.  A qubit is like a regular bit, in that it can have the value of 0 or 1, but unlike a regular bit, it can also be somewhere in the middle where it has a probability of being in each state.

That might sound strange, but think of a qubit like a coin.  It can be heads up, or it can be heads down, or it can be in the air, waiting to land heads up or heads down.

When the coin is in the air, if it is perfectly balanced, it has a 50/50 chance of becoming heads or tails.

If the coin is not perfectly balanced (no real coin can be perfectly balanced!), it will have some bias towards heads or towards tails so will not be a pure 50/50 chance of heads or tails.

While the coin is on the ground, it is either a heads (0) or a tails (1), but while it's in the air, you can imagine that it is a superposition of 0 and 1.  When it lands, that superposition will collapse into a 0 or 1 value, which is also what happens when you "observe" or measure a qubit.

One interesting thing about quantum computing, and where part of it's power comes from is that you can perform logic on superpositional values in a way that when you have your final superpositional result, you can measure it and get the result from your logic circuit as if the values had been fixed all the way through the system, instead of being in superpositions.

The bummer about this though is that since it's all based on probabilities, your answer has a chance of being not the value you wanted to get.  Quantum circuits / quantum algorithms will try to combat this by doing operations iteratively to make the probability of the desired answer go up, and the probability of the undesired answers go down.

They can also run the quantum algorithm multiple times, to take multiple samples and be more sure about their results.

You still with me?  Pretty simple so far right?

Before moving on I also wanted to mention that regular computers - like the one you are using right now - also have a greater than zero chance that they will give you the wrong answer to a calculation.  The error rate can increase when the components are too hot, but even otherwise, a stray particle of background radiation could hit your cpu and flip a bit, giving you the wrong answer.  You could fight this by doing every calculation 3 times and going with majority rules, but even then, if two bits get flipped, the majority will be wrong.  Nothing you can do can completely eliminate the random chance that your calculations will come up with the wrong answer, but the chances are low enough that we rely on computers to do the right things, even in the most critical of situations (like, not starting a thermonuclear war).

With quantum computers you could get that same level of assurance.  You can never completely eliminate the chance that a calculation is wrong, but you can definitely be sure with as much accuracy as you can with a standard computer, so that shouldn't really be an issue in practice, for the cases where you need "certainty".

<h2>Probability Vectors (aka Amplitude Vectors)</h2>

Using the coin flip scenario above, we could describe the probability of a coin landing heads or tails as a vector where the first element is the chance that it will land heads, and the second element is the chance that it will land tails.

A perfectly balanced coin would look like this for instance: $latex [0.5,0.5]$

If the coin was 75% likely to land heads, and only 25% likely to land tails the vector would look like this: $latex [0.75,0.25]$

You might notice that the elements of the vector have to add up to 1.  This makes sense because there are only two options and one of the two MUST happen (unless it lands perfectly on edge), so they better add up to 1!  The technical term for this is that the vector must have an L1 Norm of 1.

Qubits describe their probabilities a little bit differently though.  Instead of storing the probability of them being 0 or 1, they store what's called the amplitude, which when squared gives the probability.  Doing this lets them do something really important that I'll talk about lower down, but for now, you can hopefully just accept that this is how it works.

Consider a qubit having a 50% chance that it's a 0, and a 50% chance that it's a 1.  We need some number that when squared gives 0.5 aka 1/2.  That value is $latex 1/\\sqrt{2}$.

So, for a qubit that has an even chance of being a 0 or 1, a vector to represent it is $latex [1/\\sqrt{2}, 1/\\sqrt{2}]$.

Then, a vector describing a qubit that has a 75% chance being a 0 and a 25% chance of being a 1 would be $latex [\\sqrt{3}/2, 1/2]$.  If you square the first number you can see that you get 3/4 (75% chance) and squaring the second number gives you 1/4 (25% chance).

I got those vectors by solving the simple equation:
$latex x^2 = P$

Where $latex P$ is the desired probability from 0 to 1.

You might now notice that the length of a qubit amplitude vector has to be 1.  In other words, it's a normalized vector.  The technical term for this is that the vector must have an L2 norm of 1.

Still nothing too crazy going on...

<h2>Ket Notation</h2>

There is some notation you'll come across a lot when reading about quantum computing / mechanics / etc that looks like this:
$latex 1/\\sqrt{2}(|0\\rangle + |1\\rangle) $

That is "Ket Notation" and comes from "Bra-Ket Notation".  It's bark is worse than it's bite.

If you multiply it out, you get this:
$latex 1/\\sqrt{2} * |0\\rangle + 1/\\sqrt{2} * |1\\rangle $

All that means is that the "0" state of the vector has an amplitude of $latex 1/\\sqrt{2}$ and so does the "1" state.  Writing that as a vector, we get what we already saw above for the qubit which had 50/50 odds of being a 0 or a 1:
$latex [1/\\sqrt{2}, 1/\\sqrt{2}]$

Here is the ket notation for the qubit which had a 75% chance of being a 0 and a 25% chance of being a 1:
$latex 1/2(\\sqrt{3}|0\\rangle + |1\\rangle) $

You can multiply that out to get this:
$latex \\sqrt{3}/2*|0\\rangle + 1/2*|1\\rangle $

Which translates to the vector we saw before:
$latex [\\sqrt{3}/2, 1/2]$

Lastly, you might see it shown like this:
$latex |0\\rangle $

All that means is that the "0" state is 1.  Since the "1" state isn't listed, it has a value of 0.  That is the same as this vector:
$latex [1, 0]$

Ket notation is used because you only have to list the states that actually have values, and not the ones that have zeros, making a more compact representation.  That will be more useful when we move into a larger number of qubits.

Note that the mapping of which state belongs to which spot in the vector is completely arbitrary.  I chose to make the left value be the "0" state and the right value be the "1" state, but it really doesn't matter how you define it, so long as you are consistent.

<h2>Phase</h2>

Phase is the reason that qubits store amplitude, which square to probabilities, instead of storing probabilities themselves.

I said that the amplitude vector for a qubit which has a 50/50 chance of being a 0 or a 1 was this:
$latex [1/\\sqrt{2}, 1/\\sqrt{2}]$

I lied a bit though, and that is only one possible answer.  Here's another that has a 50/50 chance:
$latex [-1/\\sqrt{2}, 1/\\sqrt{2}]$

This gets interesting when you add two vectors together.  First lets add two amplitude vectors which have the same phases for each state:
$latex [1/\\sqrt{2}, 1/\\sqrt{2}] + [1/\\sqrt{2}, 1/\\sqrt{2}] = [\\sqrt{2}, \\sqrt{2}] $

Each component added together.

Now, let's add two amplitude vectors where the $latex |1\\rangle $ state has opposite phase in one of the vectors:
$latex [1/\\sqrt{2}, 1/\\sqrt{2}] + [1/\\sqrt{2}, -1/\\sqrt{2}] = [\\sqrt{2}, 0] $

You can see that the $latex |0\\rangle $ states added together while the $latex |1\\rangle $ states subtracted and resulted in zero.

This is called destructive interference, and is one of the things that makes quantum computing powerful.  We can change a qubit's phase without affecting it's value (or probability of values).

I left out another important amplitude vector for describing a qubit that has a 50/50 chance of being a 0 or a 1:
$latex [1/\\sqrt{2}, 1/\\sqrt{-2}]$

Which can also be written as:
$latex [1/\\sqrt{2}, 1/(\\sqrt{2}*i)]$

Yep, that is an imaginary number in the 1 state!

Since amplitude squared is probability, it means we can also use imaginary numbers for amplitude vector values.  If you know that the term phase relates to angles and rotations, you might want to have a look at these two things to follow the rabbit hole a bit deeper.  Totally optional (;
<a href="http://blog.demofox.org/2014/12/27/using-imaginary-numbers-to-rotate-2d-vectors/" target="_blank">Using Imaginary Numbers To Rotate 2D Vectors</a>
<a href="https://en.wikipedia.org/wiki/Bloch_sphere" target="_blank">Wikipedia: Bloch Sphere</a>

However, since imaginary numbers can be involved, squaring amplitudes to get probabilities isn't enough.  Like for example with the vector $latex [0,i]$, if you square the $latex |1\\rangle$ state to get the probability, you get -1, or -100%.  That isn't right!

The real operation to getting probability from amplitude is you multiply the amplitude by it's complex conjugate.  In other words, if you have a complex number, you multiply the imaginary part by -1 to get the conjugate, and multiply by that.

As an example, if you have $latex 3+5i$, the complex conjugate is $latex 3-5i$.

In the example of the vector $latex [0,i]$, you get the probability of the $latex |1\\rangle$ state by multiplying $latex i$ by $latex -i$ to get 1, or 100%.

Complex conjugate sounds scary, but hopefully you can see it isn't as scary as it sounds.  You just flip the sign of the imaginary component of the complex number.

<h2>Common One Qubit Logic Gates</h2>

It's finally time to dive into some logic gates so we can actually do some quantum programming!

Real quickly I want to mention that we are going to be simulating quantum computing by multiplying the qubit amplitude vectors by matrices.  The matrices themselves are unitary matrices, which preserves the length of the vectors (keeping them normalized).

One requirement of quantum gates is that they must be reversible, and unitary matrices are also reversible.

The matrices are square matrices and their dimensions will always be 2^N by 2^N where N is the number of qubits involved in the quantum circuit.  With a single qubit, that means we will be working with 2x2 matrices which is fairly small.

When working with more qubits the size of the matrix grows very quickly though.  Quantum computing is very fast at doing these "matrix multiplies" and is part of where their power comes from.  Large matrix multiplies will be slow for us on regular (classical) computers, but the quantum computers would be able to do them very quickly.  That's where the difference is in our simulations versus the real deal.

Anyways, let's get onto some specific logic gates! (These are from <a href="https://en.wikipedia.org/wiki/Quantum_gate#Commonly_used_gates" target="_blank">Wikipedia: Quantum Gate</a>)

<h3>Not Gate (Pauli-X Gate)</h3>

This is a not gate, but is also described as a 180 degree rotation around the x axis of the bloch sphere.

$latex \\begin{bmatrix}
0 & 1 \\\\
1 & 0 \\\\
\\end{bmatrix}$

You might notice that it looks like a backwards identity matrix.  That is exactly how it works too... if you multiply a 2 element vector by that matrix, it will flip the elements in that vector!

In the case of our qubit amplitude vectors, this has the result of swapping the probability that the qubit will be 0, with the probability that the qubit will be 1.

If the qubit is not in a superposition, and instead is actually just a 0 or a 1, it will act exactly like a traditional NOT gate and flip it from one value to the other.

If the qubit is in a superposition, it will just flip the probabilities of each state.

This maps the $latex |0\\rangle$ state to $latex |1\\rangle$ and vice versa.

<h3>Pauli-Y Gate</h3>

This is described as a 180 degree rotation around the y axis of the bloch sphere, and maps $latex |0\\rangle$ to $latex i|1\\rangle$ and  $latex |1\\rangle$ to  $latex -i|0\\rangle$.

$latex \\begin{bmatrix}
0 & -i \\\\
i & 0 \\\\
\\end{bmatrix}$

It's like a NOT but also adjusts phase.

<h3>Pauli-Z Gate</h3>

This is described as a 180 degree rotation around the z axis of the bloch sphere. All it does in practice is negate the phase of the $latex |1\\rangle$ state.

$latex \\begin{bmatrix}
1 & 0 \\\\
0 & -1 \\\\
\\end{bmatrix}$

<h3>General Phase Adjustment Gates</h3>

You can adjust the phase of individual gates by using a matrix like this one, which is a more general version of the Pauli-Z gate, and adjusts the phase of of the $latex |1\\rangle$ state to whatever value is desired, without affecting the probabilities of the qubit values.

$latex \\begin{bmatrix}
1 & 0 \\\\
0 & e^{i\\theta} \\\\
\\end{bmatrix}$

The value $latex e^{i\\theta}$ ends up being a complex number, that can also be written like this:
$latex cos(\\theta)+i sin(\\theta)$

where $latex \\theta$ is any angle in radians.

You'll find that circuits commonly only adjust the $latex |1\\rangle$ state.  This is because the absolute phase of the individual states don't matter (since they don't affect probabilities), but what does matter is the difference in phase between the $latex |0\\rangle$ state and the $latex |1\\rangle$ state, since that can cause constructive or destructive interference.  For this reason, you'll often see the $latex |0\\rangle$ state without a phase value, and only the $latex |1\\rangle$ state will get it's phase modified during calculations.

<h3>Hadamard Gate (Interesting Gate!)</h3>

Ok so the NOT gate is somewhat useful.  You are probably thinking the others might come in handy if you need to adjust the phase of a qubit, but so far, nothing has been that spectacular for single qubit gates.

Well, here's the more interesting gate.

What this gate does is if you pass it a pure 0 or 1, it will output a value that has a 50% chance of being a 0 or a 1.

The interesting part happens when you put that output through a Hadamard gate again - you get the original value of 0 or 1 out!

It can do this because it stores the info about the original value as phase information.  When the input value is $latex |0\\rangle$, the Hadamard gate outputs $latex [1/\\sqrt{2}, 1/\\sqrt{2}]$ which has matching phases for each state.  When the input value is $latex |1\\rangle$, the gate outputs $latex [1/\\sqrt{2}, -1/\\sqrt{2}]$ which has opposite phases for each state.

$latex 1/\\sqrt{2} \\begin{bmatrix}
1 & 1 \\\\
1 & -1 \\\\
\\end{bmatrix}$

This gate is a crucial part in both Grover's algorithm - which can search an unsorted list in $latex O(\\sqrt{N})$, as well as in Shor's algorithm, which can factor large numbers much faster than classical computers, putting certain types of cryptography at risk for being cracked by quantum computers.

It has some other uses too, which you can check out here:
<a href="http://cs.stackexchange.com/questions/48330/does-a-hadamard-gate-have-uses-outside-of-pure-and-evenly-mixed-states/48333?noredirect=1#comment99085_48333" target="_blank">Does a Hadamard Gate have uses outside of pure and evenly mixed states?</a>

<h2>Code</h2>

Here is some example code to show some single qubit circuits in action.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;
#include &lt;complex&gt;

typedef std::array&lt;std::complex&lt;float&gt;, 2&gt; TQubit;
typedef std::array&lt;std::complex&lt;float&gt;, 4&gt; TComplexMatrix;
const float c_pi = 3.14159265359f;

//=================================================================================
static const TQubit c_qubit0 = { 1.0f, 0.0f };  // false aka |0&gt;
static const TQubit c_qubit1 = { 0.0f, 1.0f };  // true aka |1&gt;
static const TQubit c_qubit01_0deg = { 1.0f / std::sqrt(2.0f), 1.0f / std::sqrt(2.0f) }; // 50% true. 0 degree phase
static const TQubit c_qubit01_180deg = { 1.0f / std::sqrt(2.0f), -1.0f / std::sqrt(2.0f) }; // 50% true. 180 degree phase

// A not gate AKA Pauli-X gate
// Flips false and true probabilities (amplitudes)
// Maps |0&gt; to |1&gt;, and |1&gt; to |0&gt;
// Rotates PI radians around the x axis of the Bloch Sphere
static const TComplexMatrix c_notGate =
{
    {
        0.0f, 1.0f,
        1.0f, 0.0f
    }
};
static const TComplexMatrix c_pauliXGate = c_notGate;

// Pauli-Y gate
// Maps |0&gt; to i|1&gt;, and |1&gt; to -i|0&gt;
// Rotates PI radians around the y axis of the Bloch Sphere
static const TComplexMatrix c_pauliYGate =
{
    {
        { 0.0f, 0.0f }, { 0.0f, -1.0f },
        { 0.0f, 1.0f }, { 0.0f, 0.0f }
    }
};

// Pauli-Z gate
// Negates the phase of the |1&gt; state
// Rotates PI radians around the z axis of the Bloch Sphere
static const TComplexMatrix c_pauliZGate =
{
    {
        1.0f, 0.0f,
        0.0f, -1.0f
    }
};

// Hadamard gate
// Takes a pure |0&gt; or |1&gt; state and makes a 50/50 superposition between |0&gt; and |1&gt;.
// Put a 50/50 superposition through and get the pure |0&gt; or |1&gt; back.
// Encodes the origional value in the phase information as either matching or
// mismatching phase.
static const TComplexMatrix c_hadamardGate =
{
    {
        1.0f / std::sqrt(2.0f), 1.0f / std::sqrt(2.0f),
        1.0f / std::sqrt(2.0f), 1.0f / -std::sqrt(2.0f)
    }
};

//=================================================================================
void WaitForEnter ()
{
    printf(&quot;\nPress Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

//=================================================================================
TQubit ApplyGate (const TQubit&amp; qubit, const TComplexMatrix&amp; gate)
{
    // multiply qubit amplitude vector by unitary gate matrix
    return 
    {
        qubit[0] * gate[0] + qubit[1] * gate[1],
        qubit[0] * gate[2] + qubit[1] * gate[3]
    };
}

//=================================================================================
int ProbabilityOfBeingTrue (const TQubit&amp; qubit)
{
    float prob = std::round((qubit[1] * std::conj(qubit[1])).real() * 100.0f);
    return int(prob);
}

//=================================================================================
TComplexMatrix MakePhaseAdjustmentGate (float radians)
{
    // This makes a gate like this:
    //
    // [ 1  0             ]
    // [ 0  e^(i*radians) ]
    //
    // The gate will adjust the phase of the |1&gt; state by the specified amount.
    // A more general version of the pauli-z gate

    return
    {
        {
            1.0f, 0.0f,
            0.0f, std::exp(std::complex&lt;float&gt;(0.0f,1.0f) * radians)
        }
    };
}

//=================================================================================
void Print (const TQubit&amp; qubit)
{
    printf(&quot;[(%0.2f, %0.2fi), (%0.2f, %0.2fi)] %i%% true&quot;,
        qubit[0].real(), qubit[0].imag(),
        qubit[1].real(), qubit[1].imag(),
        ProbabilityOfBeingTrue(qubit));
}

//=================================================================================
int main (int argc, char **argv)
{
    // Not Gate
    {
        printf(&quot;Not gate:\n  &quot;);

        // Qubit: false
        TQubit v = c_qubit0;
        Print(v);
        printf(&quot;\n  ! = &quot;);
        v = ApplyGate(v, c_notGate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: true
        v = c_qubit1;
        Print(v);
        printf(&quot;\n  ! = &quot;);
        v = ApplyGate(v, c_notGate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: 50% chance, reverse phase
        v = c_qubit01_180deg;
        Print(v);
        printf(&quot;\n  ! = &quot;);
        v = ApplyGate(v, c_notGate);
        Print(v);
        printf(&quot;\n\n&quot;);
    }

    // Pauli-y gate
    {
        printf(&quot;Pauli-y gate:\n  &quot;);

        // Qubit: false
        TQubit v = c_qubit0;
        Print(v);
        printf(&quot;\n  Y = &quot;);
        v = ApplyGate(v, c_pauliYGate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: true
        v = c_qubit1;
        Print(v);
        printf(&quot;\n  Y = &quot;);
        v = ApplyGate(v, c_pauliYGate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: 50% chance, reverse phase
        v = c_qubit01_180deg;
        Print(v);
        printf(&quot;\n  Y = &quot;);
        v = ApplyGate(v, c_pauliYGate);
        Print(v);
        printf(&quot;\n\n&quot;);
    }

    // Pauli-z gate
    {
        printf(&quot;Pauli-z gate:\n  &quot;);

        // Qubit: false
        TQubit v = c_qubit0;
        Print(v);
        printf(&quot;\n  Z = &quot;);
        v = ApplyGate(v, c_pauliZGate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: true
        v = c_qubit1;
        Print(v);
        printf(&quot;\n  Z = &quot;);
        v = ApplyGate(v, c_pauliZGate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: 50% chance, reverse phase
        v = c_qubit01_180deg;
        Print(v);
        printf(&quot;\n  Z = &quot;);
        v = ApplyGate(v, c_pauliZGate);
        Print(v);
        printf(&quot;\n\n&quot;);
    }

    // 45 degree phase adjustment gate
    {
        printf(&quot;45 degree phase gate:\n  &quot;);
        TComplexMatrix gate = MakePhaseAdjustmentGate(c_pi / 4.0f);

        // Qubit: false
        TQubit v = c_qubit0;
        Print(v);
        printf(&quot;\n  M = &quot;);
        v = ApplyGate(v, gate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: true
        v = c_qubit1;
        Print(v);
        printf(&quot;\n  M = &quot;);
        v = ApplyGate(v, gate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: 50% chance, reverse phase
        v = c_qubit01_180deg;
        Print(v);
        printf(&quot;\n  M = &quot;);
        v = ApplyGate(v, gate);
        Print(v);
        printf(&quot;\n\n&quot;);
    }

    // Hadamard gate
    {
        printf(&quot;Hadamard gate round trip:\n  &quot;);

        // Qubit: false
        TQubit v = c_qubit0;
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: true
        v = c_qubit1;
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: 50% chance, reverse phase
        v = c_qubit01_180deg;
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n\n&quot;);
    }

    // 1 bit circuit
    // Hadamard -&gt; Pauli-Z -&gt; Hadamard
    {
        printf(&quot;Circuit Hadamard-&gt;Pauli-Z-&gt;Hadamard:\n  &quot;);

        // Qubit: false
        TQubit v = c_qubit0;
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n  Z = &quot;);
        v = ApplyGate(v, c_pauliZGate);
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: true
        v = c_qubit1;
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n  Z = &quot;);
        v = ApplyGate(v, c_pauliZGate);
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n\n  &quot;);

        // Qubit: 50% chance, reverse phase
        v = c_qubit01_180deg;
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n  Z = &quot;);
        v = ApplyGate(v, c_pauliZGate);
        Print(v);
        printf(&quot;\n  H = &quot;);
        v = ApplyGate(v, c_hadamardGate);
        Print(v);
        printf(&quot;\n&quot;);
    }

    WaitForEnter();

    return 0;
}
[/code]

Here's the output of the program, showing the qubit circuits in action:

<img src="https://demofox2.files.wordpress.com/2015/10/OneQubit.png"/>

<h2>Next Up</h2>

In the next part, we'll look at how multiple qubits work together in quantum circuits so we can do more interesting things.  We might need a quick post explaining the Bloch sphere before that though.  It's a fairly important thing, but this post is already enough to digest, so I didn't include it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3349</wp:post_id>
		<wp:post_date><![CDATA[2015-10-17 09:22:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-17 17:22:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[quantum-computing-for-programmers-part-i-one-qubit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="quantum-computing"><![CDATA[Quantum Computing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494995465;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3334;}i:1;a:1:{s:2:"id";i:3465;}i:2;a:1:{s:2:"id";i:3434;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum Computing For Programmers Part Ib: Bloch Sphere</title>
		<link>http://blog.demofox.org/2015/10/17/quantum-computing-for-programmers-part-ib-bloch-sphere/</link>
		<pubDate>Sun, 18 Oct 2015 04:42:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3434</guid>
		<description></description>
		<content:encoded><![CDATA[If you read anything on quantum computing you are extremely likely to see the Bloch sphere, so it's probably important to explain what it is and how it works.

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/Bloch_Sphere.svg/423px-Bloch_Sphere.svg.png" style="background-color:white;"/>

Image from wikipedia: <a href="https://en.wikipedia.org/wiki/Qubit" target="_blank">Wikipedia: Qubit</a>

The Bloch sphere is a way of visually representing a qubit.

The north pole is the $latex |0\\rangle$ state, and the south pole is the $latex |1\\rangle$ state.  The Z axis is vertical and runs from the $latex |0\\rangle$ to the $latex |1\\rangle$ state.  A qubit's state is represented by a point on the sphere.

If you read the last post, you might remember that there was a Pauli-Z gate which changed the phase of a qubit without changing it's probability, as well as a more generalized version of the phase changing gate which also just rotated around the Z axis.  Looking at the bloch sphere, you can see why that is true!  Rotating a point around the Z axis moves it around the sphere horizontally, but it doesn't make it any closer or farther to either the north or south pole.  Since the distance to the poles is preserved, the probability of being one or the other stays the same, even though the phase changes.

The not gate, aka the Pauli-X gate, rotated a point around the X axis 180 degrees.  Looking at the sphere, you could see how that would change a $latex |1\\rangle$ to a $latex |0\\rangle$, or otherwise flip the probabilities & amplitudes of the states.

The Pauli-Y gate is a little more complex though (pun intended!) as it mapped $latex |0\\rangle$ to $latex i|1\\rangle$ and $latex |1\\rangle$ to $latex -i|0\\rangle$ by rotating 180 degrees around the Y axis.  You may wonder how $latex |1\\rangle$ and $latex i|1\\rangle$ can both refer to the south pole, but the situation there is that every point EXCEPT the poles have a unique representation.  So, they really do both refer to the south pole.

To find where a qubit sits on the sphere, the first step is to figure out the spherical coordinates theta ($latex \\theta$) and phi ($latex \\phi$) values, which you can then convert to a 3d point.

Start with whatever qubit you have in this form, where you know what the values for alpha ($latex \\alpha$) and beta ($latex \\beta$) are:
$latex |\\psi\\rangle = \\alpha|0\\rangle + \\beta|1\\rangle$

You can also write a qubit as:
$latex |\\psi\\rangle = \\cos\\left(\\tfrac{\\theta}{2}\\right) |0 \\rangle \\, + \\, e^{i \\phi}  \\sin\\left(\\tfrac{\\theta}{2}\\right) |1 \\rangle$

Or like this, with less euler, and more trig:
$latex |\\psi\\rangle = \\cos\\left(\\tfrac{\\theta}{2}\\right) |0 \\rangle \\, +  \\, ( \\cos \\phi + i \\sin \\phi) \\, \\sin\\left(\\tfrac{\\theta}{2}\\right) |1 \\rangle$

You can then set your known alpha and beta values to the trig (or euler) based equations:
$latex \\alpha = \\cos\\left(\\tfrac{\\theta}{2}\\right)$
$latex \\beta = \\, ( \\cos \\phi + i \\sin \\phi) \\, \\sin\\left(\\tfrac{\\theta}{2}\\right)$

and then solve for theta and phi (I wave my hands a bit here).

Once you have the theta and phi values figured out, you can convert that to a unit distance 3d point representing a point on the sphere by using the below, which describes the X,Y,Z components of the point:
$latex (\\sin \\theta \\cos \\phi, \\; \\sin \\theta  \\sin \\phi, \\; \\cos \\theta)$

Hopefully this explanation makes enough sense that if you encounter the bloch sphere, or things talking about rotations on the bloch sphere, you won't be too lost :P

Ok... time to move on to multiple qubit quantum circuits so we can do more interesting things and perhaps analyze the most well known quantum algorithms!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3434</wp:post_id>
		<wp:post_date><![CDATA[2015-10-17 20:42:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-18 04:42:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[quantum-computing-for-programmers-part-ib-bloch-sphere]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="quantum-computing"><![CDATA[Quantum Computing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495689516;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3349;}i:1;a:1:{s:2:"id";i:3465;}i:2;a:1:{s:2:"id";i:2697;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum Computing For Programmers Part 2: Multiple Qubits</title>
		<link>http://blog.demofox.org/2015/11/06/quantum-computing-for-programmers-part-2-multiple-qubits/</link>
		<pubDate>Fri, 06 Nov 2015 21:52:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3465</guid>
		<description></description>
		<content:encoded><![CDATA[In part 1 (<a href="http://blog.demofox.org/2015/10/17/quantum-computing-for-programmers-part-i-one-qubit/">Quantum Computing For Programmers Part I: One Qubit</a>) we looked at the basics of quantum computing and how to deal with a single qubit.  Here we'll talk about the interesting things that happen when you involve multiple qubits!

<h2>Multiple Qubit Probabilities & Possibilities</h2>

In the last post we used the analogy of a coin to describe a qubit.  The coin can be either heads or tails, or flipping in the air, waiting to become either a heads or tails when it lands.  The same is true of how a qubit works, where it can either be a 0 or a 1 or some superposition of both, only deciding which it is when observed.  Furthermore, just like a real coin, there can be a bias towards becoming one value or the other.

We represented a coin by having a probability for each possible state (heads or tails), but represented a qubit by having an AMPLITUDE for each possible state (0 or 1), where you square an amplitude to get the probability.

Going back to the coin analogy, how would probabilities work if we had two coins?

The four possible outcomes with two coins are:
Heads/Heads
Heads/Tails
Tails/Heads
Tails/Tails

Each coin individually could either be sitting on the table heads or tails, or up in the air, waiting to become either a heads or a tails, with some probability of becoming a heads or a tails.

To figure out the probability of each possible outcome, you just multiply the probability of each coin's outcome together.

For instance, let's say that the first coin (coin A) is already sitting on the table as a heads, and the second coin (coin B) is flipping in the air, with a 1/3 chance of becoming heads and a 2/3 chance of becoming tails.  Here is how you would calculate the probability of each possible state:

$latex
\\begin{array}{c|c|c|c}
\\text{Outcome A/B} & \\text{Coin A Probability} & \\text{Coin B Probability} & \\text{Outcome Probability (A*B)}\\\\
\\hline
heads / heads & 100\\% & 33\\% & 33\\% \\\\
heads / tails & 100\\% & 67\\% & 67\\% \\\\
tails / heads & 0\\% & 33\\% & 0\\% \\\\
tails / tails & 0\\% & 67\\% & 0\\% \\\\
\\end{array}
$

Qubits actually work the same way!  Using the same values as the coins, let's say qubit A is a 0, and qubit B has a 1/3 chance of becoming a 0, and a 2/3 chance of becoming a 1.  Converting those probabilities to amplitudes you could get $latex A=[1,0], B=[\\frac{1}{\\sqrt{3}}, \\frac{\\sqrt{2}}{\\sqrt{3}}]$.

$latex
\\begin{array}{c|c|c|c|c}
\\text{Outcome AB} & \\text{Qubit A Amplitude} & \\text{Qubit B Amplitude} & \\text{Outcome Amplitude(A*B)} & \\text{Outcome Probability}\\\\
\\hline
00 & 1 & 1/\\sqrt{3} & 1/\\sqrt{3} & 33\\% \\\\
01 & 1 & \\sqrt{2}/\\sqrt{3} & \\sqrt{2}/\\sqrt{3} & 67\\% \\\\
10 & 0 & 1/\\sqrt{3} & 0 & 0\\%\\\\
11 & 0 & \\sqrt{2}/\\sqrt{3} & 0 & 0\\% \\\\
\\end{array}
$

Note that in both cases, the probabilities add up to 100% like you'd expect.

In the case of qubits, the resulting vector is $latex [\\frac{1}{\\sqrt{3}}, \\frac{\\sqrt{2}}{\\sqrt{3}}, 0, 0] $, which is still normalized, and represents the amplitudes for the 4 possible states of those two qubits: 00, 01, 10 and 11.

When working with one qubit (or coin), there are 2 possible outcomes 0 or 1 (heads or tails).  When working with two qubits (or coins),  there are four possible outcomes 00, 01, 10, 11 (heads/heads, heads/tails, tails/heads, tails/tails).  When working with three qubits or coins, there are eight possible outcomes: 000,001,010 ... 111.

With both coins and qubits there are $latex 2^N$ possibilities, where $latex N$ is the number of qubits or coins you have.

If you had 8 qubits, you'd have to use a 256 dimensional vector to describe the possibilities, since $latex 2^8$ is 256.  When performing quantum computing with 8 qubits, you only have to deal with the 8 qubits.  When simulating quantum computing on a regular, classical computer, you have to deal with the 256 amplitudes.  This kind of gives a glimpse at how quantum computers can be faster than regular computers at certain things.  There is an economy of scale working against us on regular computers simulating quantum computing.

The method we used to combine the probabilities of single qubits into an amplitude vector representing multiple qubits is called the Kronecker product.  That's just a fancy way of saying we have to multiply everything from the first vector by everything from the second vector, to get a third vector that is bigger than the first two.  You'll see it represented like this: $latex A \\otimes B$ and while it's similar to the "outer product" and even uses the same symbol (!), it gives a slightly different result versus if you did an outer product and then vectorized the matrix.

The Kronecker product of vectors works like this:

$latex \\begin{bmatrix}
A_1 \\\\
A_2 \\\\
... \\\\
A_M \\\\
\\end{bmatrix}
\\otimes
\\begin{bmatrix}
B_1 \\\\
B_2 \\\\
... \\\\
B_N \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
A_1 B_1 \\\\
A_1 B_2 \\\\
... \\\\
A_1 B_N \\\\
A_2 B_1 \\\\
A_2 B_2 \\\\
... \\\\
A_2 B_N \\\\
... \\\\
A_M B_1 \\\\
A_M B_2 \\\\
... \\\\
A_M B_N \\\\
\\end{bmatrix}
$

Let's show an example involving two qubits.

The first qubit has a 75% chance of being heads so it's amplitude is $latex [\\sqrt{3}/2,1/2]$.  The second qubit has a 2/3 chance of being heads so has an amplitude of $latex [\\sqrt{2}/\\sqrt{3}, 1/\\sqrt{3}]$.

To calculate the amplitude vector representing these two qubits, we do a kronecker product:
$latex \\begin{bmatrix}
\\cfrac{\\sqrt{3}}{2} \\\\
\\cfrac{1}{2} \\\\
\\end{bmatrix}
\\otimes
\\begin{bmatrix}
\\cfrac{\\sqrt{2}}{\\sqrt{3}} \\\\
\\cfrac{1}{\\sqrt{3}} \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
\\cfrac{\\sqrt{3}}{2}\\cfrac{\\sqrt{2}}{\\sqrt{3}} \\\\
\\cfrac{\\sqrt{3}}{2}\\cfrac{1}{\\sqrt{3}} \\\\
\\cfrac{1}{2}\\cfrac{\\sqrt{2}}{\\sqrt{3}} \\\\
\\cfrac{1}{2}\\cfrac{1}{\\sqrt{3}} \\\\
\\end{bmatrix}
$

If you simplify that, you get:
$latex \\begin{bmatrix}
\\cfrac{1}{\\sqrt{2}} \\\\
\\cfrac{1}{2} \\\\
\\cfrac{1}{\\sqrt{6}} \\\\
\\cfrac{1}{2\\sqrt{3}} \\\\
\\end{bmatrix}
$

or horizontally for easier reading:
$latex \\begin{bmatrix}
\\cfrac{1}{\\sqrt{2}} &
\\cfrac{1}{2} &
\\cfrac{1}{\\sqrt{6}} &
\\cfrac{1}{2\\sqrt{3}} &
\\end{bmatrix}
$

Squaring those values to get the probabilities of each state, we get the below, which you might notice adds up to 100%, meaning the vector is still normalized!
$latex \\begin{bmatrix} 50\\% & 25\\% & 17\\% & 8\\% \\end{bmatrix}$

This generalizes for larger numbers of qubits, so you could use the Kronecker product to combine a vector describing 4 qubits with a vector describing 3 qubits, to come up with a vector that describes 7 qubits (which would have 128 amplitudes in it, since 2^7 = 128!).

The kronecker product also generalizes to matrices, which we will talk about shortly.

To be able to work with multiple qubits in a quantum circuit, you need to represent all qubits involved in a single vector.  Doing this, while being the correct thing to do, also allows entanglement to happen, which we will talk about next!

<h2>Entanglement - Simpler Than You Might Think!</h2>

Time to demystify quantum entanglement!

Quantum entanglement is the property whereby two qubits - which can be separated by any distance, such as several light years - can be observed and come up with the same value (0 or 1).  Whether they are 0s or 1s is random, but they will both agree, when entangled in the way that causes them to agree (you could alternately entangle them to always disagree).

Interestingly, in 1965 John Bell proved that the mechanism that makes this happen is NOT that the qubits share information in advance.  You can read more about that here - it's near the end: <a href="http://arstechnica.com/science/2010/01/a-tale-of-two-qubits-how-quantum-computers-work/" target="_blank">Ars Technica – A tale of two qubits: how quantum computers work</a>.

A common misconception is that this means that we can have faster than light (instantaneous) communication across any distance.  That turns out not to be true, due to the <a href="https://en.wikipedia.org/wiki/No-communication_theorem" target="_blank">No-Communication-Theorem (Wikipedia)</a>.

Interestingly though, you can use separated entangled qubits in separated quantum circuits to do something called <a href="https://en.wikipedia.org/wiki/Quantum_pseudo-telepathy" target="_blank">Quantum Pseudo Telepathy (Wikipedia)</a>, which lets you do some things that would otherwise be impossible - like reliably winning a specially designed game that would otherwise be a game of chance.

I don't yet understand enough about Quantum Pseudo Telepathy to see why it isn't considered communication.  I also have no idea how entanglement is actually "implemented" in the universe, but nobody seems to (or if they do, they aren't sharing!).  How can it be that two coins flipped on opposite sides of the galaxy can be guaranteed to both land with the same side facing up?

Despite those mysteries, the math is DEAD SIMPLE, so let me share it with you, it'll take like one short paragraph.  Are you ready?

Quantum computing works by manipulating the probabilities of the states of qubits.  If you have two qubits, there are four possible sets of values when you observe them: 00, 01, 10, 11.  If you use quantum computing to set the probabilities of the 01 and 10 states to a 0% chance, and set the probabilities of the 00 and 11 states to a 50% chance each, you've now entangled the qubits such that when you observe them, they will always agree, because you've gotten rid of the chances that they could ever DISAGREE.  Similarly, if instead of setting the 01 and 10 states to 0%, you set the probability of the 00 and 11 states to 0%, you'd have entangled qubits which would always disagree when you observed them, because you've gotten rid of the chances that they could ever AGREE.

That's all there is to it.  Strange how simple it is, isn't it?  The table below shows how the only possible outcomes are that the qubits agree, but it is a 50/50 chance whether they are a 0 or a 1:

$latex
\\begin{array}{c|c|c}
\\text{Outcome} & \\text{Amplitude} & \\text{Probability}\\\\
\\hline
00 & 1/\\sqrt{2} & 50\\% \\\\
01 & 0 & 0\\% \\\\
10 & 0 & 0\\% \\\\
11 & 1/\\sqrt{2} & 50\\% \\\\
\\end{array}
$

Entanglement isn't limited to just two qubits, you can entangle any number of qubits together.

Entanglement has a special mathematical meaning.  If you can represent a state of a group of qubits by a kronecker product, they are not entangled.  If you CAN'T represent a state of a group of qubits by a kronecker product, they ARE entangled.  These two things - entanglement and lack of kronecker product factorability (made that term up) - are the same thing.

As an example, what two vectors could you use the kronecker product on to get the entangled two qubit state $latex 1/\\sqrt{2}(|00\\rangle+|11\\rangle)$ (or in vector form $latex [1/\\sqrt{2}, 0, 0, 1/\\sqrt{2}]$)?  You'll find there aren't any!  That state is the entangled state where the two qubits will always have the same value when you observe them.

Entangled qubits are nothing special in quantum circuits.  You don't have to take any special precautions when working with them.  They are an interesting byproduct of quantum computing, and so basically are something neat that comes out of your quantum circuit, but they don't require any extra thought when using them within your circuits.  Don't worry about them too much (:

<h2>Multi Qubit Gates</h2>

Let's have a look at some multi qubit gates! (These are again from <a href="https://en.wikipedia.org/wiki/Quantum_gate#Commonly_used_gates">Wikipedia: Quantum Gate</a>)

<h3>Swap Gate</h3>

Given two qubits, with possible states $latex |00\\rangle, |01\\rangle, |10\\rangle, |11\\rangle$, this gate swaps the amplitudes (probabilities) of $latex |01\\rangle,  |10\\rangle$ and leaves the probabilities of the states $latex |00\\rangle$ and $latex |11\\rangle$ alone.

That might seem weird, but the probability of the $latex |00\\rangle$ state is the probability of the first qubit being 0 added to the probability of the second qubit being 0.  If those probabilities swap, they still add to the same value, so this probability is unaffected.  It's the same situation for the $latex |11\\rangle$ state.

Here's the matrix for the swap gate:
$latex \\begin{bmatrix}
1 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 0 \\\\
0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & 1 \\\\
\\end{bmatrix}
$

<h3>Square Root of Swap Gate</h3>

I don't really understand a usage case for this gate myself, but it apparently does a half way swap between two qubits.  That once again modifies the probabilities of the $latex |01\\rangle,  |10\\rangle$ states, but leaves state $latex |00\\rangle$ and $latex |11\\rangle$ alone again, for the same reason as the swap gate.

Wikipedia says that if you have this gate, and the single qubit gates, that you can do universal quantum computation.  In other words, you can build a fully functional quantum computer using just this and the single qubit gates.

Here's the matrix:
$latex \\begin{bmatrix}
1 & 0 & 0 & 0 \\\\
0 & \\frac{1}{2}(1+i) & \\frac{1}{2}(1-i) & 0 \\\\
0 & \\frac{1}{2}(1-i) & \\frac{1}{2}(1+i) & 0 \\\\
0 & 0 & 0 & 1 \\\\
\\end{bmatrix}
$

<h3>Controlled Not Gate</h3>

The controlled not (CNOT) gate flips the value of the second qubit if the first qubit is true.  This is a logic / flow control type of gate.

Interestingly, this gate is also useful for creating entangled qubits, which you'll be able to see lower down!

Here is the matrix:
$latex \\begin{bmatrix}
1 & 0 & 0 & 0 \\\\
0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & 1 \\\\
0 & 0 & 1 & 0 \\\\
\\end{bmatrix}
$

The controlled not gate is also referred to as the quantum XOR gate.  To see why, check out the truth table below for this gate:
$latex
\\begin{array}{c|c}
\\text{Input} & \\text{Output} \\\\
\\hline
00 & 00 \\\\
01 & 01 \\\\
10 & 11 \\\\
11 & 10 \\\\
\\end{array}
$

If you look at the right most bit of the outputs, you'll notice that it's the XOR of the two input bits!

All quantum gates need to be reversible, and having these two qubits be the output of a hypothetical quantum XOR gate allows that to happen.  If you look at the right most bit of the inputs, you'll notice that it is also the XOR of the two output bits.  It's bidirectional, which is kind of weird and kind of interesting :P

<h3>Generalized Control Gate</h3>

You can actually convert any single qubit gate into a controlled gate.  That makes a 2 qubit gate which only does work on the second qubit if the first qubit is true.

How you do that is you make a 4x4 identity matrix, and make the lower 2x2 sub-matrix into the single qubit matrix you want to use.

In other words, if your single qubit matrix is this:
$latex \\begin{bmatrix}
U_{00} & U_{01} \\\\
U_{10} & U_{11} \\\\
\\end{bmatrix}
$

Then the controlled version of the matrix would be this:
$latex \\begin{bmatrix}
1 & 0 & 0 & 0 \\\\
0 & 1 & 0 & 0 \\\\
0 & 0 & U_{00} & U_{01} \\\\
0 & 0 & U_{10} & U_{11} \\\\
\\end{bmatrix}
$

Pretty simple right?

<h3>Toffoli Gate</h3>

The Tofolli gate is a 3 qubit gate that is also known as the CCNOT gate or controlled controlled not gate.  It flips the third qubit if the first two qubits are true.

It's matrix looks pretty uninteresting:
$latex \\begin{bmatrix}
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\\
\\end{bmatrix}
$

This is also known as the quantum AND gate.  If you look at the truth table below, you'll see that when the input has the right most qubit of 0, that in the output, the right most qubit will be the AND value of the two left qubits.  We need the three bits of input mapping to three bits of output like this so that the gate is reversible.

$latex
\\begin{array}{c|c}
\\text{Input} & \\text{Output} \\\\
\\hline
000 & 000 \\\\
001 & 001 \\\\
010 & 010 \\\\
011 & 011 \\\\
100 & 100 \\\\
101 & 101 \\\\
110 & 111 \\\\
111 & 110 \\\\
\\end{array}
$

<h3>Fredkin Gate</h3>

The Fredkin gate is a controlled swap gate.  Here's the matrix:
$latex \\begin{bmatrix}
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
\\end{bmatrix}
$

Just like we talked about how to make a generalized controlled gate acting on two qubits, you should be able to notice that this gate is just a specific version of a generalized controlled 3 qubit gate.  You take an 8x8 identity matrix, and make the lower right 4x4 matrix be the 2 qubit gate that you want to add a control on.  In this case, the lower right 4x4 matrix is just the swap gate we mentioned earlier in the post (:

<h2>Circuit To Entangle Qubits</h2>

The circuit to entangle qubits is pretty simple, so let's start with that as the first quantum circuit we look at.  It takes in two qubits.  The first qubit is put through a Hadamard gate, and then both qubits are put through a controlled not gate.  That circuit looks like this (image courtesy of <a href="http://www.davyw.com/quantum/" target="blank">Quantum Circuit Simulator</a>):

<img src="https://demofox2.files.wordpress.com/2015/11/entanglement2.png"/>

The value you plug in for the second qubit determines what type of entanglement you get out.  Setting the second qubit to 0, you will get entangled qubits which always agree when they are observed.  Setting it to 1, you will get entangled qubits which always disagree when they are observed.  The first qubit controls whether the phase of each state matches or mismatches.  Note that these are the four Bell States (<a href="https://en.wikipedia.org/wiki/Bell_state" target="blank">Wikipedia: Bell State</a>).

$latex
\\begin{array}{c|c|c}
\\text{Input} & \\text{Output In Ket Notation} & \\text{Output As Vector} \\\\
\\hline
00 & \\frac{1}{\\sqrt{2}}(|00\\rangle+|11\\rangle) & [1/\\sqrt{2},0,0,1/\\sqrt{2}] \\\\
01 & \\frac{1}{\\sqrt{2}}(|01\\rangle+|10\\rangle) & [0,1/\\sqrt{2},1/\\sqrt{2},0] \\\\
10 & \\frac{1}{\\sqrt{2}}(|00\\rangle-|11\\rangle) & [1/\\sqrt{2},0,0,-1/\\sqrt{2}] \\\\
11 & \\frac{1}{\\sqrt{2}}(|01\\rangle-|10\\rangle) & [0,1/\\sqrt{2},-1/\\sqrt{2},0]\\\\
\\end{array}
$

In a quantum circuit, you can't just apply a gate to an individual quabit at a time though.  You have to make the matrix of your gate such that it applies to all qubits, applying the "identity" matrix to the qubits you don't want to be affected by the gate.

So, how do we make a matrix that applies the Hadamard gate to qubit 1, and identity to qubit 2?  You use the kronecker product!

Since we want to apply the Hadamard matrix to qubit 1 and identity to qubit 2, we are going to calculate $latex H \\otimes I$ (If we wanted to apply the Hadamard gate to qubit 2 and identity to qubit 1 we would calculate $latex I \\otimes H$ instead).

$latex
H \\otimes I = 
1/\\sqrt{2}*
\\begin{bmatrix}
1 & 1 \\\\
1 & -1 \\\\
\\end{bmatrix}
\\otimes
\\begin{bmatrix}
1 & 0 \\\\
0 & 1 \\\\
\\end{bmatrix}
=
1/\\sqrt{2}*
\\begin{bmatrix}
1 & 0 & 1 & 0 \\\\
0 & 1 & 0 & 1 \\\\
1 & 0 & -1 & 0 \\\\
0 & 1 & 0 & -1 \\\\
\\end{bmatrix}
$

If you notice, the result of the kronecker product is just every value in the left matrix, multiplied by every value in the right matrix.  Basically, the result is a 2x2 grid of identity matrices, where each of those identity matrices is multiplied by the corresponding value from the same cell in the left matrix.  Since the left matrix has a 1 in all cells except the lower right, the same is true of the result... it's a positive identity matrix in each cell, except the lower right one, which is a negative identity matrix.  Hopefully that makes sense, it's a lot easier than it sounds...

The second gate in the quantum circuit is the CNOT gate.  We can actually multiply the gate we just made by the CNOT gate to represent the full quantum circuit as a single matrix.  This uses regular matrix multiplication.

$latex
1/\\sqrt{2}*
\\begin{bmatrix}
1 & 0 & 1 & 0 \\\\
0 & 1 & 0 & 1 \\\\
1 & 0 & -1 & 0 \\\\
0 & 1 & 0 & -1 \\\\
\\end{bmatrix}
*
\\begin{bmatrix}
1 & 0 & 0 & 0 \\\\
0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & 1 \\\\
0 & 0 & 1 & 0 \\\\
\\end{bmatrix}
=
1/\\sqrt{2}*
\\begin{bmatrix}
1 & 0 & 0 & 1 \\\\
0 & 1 & 1 & 0 \\\\
1 & 0 & 0 & -1 \\\\
0 & 1 & -1 & 0 \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
1/\\sqrt{2} & 0 & 0 & 1/\\sqrt{2} \\\\
0 & 1/\\sqrt{2} & 1/\\sqrt{2} & 0 \\\\
1/\\sqrt{2} & 0 & 0 & -1/\\sqrt{2} \\\\
0 & 1/\\sqrt{2} & -1/\\sqrt{2} & 0 \\\\
\\end{bmatrix}
$

Lets plug some values into the circuit and see what comes out!

Lets start by plugging in 00.  Our input qubits are $latex [1, 0]$ and $latex [1, 0]$.  The kronecker product of those two qubit vectors is $latex [1, 0, 0, 0]$.  Now let's multiply that vector by the matrix of our quantum circuit.

$latex
\\begin{bmatrix}
1 & 0 & 0 & 0
\\end{bmatrix}
*
\\begin{bmatrix}
1/\\sqrt{2} & 0 & 0 & 1/\\sqrt{2} \\\\
0 & 1/\\sqrt{2} & 1/\\sqrt{2} & 0 \\\\
1/\\sqrt{2} & 0 & 0 & -1/\\sqrt{2} \\\\
0 & 1/\\sqrt{2} & -1/\\sqrt{2} & 0 \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
1/\\sqrt{2} & 0 & 0 & 1/\\sqrt{2}
\\end{bmatrix}
$

Comparing this to the table showing how our input maps to output, we got the right answer!  If you plugged in the other values listed, you would get the rest of the bell state entanglements.

<h2>Unentangling Qubits</h2>

All gates are reversible, so all circuits are reversible.  To get the reverse circuit for a given matrix, you just get the inverse of the matrix.  Since quantum gates (and circuits) are unitary matrices, taking the inverse of one of these matrices just means taking the conjugate transpose of the matrix.  In other words, you take the transpose of the matrix, and then just negate the imaginary component of any complex numbers.  In this example, there are no imaginary numbers, so you just take the transpose of the matrix.

Since our circuit matrix is this:

$latex
\\begin{bmatrix}
1/\\sqrt{2} & 0 & 0 & 1/\\sqrt{2} \\\\
0 & 1/\\sqrt{2} & 1/\\sqrt{2} & 0 \\\\
1/\\sqrt{2} & 0 & 0 & -1/\\sqrt{2} \\\\
0 & 1/\\sqrt{2} & -1/\\sqrt{2} & 0 \\\\
\\end{bmatrix}
$

That means that the inverse must be this, since this is the (conjugate) transpose.

$latex
\\begin{bmatrix}
1/\\sqrt{2} & 0 & 1/\\sqrt{2} & 0 \\\\
0 & 1/\\sqrt{2} & 0 & 1/\\sqrt{2} \\\\
0 & 1/\\sqrt{2} & 0 & -1/\\sqrt{2} \\\\
1/\\sqrt{2} & 0 & -1/\\sqrt{2} & 0 \\\\
\\end{bmatrix}
$

Let's try it out by putting the output from last section in and seeing what comes out the other side:

$latex
\\begin{bmatrix}
1/\\sqrt{2} & 0 & 0 & 1/\\sqrt{2}
\\end{bmatrix}
*
\\begin{bmatrix}
1/\\sqrt{2} & 0 & 1/\\sqrt{2} & 0 \\\\
0 & 1/\\sqrt{2} & 0 & 1/\\sqrt{2} \\\\
0 & 1/\\sqrt{2} & 0 & -1/\\sqrt{2} \\\\
1/\\sqrt{2} & 0 & -1/\\sqrt{2} & 0 \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
1 & 0 & 0 & 0
\\end{bmatrix}
$

It worked!  We got our original input back.

<h2>Making Matrices for More Complex Circuits</h2>

We talked about how to make single qubit gates apply to specific qubits by using the kronecker product with identity to move the gate to the right location.

If you have 4 qubits and you want to apply some single qubit gate (say Hadamard) to the 3rd qubit, you would just do this to get the matrix:
$latex I \\otimes I \\otimes H \\otimes I $

What if you want to do complex things with multi qubit gates though?  Like what if you want to do a controlled not gate where you want the 2nd qubit to flip it's value if the 4th qubit was true?

The answer is actually pretty simple... you use swaps gates to flip the values of the qubits so that your qubit values line up with the inputs of the gate, then you do the gate, and finally undo all the swaps to get the qubit values back to the right positions.

We need to swap qubits so that the 4th qubit value is in the 1st qubit slot, and the 2nd qubit value is in the 2nd qubit slot.  We can do that with the following swaps:

<img src="https://demofox2.files.wordpress.com/2015/11/swaps.png"/>

Once we have done those swaps, we can do our controlled not, then do the swaps in reverse order to return the qubits to their original positions.

Here's what the circuit looks like:

<img src="https://demofox2.files.wordpress.com/2015/11/cnot42.png"/>

You'll see the simpler version in circuit diagrams, but at least now you'll know how to make things that look like this:

<img src="https://demofox2.files.wordpress.com/2015/11/cnot42simple2.png"/>

Below is the mathematical way that you would get the matrix representing this gate.  

$latex I$ is the identity matrix, $latex S$ is the swap gate, and $latex C$ is the controlled not gate.

$latex M = \\\\
(I \\otimes I \\otimes S) * \\\\
(I \\otimes S \\otimes I) * \\\\
(S \\otimes I \\otimes I) * \\\\
(I \\otimes S \\otimes I) * \\\\
(C \\otimes I \\otimes I) * \\\\
(I \\otimes S \\otimes I) * \\\\
(S \\otimes I \\otimes I) * \\\\
(I \\otimes S \\otimes I) * \\\\
(I \\otimes I \\otimes S) \\\\
$

<h2>Code</h2>

Here is some simple C++ to show both the entanglement circuit and the more complicated controlled not gate we described.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;vector&gt;
#include &lt;complex&gt;
#include &lt;assert.h&gt;

typedef std::complex&lt;float&gt; TComplex;

//=================================================================================
struct SComplexVector
{
public:
    TComplex&amp; Get (size_t i) { return v[i]; }

    const TComplex&amp; Get (size_t i) const { return v[i]; }

    size_t Size() const
    {
        return v.size();
    }

    void Resize (size_t s)
    {
        v.resize(s);
    }

    void Print () const
    {
        printf(&quot;[&quot;);
        for (size_t i = 0, c = v.size(); i &lt; c; ++i)
        {
            if (i &gt; 0)
                printf(&quot;, &quot;);
            const TComplex&amp; val = Get(i);
            if (val.imag() == 0.0f)
            {
                if (val.real() == 0.0f)
                    printf(&quot;0&quot;);
                else if (val.real() == 1.0f)
                    printf(&quot;1&quot;);
                else
                    printf(&quot;%0.2f&quot;, val.real());
            }
            else
                printf(&quot;%0.2f + %0.2fi&quot;, val.real(), val.imag());
        }
        printf(&quot;]\n&quot;);
    }

    std::vector&lt;TComplex&gt; v;
};

//=================================================================================
struct SComplexMatrix
{
public:
    TComplex&amp; Get (size_t x, size_t y)
    {
        return v[y*Size() + x];
    }

    const TComplex&amp; Get (size_t x, size_t y) const
    {
        return v[y*Size() + x];
    }

    // For an MxM matrix, this returns M
    size_t Size () const
    {
        size_t ret = (size_t)sqrt(v.size());
        assert(ret*ret == v.size());
        return ret;
    }

    // For an MxM matrix, this sets M
    void Resize(size_t s)
    {
        v.resize(s*s);
    }

    void Print() const
    {
        const size_t size = Size();

        for (size_t y = 0; y &lt; size; ++y)
        {
            printf(&quot;[&quot;);
            for (size_t x = 0; x &lt; size; ++x)
            {
                if (x &gt; 0)
                    printf(&quot;, &quot;);
                
                const TComplex&amp; val = Get(x, y);
                if (val.imag() == 0.0f)
                {
                    if (val.real() == 0.0f)
                        printf(&quot;0&quot;);
                    else if (val.real() == 1.0f)
                        printf(&quot;1&quot;);
                    else
                        printf(&quot;%0.2f&quot;, val.real());
                }
                else
                    printf(&quot;%0.2f + %0.2fi&quot;, val.real(), val.imag());
            }
            printf(&quot;]\n&quot;);
        }
    }

    std::vector&lt;TComplex&gt; v;
};

//=================================================================================
static const SComplexVector c_qubit0 = { { 1.0f, 0.0f } };  // false aka |0&gt;
static const SComplexVector c_qubit1 = { { 0.0f, 1.0f } };  // true aka |1&gt;

// 2x2 identity matrix
static const SComplexMatrix c_identity2x2 =
{
    {
        1.0f, 0.0f,
        0.0f, 1.0f,
    }
};

// Given the states |00&gt;, |01&gt;, |10&gt;, |11&gt;, swaps the |01&gt; and |10&gt; state
// If swapping the probabilities of two qubits, it won't affect the probabilities
// of them both being on or off since those add together.  It will swap the odds of
// only one of them being on.
static const SComplexMatrix c_swapGate =
{
    {
        1.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 1.0f, 0.0f,
        0.0f, 1.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
    }
};

// Controlled not gate
// If the first qubit is true, flips the value of the second qubit
static const SComplexMatrix c_controlledNotGate =
{
    {
        1.0f, 0.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f,
        0.0f, 0.0f, 1.0f, 0.0f
    }
};

// Hadamard gate
// Takes a pure |0&gt; or |1&gt; state and makes a 50/50 superposition between |0&gt; and |1&gt;.
// Put a 50/50 superposition through and get the pure |0&gt; or |1&gt; back.
// Encodes the origional value in the phase information as either matching or
// mismatching phase.
static const SComplexMatrix c_hadamardGate =
{
    {
        1.0f / std::sqrt(2.0f), 1.0f / std::sqrt(2.0f),
        1.0f / std::sqrt(2.0f), 1.0f / -std::sqrt(2.0f)
    }
};

//=================================================================================
void WaitForEnter ()
{
    printf(&quot;\nPress Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

//=================================================================================
SComplexVector KroneckerProduct (const SComplexVector&amp; a, const SComplexVector&amp; b)
{
    const size_t aSize = a.Size();
    const size_t bSize = b.Size();

    SComplexVector ret;
    ret.Resize(aSize*bSize);

    for (size_t i = 0, ic = aSize; i &lt; ic; ++i)
    {
        for (size_t j = 0, jc = bSize; j &lt; jc; ++j)
        {
            size_t n = i * bSize + j;
            ret.Get(n) = a.Get(i)*b.Get(j);
        }
    }
    return ret;
}

//=================================================================================
SComplexMatrix KroneckerProduct (const SComplexMatrix&amp; a, const SComplexMatrix&amp; b)
{
    const size_t aSize = a.Size();
    const size_t bSize = b.Size();

    SComplexMatrix ret;
    ret.Resize(aSize*bSize);

    for (size_t ax = 0; ax &lt; aSize; ++ax)
    {
        for (size_t ay = 0; ay &lt; aSize; ++ay)
        {
            const TComplex&amp; aValue = a.Get(ax, ay);

            for (size_t bx = 0; bx &lt; bSize; ++bx)
            {
                for (size_t by = 0; by &lt; bSize; ++by)
                {
                    const TComplex&amp; bValue = b.Get(bx, by);

                    size_t nx = ax*bSize + bx;
                    size_t ny = ay*bSize + by;

                    ret.Get(nx,ny) = aValue * bValue;
                }
            }
        }
    }

    return ret;
}

//=================================================================================
SComplexMatrix operator* (const SComplexMatrix&amp; a, const SComplexMatrix&amp; b)
{
    assert(a.Size() == b.Size());
    const size_t size = a.Size();

    SComplexMatrix ret;
    ret.Resize(size);

    for (size_t nx = 0; nx &lt; size; ++nx)
    {
        for (size_t ny = 0; ny &lt; size; ++ny)
        {
            TComplex&amp; val = ret.Get(nx, ny);
            val = 0.0f;
            for (size_t i = 0; i &lt; size; ++i)
                val += a.Get(i, ny) * b.Get(nx, i);
        }
    }

    return ret;
}

//=================================================================================
SComplexVector operator* (const SComplexVector&amp; a, const SComplexMatrix&amp; b)
{
    assert(a.Size() == b.Size());
    const size_t size = a.Size();

    SComplexVector ret;
    ret.Resize(size);

    for (size_t i = 0; i &lt; size; ++i)
    {
        TComplex&amp; val = ret.Get(i);
        val = 0;
        for (size_t j = 0; j &lt; size; ++j)
            val += a.Get(j) * b.Get(i, j);
    }

    return ret;
}

//=================================================================================
int main (int argc, char **argv) {

    // 2 qubit entanglement circuit demo
    {
        // make the circuit
        const SComplexMatrix H1 = KroneckerProduct(c_hadamardGate, c_identity2x2);
        const SComplexMatrix circuit = H1 * c_controlledNotGate;

        // display the circuit
        printf(&quot;Entanglement circuit:\n&quot;);
        circuit.Print();

        // permute the inputs and see what comes out when we pass them through the circuit!
        SComplexVector input = KroneckerProduct(c_qubit0, c_qubit0);
        SComplexVector output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(c_qubit0, c_qubit1);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(c_qubit1, c_qubit0);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(c_qubit1, c_qubit1);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();
    }

    // 4 qubit demo: flip the second qubit if the fourth qubit is true
    {
        // make the circuit
        const SComplexMatrix cnot4qubit = KroneckerProduct(KroneckerProduct(c_controlledNotGate, c_identity2x2), c_identity2x2);
        const SComplexMatrix swap12 = KroneckerProduct(KroneckerProduct(c_swapGate, c_identity2x2), c_identity2x2);
        const SComplexMatrix swap23 = KroneckerProduct(KroneckerProduct(c_identity2x2, c_swapGate), c_identity2x2);
        const SComplexMatrix swap34 = KroneckerProduct(KroneckerProduct(c_identity2x2, c_identity2x2), c_swapGate);
        const SComplexMatrix circuit = 
            swap34 *
            swap23 *
            swap12 *
            swap23 *
            cnot4qubit *
            swap23 *
            swap12 *
            swap23 *
            swap34;

        // display the circuit
        printf(&quot;\nFlip 2nd qubit if 4th qubit true circuit:\n&quot;);
        circuit.Print();

        // permute the inputs and see what comes out when we pass them through the circuit!
        SComplexVector input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit0, c_qubit0), c_qubit0), c_qubit0);
        SComplexVector output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit0, c_qubit0), c_qubit0), c_qubit1);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit0, c_qubit0), c_qubit1), c_qubit0);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit0, c_qubit0), c_qubit1), c_qubit1);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit0, c_qubit1), c_qubit0), c_qubit0);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit0, c_qubit1), c_qubit0), c_qubit1);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit0, c_qubit1), c_qubit1), c_qubit0);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit0, c_qubit1), c_qubit1), c_qubit1);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit1, c_qubit0), c_qubit0), c_qubit0);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit1, c_qubit0), c_qubit0), c_qubit1);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit1, c_qubit0), c_qubit1), c_qubit0);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit1, c_qubit0), c_qubit1), c_qubit1);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit1, c_qubit1), c_qubit0), c_qubit0);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit1, c_qubit1), c_qubit0), c_qubit1);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit1, c_qubit1), c_qubit1), c_qubit0);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();

        input = KroneckerProduct(KroneckerProduct(KroneckerProduct(c_qubit1, c_qubit1), c_qubit1), c_qubit1);
        output = input * circuit;
        printf(&quot;\ninput:&quot;);
        input.Print();
        printf(&quot;output:&quot;);
        output.Print();
    }


    WaitForEnter();

    return 0;
}
[/code]

Here is the first part of the output, which shows the results of the entangling circuit.  You can see that the input gave the expected output Bell states:

<img src="https://demofox2.files.wordpress.com/2015/11/Output1.png"/>

Below is the second part of the output, which is the circuit that flips the 2nd qubit if the 4th qubit is true.

Each entry in the input and output vectors is the amplitude (probability) that the state it represents is true.  The states start at the left with 0000, then 0001, then 0010 and continue until the very right most value which represents 1111.

If you look at the second input/output pair the input is [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0], which means it has a 100% chance of the 4 qubits being 0001 (aka the qubits represent the number 1).  The output vector is [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0], which means that it has a 100% chance of being 0101 (aka the qubits represent the number 5).  Since the input did have the 4th bit set (4th from the left), it flipped the 2nd bit.  So, you can see that it worked!

If you check all the input/output pairs, you'll see that they all follow this rule.

We used only whole, real numbers, no using fractional probabilities, or imaginary amplitudes.  What it does in those situations is a little bit harder to get intuition for, but rest assured that it does "the right thing" in those situations as well.

<img src="https://demofox2.files.wordpress.com/2015/11/Output2.png"/>

<h2>Next Up</h2>

Now that we have the basics of quantum computing down pretty well, it's time to analyze a couple quantum algorithms to see how they work!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3465</wp:post_id>
		<wp:post_date><![CDATA[2015-11-06 13:52:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-06 21:52:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[quantum-computing-for-programmers-part-2-multiple-qubits]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="quantum-computing"><![CDATA[Quantum Computing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495702869;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3349;}i:1;a:1:{s:2:"id";i:3434;}i:2;a:1:{s:2:"id";i:3334;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hiding a Lookup Table in a Modulus Operation</title>
		<link>http://blog.demofox.org/2015/11/13/hiding-a-lookup-table-in-a-modulus-operation/</link>
		<pubDate>Fri, 13 Nov 2015 20:48:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3673</guid>
		<description></description>
		<content:encoded><![CDATA[Lookup tables are a tool found in every programmer's tool belt.

Lookup tables let you pre-calculate a complex calculation in advance, store the results in a table (an array), and then during performance critical parts of your program, you access that table to get quick answers to the calculations, without having to do the complex calculation on the fly.

In this post I'll show a way to embed a lookup table inside of a single (large) number, where you extract values from that lookup table by taking a modulus of that number with different, specific values.

This technique is slower and takes more memory than an actual lookup table, but it's conceptually interesting, so I wanted to share.

Also, I stumbled on this known technique while working on my current paper.  The paper will make this technique a bit more practical, and I'll share more info as soon as I am able, but for now you can regard this as a curiosity :P

Onto the details!

<h2>1 Bit Input, 1 Bit Output: Pass Through</h2>

Let's learn by example and start with a calculation that takes in an input bit, and gives that same value for an output bit.  It's just a 1 bit pass through lookup table.

$latex
\\begin{array}{c|c}
\\text{Input} & \\text{Output} \\\\
\\hline
0 & 0 \\\\
1 & 1 \\\\
\\end{array}
$

To be able to convert that to something we can decode with modulus we have to solve the following equations:

$latex
x \\% k_0 = 0 \\\\
x \\% k_1 = 1
$

$latex x $ is the number that represents our lookup table.  $latex k_0 $ and $latex k_1 $ are the values that we modulus x against to get our desired outputs out.

It looks as if we have two equations and three unknowns - which would be unsolvable - but in reality, x is the only unknown.  The k values can be whatever values it takes to make the equations true.

I wrote a blog post on how to solve equations like these in a previous post: <a href="http://blog.demofox.org/2015/09/12/solving-simultaneous-congruences-chinese-remainder-theorem/">Solving Simultaneous Congruences (Chinese Remainder Theorem)</a>.

You can also use this chinese remainder theorem calculator, which is handy: <a href="http://www.mathcelebrity.com/chinese.php" target="_blank">Chinese Remainder Theorem Calculator</a>

The short answer here is that the k values can be ANY numbers, so long as they are pairwise co-prime to each other - AKA they have a greatest common divisor of 1.

If we pick 3 and 4 for k0 and k1, then using the chinese remainder theorem we find that x can equal 9 and the equations are true.  Technically the answer is 9 mod 12, so 21, 33, 45 and many other numbers are also valid values of x, but we are going to use the smallest answer to keep things smaller, and more manageable.

So, in this case, the value representing the lookup table would be 9.  If you wanted to know what value it gave as output when you plugged in the value 0, you would modulus the lookup table (9) against k0 (3) to get the output.  If you wanted to know what value it gave as output when you plugged in the value 1, you would modulus the lookup table (9) against k1 (4) to get the output.  The table below shows that it passes through the value in both cases like it should:

$latex
\\begin{array}{c|c|c|c}
\\text{Input} & \\text{Symbolic} & \\text{Numeric} & \\text{Output} \\\\
\\hline
0 & x \\% k_0 & 9 \\% 3 & 0\\\\
1 & x \\% k_1 & 9 \\% 4 & 1\\\\
\\end{array}
$

<h2>1 Bit Input, 1 Bit Output: Not Gate</h2>

Let's do something a little more interesting.  Let's make the output bit be the reverse of the input bit.  The equations we'll want to solve are this:

$latex
x \\% k_0 = 1 \\\\
x \\% k_1 = 0
$

We can use 3 and 4 for k0 and k1 again if we want to.  Using the Chinese remainder theorem to solve the equations gives us a value of 4 for x.  Check the truth table below to see how this works:

$latex
\\begin{array}{c|c|c|c}
\\text{Input} & \\text{Symbolic} & \\text{Numeric} & \\text{Output} \\\\
\\hline
0 & x \\% k_0 & 4 \\% 3 & 1\\\\
1 & x \\% k_1 & 4 \\% 4 & 0\\\\
\\end{array}
$

<h2>1 Bit Input, 1 Bit Output: Output Always 1</h2>

What if we wanted the output bit to always be 1 regardless of input bit?

$latex
x \\% k_0 = 1 \\\\
x \\% k_1 = 1
$

Using 3 and 4 for our k values again, we solve and get a value of 1 for x.  Check the truth table to see it working below:

$latex
\\begin{array}{c|c|c|c}
\\text{Input} & \\text{Symbolic} & \\text{Numeric} & \\text{Output} \\\\
\\hline
0 & x \\% k_0 & 1 \\% 3 & 1\\\\
1 & x \\% k_1 & 1 \\% 4 & 1\\\\
\\end{array}
$

Hopefully one bit input to one bit output makes sense now.  Let's move on (:

<h2>2 Bit Input, 1 Bit Output: XOR Gate</h2>

Things get a little more interesting when we bump the number of input bits up to 2.  If we want to make a number which represents XOR, we now have 4 equations to solve.

$latex
x \\% k_{00} = 0 \\\\
x \\% k_{01} = 1 \\\\
x \\% k_{10} = 1 \\\\
x \\% k_{11} = 0
$

In general we will have $latex 2^N$ equations, where N is the number of input bits.

You might have noticed that I use subscripts for k corresponding to the input bits that the key represents.  This is a convention I've found useful when working with this stuff.  Makes it much easier to see what's going on.

Now with four equations, we need 4 pairwise coprime numbers - no number has a common factor with another number besides 1.

Let's pull them out of the air.  Umm... 3, 4, 5, 7

Not too hard with only two bits of input, but you can see how adding input bits makes things a bit more complex.  If you wanted to make something that took in two 16 bit numbers as input for example, you would need 2^32 co-prime numbers, since there was a total of 32 bits of input!

When we solve those four equations, we get a value of 21 for x.

Notice how x is larger now that we have more input bits?  That is another added complexity as you add more input bits.  The number representing your program can get very, very large, and require you to use "multi precision integer" math libraries to store and decode the programs, when the numbers get larger than what can be held in a 64 bit int.

Boost has a decent library for this, check out boost::multiprecision::cpp_int, it's what I use.  You can download boost from here: <a href="http://www.boost.org/doc/libs/1_59_0/more/getting_started/windows.html" target="_blank">http://www.boost.org/doc/libs/1_59_0/more/getting_started/windows.html</a>

Anyhow, let's check the truth table to see if our values work:

$latex
\\begin{array}{c|c|c|c}
\\text{Input} & \\text{Symbolic} & \\text{Numeric} & \\text{Output} \\\\
\\hline
00 & x \\% k_{00} & 21 \\% 3 & 0 \\\\
01 & x \\% k_{01} & 21 \\% 4 & 1 \\\\
10 & x \\% k_{10} & 21 \\% 5 & 1 \\\\
11 & x \\% k_{11} & 21 \\% 7 & 0
\\end{array}
$

Woot, it worked.  

<h2>2 Bit Input, 2 Bit Output: OR, AND</h2>

What happens when we add another bit of output?  Basically we just treat each output bit as it's own lookup table.  This means that if we have two output bits, we will have two numbers representing our program (one for each bit), and that this is true regardless of how many input bits we have.

Let's make the left output bit ($latex x_0 $) be the OR of the input bits and the right output bit ($latex x_1 $) be the AND of the input bits.

That give us these two sets of equations to solve:

$latex
x_0 \\% k_{00} = 0 \\\\
x_0 \\% k_{01} = 1 \\\\
x_0 \\% k_{10} = 1 \\\\
x_0 \\% k_{11} = 1 \\\\
\\\\
x_1 \\% k_{00} = 0 \\\\
x_1 \\% k_{01} = 0 \\\\
x_1 \\% k_{10} = 0 \\\\
x_1 \\% k_{11} = 1 \\\\
$

We can use the same coprime numbers for our k values as we used in the last section (3,4,5,7).  Note that we use the same k values in each set of equations.  This is intentional and required for things to work out!

If we solve each set of equations we get 141 for x0, and 120 for x1.

Let's see if that worked:

$latex
\\begin{array}{c|c|c|c}
\\text{Input} & \\text{Symbolic} & \\text{Numeric} & \\text{Output} \\\\
\\hline
00 & x_0 \\% k_{00}, x_1 \\% k_{00} & 141 \\% 3, 120 \\% 3 & 00 \\\\
01 & x_0 \\% k_{01}, x_1 \\% k_{01} & 141 \\% 4, 120 \\% 4 & 10 \\\\
10 & x_0 \\% k_{10}, x_1 \\% k_{10} & 141 \\% 5, 120 \\% 5 & 10 \\\\
11 & x_0 \\% k_{11}, x_1 \\% k_{11} & 141 \\% 7, 120 \\% 7 & 11
\\end{array}
$

Hey, it worked again.  Neat!

<h2>Example Code</h2>

Now that we have the basics worked out, here is some sample code.

The lookup table takes in 8 bits as input, mapping 0..255 to 0...2pi and gives the sine of that value as output in a float.  So it has 8 bits of input and 32 bits of output.

[code language="cpp"]
#include &lt;vector&gt;
#include &lt;boost/multiprecision/cpp_int.hpp&gt;
#include &lt;stdint.h&gt;
#include &lt;string.h&gt;
#include &lt;memory&gt;

typedef boost::multiprecision::cpp_int TINT;
typedef std::vector&lt;TINT&gt; TINTVec;

const float c_pi = 3.14159265359f;

//=================================================================================
void WaitForEnter ()
{
    printf(&quot;\nPress Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

//=================================================================================
static TINT ExtendedEuclidianAlgorithm (TINT smaller, TINT larger, TINT &amp;s, TINT &amp;t)
{
    // make sure A &lt;= B before starting
    bool swapped = false;
    if (larger &lt; smaller)
    {
        swapped = true;
        std::swap(smaller, larger);
    }

    // set up our storage for the loop.  We only need the last two values so will
    // just use a 2 entry circular buffer for each data item
    std::array&lt;TINT, 2&gt; remainders = { larger, smaller };
    std::array&lt;TINT, 2&gt; ss = { 1, 0 };
    std::array&lt;TINT, 2&gt; ts = { 0, 1 };
    size_t indexNeg2 = 0;
    size_t indexNeg1 = 1;

    // loop
    while (1)
    {
        // calculate our new quotient and remainder
        TINT newQuotient = remainders[indexNeg2] / remainders[indexNeg1];
        TINT newRemainder = remainders[indexNeg2] - newQuotient * remainders[indexNeg1];

        // if our remainder is zero we are done.
        if (newRemainder == 0)
        {
            // return our s and t values as well as the quotient as the GCD
            s = ss[indexNeg1];
            t = ts[indexNeg1];
            if (swapped)
                std::swap(s, t);

            // if t &lt; 0, add the modulus divisor to it, to make it positive
            if (t &lt; 0)
                t += smaller;
            return remainders[indexNeg1];
        }

        // calculate this round's s and t
        TINT newS = ss[indexNeg2] - newQuotient * ss[indexNeg1];
        TINT newT = ts[indexNeg2] - newQuotient * ts[indexNeg1];

        // store our values for the next iteration
        remainders[indexNeg2] = newRemainder;
        ss[indexNeg2] = newS;
        ts[indexNeg2] = newT;

        // move to the next iteration
        std::swap(indexNeg1, indexNeg2);
    }
}

//=================================================================================
void MakeKey (TINTVec &amp;keys, TINT &amp;keysLCM, size_t index)
{
    // if this is the first key, use 3
    if (index == 0)
    {
        keys[index] = 3;
        keysLCM = keys[index];
        return;
    }

    // Else start at the last number and keep checking odd numbers beyond that
    // until you find one that is co-prime.
    TINT nextNumber = keys[index - 1];
    while (1)
    {
        nextNumber += 2;
        if (std::all_of(
            keys.begin(),
            keys.begin() + index,
            [&amp;nextNumber] (const TINT&amp; v) -&gt; bool
            {
                TINT s, t;
                return ExtendedEuclidianAlgorithm(v, nextNumber, s, t) == 1;
            }))
        {
            keys[index] = nextNumber;
            keysLCM *= nextNumber;
            return;
        }
    }
}

//=================================================================================
void CalculateLookupTable (
    TINT &amp;lut,
    const std::vector&lt;uint64_t&gt; &amp;output,
    const TINTVec &amp;keys,
    const TINT &amp;keysLCM,
    const TINTVec &amp;coefficients,
    size_t bitMask
)
{
    // figure out how much to multiply each coefficient by to make it have the specified modulus residue (remainder)
    lut = 0;
    for (size_t i = 0, c = keys.size(); i &lt; c; ++i)
    {
        // we either want this term to be 0 or 1 mod the key.  if zero, we can multiply by zero, and
        // not add anything into the bit value!
        if ((output[i] &amp; bitMask) == 0)
            continue;

        // if 1, use chinese remainder theorem
        TINT s, t;
        ExtendedEuclidianAlgorithm(coefficients[i], keys[i], s, t);
        lut = (lut + ((coefficients[i] * t) % keysLCM)) % keysLCM;
    }
}

//=================================================================================
template &lt;typename TINPUT, typename TOUTPUT, typename LAMBDA&gt;
void MakeModulus (TINTVec &amp;luts, TINTVec &amp;keys, LAMBDA &amp;lambda)
{
    // to keep things simple, input sizes are being constrained.
    // Do this in x64 instead of win32 to make size_t 8 bytes instead of 4
    static_assert(sizeof(TINPUT) &lt; sizeof(size_t), &quot;Input too large&quot;);
    static_assert(sizeof(TOUTPUT) &lt; sizeof(uint64_t), &quot;Output too large&quot;);

    // calculate some constants
    const size_t c_numInputBits = sizeof(TINPUT) * 8;
    const size_t c_numInputValues = 1 &lt;&lt; c_numInputBits;
    const size_t c_numOutputBits = sizeof(TOUTPUT) * 8;

    // Generate the keys (coprimes)
    TINT keysLCM;
    keys.resize(c_numInputValues);
    for (size_t index = 0; index &lt; c_numInputValues; ++index)
        MakeKey(keys, keysLCM, index);

    // calculate co-efficients for use in the chinese remainder theorem
    TINTVec coefficients;
    coefficients.resize(c_numInputValues);
    fill(coefficients.begin(), coefficients.end(), 1);
    for (size_t i = 0; i &lt; c_numInputValues; ++i)
    {
        for (size_t j = 0; j &lt; c_numInputValues; ++j)
        {
            if (i != j)
                coefficients[i] *= keys[j];
        }
    }

    // gather all the input to output mappings by permuting the input space
    // and storing the output for each input index
    std::vector&lt;uint64_t&gt; output;
    output.resize(c_numInputValues);
    union
    {
        TINPUT value;
        size_t index;
    } input;
    union
    {
        TOUTPUT value;
        size_t index;
    } outputConverter;

    for (input.index = 0; input.index &lt; c_numInputValues; ++input.index)
    {
        outputConverter.value = lambda(input.value);
        output[input.index] = outputConverter.index;
    }

    // iterate through each possible output bit, since each bit is it's own lut
    luts.resize(c_numOutputBits);
    for (size_t i = 0; i &lt; c_numOutputBits; ++i)
    {
        const size_t bitMask = 1 &lt;&lt; i;
        CalculateLookupTable(
            luts[i],
            output,
            keys,
            keysLCM,
            coefficients,
            bitMask
        );
    }
}

//=================================================================================
int main (int argc, char **argv)
{
    // Look up tables encodes each bit, keys is used to decode each bit for specific
    // input values.
    TINTVec luts;
    TINTVec keys;

    // this is the function that it turns into modulus work
    typedef uint8_t TINPUT;
    typedef float TOUTPUT;
    auto lambda = [] (TINPUT input) -&gt; TOUTPUT
    {
        return sin(((TOUTPUT)input) / 255.0f * 2.0f * c_pi);
    };

    MakeModulus&lt;TINPUT, TOUTPUT&gt;(luts, keys, lambda);

    // show last lut and key to show what kind of numbers they are
    std::cout &lt;&lt; &quot;Last Lut: &quot; &lt;&lt; *luts.rbegin() &lt;&lt; &quot;\n&quot;;
    std::cout &lt;&lt; &quot;Last Key: &quot; &lt;&lt; *keys.rbegin() &lt;&lt; &quot;\n&quot;;

    // Decode all input values
    std::cout &lt;&lt; &quot;\n&quot; &lt;&lt; sizeof(TINPUT) &lt;&lt; &quot; bytes input, &quot; &lt;&lt; sizeof(TOUTPUT) &lt;&lt; &quot; bytes output\n&quot;;
    for (size_t keyIndex = 0, keyCount = keys.size(); keyIndex &lt; keyCount; ++keyIndex)
    {
        union
        {
            TOUTPUT value;
            size_t index;
        } result;

        result.index = 0;

        for (size_t lutIndex = 0, lutCount = luts.size(); lutIndex &lt; lutCount; ++lutIndex)
        {
            TINT remainder = luts[lutIndex] % keys[keyIndex];
            size_t remainderSizeT = size_t(remainder);
            result.index += (remainderSizeT &lt;&lt; lutIndex);
        }

        TINT remainder = luts[0] % keys[keyIndex];
        std::cout &lt;&lt; &quot;i:&quot; &lt;&lt; keyIndex &lt;&lt; &quot; o:&quot; &lt;&lt; result.value &lt;&lt; &quot;\n&quot;;
    }

    WaitForEnter();
    return 0;
}
[/code]

Here is some output from the program.  The first is to show what the last (largest) look up table and key look like.  Notice how large the look up table number is!
<img src="https://demofox2.files.wordpress.com/2015/11/lut1.png"/>

Here it shows some sine values output from the program, using modulus against the large numbers calculated, to get the bits of the result out:
<img src="https://demofox2.files.wordpress.com/2015/11/lut2.png"/>

<h2>How to Get Lots of Pairwise Co-Prime Numbers?</h2>

You can generate a list of pairwise coprimes using brute force.  Have an integer that you increment, and check if it's pairwise co-prime to the existing items in the list.  If it is, add it to the list!  Rinse and repeat until you have as many as you want.

That is the most practical way to do it, but there are two other interesting ways I wanted to mention.

The first way is using Fermat numbers.  The Fermat numbers are an infinite list of pairwise co-prime numbers and are calculated as $latex 2^{2^n}+1$ where n is an integer.  Fermat numbers also have the benefit that you can get the nth item in the list without calculating the numbers that came before it.  The only problem is that the numbers grow super huge very fast.  The first 7 values are: 3, 5, 17, 257, 65537, 4294967297, 18446744073709551617.  If Fermat numbers didn't grow so quickly, they sure would be useful for things like this technique.

The second way is using something called Sylvester's sequence.  It too is an infinite list of pairwise co-prime numbers, and it too grows very large very quickly unfortunately.  I also don't believe there is a way to calculate the Nth item in the list directly.  Every number is based on previous numbers, so you have to calculate them all from the beginning.  No random access!

<h2>Beyond Binary</h2>

In this post I showed how to work in binary digits, but there is no reason why you have to encode single bits in the lookup tables.

Instead of encoding 0 or 1 in each modulus "lookup table", you could also perhaps store base 10 numbers in the tables and have 0-9.  Or, maybe you encode a byte per lookup table.

Encoding more than one bit effectively makes both your input and your output smaller, which helps the algorithm do more with less.

Your keys will need to be larger though, since the keys have to be larger than the value you plan to store, and your resulting lookup table will be a larger number as well.  It might make the technique more worth while though.

I'll leave that as an exercise for you.  If try it and find neat stuff, post a comment and let us know, or drop me an email or something.  It'd be neat to hear if people find any practical usage cases of this technique :P

<h2>The End, For Now!</h2>

I want to point out that increasing the number of input bits in this technique is a pretty expensive thing to do, but increasing the number of output bits is a lot cheaper.  It kind of makes sense in a way if you think about it.  Input bits add information from the outside world that must be dealt with, while output bits are just fluff that can easily be diluted or concentrated by adding or removing bits that are associated with, and calculated from, the input bits.

Another problem you may have noticed with this technique is that if you have a really expensive calculation that you are trying to "flatten" into modulus math like this, that you have to run that calculation many, many times to know what values a lookup table would give you.  You have to run it once per possible input to get every possible output.  That is expected when making a lookup table, since you are paying a cost up front to make things faster later.

The paper I'm working on changes things a bit though.  One of the things it does is it makes it so doing this technique only requires that you evaluate the function once, and it calculates all values simultaneously to give the end result that you can then do modulus against.  It's pretty cool IMO and I will share more details here as soon as I am able - and yes, i have actual working code that does that, believe it or not!  I'm looking forward to being able to share it later on.  Maybe someone will find some really cool usage case for it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3673</wp:post_id>
		<wp:post_date><![CDATA[2015-11-13 12:48:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-13 20:48:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hiding-a-lookup-table-in-a-modulus-operation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494409236;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3724;}i:1;a:1:{s:2:"id";i:4281;}i:2;a:1:{s:2:"id";i:4999;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>O(1) Data Lookups With Minimal Perfect Hashing</title>
		<link>http://blog.demofox.org/2015/12/14/o1-data-lookups-with-minimal-perfect-hashing/</link>
		<pubDate>Mon, 14 Dec 2015 20:47:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3724</guid>
		<description></description>
		<content:encoded><![CDATA[Hash tables are great in that you can hash a key and then use that hash as an index into an array to get the information associated with that key.  That is very fast, so long as you use a fast hash function.

The story doesn't end there though because hash functions can have collisions - multiple things can hash to the same value even though they are different.  This means that in practice you have to do things like store a list of objects per hash value, and when doing a lookup, you need to do a slower full comparison against each item in the bucket to look for a match, instead of being able to only rely on the hash value comparisons.

What if our hash function didn't have collisions though?  What if we could take in N items, hash them, and get 0 to N-1 as output, with no collisions?  This post will talk about how to make that very thing happen, with simple sample C++ code as well, believe it or not!

<h2>Minimal Perfect Hashing</h2>

Perfect hashing is a hash function which has no collisions.  You can hash N items, and you get out N different hash values with no collisions.  The number of items being hashed has to be smaller than or equal to the possible values your hash can give as output though.  For instance if you have a 4 bit hash which gives 16 possible different hash values, and you hash 17 different items, you are going to have at least one collision, it's unavoidable.  But, if you hash 16 items or fewer, it's possible in that situation that you could have a hash which had no collisions for the items you hashed.

Minimal perfect hashing takes this a step further.  Not only are there no collisions, but when you hash N items, you get 0 to N-1 as output.

You might imagine that this is possible - because you could craft limitless numbers of hashing algorithms, and could pass any different salt value to it to change the output values it gives for inputs - but finding the specific hashing algorithm, and the specific salt value(s) to use sounds like a super hard brute force operation.

The method we are going to talk about today is indeed brute force, but it cleverly breaks the problem apart into smaller, easier to solve problems, which is pretty awesome.  It's actually a pretty simple algorithm too.

Here is how you create a minimal perfect hash table:

<ol>
	<li>Hash the items into buckets - there will be collisions at this point.</li>
	<li>Sort the buckets from most items to fewest items.</li>
	<li>Find a salt value for each bucket such that when all items in that bucket are hashed, they claim only unclaimed slots.  Store this array of salt values for later.  it will be needed when doing a data lookup.</li>
	<li>If a bucket only has one item, instead of searching for a salt value, you can just find an unclaimed index and store -(index+1) into the salt array.</li>
</ol>

Once you have your minimal perfect hash calculated, here is how you do a lookup:

<ol>
	<li>Hash the key, and use that hash to find what salt to use.</li>
	<li>If the salt is positive (or zero), hash the key again using the salt.  The result of that hash will be an index into the data table.</li>
	<li>If the salt is negative, take the absolute value and subtract one to get the index in the data table.</li>
	<li>Since it's possible the key being looked for isn't in the table, compare the key with the key stored at that index in the table.  If they match, return the data at that index.  If they don't match, the key was not in the table.</li>
</ol>

Pretty simple isn't it?

<h2>Algorithm Characteristics</h2>

This perfect minimal hash algorithm is set up to be slow to generate, but fast to query.  This makes it great for situations where the keys are static and unchanging, but you want fast lookup times - like for instance loading a data file for use in a game.

Interestingly though, while you can't add new keys, you could make it so you could delete keys.  You would just remove the key / value pair from the data set, and then when doing a lookup you'd find an empty slot.

Also, there is nothing about this algorithm that says you can't modify the data associated with the keys, at runtime.  Modifying the data associated with a key doesn't affect where the key/value pair is stored in the table, so you can modify the data all you want.

If you wanted to be able to visit the items in a sorted order, when searching for the perfect minimal hash, you could also make the constraint that when looking for the salt values, that not only did the items in the bucket map to an unclaimed slot, you could make sure they mapped to the correct slot that they should be in to be in sorted order.  That would increase the time it took to generate the table, and increase the chances that there was no valid solution for any salt values used, but it is possible if you desire being able to know the items in some sorted order.

Interestingly, the generation time of the minimal perfect hash apparently grows linearly with the number of items it acts on.  That makes it scale well.  On my own computer for instance, I am able to generate the table for 100,000 items in about 4.5 seconds.

Also, in my implementation, if you have N items, it has the next lower power of two number of salt values.  You could decrease the number of salt values used if you wanted to use less memory, but that would again come at the cost of increased time to generate the table, as well as increase the chances that there was no valid solution for any salt values used.

<h2>Example Code</h2>

Below is a simple implementation of the algorithm described.

The main point of the code (besides functionality) is readability so it isn't optimized as well as it could be, but still runs very fast (100,000 items processed in about 4.5 seconds on my machine).  Debug is quite a bit slower than release for me though - I gave up on those same 100,000 items after a few minutes running in debug.

The code below uses MurmurHash2, but you could drop in whatever hashing algorithm you wanted.

The data file for this code is <a href="https://demofox2.files.wordpress.com/2015/12/words.txt" target="_blank">words.txt</a> and comes to us courtesy of <a href="http://www-01.sil.org/linguistics/wordlists/english/" target="_blank">English Wordlists</a>.

[code language="cpp"]
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;assert.h&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;

unsigned int MurmurHash2(const void * key, int len, unsigned int seed);

//=================================================================================
template &lt;typename VALUE&gt;
class CPerfectHashTable {
public:

    typedef std::pair&lt;std::string, VALUE&gt; TKeyValuePair;
    typedef std::vector&lt;TKeyValuePair&gt; TKeyValueVector;
    struct SKeyValueVectorBucket {
        TKeyValueVector m_vector;
        size_t          m_bucketIndex;
    };
    typedef std::vector&lt;struct SKeyValueVectorBucket&gt; TKeyValueVectorBuckets;

    // Create the perfect hash table for the specified data items
    void Calculate (const TKeyValueVector&amp; data) {

        // ----- Step 1: hash each data item and collect them into buckets.
        m_numItems = data.size();
        m_numBuckets = NumBucketsForSize(m_numItems);
        m_bucketMask = m_numBuckets - 1;
        m_salts.resize(m_numBuckets);
        m_data.resize(m_numItems);
        TKeyValueVectorBuckets buckets;
        buckets.resize(m_numBuckets);

        for (size_t i = 0; i &lt; m_numBuckets; ++i)
            buckets[i].m_bucketIndex = i;

        for (const TKeyValuePair&amp; pair : data) {
            size_t bucket = FirstHash(pair.first.c_str());
            buckets[bucket].m_vector.push_back(pair);
        }

        // ----- Step 2: sort buckets from most items to fewest items
        std::sort(
            buckets.begin(),
            buckets.end(),
            [](const SKeyValueVectorBucket&amp; a, const SKeyValueVectorBucket&amp; b) {
                return a.m_vector.size() &gt; b.m_vector.size();
            }
        );

        // ----- Step 3: find salt values for each bucket such that when all items
        // are hashed with their bucket's salt value, that there are no collisions.
        // Note that we can stop when we hit a zero sized bucket since they are sorted
        // by length descending.
        std::vector&lt;bool&gt; slotsClaimed;
        slotsClaimed.resize(m_numItems);
        for (size_t bucketIndex = 0, bucketCount = buckets.size(); bucketIndex &lt; bucketCount; ++bucketIndex) {
            if (buckets[bucketIndex].m_vector.size() == 0)
                break;
            FindSaltForBucket(buckets[bucketIndex], slotsClaimed);
        }
    }

    // Look up a value by key.  Get a pointer back.  null means not found.
    // You can modify data if you want, but you can't add/remove/modify keys without recalculating.
    VALUE* GetValue (const char* key) {

        // do the first hash lookup and get the salt to use
        size_t bucket = FirstHash(key);
        int salt = m_salts[bucket];

        // if the salt is negative, it's absolute value minus 1 is the index to use.
        size_t dataIndex;
        if (salt &lt; 0)
            dataIndex = (size_t)((salt * -1) - 1);
        // else do the second hash lookup to get where the key value pair should be
        else
            dataIndex = MurmurHash2(key, strlen(key), (unsigned int)salt) % m_data.size();

        // if the keys match, we found it, else it doesn't exist in the table
        if (m_data[dataIndex].first.compare(key) == 0)
            return &amp;m_data[dataIndex].second;
        return nullptr;
    }

private:

    unsigned int FirstHash (const char* key) {
        return MurmurHash2(key, strlen(key), 435) &amp; m_bucketMask;
    }

    void FindSaltForBucket (const SKeyValueVectorBucket&amp; bucket, std::vector&lt;bool&gt;&amp; slotsClaimed) {

        // if the bucket size is 1, instead of looking for a salt, just encode the index to use in the salt.
        // store it as (index+1)*-1 so that we can use index 0 too.
        if (bucket.m_vector.size() == 1) {
            for (size_t i = 0, c = slotsClaimed.size(); i &lt; c; ++i)
            {
                if (!slotsClaimed[i])
                {
                    slotsClaimed[i] = true;
                    m_salts[bucket.m_bucketIndex] = (i + 1)*-1;
                    m_data[i] = bucket.m_vector[0];
                    return;
                }
            }
            // we shouldn't ever get here
            assert(false);
        }

        // find the salt value for the items in this bucket that cause these items to take
        // only unclaimed slots
        for (int salt = 0; ; ++salt) {
            // if salt ever overflows to a negative number, that's a problem.
            assert(salt &gt;= 0);
            std::vector&lt;size_t&gt; slotsThisBucket;
            bool success = std::all_of(
                bucket.m_vector.begin(),
                bucket.m_vector.end(),
                [this, &amp;slotsThisBucket, salt, &amp;slotsClaimed](const TKeyValuePair&amp; keyValuePair) -&gt; bool {
                    const char* key = keyValuePair.first.c_str();
                    unsigned int slotWanted = MurmurHash2(key, strlen(key), (unsigned int)salt) % m_numItems;
                    if (slotsClaimed[slotWanted])
                        return false;
                    if (std::find(slotsThisBucket.begin(), slotsThisBucket.end(), slotWanted) != slotsThisBucket.end())
                        return false;
                    slotsThisBucket.push_back(slotWanted);
                    return true;
                }
            );

            // When we find a salt value that fits our constraints, remember the salt
            // value and also claim all the buckets.
            if (success)
            {
                m_salts[bucket.m_bucketIndex] = salt;
                for (size_t i = 0, c = bucket.m_vector.size(); i &lt; c; ++i)
                {
                    m_data[slotsThisBucket[i]] = bucket.m_vector[i];
                    slotsClaimed[slotsThisBucket[i]] = true;
                }
                return;
            }
        }
    }

    static size_t NumBucketsForSize (size_t size) {
        // returns how many buckets should be used for a specific number of elements.
        // Just uses the power of 2 lower than the size, or 1, whichever is bigger.
        if (!size)
            return 1;

        size_t ret = 1;
        size = size &gt;&gt; 1;
        while (size) {
            ret = ret &lt;&lt; 1;
            size = size &gt;&gt; 1;
        }
        return ret;
    }

    // When doing a lookup, a first hash is done to find what salt to use
    // for the second hash.  This table stores the salt values for that second
    // hash.
    std::vector&lt;int&gt; m_salts;

    // NOTE: this stores both the key and the value.  This is to handle the
    // situation where a key is searched for which doesn't exist in the table.
    // That key will still hash to some valid index, so we need to detect that
    // it isn't the right key for that index.  If you are never going to look for
    // nonexistant keys, then you can &quot;throw away the keys&quot; and only store the
    // values.  That can be a nice memory savings.
    std::vector&lt;TKeyValuePair&gt; m_data;

    // useful values
    size_t m_numItems;
    size_t m_numBuckets;
    size_t m_bucketMask;
};

// MurmurHash code was taken from https://sites.google.com/site/murmurhash/
//=================================================================================
// MurmurHash2, by Austin Appleby
 
// Note - This code makes a few assumptions about how your machine behaves -
 
// 1. We can read a 4-byte value from any address without crashing
// 2. sizeof(int) == 4
 
// And it has a few limitations -
 
// 1. It will not work incrementally.
// 2. It will not produce the same results on little-endian and big-endian
//    machines.
 
unsigned int MurmurHash2 ( const void * key, int len, unsigned int seed )
{
    // 'm' and 'r' are mixing constants generated offline.
    // They're not really 'magic', they just happen to work well.
 
    const unsigned int m = 0x5bd1e995;
    const int r = 24;
 
    // Initialize the hash to a 'random' value
 
    unsigned int h = seed ^ len;
 
    // Mix 4 bytes at a time into the hash
 
    const unsigned char * data = (const unsigned char *)key;
 
    while(len &gt;= 4)
    {
        unsigned int k = *(unsigned int *)data;
 
        k *= m; 
        k ^= k &gt;&gt; r; 
        k *= m; 
         
        h *= m; 
        h ^= k;
 
        data += 4;
        len -= 4;
    }
     
    // Handle the last few bytes of the input array
 
    switch(len)
    {
    case 3: h ^= data[2] &lt;&lt; 16;
    case 2: h ^= data[1] &lt;&lt; 8;
    case 1: h ^= data[0];
            h *= m;
    };
 
    // Do a few final mixes of the hash to ensure the last few
    // bytes are well-incorporated.
 
    h ^= h &gt;&gt; 13;
    h *= m;
    h ^= h &gt;&gt; 15;
 
    return h;
}


//=================================================================================
void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

//=================================================================================
int main (int argc, char **argv)
{
    // Read the data entries from a file.  Use the line as the key, and the line
    // number as the data.  Limit it to 100,000 entries.
    printf(&quot;Loading Data...&quot;);
    CPerfectHashTable&lt;int&gt; table;
    decltype(table)::TKeyValueVector data;
    std::ifstream file(&quot;words.txt&quot;);
    std::string str;
    int i = 0;
    while (std::getline(file, str) &amp;&amp; i &lt; 100000)
    {
        data.push_back(std::make_pair(str, i));
        ++i;
    }
    printf(&quot;Done\n\n&quot;);

    // make the perfect hash table
    printf(&quot;Generating Minimal Perfect Hash Table...&quot;);
    table.Calculate(data);
    printf(&quot;Done\n\n&quot;);

    // Verify results
    printf(&quot;Verifying results...&quot;);
    for (decltype(table)::TKeyValuePair&amp; keyValuePair : data) {
        int* value = table.GetValue(keyValuePair.first.c_str());
        assert(value != nullptr);
        if (value == nullptr)
        {
            printf(&quot;Error, could not find data for key \&quot;%s\&quot;\n&quot;, keyValuePair.first.c_str());
            WaitForEnter();
            return 0;
        }
        assert(*value == keyValuePair.second);
        if (*value != keyValuePair.second)
        {
            printf(&quot;  table[\&quot;%s\&quot;] = %i\n&quot;, keyValuePair.first.c_str(), *value);
            printf(&quot;Incorrect value detected, should have gotten %i!\n&quot;, keyValuePair.second);
            WaitForEnter();
            return 0;
        }
    }
    printf(&quot;Done\n\n&quot;);

    WaitForEnter();
    return 0;
}
[/code]

<h2>Links & More</h2>

I learned the details of this algorithm from this page: <a href="http://stevehanov.ca/blog/index.php?id=119" target="_blank"/>Steve Hanov's Blog: Throw away the keys: Easy, Minimal Perfect Hashing</a>, after hearing about the technique mentioned occasionally by colleagues.

There are other ways to do minimal perfect hashing however.  For instance give this a read: <a href="http://burtleburtle.net/bob/hash/perfect.html" target="_blank"/>Minimal Perfect Hashing</a>

One place that method is better than this one, is that in this one, when doing a lookup you have to hash the key twice.  In the technique described by the last technique, you only have to hash the key once, and use that hash to combine the results of two lookups.  The two lookups are not dependant so can be re-ordered or happen concurrently, which makes it faster on modern CPUs.

Apparently there are also some techniques for generating the minimal perfect hash on a large number of items by breaking them apart into smaller sets, which can then be paralelized across threads.

I also wanted to mention that a large part of the in memory representation of this data structure can come from storing the keys along with the data, to verify that you have indeed found the item you are looking for after doing the O(1) lookup.  If you are in a situation where you are only ever going to be searching for keys that you know are in the table, you can actually forgo storing the keys, to bring the memory requirements down a significant amount.

Also, The example code implements this as a hash table, but you could also use this as a set, if you wanted fast membership tests.  You could either store the keys, to be able to resolve when things were not part of the set, or, you could make a hash table of string to bool, where the bool specified whether something was in the set.  Which one is better depends on your specific needs and whether you plan to search for unknown keys or not.

Lastly, as a byproduct of using a data structure like this, you can get a unique ID per key, which is the index that it appears in the data array.  This can be super helpful if you have something like a list of filenames, where you would rather work with integers instead of specific file names, since integers are quicker and easier to compare, copy around, etc.

You could even make this data structure support lookups by either key or by unique id.  This way, you could do a by key lookup the first time you needed to find something, and then could store off the ID to get it by ID from then on for a faster lookup.  Heck, you could even do all your lookups "offline" (at tool time, not when the app is running) and for instance convert all file references in data files to be the each file's unique ID instead.  Then, you could toss out the keys of your data structure, only storing an array of data, and using the unique file ID to look into that table whenever you wanted to read or write meta data associated with that file.  That would make lookups faster, and also decrease the memory requirements of memory resident data files.

It's pretty cool stuff, and a pretty useful algorithm.  Hopefully you find it useful as well (:

<h2>Update - 12/22/15</h2>

Interestingly, this post has had something like 15,000 readers since it was posted.  That is by far the most read post on this blog :P

Anyways, I wanted to add some more info I've found recently.

Here are three tools for doing minimal perfect hashing that are very likely to give you better results than the algorithm I describe above:

<ul>
	<li><a href="http://cmph.sourceforge.net/" target="_blank">cmph</a></li>
	<li><a href="https://www.gnu.org/software/gperf/" target="_blank">gperf</a></li>
	<li><a href="http://www.ibiblio.org/pub/Linux/devel/lang/c/!INDEX.short.html" target="_blank">mph</a></li>
</ul>

Here's a conversation talking about gperf and the alternative applications, and pros and cons for each:
<a href="http://stackoverflow.com/questions/1770604/making-a-perfect-hash-all-consecutive-buckets-full-gperf-or-alternatives" target="_blank">Stack Overflow: Making a perfect hash (all consecutive buckets full), gperf or alternatives?</a>

Here's a research paper on gperf by Doug Schmidt: <a href="http://www.cs.wustl.edu/~schmidt/PDF/gperf.pdf" target="_blank">GPERF - A Perfect Hash Function Generator</a>

I had a thought that maybe there was some play here by using "logical synthesis" to come up with some algorithm to map the inputs (the keys of the hash table) to the outputs (collision free output indices).

I started looking into Karnaugh maps and then the Quine–McCluskey algorithm, and then espresso and espresso-exact (mincov).  Where the first two things are decent at solving multi bit input to single bit output, the second two things are decent at solving multi bit input to multi bit output, allowing operations to be shared among bits.

While I haven't found anyone using those specific algorithms to solve the problem, people have, and definitely are still, trying to also look into the ability to generate code without lookups.  From what I've read so far, it sounds like finding such a function takes a lot longer to find and also that it runs more slowly in practice than a less perfect solution which has lookups.

Either way, this is still an active area of research, and plenty of folks are working on it so I'm going to leave it to them.

I also sort of have the feeling that if you are in need of minimal perfect hashing, you may be "doing it wrong".  For instance, if you are at all able to, you probably are likely to be better off having a pre-agreed on set of unique IDs per "thing" you want to look up.  These unique IDs can be used directly as array indices for the magical always O(1) lookup that minimal perfect hashing is going for, and is actually a quicker lookup in practice since you don't need to jump through special hoops to calculate the array index.

The only exceptions I can think of are:
<ol>
<li>Real world requirements and not being able to reach the ideal situation - this is the boat I'm in right now.  Ideally, systems would be asking about things by an integer ID, but I can't get there in a single step, so the perfect hashing is a temporary bridge til I can get there.</li>
<li>Even with IDs, sparse arrays are still problematic.  You may have an ID per file that could be asked about, but say that you have 1,000,000 files, but you want to make an array of data for only 10,000 of them.  How do you take the unique ID of a file and do a lookup into that smaller table?  Minimal perfect hashing seems to be useful in this situation, but there may be other decent or comparable alternatives if you are already using integer IDs.</li>
</ol>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3724</wp:post_id>
		<wp:post_date><![CDATA[2015-12-14 12:47:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-14 20:47:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[o1-data-lookups-with-minimal-perfect-hashing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495707227;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:48;}i:1;a:1:{s:2:"id";i:3758;}i:2;a:1:{s:2:"id";i:4999;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What Happens When you Mix Hash Tables and Binary Searching?</title>
		<link>http://blog.demofox.org/2015/12/18/what-happens-when-you-mix-hash-tables-and-binary-searching/</link>
		<pubDate>Fri, 18 Dec 2015 19:56:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3758</guid>
		<description></description>
		<content:encoded><![CDATA[While not the most cache friendly operation, binary searching a sorted data set is a pretty good way to search a data set for a specific value because for N items, you have an average case and worst case of O(log N) (<a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" target="_blank">Wikipedia: Binary Search Algorithm</a>).

Hashing is also a decent way to do data searching, because it has a best case for search of O(1) with the average case being able to be near that when tuned well, but in practice due to collisions it can get get up to O(n) (<a href="https://en.wikipedia.org/wiki/Hash_table" target="_blank">Wikipedia: Hash Table</a>).

Note that if you know the keys in advance, you can ALWAYS get O(1) lookup by using the information from the last post: <a href="http://blog.demofox.org/2015/12/14/o1-data-lookups-with-minimal-perfect-hashing/" target="_blank">Minimal Perfect Hashing</a>.

One way to deal with hash collisions is to store all the collisions for a specific hash value in a list or array.

For instance, if you had a 4 bit hash, you could have 16 arrays, where the [0]th array stored all the items that hashed to 0, the [1]th array stored all items that hashed to 1 and so on, going up to the [15]th array which stored all items that hashed to 15.

What would happen if we stored the arrays in sorted order and then did a binary search within the buckets?  What would that mean to search times?

Interestingly, assuming a good hash function, the answer is that every bit of hash you use subtracts one from the number of tests you'd have to do with binary searching (See footnote 1).

<h2>Examples</h2>

For instance, let's say you had 1024 items sorted in an array, you would have to do up to 10 tests to search for a value in that array using a binary search since log2(1024)=10 (See footnote 2).

If we use a 1 bit hash, assuming a good hash function, that would split the array into two arrays each having 512 items in it.  Those each can take up to 9 tests to search using a binary search since log2(512)=9.  Doing the hash to choose which of the two lists to search cuts our search from up to 10 tests, down to 9 tests.

If instead we used a 2 bit hash, we would divide the 1024 item list into four lists each having 256 items in them.  Each of these lists can be searched with up to 8 tests since log2(256) = 8.  So using a 2 bit hash, we can cut our search down to 8 tests max.

Let's say that we used an 8 bit hash.  That would cut our list up into 256 lists, each of which only has 4 items in it.  Each list can be searched with up to 2 tests since log2(4) = 2.  Using an 8 bit hash cuts our max number of searches from 10 down to 2!

Let's say we used a 16 bit hash, what would happen then?

Well, that would mean we had 65536 hash buckets, but only 1024 items to store in the buckets.  If we had a best case collision free hash, that means only 1024 buckets had an item in them, and the rest were empty.

You'd have to hash the value you were searching for to get the hash bucket index, and if there was an item there, you'd have to test that item.  If there was no item there, you could return that the value wasn't found.

The hash isn't free though, so this is basically O(1) or doing 1 test.

So, while each bit of hash subtracts one test from the binary search, it of course can't go negative, or become free, so it basically has a minimum of 1.

<h2>Footnotes</h2>
<ol>
	<li>Technically it only approximately subtracts one from the number of tests you'd have to do, even if the hash function divides the list as evenly as possible, due to footnote 2 and not being able to split an odd number of items exactly in half.</li>
	<li>technically 1024 items in an array could take up to 11 tests!  You can see why with 4 items with indices 0,1,2,3.  First you'd test index 2.  If the value we were looking for was greater, we'd test 3 and then be done with either a found or not found result.  That's just 2 searches total.  But, if the value we were looking for was less than index 2, we'd have to test index 1, and then optionally test index 0 depending on how the search value compared to index 1.  With only 3 items, indicies 0,1,2, we test index 1, then either index 0 or 2 and be done, and so only have to test twice.  A binary search takes log2(N+1) tests, where N is the number of items you are looking through.</li>
</ol>

<h2>Quick Blurb</h2>

The last post i wrote on minimal perfect hashing was insanely popular (by my standards) on both reddit and hacker news.  The previous highest number of visitors I had ever had to my blog in one day was about 230, but on the 16th I got 4187 visitors, and on the 17th I got 7277 visitors.  That means there were over 10,000 visitors over those two days.

That is nuts!!

As a data point for those who might find it interesting, the bulk of the traffic from the first day was reddit, and the bulk of the traffic from the second day was hacker news.

I also found it interesting to see what all those people looked at after the minimal perfect hashing algorithm.

I've learned as the years have gone on so some of my older stuff probably contains more errors than my newer stuff (which is also not error free I'm sure).

Anyways, thanks for reading, and I hope you guys find my writings interesting and useful.  Please feel free to comment and correct any misinformation, or let us know about better alternatives (:
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3758</wp:post_id>
		<wp:post_date><![CDATA[2015-12-18 11:56:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-18 19:56:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[what-happens-when-you-mix-hash-tables-and-binary-searching]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495581584;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3724;}i:1;a:1:{s:2:"id";i:48;}i:2;a:1:{s:2:"id";i:4999;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simplifying Boolean Expressions With Karnaugh Maps</title>
		<link>http://blog.demofox.org/2015/12/20/simplifying-boolean-expressions-with-karnaugh-maps/</link>
		<pubDate>Mon, 21 Dec 2015 01:10:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3766</guid>
		<description></description>
		<content:encoded><![CDATA[Karnaugh maps are a formalized way of turning a truth table into a fairly minimal logical expression.

It's fairly minimal in that it's the minimal "sum of products" representation, but that might not be the minimal representation of the logic circuit.

The sum of products representation just means that you OR (sum) multiple terms that are ANDed (product) together.  For instance the below is a sum of products expression:

$latex
Out = \\overline{A}B + AB
$

With multiplication being AND, addition being OR, and a line over a letter being a NOT, the above could be written in C++ code like this:

[code language="cpp"]
bool out = (!A &amp;&amp; B) || (A &amp;&amp; B);
[/code]

It would be real easy to write code like that especially if you were adding onto an existing condition, and you might not even notice that it isn't the minimal Boolean expression to make the desired output.

Using Boolean algebra, you can do the following simplifications:
$latex
Out = \\overline{A}B + AB\\\\
= B*(\\overline{A}+A)\\\\
= B*1\\\\
= B
$

Which simplifies the C++ code to just this:

[code language="cpp"]
bool out = B;
[/code]

Using Boolean algebra to simplify, you'd have to remember (or derive) the identity that $latex A+\\overline{A}=1 $, and all the other identities to help you simplify equations.

Karnaugh maps make this easier because you will be able to see visually what can be combined (simplified) and what can't.

Again though, while they give you the smallest possible sum of products representation of the logic circuit, that may not be the smallest possible representation of the circuit.

Let's get to it!

<h2>Two Variable Karnaugh Map: Basics</h2>

Going with the example above, it takes two Boolean variables as input (A and B), and gives one Boolean variable as output.  Having two input variables means we need a two variable Karnaugh map.

The first step to building the Karnaugh map is having a truth table for the input to output mappings.  For our example we'll use this truth table.  This is one of many truth tables that satisfies our equation, so we are working backwards a bit, but hopefully it still makes sense.  Usually you would start with the truth table and get a Boolean equation, not the other way around.
$latex
\\begin{array}{c|c|c}
A & B & Out\\\\
\\hline
0 & 0 & 0 \\\\
0 & 1 & 1 \\\\
1 & 0 & 0 \\\\
1 & 1 & 1 \\\\
\\end{array}
$

The next thing we do is make our karnaugh map by making a square 2x2 grid where one side of the square is the possible A values, the other side is the possible B values, and the contents of the grid cells are the values we want the formula to come out to be:

$latex
\\begin{array}{ccc}
& \\overline{B} & B \\\\
\\overline{A} & 0 & 1 \\\\
A & 0 & 1 \\\\
\\end{array}
$

Next, what you do is circle all 1's that are in groups of a power of two (one item or two items).  Doing that, we get this:

$latex
\\begin{array}{ccc}
& \\overline{B} & B \\\\
\\cline{3-3}
\\overline{A} & 0 & \\multicolumn{1}{|c|}{1} \\\\
A & 0 & \\multicolumn{1}{|c|}{1} \\\\
\\cline{3-3}
\\end{array}
$

Looking at what we circled, we can see that both values of $latex A$ are involved in our group, so $latex A$ doesn't matter to the output.  We can also see that $latex \\overline{B}$ is not involved in any places where there is a 1, so we can ignore that too.  All that leaves is $latex B$, which is our final, and most minimal answer.

That agrees with the Boolean algebra solution, but came without having to remember any identities.  Hooray!

<h2>Two Variable Karnaugh Map: Overlaps</h2>

If there were multiple groups, you would combine each group with OR to get the final answer.  Groups are also allowed to overlap!  For instance, let's look at this truth table to start out:

$latex
\\begin{array}{c|c|c}
A & B & Out\\\\
\\hline
0 & 0 & 0 \\\\
0 & 1 & 1 \\\\
1 & 0 & 1 \\\\
1 & 1 & 1 \\\\
\\end{array}
$

Turning that into a Karnaugh map, we get this:

$latex
\\begin{array}{ccc}
& \\overline{B} & B \\\\
\\overline{A} & 0 & 1 \\\\
A & 1 & 1 \\\\
\\end{array}
$

Next when it's time to circle our groups, we have two groups, and they overlap!  Here is the first group, which is the same as before:

$latex
\\begin{array}{ccc}
& \\overline{B} & B \\\\
\\cline{3-3}
\\overline{A} & 0 & \\multicolumn{1}{|c|}{1} \\\\
A & 1 & \\multicolumn{1}{|c|}{1} \\\\
\\cline{3-3}
\\end{array}
$

That group can be expressed as just B.

The other group is this:

$latex
\\begin{array}{ccc}
& \\overline{B} & B \\\\
\\overline{A} & 0 & 1 \\\\
\\cline{2-3}
A & \\multicolumn{1}{|c}{1} & \\multicolumn{1}{c|}{1} \\\\
\\cline{2-3}
\\end{array}
$

That group can be expressed as just A.

Lastly, we OR our groups together, aka we sum our products, and we get $latex A+B$ as an answer, which in other words is just A OR B.  Check out the truth table and you can see that it is indeed a truth table for OR!

<h2>Two Variable Karnaugh Map: Single Sized Groups</h2>

What if we don't have groups of two though, what if we only have groups of one?  Let's explore that real quick with the following truth table:

$latex
\\begin{array}{c|c|c}
A & B & Out\\\\
\\hline
0 & 0 & 1 \\\\
0 & 1 & 0 \\\\
1 & 0 & 0 \\\\
1 & 1 & 1 \\\\
\\end{array}
$

That becomes this Karnaugh map:

$latex
\\begin{array}{ccc}
& \\overline{B} & B \\\\
\\overline{A} & 1 & 0 \\\\
A & 0 & 1 \\\\
\\end{array}
$

We once again have two groups, but they are each of size one, which is totally ok!

The upper left group is expressed as $latex \\overline{AB}$, while the lower right group is expressed as $latex AB$.  We OR those two groups together to get the answer: $latex \\overline{AB} + AB$.  That's all there is to it.

<h2>Four Variable Karnaugh Map: Don't Care Values</h2>

Let's get a little more sophisticated and see how we would handle four input variables (We could go to three variables next but after learning two and four it'll be easy to see how to do three).  We will start with a truth table, but our truth table will only contain the input values we care about.  We'll omit the ones we don't care about.

$latex
\\begin{array}{c|c}
ABCD & Out\\\\
\\hline
0001 & 0 \\\\
0011 & 1 \\\\
0111 & 0 \\\\
1111 & 1 \\\\
\\end{array}
$

We'll put 1's and 0's into the Karnaugh map to match our truth table, but put x's where the output wasn't listed.  These are "don't care" values, where they could either be 0's or 1's, depending on whichever is more convinient for us when simplifying.  We are also going to change how we label the map a bit.

$latex
\\begin{array}{cccccc}
& & \\multicolumn{4}{c}{CD} \\\\
& & 00 & 01 & 11 & 10 \\\\
& 00 & x & 0 & 1 & x \\\\
AB & 01 & x & x & 0 & x \\\\
& 11 & x & x & 1 & x \\\\
& 10 & x & x & x & x \\\\
\\end{array}
$

In this case, even with the wild card don't care values, we still just have two 1 item groups, that we OR together to get the answer:

$latex \\overline{AB}CD+ABCD$

Note that we could factor out the CD and make it into the below, but then it would no longer be in a sum of products form.

$latex CD(\\overline{AB}+AB)$

You might also have noticed the strange ordering of the values in the table: 00, 01, 11, 10.  Normally doesn't 2 (10) come before 3 (11)?  It does, except in this case, we only want to change one variable at a time between neighboring cells.  Going from 01 to 11 means that the first bit changed, while going from 01 to 10 means that two bits changed, so isn't useful for us finding groups.  The order that the numbers are in is actually called Gray Code, named after Frank Grey (<a href="https://en.wikipedia.org/wiki/Gray_code" target="_blank">Wikipedia: Gray Code</a>).

<h2>Four Variable Karnaugh Map: Larger Groups</h2>

When dealing with karnaugh maps, like I said before, the groups have to be a size of a power of two, but interestingly it can be a power of two on each axis.  So valid groups include 4x1, 2x1, 2x2, 4x2 and others.  Let's take a look at one where we encounter a 2x2 group.

Let's start with the truth table:

$latex
\\begin{array}{c|c}
ABCD & Out\\\\
\\hline
0000 & 0 \\\\
0001 & 0 \\\\
0010 & 0 \\\\
0011 & 0 \\\\
0100 & 0 \\\\
0101 & 1 \\\\
0110 & 0 \\\\
0111 & 1 \\\\
1000 & 0 \\\\
1001 & 0 \\\\
1010 & 0 \\\\
1011 & 1 \\\\
1100 & 0 \\\\
1101 & 1 \\\\
1110 & 0 \\\\
1111 & 1 \\\\
\\end{array}
$

That gives us the Karnaugh map:

$latex
\\begin{array}{cccccc}
& & \\multicolumn{4}{c}{CD} \\\\
& & 00 & 01 & 11 & 10 \\\\
& 00 & 0 & 0 & 0 & 0 \\\\
AB & 01 & 0 & 1 & 1 & 0 \\\\
& 11 & 0 & 1 & 1 & 0 \\\\
& 10 & 0 & 0 & 1 & 0 \\\\
\\end{array}
$

There are two groups there.  The first is the 2x2 group below and is the intersection of where B is 1, and D is 1, so can be represented as BD.

$latex
\\begin{array}{cccccc}
& & \\multicolumn{4}{c}{CD} \\\\
& & 00 & 01 & 11 & 10 \\\\
& 00 & 0 & 0 & 0 & 0 \\\\
\\cline{4-5}
AB & 01 & 0 & \\multicolumn{1}{|c}{1} & \\multicolumn{1}{c|}{1} & 0 \\\\
& 11 & 0 & \\multicolumn{1}{|c}{1} & \\multicolumn{1}{c|}{1} & 0 \\\\
\\cline{4-5}
& 10 & 0 & 0 & 1 & 0 \\\\
\\end{array}
$

The second group is a 1x2 group that overlaps the first, and is where A,C and D are 1, but B can be either 0 or 1.  That makes it able to be represented as ACD.

$latex
\\begin{array}{cccccc}
& & \\multicolumn{4}{c}{CD} \\\\
& & 00 & 01 & 11 & 10 \\\\
& 00 & 0 & 0 & 0 & 0 \\\\
AB & 01 & 0 & 1 & 1 & 0 \\\\
\\cline{5-5}
& 11 & 0 & 1 & \\multicolumn{1}{|c|}{1} & 0 \\\\
& 10 & 0 & 0 & \\multicolumn{1}{|c|}{1} & 0 \\\\
\\cline{5-5}
\\end{array}
$

We combine those groups with OR to get the answer:

$latex BD+ACD$

<h2>Four Variable Karnaugh Map: Wrap Around</h2>

Interestingly, you can make groups by wrapping around the edges of the Karnaugh map, either horizontally or vertically.  Let's start with a truth table:

$latex
\\begin{array}{c|c}
ABCD & Out\\\\
\\hline
0000 & 0 \\\\
0001 & 0 \\\\
0010 & 0 \\\\
0011 & 1 \\\\
0100 & 0 \\\\
0101 & 0 \\\\
0110 & 0 \\\\
0111 & 0 \\\\
1000 & 0 \\\\
1001 & 0 \\\\
1010 & 0 \\\\
1011 & 1 \\\\
1100 & 0 \\\\
1101 & 0 \\\\
1110 & 0 \\\\
1111 & 0 \\\\
\\end{array}
$

That gives us the Karnaugh map:

$latex
\\begin{array}{cccccc}
& & \\multicolumn{4}{c}{CD} \\\\
& & 00 & 01 & 11 & 10 \\\\
& 00 & 0 & 0 & 1 & 0 \\\\
AB & 01 & 0 & 0 & 0 & 0 \\\\
& 11 & 0 & 0 & 0 & 0 \\\\
& 10 & 0 & 0 & 1 & 0 \\\\
\\end{array}
$

Here is the group highlighted below, which is represented as $latex \\overline{B}CD$, which is also the answer:

$latex
\\begin{array}{cccccc}
& & \\multicolumn{4}{c}{CD} \\\\
& & 00 & 01 & 11 & 10 \\\\
& 00 & 0 & 0 & \\multicolumn{1}{|c|}{1} & 0 \\\\
\\cline{5-5}
AB & 01 & 0 & 0 & 0 & 0 \\\\
& 11 & 0 & 0 & 0 & 0 \\\\
\\cline{5-5}
& 10 & 0 & 0 & \\multicolumn{1}{|c|}{1} & 0 \\\\
\\end{array}
$

<h2>Two Variable Karnaugh Map: Handling Redundant Info</h2>

If you are like me, you might be wondering - If Karnaugh maps can give you the minimal sum of products expression for a truth table, how does it deal with redundant information or solutions that are of equal size, so it's ambiguous which to choose?

For instance, Let's go with the truth table table below.  All other inputs not listed are "don't care" values.

$latex
\\begin{array}{c|c}
AB & Out\\\\
\\hline
00 & 0 \\\\
11 & 1 \\\\
\\end{array}
$

It's obvious that the output bit corresponds exactly to both A and B separately.  Which one does it choose, or does it make some more complex expression that involves both?

Here is the Karnaugh map:

$latex
\\begin{array}{ccc}
& \\overline{B} & B \\\\
\\overline{A} & 0 & x \\\\
A & x & 1 \\\\
\\end{array}
$

Well, the disambiguation comes up now that you - the pattern finder in the Karnaugh map - chooses between the two possible groups.

One answer, which is perfectly valid is the below, which is just $latex A$.

$latex
\\begin{array}{ccc}
& \\overline{B} & B \\\\
\\overline{A} & 0 & x \\\\
\\cline{2-3}
A & \\multicolumn{1}{|c}{x} & \\multicolumn{1}{c|}{1} \\\\
\\cline{2-3}
\\end{array}
$

The other answer, which is also perfectly valid, is the below, which is just $latex B$

$latex
\\begin{array}{ccc}
& \\overline{B} & B \\\\
\\cline{3-3}
\\overline{A} & 0 & \\multicolumn{1}{|c|}{x} \\\\
A & x & \\multicolumn{1}{|c|}{1} \\\\
\\cline{3-3}
\\end{array}
$

So, the disambiguation / simplification is left up to the user to choose, but yes, it still comes up with a minimal sum of products answer, and doesn't try to incorporate both bits into a more complex logic operation.

<h2>Other Notes</h2>

The act of turning a truth table into a logical expression is called logical synthesis, if you want to read more along those lines.

You might be wondering if because there is a sum of products form, if there is also a product of sums form?  There is in fact, and you can get that form from Karnaugh maps as well.  It may result in a more optimal logical expression.  More info on that here: <a href="http://cs.stackexchange.com/questions/35897/is-karnaugh-map-possible-for-maxterms" target="_blank">Is Karnaugh Map possible for Maxterms?</a>.

You might be tempted to bring a higher number of variables into the mix.  Be warned... adding a 5th variable makes the Karnaugh map into a 4x4x2 3d shape.  Adding a 6th variable makes it into a 4x4x4 cube.  Adding a 7th variable makes it into a 4x4x4x2 hypercube, and the pattern continues.

For higher numbers of inputs, people will often use a different algorithm instead, that I hope to write a post on before too long.  You can read about it here: <a href="https://en.wikipedia.org/wiki/Quine%E2%80%93McCluskey_algorithm" target="_blank">Wikipedia: Quine–McCluskey algorithm</a>

Lastly, you might be wondering, what do i do if i have M input bits, and N output bits?  How can I make a circuit or a set of instructions to generate a minimal logical expression to encompass that?

Well, one simple way is to handle each bit separately and have N Karnaugh maps each having M variables.  A problem there though is that computers do operations on multiple bits at the same time with most operations, so having each bit do it's calculations without considering sharing instructions with another bit leaves some efficiency on the table.

I'm not sure of any better algorithms currently, but I've asked on stack exchange so there may be some more info there by the time you read this:
<a href="http://cs.stackexchange.com/questions/50987/algorithms-for-logical-synthesis-of-multiple-output-bits" target="_blank">Algorithms for logical synthesis of multiple output bits?</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3766</wp:post_id>
		<wp:post_date><![CDATA[2015-12-20 17:10:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-21 01:10:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[simplifying-boolean-expressions-with-karnaugh-maps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495681471;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4281;}i:1;a:1:{s:2:"id";i:2473;}i:2;a:1:{s:2:"id";i:5556;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Making a Ray Traced Snake Game in Shadertoy</title>
		<link>http://blog.demofox.org/2016/01/16/making-a-ray-traced-snake-game-in-shadertoy/</link>
		<pubDate>Sun, 17 Jan 2016 05:59:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3860</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.shadertoy.com" target="_blank">Shadertoy.com</a> recently added multipass rendering, and one of the founders - iq - introduced the feature to us by (ab)using an off screen texture to store state from previous frames.  This was interesting because up until that point, you had to render each frame using only the current time, and current input from the user - you had no knowledge whatsoever of the past.  He ended up making a brick breaking game, which is pretty awesome.  You can see it here: <a href="https://www.shadertoy.com/view/MddGzf" target="_blank">Shadertoy: Bricks Game</a>.

I decided to follow that path too and make a snake game in shadertoy.  This is a high level overview of how the game works and various considerations that came up while creating the game.

<a href="https://www.shadertoy.com/view/XsdGDX" target="_blank">Play Shadertoy: Snake Game</a>

<img src="https://demofox2.files.wordpress.com/2016/01/snake.png"/>

<h2>Simulation vs. Presentation</h2>

When you start making a shadertoy shader, you have a single pixel shader program to work in.  In the past this is where you did all your work to display the image to the user.

Now with multipass rendering you have the option of creating an off screen buffer (up to four of them actually, but we only need one for this discussion), which you write a pixel shader program for as well.  This program is able to write to the off screen buffer by emitting pixels (like usual), but interestingly, it can also read from the same off screen buffer.  Since it can both read and write the image, this allows it to preserve state across frames.

Since this pixel shader has state (unlike the main on screen pixel shader), this is where all your "simulation code" has to go.  This is where you do all your game logic.  Strangely, even though this buffer is a full screen buffer, you only need to process as many pixels as you need for storage of your game state.  You can use the "discard" keyword for all other pixels, to get a quick "early out" in the pixel processing.

The on screen pixel shader is able to read this off screen buffer which stores game state, but it isn't able to write to it.  Because of this, the on screen pixel shader is essentially the visualization of the simulation.

<h2>Simulation Considerations</h2>

The simulation had quite a few considerations.  Some of these were a little mind bending at first, but made sense after thinking about it for a while.

Perhaps the single strangest thing about the simulation pixel shader program is this:  The pixel shader program can only write the value of the pixel that it represents.  Let's talk some details about what that means.

<b>Reading and Writing Variables</b>

In the snake game, there is a grid of 16x16 pixels, where each pixel stores the state of a game cell.  Besides this, there are four other pixels that store various pieces of game state - like what direction the snake is moving in, whether the snake is dead or not, and the location of the apple.

One complication of this is that to spawn an apple, we have to set the apple's location variable, but we also have to mark that an apple is in the specific grid cell where it should be.  What we essentially have to do is pick a random location for the apple to go to, and then we essentially have to say "if the pixel that this shader program is running for, is the specific grid cell where the apple should spawn at, then emit a pixel color that represents the necessary data to represent an apple".

That is kind of weird.  Even weirder perhaps, you have to remember that this pixel shader program is being run for several pixels per frame (once per variable you have in your state!), and they all have to be in agreement about the random position of the apple so that only one apple gets written to the board, so your random numbers have to be deterministic, yet still seemingly random to the player.

It's odd to think that the entire game simulation is running per variable in your simulation, but that is what is happening.

There's a trap that's easy to fall in here too, where you might be tempted to write code like this: "If the pixel that we are running the shader program for is the new location that the snake wants to move to, and that grid cell contains a snake body part, then set the game over game state variable flag to true"

The problem there is that our if statement guarantees that we are running the pixel shader program for a grid cell, not for the game over game state variable, so when we change the game over state variable, it doesn't get written out, since this pixel shader program instance isn't running for that variable.

I actually wrote that exact code and it took me a little while to figure out why the game wouldn't end when the snake crashed into itself, but it would end if it went out of bounds.  The code looked very similar, and was very simple, and one worked, but the other didn't.

The answer here is that instead of only running the logic for the grid cell that the snake head wants to enter, you have to make the logic run for all instances.  So, unfortunately that means a texture read to read the grid cell that the snake head wants to enter into.  That way, all instances have the information they need to run the same logic.

Technically, I guess it's only the "game over" variable that needs to do the texture read, but it's a lot easier and safer if you make all pixels run the same code deterministically.  Also, having each pixel run the same code is likely a performance gain.

You might be able to squeeze some more performance out of being clever, but it's real easy to bite you in the end too!  In this case, the snake game runs well enough (60fps on my machine, even with the camera edge on which is the worst case) so I'm calling it good.

<b>Numerical Problems</b>

One gotcha to be wary of is that since you are storing game state variables in pixels, is that every variable is a vec4 of floats, and that they can only store floating point values between 0 and 1.  So, if you are storing the position of a cell in a grid, you need to "normalize it" to be between 0 and 1.

Sadly, the floating point isn't really guaranteed to be a full 32 bit floating point number either, and might be an 8 bit fixed point number or similar on some platforms.  This makes it real easy to have numerical problems when you normalize your values into the 0 to 1 range.

<b>Random Apple Spawning</b>

When an apple is eaten (or the game is starting) an apple needs to spawn in a random location that isn't yet taken by the snake's body.  This would mean generating random numbers in a loop until we found an empty spot.  This could possibly be a perf problem for the pixel shader, possibly doing a large number of iterations, and possibly not finding a valid location by the time it ran out of it's fixed size for loop indices.

I went with a different solution.  When there is no apple spawned, the simulation generates a random position to put the apple at, and if it's empty, it puts the apple there.  If the position already was taken by a snake body part, it leaves the apple unspawned and tries again next frame.  With a suitably high frame rate (it runs at 60fps for me!) it ought to be able to find an empty spot pretty quickly, even if you have a really large snake.

<b>Frame Rate Independent Gameplay</b>

When making games on any platform, it's very easy to have problems with objects moving faster on machines that have higher FPS.  The typical way to solve this is to keep track of how much time has elapsed between frames, keeping a total as the frames progress, and when the total gets above a certain point, you do a game update and reset the total back to zero (or the remainder after subtracting your "tick time" out of the total).

This was luckily very easy to do in shadertoy as well.  There is a value you are provided called "iTimeDelta" which is how long the last frame took to render, in seconds.  I divide this number by how many ticks i want per second so that the total will always be between 0 and 1, and then add it into a state variable (which is stored in a pixel).  When doing the add, if the result is ever greater than 1, i do a tick, and reset it to 0.

Doing the tick just means moving the snake and handling whether the snake ate an apple, died, etc.

<b>Low Latency Input</b>

At first I had my input handling be handled inside of the tick.  This was a problem because the tick happens 12 times a second, which means if you want the snake to change directions, you better have the key pressed down during one of those ticks.  If you press it and then release it between ticks, the key press is lost and the snake doesn't change direction and you die.  This was extremely noticeable and made for really bad controls.

To solve this, I moved the key press handling to be OUTSIDE the tick, and had it be processed every frame.  Instead of changing the snake's direction right away though, I queued it up to be handled on the next tick.  This way, you can quickly tap keys and they are registered as they should be on the next tick.  The controls feel fine now and all is well.

<h2>Visualization & Rendering</h2>

The rendering of the snake game had fewer considerations than the simulation, but there are a couple things worth mentioning.

There are just a few parts to the rendering:
<ol>
	<li>If the ray hits the game board, make it look like the game board</li>
	<li>If the ray enters the small box of "play area" above the game board, it raytraces the contents of the game board</li>
	<li>If the ray misses everything, it does a lookup in a cube map texture to get the background</li>
	<li>If the ray hits anything, it uses some variables (normal, diffuse color, shinyness) from the collision to do the shading.  It also does a lookup in the cube map texture to do some environment mapping to give the impression that reflection is happening, even though it isn't</li>
</ol>

The second bullet item is the most interesting.  What the code does is find the grid cells that the ray enters and leaves the play area, and then it walks from the start to the end, checking each cell to see if it has anything in it, and if so, doing a raytrace test against it.

At first I used the Bresenham line algorithm to walk the grid cells, but when there were holes in some of my spheres in strange places, I realized my problem.  Bresenham isn't meant to draw to (visit) every grid cell that a line passes through - it is only meant to draw to the most important ones!

So, I replaced Bresenham with a grid traversal algorithm and all was well.

The game is rendered using real time raytracing, but it only does PRIMARY rays.  It doesn't do reflection, refraction or shadows.  This is because doing any of those things means raytracing against the game board (grid cells) more than once.  Since we have to do a texture lookup per grid cell we want to raytrace, this could equal a lot of texture lookups as you can imagine.  There is a hard limit to the number you can do (I'm pretty sure, although I don't know what it is, and it probably varies from machine to machine), so I wanted to try and not push things too hard, and just stayed with primary rays only.

<h2>That's All!</h2>

That's basically it.  Multipass rendering is an awesome feature in shadertoy.  On one hand it makes me a bit sad getting it, because people don't have to work within such tight constraints when doing the amazing things they do in shadertoy.  On the other hand though, I think multipass rendering really ought to empower people to do some much more amazing things than in previous days - including but not limited to games.

I really look forward to learning from what other people are doing to learn more about how to leverage multipass rendering in interesting ways.

I also look forward to contributing my own game and non game multipass shaders.  I have some ideas for both, keep an eye out (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3860</wp:post_id>
		<wp:post_date><![CDATA[2016-01-16 21:59:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-17 05:59:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[making-a-ray-traced-snake-game-in-shadertoy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="shadertoy"><![CDATA[Shadertoy]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495682306;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4038;}i:1;a:1:{s:2:"id";i:3883;}i:2;a:1:{s:2:"id";i:2370;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Failed Shadertoy &quot;Dust&quot; Game - Browsers Need To Compile Shaders Off the Main Thread!</title>
		<link>http://blog.demofox.org/2016/02/03/failed-shadertoy-dust-game-browsers-need-to-compile-shaders-off-the-main-thread/</link>
		<pubDate>Wed, 03 Feb 2016 15:23:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3883</guid>
		<description></description>
		<content:encoded><![CDATA[I was working on a <a href="https://dan-ball.jp/en/javagame/dust/" target="_blank">Dust Game</a> on shadertoy for a few weeks and got a decent amount of the way through it.  Unfortunately I hit a snag.

<img src="https://demofox2.files.wordpress.com/2016/02/dust.png"/>

There's a sad fact that browsers compile WebGL shaders on the main thread.  If ever WebGL blocks for too long, browsers consider WebGL hung and reports to the user that WebGL crashed.

The shaders for my game got complex enough that they were hitting the timeout while compiling, even though I wasn't even close to being finished.  So, I simplified a bit and published it unfinished, thinking that perhaps when WebGL 2.0 comes out this summer, I can revisit it.

Unfortunately, but totally understandably, different people have different machines in the wild, and some people have computers that take longer to compile shaders than my computer does, which means that plenty of people were still "crashing".  Because of this, the shadertoy people moved my shader back to draft/private until I simplified it more since crashes are no good, even if they are not realy real crashes in the normal sense.  You can still see it by direct link here if you are interested: <a href="https://www.shadertoy.com/view/MdGGzh" target="_blank">Shadertoy: Dust Sim Sandbox (Incomplete)</a>

I've spent enough time on this thing so I'm going to leave it private for now, but I really think this shows a fundamental problem with WebGL.

Since the shaders compile on the main thread (apparently in many browsers if not all!), and detect a crash/hang by timing out, it means that when you write WebGL code, you really have to either keep things super simple in your shaders, or you have to be ok with having some amount of users experiencing "crashes" when the shader compiles time out on their machine.

In other words, you have to choose between innovation and stability.

That doesn't really bode well for a platform like WebGL that basically is all about innovation!  I'm sure this same problem plagues WebVR, which means that if you want to make a WebVR experience that works well on all machines, you better not do anything very complex :P

Despite this failure, I did succeed in making a minesweeper game though, check it out here: <a href="https://www.shadertoy.com/view/XdK3zz" target="_blank">Shadertoy: Minesweeper</a>

<img src="https://demofox2.files.wordpress.com/2016/02/minesweeper.png"/>

Anyways, onto the next next shadertoy!  I think I'm going to try to make one of those side view physics based car/motorcycle/bicycle hill climbing games.

<h2>Update!</h2>

It turns out my understanding of the shader compiling process was a bit simplified.  Read the link below for the full scoop, but in the end, the problem remains, because there doesn't seem to be any way to query the status of the async work, so you seem to have to guess and hope you have enough work to do.  In the case of shadertoy, there is no geometry to load, or things of that nature, so that makes it especially difficult to deal with.

<a href="http://toji.github.io/shader-perf/" target="_blank">Asynchronous Shader Compilation</a>

Thanks to <a href="https://twitter.com/tuan_kuranes" target="_blank">@tuan_kuranes</a> for the better information (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3883</wp:post_id>
		<wp:post_date><![CDATA[2016-02-03 07:23:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-03 15:23:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[failed-shadertoy-dust-game-browsers-need-to-compile-shaders-off-the-main-thread]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<category domain="category" nicename="shadertoy"><![CDATA[Shadertoy]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495535112;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3860;}i:1;a:1:{s:2:"id";i:4018;}i:2;a:1:{s:2:"id";i:2370;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How and Why Cleaning Up Code or Processes Gives Multiplicative Benefits</title>
		<link>http://blog.demofox.org/2016/02/09/how-and-why-cleaning-up-code-or-processes-gives-multiplicative-benefits/</link>
		<pubDate>Tue, 09 Feb 2016 20:41:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3904</guid>
		<description></description>
		<content:encoded><![CDATA[The engineering manager of my team Paul Haban (<a href="https://twitter.com/XpresoAdct" target="_blank">@XpresoAdct</a>) mentioned to me once in passing that when you fix a problem, you often get multiplicative returns beyond the initial problem you intended to fix.

This is an idea from <a href="http://www.everydaykanban.com/what-is-kanban/" target="_blank">Kanban</a>, and while it was in my best interest to believe this to be true, since it allowed to refactor personally painful inherited systems and code, it felt like a sort of mysterious voodoo and I wasn't really a believer.

I recently experienced it first hand though.  I refactored something and the benefits started multiplying.  People from distant sub teams came out of the woodwork very excited to hear about my changes.  Of course, this happens from time to time, and it's a lucky break to get benefits beyond what you were planning, but looking at it in hindsight, there are some really good reasons why this happened.

This applies to source code, processes, etc, but for simpler language, we'll focus on this being about code.

<h2>What is Bad Code?</h2>

Firstly, engineering is often about trade offs.  You might see that solving a problem one way gives you certain benefits, while solving a problem a different way gives you other benefits.  You weigh those things, talk to those affected to get their opinions in case you are missing information, and then you make the best decision you can with the information you have.

Sometimes you make a decision based on the current state of things, but then the situation changes, and the choices you make turn out to be bad choices for the new direction that things have taken.  Now your code has turned bad.

Also of course, people sometimes people just make bad choices.  We are human, we are learning, it's how it goes.  Sometimes people just make bad code to begin with.

A deeper chat of this sort of thing can be found here: <a href="http://blog.demofox.org/2015/05/24/no-bad-code-creeping-normality-and-social-structure-code-organization/">No Bad Code, Creeping Normality and Social Structure Code Organization</a>

But ultimately, here is what makes code "bad":  If it works less than ideally for someone or some thing that has to interact with it, it is on the spectrum of "bad code", ranging from terrible code, to code that could be cleaned up, but doesn't really matter enough to fix.

It also may be that code is bad for one set of interactions, while it is perfectly ideal for another set of interactions.  This is the result of the trade offs weighed when solving the problem.  That may just be a fact of life that you either can not really do anything about, or that in practical terms, you cannot do anything about due to cost versus reward analysis or whatever else.

Lastly, like in my case, you may have inherited some bad code from someone else.  In this case, it could just be that you have different goals, or that you prefer a different trade off (pain flavor if you will) than the previous maintainer.

<h2>How Does Bad Code Affect Others</h2>

By definition, bad code is code that is less than ideal for a person, or code that has to interact with it.

That means that when they interact with the code two things happen:
<ol>
	<li>There are work arounds that have to be done to be able to get what is needed from the system.</li>
	<li>There may be perfectly reasonable things that interactions with the system may want to do that are not possible, or not practically possible with real world constraints.</li>
</ol>

The more central this bad code is, and the more people that interact with it, the more that there is both workarounds, and desired functionality that can't be realized.

<h2>Refactoring</h2>

If you can legitimately refactor some code such that the result is decided to be better than where things are at now - say, there is less pain overall, or perhaps the pain is more concentrated on a group that nobody likes (hehe) - making that happen will make the code less bad.

Again, bad code is a spectrum, so it's likely you'll hit situations where the code will never be perfectly good code, but making it less bad is a good thing.

When you make code less bad, however you measure that, it means that the workarounds that needed to go up can start being taken down (simpler code, less maintenance, fewer things that can go wrong), and also, you open up the doorway for the improved functionality that was not previously practical.

Another way to think of it is that the optimist will say that fixing things gives multiplicative benefits. The cynic (realist?) on the other hand says that the less than ideal code has already incurred both a one time cost to the people that have interfaced with it, as well as a continual maintenance cost that is incurred by it existing, and that those costs are or were avoidable.

To me, this explains in a very down to earth way how the "voodoo" of multiplicative benefits actually comes about.  It also shows a bit of how continual minor improvement really does add up (the main idea of Kanban), even when not taking into account things like the compound interest model (ie, saving you effort now allows you to save future effort sooner).

Go clean up some code, or fix a broken process.  You will likely be surprised at how much benefit you get out of it!

I miss anything or you have a differing view?  Let me know!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3904</wp:post_id>
		<wp:post_date><![CDATA[2016-02-09 12:41:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-09 20:41:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[how-and-why-cleaning-up-code-or-processes-gives-multiplicative-benefits]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="gamedev-commentary"><![CDATA[Gamedev Commentary]]></category>
		<category domain="category" nicename="people-skills"><![CDATA[People Skills]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1494408998;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2460;}i:1;a:1:{s:2:"id";i:5116;}i:2;a:1:{s:2:"id";i:78;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Normalized Vector Interpolation TL;DR</title>
		<link>http://blog.demofox.org/2016/02/19/normalized-vector-interpolation-tldr/</link>
		<pubDate>Fri, 19 Feb 2016 20:29:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3967</guid>
		<description></description>
		<content:encoded><![CDATA[My blog posts often serve as "external memory", allowing me to go back and remember how specific things work months or years after I spent the time to learn about them.

So far it's worked amazingly well!  Instead of having a hazy memory of "oh um... i did bicubic interpolation once, how does that work again?" I can go back to my blog post, find the details with an explanation and simple working code, and can very rapidly come back up to speed.  I seriously recommend keeping a blog if you are a programmer or similar.  Plus, you know you really understand something when you can explain it to someone else, so it helps you learn to a deeper level than you would otherwise.

Anyways, this is going to be a very brief post on vector interpolation that I want to commit to my "external memory" for the future.

This is an answer to the question... "How do I interpolate between two normalized vectors?" or "How do i bilinearly or bicubically interpolate between normalized vectors?"

As an answer I found the three most common ways to do vector interpolation:
<ul>
	<li>Slerp - short for "spherical interpolation", this is the most correct way, but is also the costliest. In practice you likely do not need the precision.</li>
	<li>lerp - short for "linear interpolation", you just do a regular linear interpolation between the vectors and use that as a result.</li>
	<li>nlerp - short for "normalized linear interpolation" you just normalize the result of a lerp. Useful if you need your interpolated vector to be a normalized vector.</li>
</ul>

In practice, lerp/nlerp are pretty good at getting a pretty close interpolated direction so long as the angle they are interpolating between is sufficiently small (say, 90 degrees), and nlerp is of course good at keeping the right length, if you need a normalized vector. If you want to preserve the length while interpolating between non normalized vectors, you could always interpolate the length and direction separately.

Here is an example of the three interpolations on a large angle. Dark grey = start vector, light grey = end vector. Green = slerp, blue = lerp, orange = nlerp.
<img src="https://demofox2.files.wordpress.com/2016/02/largeangle-1.png"/>

Here is an example of a medium sized angle (~90 degrees) interpolating the same time t between the angles.
<img src="https://demofox2.files.wordpress.com/2016/02/medangle-1.png"/>

Lastly, here's a smaller angle (~35 degrees). You can see that the results of lerp / nlerp are more accurate as the angle between the interpolated vectors gets smaller.
<img src="https://demofox2.files.wordpress.com/2016/02/smangle-1.png"/>

If you do lerp or nlerp, you can definitely do both bilinear as well as bicubic interpolation since they are just regularly interpolated values (and then optionally normalized)

Using slerp, you can do bilinear interpolation, but I'm not sure how bicubic would translate.

I miss something important?  Leave a comment and let me know!

<h2>Code</h2>

Here's some glsl code for slerp, lerp and nlerp. This code is for vec2's specifically but the same code works for vectors of any dimension.
[code language="cpp"]
//============================================================
// adapted from source at:
// https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/
vec2 slerp(vec2 start, vec2 end, float percent)
{
     // Dot product - the cosine of the angle between 2 vectors.
     float dot = dot(start, end);     
     // Clamp it to be in the range of Acos()
     // This may be unnecessary, but floating point
     // precision can be a fickle mistress.
     dot = clamp(dot, -1.0, 1.0);
     // Acos(dot) returns the angle between start and end,
     // And multiplying that by percent returns the angle between
     // start and the final result.
     float theta = acos(dot)*percent;
     vec2 RelativeVec = normalize(end - start*dot); // Orthonormal basis
     // The final result.
     return ((start*cos(theta)) + (RelativeVec*sin(theta)));
}

vec2 lerp(vec2 start, vec2 end, float percent)
{
     return mix(start,end,percent);    
}

vec2 nlerp(vec2 start, vec2 end, float percent)
{
     return normalize(mix(start,end,percent));    
}
[/code]

<h2>Links</h2>

An interactive shadertoy demo I made, that is also where the above images came from:<br>
<a href="https://www.shadertoy.com/view/4sV3zt" target="_blank">Shadertoy: Vector Interpolation</a>  

Further discussion on this topic may be present here:<br>
<a href="http://computergraphics.stackexchange.com/questions/2072/interpolating-vectors-on-a-grid" target="_blank">Computer Graphics Stack Exchange: Interpolating vectors on a grid</a>  

Good reads that go deeper:
<a href="https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/" target="_blank"/>Math Magician – Lerp, Slerp, and Nlerp</a><br>
<a href="http://number-none.com/product/Understanding%20Slerp,%20Then%20Not%20Using%20It/" target="_blank"/>Understanding Slerp, Then Not Using It</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3967</wp:post_id>
		<wp:post_date><![CDATA[2016-02-19 12:29:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-19 20:29:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[normalized-vector-interpolation-tldr]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="shadertoy"><![CDATA[Shadertoy]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495716801;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5413;}i:1;a:1:{s:2:"id";i:4072;}i:2;a:1:{s:2:"id";i:2434;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>G-Buffer Upsizing</title>
		<link>http://blog.demofox.org/2016/02/21/g-buffer-upsizing/</link>
		<pubDate>Sun, 21 Feb 2016 16:07:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=3986</guid>
		<description></description>
		<content:encoded><![CDATA[The other day I had a thought:

Rendering smaller than full screen images is super helpful for performance, but upsizing an image results in pretty bad quality vs a full resolution render.

What if instead of upsizing the final rendered image, we upsized the values that were used to shade each pixel?

In other words, what if we rendered a scene from a less than full resolution g-buffer?

I was thinking that could be useful in doing ray based graphics, not having to trace or march quite so many rays, but also perhaps it could be useful for things like reflections where a user isn't likely to notice a drop in resolution.

I'm sure I'm not the first to think of this, but I figured I'd explore it anyways and see what I could see.

I made an interactive shadertoy demo to explore this if you want to see it first hand:
<a href="https://www.shadertoy.com/view/ldG3zV" target="_blank">Shadertoy: G-Buffer Upsizing</a>

<h2>Result</h2>
In short, it does look better in a lot of ways because the normals, uv coordinates and similar parameters interpolate really well, but the edges of shapes are aliased really bad (jaggies).

Check out the images below to see what i mean.  The first image is a full sized render.  The second image is a 1/4 sized render (half x and half y resolution).  The third image is a 1/16th sized render (quarter x and quarter y resolution)

<img src="https://demofox2.files.wordpress.com/2016/02/normal.png">
<img src="https://demofox2.files.wordpress.com/2016/02/upsizedmid.png">
<img src="https://demofox2.files.wordpress.com/2016/02/upsized.png">

For comparison, here's a 1/4 sized and 1/16 sized render upsized using bicubic IMAGE interpolation instead of g-buffer data interpolation:

<img src="https://demofox2.files.wordpress.com/2016/02/bcmed.png"/>
<img src="https://demofox2.files.wordpress.com/2016/02/bcsm.png"/>

<h2>Details & More Information</h2>

Despite the aliased results at 1/16th render size, this seems like it may be a reasonable technique at larger render sizes, depending on the level of quality you need.  Doing half vertical or half horizontal resolution looks very close to the full sized image for instance.  The edges are a tiny bit more aliased along one direction, but otherwise things seem decent:

<img src="https://demofox2.files.wordpress.com/2016/02/halfhoriz.png"/>

Since the g-buffer has only limited space, you will probably want to bit pack multiple fields together in the same color channels.  When you do that, you throw out the possibility of doing hardware interpolation unfortunately, because it interpolates the resulting bit packed value, not the individual fields that you packed in.

Even when doing the interpolation yourself in the pixel shader, for the most part you can really only store information that interpolates well.  For instance, you could store a diffuse R,G,B color, but you wouldn't want to store and then interpolate a material index.  This is because you might have material index 10 (say it's blue) next to material index 0 (say it's green), and then when you interpolate you could end up with material index 5 which may be red.  You'd get red between your blue and green which is very obviously wrong.

In my demo I did have a material index per pixel, but i just used nearest neighbor for that particular value always.  To help the appearance of aliasing, I also stored an RGB diffuse color that i interpolated.

I stored the uvs in the g-buffer and sampled the textures themselves in the final shader though, to make sure and get the best texture information I could.  This makes textures look great at virtually any resolution and is a lot of the reason why the result looks as good as it does IMO.

The fact that normals interpolate is a good thing, except when it comes to hard edges like the edge of the cube, or at the edge of any object really.  In the case of the cube edge, it smooths the edge a little bit, making a surface that catches specular lighting and so highlights itself as being incorrect (!!).  In the case of the edge of regular objects, a similar thing happens because it will interpolate between the normal at the edge of the object and the background, making a halo around the object which again catches specular lighting and highlights itself as being incorrect.

I think it could be interesting or fruitful to explore using edge detection to decide when to blend or not, to help the problem with normals, or maybe even just some edge detection based anti aliasing could be nice to make the resulting images better.  The depth (z buffer value) could also maybe be used to help decide when to interpolate or not, to help the problem of halos around every object.

Interestingly, bicubic interpolation actually seems to enhance the problem areas compared to bilinear.  It actually seems to highlight areas of change, where you would actually want it to sort of not point out the problems hehe.  I think this is due to <a href="https://demofox2.files.wordpress.com/2016/02/halfhoriz.png" target="_blank">Runge's phenomenon</a>.  Check out the depth information below to see what i mean.  The first is bilinear, the second is bicubic:

<img src="https://demofox2.files.wordpress.com/2016/02/depthlin.png"/>
<img src="https://demofox2.files.wordpress.com/2016/02/depthcubic.png"/>

One final side benefit of this I wanted to mention, is that if you are doing ray based rendering, where finding the geometry information per pixel can be time consuming, you could actually create your g-buffer once and re-shade it with different animated texture or lighting parameters, to give you a constant time (and very quick) render of any scene of any complexity, so long as the camera wasn't moving, and there were no geometry changes happening.  This is kind of along the same lines as the very first post I made to this blog about 4 years ago, which caches geometry in screen space tiles, allowing dirty rectangles to be used (<a href="http://blog.demofox.org/2012/05/03/morirt-pixel-and-geometry-caching-to-aid-real-time-raytracing/">MoriRT: Pixel and Geometry Caching to Aid Real Time Raytracing</a>).

Anyone else go down this path and have some advice, or have any ideas on other things not mentioned? (:

Next up I think I want to look at temporal interpolation of g-buffers, to see what sort of characteristics that might have. (Quick update, the naive implementation of that is basically useless as far as i can tell: <a href="https://www.shadertoy.com/view/XdGGDy" target="_blank">G-Buffer Temporal Interpolation</a>).

<h2>Related Stuff</h2>

On shadertoy, casty mentioned that if you have some full res information, and some less than full res information, you can actually do something called "Joint Bilateral Upsampling" to get a better result.

Give this paper a read to learn more!
<a href="http://johanneskopf.de/publications/jbu/paper/FinalPaper_0185.pdf" target="_blank">Joint Bilateral Upsampling</a> 

It turns out someone has already solved this challenge with great success.  They use "the MSAA trick" to get more samples at the edges.  Check out ~page 38:
<a href="http://advances.realtimerendering.com/s2015/aaltonenhaar_siggraph2015_combined_final_footer_220dpi.pdf">GPU-Driven Rendering Pipelines</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3986</wp:post_id>
		<wp:post_date><![CDATA[2016-02-21 08:07:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-21 16:07:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[g-buffer-upsizing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<category domain="category" nicename="shadertoy"><![CDATA[Shadertoy]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495615173;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2370;}i:1;a:1:{s:2:"id";i:2405;}i:2;a:1:{s:2:"id";i:3860;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GPU Texture Sampler Bezier Curve Evaluation</title>
		<link>http://blog.demofox.org/2016/02/22/gpu-texture-sampler-bezier-curve-evaluation/</link>
		<pubDate>Tue, 23 Feb 2016 05:30:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4018</guid>
		<description></description>
		<content:encoded><![CDATA[Below is a paper I submitted to <a href="http://jcgt.org">jcgt.org</a> that unfortunately did not get accepted.  Maybe next time!

The main idea of this paper is that bilinear interpolation can be equivalent to the De Casteljau algorithm, which means that if you set up a texture in a specific way, and sample from it at specific texture coordinates, that it will in fact give you Bezier curve points as output!  It scales up for higher dimensional textures, as well as higher order curves.

The image below shows this in action for a cubic Bezier curve (3 control points) being stored and recalled from a 2x2 texture (there is actually a curve stored in each color channel).

<img src="https://demofox2.files.wordpress.com/2016/02/image.png"/>

This image is from an extension linked to lower down which applies the technique to surfaces and volumes:
<img src="https://demofox2.files.wordpress.com/2016/12/teaser.png"/>

The primary feedback from the reviewers and editor was that:
<ul>
	<li>It was an interesting technique and they thought it was a paper worth reading.</li>
	<li>The usage case was fairly limited though - basically only when your are compute bound in your shader program, and have some curve calculations to offload to the texture sampler.  Or if you are already using a lookup texture and would benefit from fewer instructions and smaller lookup textures.</li>
	<li>It could have been shorter due to the writing being shorter, but also it could have been less thorough.  For instance, it didn't need to show equivalence to both the De Casteljau's algorithm as well as Bernstein polynomials, since it's already known that those are equivalent.</li>
	<li>They wanted some more performance details</li>
</ul>

I agree with the feedback, and don't feel like taking the time to change and resubmit or submit else where, so I'm sharing it here on my blog.  I hope you enjoy it and find it interesting (:

Here is the paper:
<a href="https://demofox2.files.wordpress.com/2016/02/GPUBezier2016.pdf" target="_blank">GPUBezier2016.pdf</a>

Here is the supplemental materials (opengl and webgl source code):
<a href="https://demofox2.files.wordpress.com/2016/02/SupplementalMaterials.zip" target="_blank">SupplementalMaterials.zip</a>

Here is the webgl demo from the supplemental materials, hosted on my site:
<a href="http://demofox.org/GPUBezier2016/" target="_blank">GPU Efficient Texture Based Bezier Curve Evaluation</a>

Here are some working shadertoy demos of the technique:
<a href="https://www.shadertoy.com/view/MtSXzW" target="_blank">Shadertoy: Mystery Curves - Quadratic</a>
<a href="https://www.shadertoy.com/view/MtSSRD" target="_blank">Shadertoy: Mystery Curves - Cubic</a>
<a href="https://www.shadertoy.com/view/llSSRD" target="_blank">Shadertoy: Mystery Curves - Quartic</a>
<a href="https://www.shadertoy.com/view/MlSSRD" target="_blank">Shadertoy: Mystery Curves - Quintic</a>

<h2>Extensions</h2>
Continuations of this work:
<ul>
<li><a href="http://blog.demofox.org/2016/12/08/evaluating-polynomials-with-the-gpu-texture-sampler/">Evaluating Polynomials with the GPU Texture Sampler</a> - Extends this to all polynomials instead of just Bernstein polynomials. This is made possible by the fact that you can convert any power basis polynomial to a Bernstein basis polynomial.</li>
<li><a href="http://blog.demofox.org/2016/12/16/analyticsurfacesvolumesgpu/"/>Evaluating Points on Analytical Surfaces and in Analytical Volumes Using the GPU Texture Sampler</a> - Extends this to surfaces and volumes.</li>
<li><a href="http://blog.demofox.org/2017/05/07/improved-storage-space-efficiency-of-gpu-texture-sampler-bezier-curve-evaluation/">Improved Storage Space Efficiency of GPU Texture Sampler Bezier Curve Evaluation</a> - Explores packing more curves into fewer pixels.</li>
</ul>

<h2>Failed Experiments</h2>
Continuations that didn't work out:
<ul>
<li><a href="http://blog.demofox.org/2016/12/10/failed-experiment-the-gpu-texture-sampler-is-turing-complete-but-that-fact-is-pretty-useless/">Failed Experiment: The GPU Texture Sampler is Turing Complete But That Fact is Pretty Useless</a></li>
</ul>

What are your thoughts? Is this cool? Is it lame? Got some ideas to improve it?  Leave a comment! (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4018</wp:post_id>
		<wp:post_date><![CDATA[2016-02-22 21:30:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-02-23 05:30:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[gpu-texture-sampler-bezier-curve-evaluation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<category domain="category" nicename="shadertoy"><![CDATA[Shadertoy]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495687352;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5413;}i:1;a:1:{s:2:"id";i:5276;}i:2;a:1:{s:2:"id";i:2754;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fast Voronoi Diagrams and Distance Field Textures on the GPU With the Jump Flooding Algorithm</title>
		<link>http://blog.demofox.org/2016/02/29/fast-voronoi-diagrams-and-distance-dield-textures-on-the-gpu-with-the-jump-flooding-algorithm/</link>
		<pubDate>Tue, 01 Mar 2016 06:14:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4038</guid>
		<description></description>
		<content:encoded><![CDATA[The image below is called a Voronoi diagram.  The circles show you the location of the seeds and the color of each pixel represents the closest seed to that pixel.  The value of this diagram is that at any point on the image, you can know which seed (point) is the closest  to that pixel. It's basically a pre-computed "closest object" map, which you can imagine some uses for I bet.

<img src="https://demofox2.files.wordpress.com/2016/02/vornoi.png"/>

Voronoi diagrams aren't limited to just points as seeds though, you can use any shape you want.

<img src="https://demofox2.files.wordpress.com/2016/02/voronoi2.png"/>

One way Voronoi diagrams can be useful is for path finding because they are dual to (the equivelant of) Delauny triangulation (More info at <a href="http://gamedevelopment.tutsplus.com/tutorials/how-to-use-voronoi-diagrams-to-control-ai--gamedev-11778" target="_blank">How to Use Voronoi Diagrams to Control AI</a>).

Another way they can be useful is in generating procedural content, like in these shadertoys:
<a href="https://www.shadertoy.com/view/MsXGzM" target="_blank">Shadertoy: Voronoi - rocks</a>
<a href="https://www.shadertoy.com/view/lsjGWD" target="_blank">Shadertoy: Voronoi noises</a>

Another really cool usage case of Voronoi diagrams is in creating what is called the "Distance Transform".  The distance transform calculates and stores the distance from each pixel to the closest seed, whichever one that may be.  Doing that, you may get an image like this (note that the distance is clamped at a maximum and mapped to the 0 to 1 range to make this image).

<img src="https://demofox2.files.wordpress.com/2016/02/DistanceTexture.png"/>

That is what is called a distance texture and can be used for a very cool technique where you have texture based images that can be zoomed into / enlarged quite a ways before breaking down and looking bad.  The mustache in the image below was made with a 32x16 single channel 8bpp image for instance! (ignore the white fog, this was a screenshot from inside a project I was working on)

Distance field textures are the next best thing to vector graphics (great for scalable fonts in games, as well as decals!) and you can read about it here: <a href="http://blog.demofox.org/2014/06/30/distance-field-textures/">blog.demofox.org: Distance Field Textures</a>

<img src="https://demofox2.files.wordpress.com/2014/06/MoustacheSmooth_64x64.png"/>

Now that you know what Voronoi diagrams and distance transforms are used for, let's talk about one way to generate them.

<h2>Jump Flooding Algorithm (JFA)</h2>

When you want to generate either a Voronoi diagram or a distance transform, there are algorithms which can get you the exact answer, and then there are algorithms which can get you an approximate answer and generally run a lot faster than the exact version.

The jump flooding algorithm is an algorithm to get you an approximate answer, but seems to have very little error in practice.  It also runs very quickly on the GPU.  It runs in constant time based on the number of seeds, because it's execution time is based on the size of the output texture - and is based on that logarithmically.

Just a real quick note before going into JFA.  If all else fails, you could use brute force to calculate both Voronoi diagrams as well as distance transforms.  You would just loop through each pixel, and then for each pixel, you would loop through each seed, calculate the distance from the pixel to the seed, and just store the information for whatever seed was closest.  Yes, you even do this for seed pixels.  The result will be a distance of 0 to the seed :P

Back to JFA, JFA is pretty simple to program, but understanding why it works may take a little bit of thinking.

Firstly you need to prepare the N x N texture that you want to run JFA on.  It doesn't need to be a square image but let's make it square for the explanation.  Initialize the texture with some sentinel value that means "No Data" such as (0.0, 0.0, 0.0, 0.0).  You then put your seed data in.  Each pixel that is a seed pixel needs to encode it's coordinate inside of the pixel.  For instance you may store the fragment coordinate bitpacked into the color channels if you have 32 bit pixels (x coordinate in r,g and y coordinate in b,a). Your texture is now initialized and ready for JFA!

JFA consists of taking log2(N) steps where each step is a full screen pixel shader pass.

In the pixel shader, you read samples from the texture in a 3x3 pattern where the middle pixel is the current fragment.  The offset between each sample on each axis is 2^(log2(N) - passIndex - 1), where passIndex starts at zero.

That might be a bit hard to read so let's work through an example.

Let's say that you have an 8x8 texture (again, it doesn't need to be square, or even power of 2 dimensions, but it makes it easier to explain), that has a 16 bit float per RGBA color channel.  You fill the texture with (0.0, 0.0, 0.0, 0.0) meaning there is no data.  Let's say that you then fill in a few seed pixels, where the R,G channels contain the fragment coordinate of that pixel.  Now it's time to do JFA steps.

The first JFA step will be that for each pixel you read that pixel, as well as the rest of a 3x3 grid with offset 4.  In total you'd read the offsets:
(-4.0, -4.0), (0.0, -4.0), (4.0, -4.0),
(-4.0,  0.0), (0.0,  0.0), (4.0,  0.0),
(-4.0,  4.0), (0.0,  4.0), (4.0,  4.0)

For each texture read you did, you calculate the distance from the seed it lists inside it (if the seed exists aka, the coordinate is not 0,0), and store the location of the closest seed int the output pixel (like, store the x,y of the seed in the r,g components of the pixel).

You then do another JFA step with offset 2, and then another JFA step with offset 1.

JFA is now done and your image will store the Voronoi diagram, that's all!  If you look at the raw texture it won't look like anything though, so to view the Voronoi diagram, you need to make a pixel shader where it reads in the pixel value, deocdes it to get the x,y of the closest seed, and then uses that x,y somehow to generate a color (use it as a seed for a prng for instance).  That color is what you would output in the pixel shader, to view the colorful Voronoi diagram.

To convert the Voronoi diagram to a distance transform, you'd do another full screen shader pass where for each pixel you'd calculate the distance from that pixel to the seed that it stores (the closest seed location) and write the distance as output.  If you have a normalized texture format, you're going to have to divide it by some constant and clamp it between 0 and 1, instead of storing the raw distance value.  You now have a distance texture!

<h2>More Resources</h2>

I originally came across this algorithm on shadertoy: <a href="https://www.shadertoy.com/view/4syGWK" target="_blank">Shadertoy: Jump Flooding</a>.  That shadertoy was made by <a href="https://twitter.com/paniq" target="_blank">@paniq</a> who is working on some pretty interesting stuff, that you can check out both on shadertoy and twitter.

The technique itself comes from this paper, which is a good read: <a href="http://www.comp.nus.edu.sg/~tants/jfa/i3d06.pdf" target="_blank">Jump Flooding in GPU with Applications to Voronoi Diagram and Distance Transform</a>

<h2>Extensions</h2>

While JFA as explained is a 2D algorithm, it could be used on volume textures, or higher dimensions as well.  Higher dimensions mean more texture reads, but it will still work.  You could render volume textures with raymarching, using the distance information as a hint for how far you could march the ray each step.

Also, I've played around with doing 5 reads instead of 9, doing a plus sign read instead of a 3x3 grid.  In my tests it worked just as well as regular JFA, but I'm sure in more complex situations there are probably at least minor differences.  Check the links section for a shadertoy implementation of this.  I also tried doing a complete x axis JFA followed by a y axis JFA.  That turned out to have a LOT of errors.

You can also weight the seeds of the Voronoi diagram.  When you are calculating the distance from a pixel to a seed point, you use the seed weight to multiply and/or add to the distance calculated. You can imagine that perhaps not all seeds are created equal (maybe some AI should avoid something more than something else), so weighting can be used to achieve this.

<h2>Shadertoys</h2>

Here are some shadertoys I made to experiment with different aspects of this stuff.  You can go check them out to see working examples of JFA in action with accompanying glsl source code.

<a href="https://www.shadertoy.com/view/Mdy3DK" target="_blank">Jump Flood Algorithm: Points</a> - Point Seeds
<a href="https://www.shadertoy.com/view/lsKGDV" target="_blank">Jump Flood Algorithm: Shapes</a> - Shape Seeds
<a href="https://www.shadertoy.com/view/4dK3WK" target="_blank">Jump Flood Algorithm: Weight Pts</a> - Multiplicative Weighting
<a href="https://www.shadertoy.com/view/XdV3WK" target="_blank">Jump Flood Algorithm: Add Wt Pts</a> - Additive Weighting
<a href="https://www.shadertoy.com/view/Mdy3D3" target="_blank">Separable Axis JFA Testing</a> - Does 5 reads instead of 9, also shows how separating axis completely fails.

Here is a really interesting shadertoy that shows a way of modifying a Vornoi diagram on the fly: <a href="https://www.shadertoy.com/view/ldGGWK" target="_blank">Shadertoy: zoomable, stored voronoi cells</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4038</wp:post_id>
		<wp:post_date><![CDATA[2016-02-29 22:14:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-01 06:14:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[fast-voronoi-diagrams-and-distance-dield-textures-on-the-gpu-with-the-jump-flooding-algorithm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="shadertoy"><![CDATA[Shadertoy]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495667326;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4072;}i:1;a:1:{s:2:"id";i:2370;}i:2;a:1:{s:2:"id";i:2754;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Actually Making Signed Distance Field Textures With JFA</title>
		<link>http://blog.demofox.org/2016/03/02/actually-making-signed-distance-field-textures-with-jfa/</link>
		<pubDate>Wed, 02 Mar 2016 15:19:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4072</guid>
		<description></description>
		<content:encoded><![CDATA[This post is an addendum to the last post where I say that you can make distance field textures with JFA but don't fully explain how to make SIGNED distance field textures, which is what you really want.

If you want to go straight to a working demo with webgl pixel shader source code, here is the shadertoy: <a href="https://www.shadertoy.com/view/ldVGWc" target="_blank">Shadertoy: JFA SDF Texture</a>

If you naively use a distance transform to make a distance field texture, you'll get an UNSIGNED distance field texture, where you only have the distance to the surface of the object from the outside, but won't have the distance to the surface of the object from the inside.

This is important because signed distance field textures have both, and use bilinear interpolation of distance on each side of the shape surface to make a nice smooth line.  Below is what happens when you try to use an unsigned distance field texture (aka the distance transform of the image, using JFA / Voronoi information), using the zero distance line as the surface of the object:

<img src="https://demofox2.files.wordpress.com/2016/03/df1.png"/>

It looks ok (if not fairly pixelated), but you can really see it break down when you zoom in:

<img src="https://demofox2.files.wordpress.com/2016/03/df2.png"/>

So you might say to yourself, maybe i need to keep the surface line at distance 0.5 instead of 0.0 so that there is distance information to interpolate?  If you do that, the first thing you might notice is that the objects get fatter:

<img src="https://demofox2.files.wordpress.com/2016/03/df3.png"/>

But it does look better when you zoom in, which is a plus:

<img src="https://demofox2.files.wordpress.com/2016/03/df4.png"/>

The real issue is that you really just need the distance from each pixel to the surface of the object from both the inside and the outside.  In our case, our Voronoi diagram we make with JFA only gives the distance from the outside.  So what is the solution?  At first I was thinking maybe you can get the gradient of this data at the point of each pixel and "push the zero line in" a little bit to give at least one pixel layer worth of inside data.  However, a brilliant friend of mine came up with the actual solution:  You invert your source data so empty space becomes seed, and seed becomes empty space, and you run JFA again to get the distance from the inside!

That actually works very well.  It's also very easy to combine them.  You make a pixel shader that reads the data from the outside Voronoi diagram and the inside Voronoi diagram, calculate the output distance (0.5 + outsideDistance * 0.5 - insideDistance * 0.5), and output that 0 to 1 distance value in one or more of the color channels.

Here's a glsl excerpt below, note that we divide the distance by 8 and clamp between 0 and 1 so that the data is suitable for a normalized color image (normalized as in the color channels can store values between 0 and 1):

[code language="cpp"]
// calculate distances from seed coordinates
float outsideDist = clamp(length(outsideSeedCoord-fragCoord) / 8.0, 0.0, 1.0);
float insideDist  = clamp(length(insideSeedCoord-fFragCoord)  / 8.0, 0.0, 1.0);
    
// calculate output distance
float signedDistance = 0.5 + outsideDist * 0.5 - insideDist * 0.5;
        
// set the color based on that distance
fragColor = vec4(signedDistance);
[/code]

It actually looks a lot like the first image where we use the zero distance line of the unsigned distance field texture, so we still aren't quite there:

<img src="https://demofox2.files.wordpress.com/2016/03/df5.png"/>

When you zoom in, it looks a little better, but something still seems a bit off:

<img src="https://demofox2.files.wordpress.com/2016/03/df6.png"/>

The final step to making this look good is to realize that the power of signed distance textures is in their ability to interpolate distance information well.  When we have a full resolution texture, there is no interpolation going on.  We actually need to decrease the size of our distance field texture to make it look better.  If only all problems were solved by making textures smaller!

Here is the resulting image when making the distance field texture 1/4 as large on each axis (1/16th as big total):

<img src="https://demofox2.files.wordpress.com/2016/03/df7.png"/>

And zooming in you can see that it scales very well.  The zoom is a 20x magnification, on top of the magnification we already get from it being a larger texture:

<img src="https://demofox2.files.wordpress.com/2016/03/df8.png"/>

And just to show the intermediary textures, here is the outside distance Voronoi diagram:

<img src="https://demofox2.files.wordpress.com/2016/03/df9.png"/>

And the inside distance Voronoi diagram (The seed is in bright green, the dim green is the empty space that has distance information):

<img src="https://demofox2.files.wordpress.com/2016/03/df10.png"/>

And here is the final distance field texture used to render the final result I showed above.

<img src="https://demofox2.files.wordpress.com/2016/03/df11.png"/>

Zoomed in to show just how low resolution it is!  This is the thing that looks like a + or a sword just left of middle.

<img src="https://demofox2.files.wordpress.com/2016/03/df12.png"/>

Again, here is the shadertoy that does this technique, generating a signed distance field texture on the fly for randomly placed objects, and then using that signed distance field to render a larger image that you can further zoom in to:
<a href="https://www.shadertoy.com/view/ldVGWc" target="_blank">Shadertoy: JFA SDF Texture</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4072</wp:post_id>
		<wp:post_date><![CDATA[2016-03-02 07:19:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-02 15:19:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[actually-making-signed-distance-field-textures-with-jfa]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="shadertoy"><![CDATA[Shadertoy]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495722701;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4038;}i:1;a:1:{s:2:"id";i:5803;}i:2;a:1:{s:2:"id";i:5413;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Matrix Form of Bezier Curves</title>
		<link>http://blog.demofox.org/2016/03/05/matrix-form-of-bezier-curves/</link>
		<pubDate>Sun, 06 Mar 2016 05:44:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4113</guid>
		<description></description>
		<content:encoded><![CDATA[Bezier curves are most often talked about either in terms of the De Casteljau algorithm, or in terms of a mathematical function (Bernstein Polynomials).

Every now and then though, you see people talking about Bezier curves being calculated via matrices.  If you ever wondered what that was all about, this post should hopefully explain and demystify that a bit.

If you don't know how to come up with the equation of a Bezier curve for any number of control points, you should give this a read first:
<a href="http://blog.demofox.org/2015/05/25/easy-binomial-expansion-bezier-curve-formulas/" target="_blank">Easy Binomial Expansion & Bezier Curve Formulas</a>

And if you are curious about the De Casteljau algorithm, you can learn about that here:
<a href="http://blog.demofox.org/2015/07/05/the-de-casteljeau-algorithm-for-evaluating-bezier-curves/" target="_blank">The De Casteljau Algorithm for Evaluating Bezier Curves</a>

Ok, all read up on that stuff?  Let's get talking about Bezier curves in matrix form!  There are shadertoy links at the end with working wegl glsl demos that include source code.

<h2>Making the Matrix Form of Bezier Curves</h2>

Coming up with the matrix for a Bezier curve is surprisingly easy.  Keep in mind the matrix we are making is for glsl which is a column major matrix order, so you might have to adjust things if you are using a row major matrix order setup (mostly, just transpose the matrix).

The first step is to get the formula for a Bezier curve.  We'll work through the example using a quadratic Bezier curve with 3 control points A,B,C, so we start with the formula below:

$latex
f(t) = A*(1-t)^2 + B*2t(1-t) + C*t^2
$

The next step is to break the equation into one equation per term.  Each term has a control point, so we are basically splitting the formula up so that we have one formula per control point.

$latex
A*(1-t)^2 \\\\
B*2t(1-t) \\\\
C*t^2
$

Next, we remove the control points and expand each term to get:

$latex
1-2t+t^2 \\\\
2t-2t^2 \\\\
t^2
$

Now, explicitly values of all powers of t that are present:
$latex
1*t^0-2*t^1+1*t^2 \\\\
0*t^0+2*t^1-2*t^2 \\\\
0*t^0+0*t^1+1*t^2
$

Now the final step.  Take the constants that multiply your powers of t and make a matrix out of them.  You are done!

$latex \\begin{bmatrix}
1 & -2 & 1 \\\\
0 & 2 & -2 \\\\
0 & 0 & 1 \\\\
\\end{bmatrix}
$

<h2>Using the Matrix Form</h2>

Using the matrix form of Bezier curves is also pretty simple.

First, we need to make a vector of the power series of our t value:

$latex powerSeries = \\begin{bmatrix}
t^0 & t^1 & t^2 \\\\
\\end{bmatrix}
$

Which can also be written as:

$latex powerSeries = \\begin{bmatrix}
1 & t & t^2 \\\\
\\end{bmatrix}
$

You also need a vector of your control points:

$latex controlPoints = \\begin{bmatrix}
A & B & C \\\\
\\end{bmatrix}
$

You next perform this operation to get a result vector:

$latex
result = powerSeries * curveMatrix * controlPoints
$

Then, you add up all components of result to get the value of the curve at time t.

$latex
value = result[0] + result[1] + result[2]
$

All done!

Note that this is a one dimensional Bezier curve.  You need to do this operation once per axis to get your final multi dimensional Bezier curve point.

If you are confused by that last line, check out this post: <a href="http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/" target="_blank">One Dimensional Bezier Curves</a>

<h2>Multiplying the Control Points In</h2>

You might notice that if you are evaluating several points on the same curve that you are going to be multiplying the curveMatrix matrix by the controlPoints vector over and over.  You can multiply the control points into the Bezier curve matrix to make the specific matrix for those control points if you want to.  You multiply the columns of the matrix by the control points, and adjust the result calculation like the below.

[code language="cpp"]
// Multiply the control points into the curve matrix
curveMatrix[0] *= A;
curveMatrix[1] *= B;
curveMatrix[2] *= C;

// Use the curve matrix that has the control points baked in, to do less math to get the result vector.
// You would calculate the curve matrix once and re-use it multiple times of course!
vec3 result = powerSeries * curveMatrix;
float value = result.x + result.y + result.z;
[/code]

<h2>Closing</h2>

You might wonder when you'd use the matrix form.  One time to use the matrix form would be when you had fast matrix math support (like on the GPU).  Another time to use the matrix form though is if you ever want to cut up a Bezier curve into multiple smaller sub curves.  The matrix form can help make that easier, and you can read more about that here if you want: <a href="http://www.idav.ucdavis.edu/education/CAGDNotes/Matrix-Cubic-Bezier-Curve/Matrix-Cubic-Bezier-Curve.html" target="_blank">A Matrix Formulation of the Cubic Bezier Curve</a>

Here are some shadertoys that show this all working in webgl/glsl pixel shaders, along with source code:

<a href="https://www.shadertoy.com/view/MdV3Wd" target="_blank">Shadertoy: 1D Linear Bezier Matrix Form</a>
<a href="https://www.shadertoy.com/view/lsK3Wd" target="_blank">Shadertoy: 1D Quadratic Bezier Matrix Form</a>
<a href="https://www.shadertoy.com/view/lsV3Wd" target="_blank">Shadertoy: 1D Cubic Bezier Matrix Form</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4113</wp:post_id>
		<wp:post_date><![CDATA[2016-03-05 21:44:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-06 05:44:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[matrix-form-of-bezier-curves]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="shadertoy"><![CDATA[Shadertoy]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495525354;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2754;}i:1;a:1:{s:2:"id";i:5413;}i:2;a:1:{s:2:"id";i:5276;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Sixth Way To Calculate Sine Without Trig</title>
		<link>http://blog.demofox.org/2016/03/11/a-sixth-way-to-calculate-sine-without-trig/</link>
		<pubDate>Sat, 12 Mar 2016 00:11:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4138</guid>
		<description></description>
		<content:encoded><![CDATA[I have another item to add to the pile of ways to calculate sine without trig.  Here are the previous ways before we start:

<a href="http://blog.demofox.org/2014/11/04/four-ways-to-calculate-sine-without-trig/" target="_blank">Four Ways to Calculate Sine Without Trig</a>

<a href="http://blog.demofox.org/2015/06/14/a-fifth-way-to-calculate-sine-without-trig/" target="_blank">A Fifth Way to Calculate Sine Without Trig</a>

This method is called <a href="https://en.wikipedia.org/wiki/Bhaskara_I%27s_sine_approximation_formula" target="_blank">Bhaskara I's sine approximation formula</a> and it's just a numerical way of approximating sine.

The below is some glsl code from <a href="https://twitter.com/paniq" target="_blank">@paniq</a> that has been adapted to take 0 to 1 as input, which corresponds to 0 to 2*pi radians, or 0 to 360 degrees, and returns the normalized vector of that angle.  The x component of the vector is the cosine of the angle and the y component of the vector is the sine of the angle.  Useful for packing 2d normals into a color channel (;

[code language="cpp"]
// https://en.wikipedia.org/wiki/Bhaskara_I%27s_sine_approximation_formula
// x is 0..1 corresponding to 0..360 degrees
vec2 CosSin(float x) {
    vec2 si = fract(vec2(0.5,1.0) - x*2.0)*2.0 - 1.0;
   	vec2 so = sign(0.5-fract(vec2(0.25,0.5) - x));    
    return (20.0 / (si*si + 4.0) - 4.0) * so;
}
[/code]

Here's a shadertoy to compare/contrast this technique versus reality (or, reality as per the video card).  Spoiler alert - the shadertoy is ridiculous, they are basically the same.
<a href="https://www.shadertoy.com/view/XddSzH" target="_blank">Shadertoy: Bhaskara Cos Sin Approximation</a>

More from paniq:

i also wrote an approximate atan to go with it <a href="https://www.shadertoy.com/view/XdXSWN" target="_blank">Shadertoy: Pseudo-Polar Mapping</a> see the ALTMETHOD branch.   also changed the sin/cos computation to ensure the sin/cos vector is perfectly normalized.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4138</wp:post_id>
		<wp:post_date><![CDATA[2016-03-11 16:11:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-12 00:11:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[a-sixth-way-to-calculate-sine-without-trig]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495132843;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1205;}i:1;a:1:{s:2:"id";i:2547;}i:2;a:1:{s:2:"id";i:1272;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Wang Tiles to Simulate Turing Machines</title>
		<link>http://blog.demofox.org/2016/03/14/computation-with-wang-tile/</link>
		<pubDate>Mon, 14 Mar 2016 20:19:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4149</guid>
		<description></description>
		<content:encoded><![CDATA[Wang tiles were invented by Hao Wang in 1961 for mathematical reasons, but they find great use in games for making tile based art which gives results that don't look tiled - both with 2d tiled textures, as well as 3d tiled models.

Apparently Wang tiles are also able to execute Turing machines, and so are thus Turing complete - meaning they can execute any program.

That is a pretty amazing and perplexing statement, so this post explores that a bit.

<h2>Wang Tiles Overview</h2>

Wang tiles are rectangular tiles where each edge will only fit with other specific edges, but that for any specific edge, there is more than one possible tile that can fit with that edge.  By fit with that edge, I mean they are seamless when put together, without any visual artifacts to hint at there actually being a seam between the tiles.

This is useful for graphics because this lets you have seamless tiled graphics, but the specific configuration of how the tiles are placed can be completely randomized, so long as their edges are all compatible.  The result is tiled graphics that doesn't look at all tiled, due to visible patterns being much less noticeable than with traditional tiled graphics.

For graphical examples, a little more info and some links to some shadertoys check this out: <a href="http://blog.demofox.org/2014/08/13/wang-tiling/">Wang Tiling</a>

Here is an example I made.  The graphics are programmer art but hopefully you get the idea.  This was made with 16 tiles, where there were two different edge types per edge.

<img src="https://demofox2.files.wordpress.com/2014/08/Wang2Grid.png"/>

<h2>Turing Machine Overview</h2>

Turing machines were invented in 1936 by Alan Turing as a generic computing machine that was proven to be able to execute any algorithm.

The turing machine is made up of a few main components: the memory tape, the read/write head, and the state machine.

The memory tape is infinitely long, so has infinite storage, and is initialized to all zeroes to start out.

The read/write head starts at a position on the tape, and can read or write values, and also move left or right on the tape.

The state machine controls the read/write head.

The state machine knows what state it is in and has rules about what to do in each state when it reads a value from the tape.

For instance, in state A, if a 0 is read from the tape, the rule may be to write a 1 to the current position on the tape, move the read/write head to the right, and go to state B.  State B may have completely different logic, and could either transition back to state A, state in state B, or move to another state entirely.

Using simple state transition logic like that, any computer algorithm can be performed.

In a Turing machine there can also be a "Halt State" which means the program is finished executing and the answer it was trying to calculate has been calculated.

Looking at some programs, you can easily see that they will halt eventually, or that they will be an infinite loop and never halt.  Some programs in-between are complex and can't very easily be determined if they will ever halt or not.  Turing proved that there is no general solution to whether a Turing machine (aka any computer program) will halt or not, and this is called the <a href="https://en.wikipedia.org/wiki/Halting_problem" target="_blank">Halting Problem</a>.  In general, the only way to know if a program will halt or not is to wait and see.  So, effectively the answers to whether a program in general will halt or not are "yes" and "not yet" - although for many specific programs you can in fact see that they will halt eventually if you were to run them.

<h2>Wang Tile Computation</h2>

It turns out that Wang tiles can simulate a Turing machine, and so are "Turing complete" meaning that they too can perform any computer algorithm.

To make this happen, we'll make a column of tiles that represent the state of the Turing machine at a specific point in time, starting with time 0 at the left most column.  We'll place tiles in the column to the right making sure all edge rules are respected, and then do the column to the right of that one etc until the program halts (or forever if it doesn't halt).  If we set up our set of tiles correctly, the act of satisfying the edge rules as we place our tiles is enough to execute the Turing machine.

Let's walk through a simple example where we have the following state machine logic rules:
<ol>
	<li>When in state A, if a 0 is read, we will write a 1, move the read/write head down and move to state B.</li>
	<li>When in state A, if a 1 is read, we will halt (enter the halt state).</li>
	<li>When in state B, if a 0 is read, we will write a 1, move the read/write head up and move to state A.</li>
	<li>When in state B, if a 1 is read, we will halt (enter the halt state).</li>
</ol>

<h3>Tape Memory Storage</h3>

The first thing we need is persistent storage of memory for the tape.  For this, we'll need the following two tiles: 

<img src="https://demofox2.files.wordpress.com/2016/03/WangTile_0_x_0_x_2.png"/> <img src="https://demofox2.files.wordpress.com/2016/03/WangTile_1_x_1_x_2.png"/>

To see this working, we can set up a section of tape with some values (make a column of wang tiles), and we can see that the only valid wang tiles to place next to the starting column are tiles which propogate the 0 and the 1 values forward in time without modifying them.

In the diagram below, we initialize the tape to 0101 in the left most column (time 0).  By only placing down tiles with compatible edges you can see that our memory values persist forever.  Our memory storage is implemented, huzzah!

<img src="https://demofox2.files.wordpress.com/2016/03/WangTileMemory4_2.png"/>

We'll start our example with all memory initialized to 0, but the above shows that we can have persistent memory.

<h3>Read/Write Head State Machine</h3>

The read/write head of the Turing machine is represented as part of the edge information.  In this way, besides an edge storing the 0 or 1, if that is where the read/write head is, it also stores the state of the state machine.

Our example uses two states (besides the halt state): A and B.  If a 1 is read in while being in either state A or B, the program halts.

To handle that, we need the tiles below:

<img src="https://demofox2.files.wordpress.com/2016/03/WangTile_A1_x_H1_x.png"/> <img src="https://demofox2.files.wordpress.com/2016/03/WangTile_B1_x_H1_x.png"/>

Now that we have the rules for entering the halt state done (rule #2 and rule #4), we have to figure out how to implement the rules that control switching from one state to another (rule #1 and rule #3).

<h3>Moving the Read/Write Head</h3>

Rule #1 says that if we are in state A and read a 0, we should write a 1, move the read/write head down and move to state B.

We'll need this tile to cause reading a 0 in state A to write a 1 as output, and to tell the tile below to move to state B.

<img src="https://demofox2.files.wordpress.com/2016/03/WangTile_A0_x_1_B.png"/>

The tile below that one could either be a 0 or a 1, and without knowing which, we want it to keep it's value but accept the read/write head and be in state B.  To do that we need two tiles, one for if there is a 0 on the tape at that position, and another for if there is a 1 on the tape.

<img src="https://demofox2.files.wordpress.com/2016/03/WangTile_0_B_B0_x.png"/> <img src="https://demofox2.files.wordpress.com/2016/03/WangTile_1_B_B1_x.png"/>

Rule #3 says that if we are in state B and read a 0, we should write a 1, move the read/write head up and move to state A.

To do that, we'll need a similar construction as for rule #1 but we are moving up instead of down.  These 3 tiles will give us what we need:

<img src="https://demofox2.files.wordpress.com/2016/03/WangTile_B0_A_1_x.png"/> <img src="https://demofox2.files.wordpress.com/2016/03/WangTile_0_x_A0_A.png"/> <img src="https://demofox2.files.wordpress.com/2016/03/WangTile_1_x_A1_A.png"/>

<h2>Starting Column Tiles</h2>

We are going to treat the boundaries of our simulation area as if they have edges of "x".

This means that to make our starting column (the Turing machine at time 0), we are going to need 2 special tiles.  One tile will be for storing a 0 on the tape, which is what the tape is initialized to, and the other tile will be for storing the position of the read/write head in state A, which is our starting state.

Here are those two tiles:

<img src="https://demofox2.files.wordpress.com/2016/03/WangTile_x_x_0_x.png"/> <img src="https://demofox2.files.wordpress.com/2016/03/WangTile_x_x_A0_x.png"/>

<h2>Final Tileset</h2>

Here's the full set of 12 tiles that we are going to use:
<img src="https://demofox2.files.wordpress.com/2016/03/tileset6.png"/>

<h2>Full Simulation</h2>

Here is the initial setup at time 0 for our Turing machine.  Note that this is one possible starting state, but this is the starting state we are choosing.  We are not leaving it up to chance where the read/write head starts, or if it is even present at all.  If we only followed edge rules we may get 4 read/write heads or 0, or anything in between.

<img src="https://demofox2.files.wordpress.com/2016/03/Time0_2.png"/>

From here, to build the second column, we start from the top and work towards the bottom, choosing the tile that fits the constraints of the edge it touches.  In this first step, the head reads a 0, writes a 1, moves down, and moves to state B.

<img src="https://demofox2.files.wordpress.com/2016/03/Time1_2.png"/>

Heres is the second step, where the read reads a 0, writes a 1, moves up, and moves to state A.

<img src="https://demofox2.files.wordpress.com/2016/03/Time2_2.png"/>

Here is the final step, where the head reads a 1 and enters the halt state, signifying that the program has terminated.

<img src="https://demofox2.files.wordpress.com/2016/03/Time3_2.png"/>

The program halted, and gave an output value of "0110" or 6.  This output isn't really meaningful but other programs can give output that is meaningful.  For instance you could have a Turing machine add two numbers, and the output would be the sum of those two numbers.

<h2>An Important Detail</h2>

There is an important detail that the above doesn't address, and that many explanations of Wang tile Turing machines don't seem to talk about.

When placing the second tile for time 2, the only constraint from the edges is that the tile must have an x on top and a 1 on the left.  This actually makes it ambiguous which tile should be chosen between the two tiles below.

<img src="https://demofox2.files.wordpress.com/2016/03/WangTile_1_x_1_x_2.png"/> <img src="https://demofox2.files.wordpress.com/2016/03/WangTile_1_x_A1_A.png"/>

How do we choose the right one then?

The answer is that you make a guess and just choose one.  If the wrong one was chosen in this case, when we moved to the next tile, we'd be looking for a tile which had an x on top and a B0 on the left.  There is no such tile so you'd be unable to place a tile.  When this happened, you'd take a step back to the last tile, and try one of the other possibilities.

So, unfortunately there is some literal trial and error involved when simulating Turing machines with Wang tiles, but it is fairly manageable at least.  It definitely makes it a bit more complex to calculate in a pixel shader if you were so inclined (or other massively parallel processing units), but it shouldn't be that much more costly.

<h2>Closing & Links</h2>

Some of the links below talk about Wang tiles and Turing machines, but don't seem to strictly be Turing machines anymore.  For instance, you might notice that some examples allow data to travel "back in time" where after the program halts, the answer is in the tape at time 0 of the Turing machine, even though that data wasn't actually there at time 0.  This shows that Wang tiles can do computation in their own right, beyond simulating Turing machines, but I'm not really sure what that technique itself would be called.

Also if you are wondering if this is useful to do computation with Wang tiles, I'm not really sure of any practical usage cases myself.  However, apparently scientists have found that DNA can act much like Wang tiles act, where they will fit together only if edges are compatible.  Because of this, there is ongoing research into DNA based computation that is based on the work of Wang tile computation.  pretty interesting stuff!

Here is a shadertoy implementation of wang tiles computing prime numbers in a webgl pixel shader:
<a href="https://www.shadertoy.com/view/4sV3zK" target="_blank">Shadertoy: WangTiles : PrimeGenerator</a>

Here are some great videos on Turing machines and the halting problem:
<a href="https://www.youtube.com/watch?v=dNRDvLACg5Q" target="_blank">Turing Machines Explained - Computerphile</a>
<a href="https://www.youtube.com/watch?v=macM_MtS_w4" target="_blank">Turing & The Halting Problem - Computerphile</a>

Here are some other links:
<a href="https://moyix.wordpress.com/2012/04/06/computing-with-tiles/" target="_blank">Computing With Tiles</a>
<a href="https://en.wikipedia.org/wiki/Wang_tile" target="_blank">Wikipedia: Wang Tile</a>
<a href="http://grahamshawcross.com/2012/10/12/wang-tiles-and-turing-machines/" target="_blank">Wang Tiles and Turing Machines</a>
<a href="https://because0fbeauty.wordpress.com/2014/02/28/wang-tiles-1/" target="_blank">Wang Tiles – 1</a>

Here are some academic papers:
<a href="http://www.math.oregonstate.edu/~math_reu/proceedings/REU_Proceedings/Proceedings1989/2_Michie89.pdf" target="_blank">Computing With Tiles</a>
<a href="http://link.springer.com/chapter/10.1007%2F978-0-387-09680-3_13" target="_blank">Computability of Tilings</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4149</wp:post_id>
		<wp:post_date><![CDATA[2016-03-14 12:19:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-14 20:19:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[computation-with-wang-tile]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495568146;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1148;}i:1;a:1:{s:2:"id";i:3986;}i:2;a:1:{s:2:"id";i:2;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Game Development Needs Data Pipeline Middleware</title>
		<link>http://blog.demofox.org/2016/04/01/game-development-needs-data-pipeline-middleware/</link>
		<pubDate>Fri, 01 Apr 2016 21:14:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4271</guid>
		<description></description>
		<content:encoded><![CDATA[In 15 years I've worked at 7 different game studios, ranging from small to large, working on many different kinds of projects in a variety of roles.

At almost every studio, there was some way for the game to load data at runtime that controlled how it behaved - such as the damage a weapon would do or the cost of an item upgrade.

The studios that didn't have this setup could definitely have benefited from having it.  After all, this is how game designers do their job!

Sometimes though, this data was maintained via excel spreadsheets (export as csv for instance and have the game read that).  That is nearly the worst case scenario for data management.  Better though is to have an editor which can edit that data, preferably able to edit data described by schemas, which the game also uses to generate code to load that data.

Each studio I've worked at that did have game data each had their own solution for their data pipeline, and while they are all of varying qualities, I have yet to see something that is both fast and has most of the features you'd reasonably want or expect.

We really need some middleware to tackle this "solved problem" and offer it to us at a reasonable price so we can stop dealing with it.  Open sourced would be fine too.  Everyone from engineers to production to content people will be much happier and more productive!

<h1>Required Features</h1>

Here are the features I believe are required to satisfy most folks:
<ol>
	<li>Be able to define the structure of your data in some format (define data schema).</li>
	<li>Have an editor that is able to quickly launch, quickly load up data in the data schema and allow a nice interface to editing the data as well as searching the data.</li>
	<li>This edited data should be in some format that merges well (for dealing with branching), and preferably is standardized so you can use common tools on the data - such as XSLT if storing data as xml. XML isn't commonly very mergable so not sure the solution there other than perhaps a custom merge utility perhaps?</li>
	<li>The "data solution" / project file should store your preferences about how you want the final data format to be: xml, json, binary, other?  Checkboxes for compression and encryption, etc.  Switching the data format should take moments.</li>
	<li>There should be a cooking process that can be run from the data editor or via command line which transforms the edited data into whatever format the destination data should be in.  AKA turn the human friendly XML into machine friendly binary files which you load in with a single read and then do pointer fixup on.</li>
	<li>This pipeline should generate the code that loads and interacts with the data as described in the data schema.  For instance you say "load my data" and it does all the decompression, decryption, parsing, etc giving you back a root data structure which contains compile time defined strongly typed structures.  This is important because when you change the format of the data that the game uses, no game code actually has to know or care.  Whatever it takes to load your data happens when you call the function.</li>
</ol>

<h1>Bonus Points</h1>

Here are some bonus point features that would be great to have:

<ol>
	<li>Handle live editing of data.  When the game and editor is both open, and data is edited, have it change the data on the game side in real time, and perhaps allow a callback to be intercepted in case the game needs to clear out any cached values or anything.  This helps iteration time by letting people make data changes without having to relaunch the game.  Also needs to be able to connect to a game over tcp/ip and handle endian correction as needed as well as 32 vs 64 bit processes using the same data.</li>
	<li>Handle the usual problems associated with DLC and versioning in an intelligent way.  Many data systems that support DLC / Patching / Schema Updates post ship have strange rules about what data you can and can't change.  Often times if you get it wrong, you make a bug that isn't always obvious.  If support for this was built in, and people didnt have to concern themselves with it, it'd be great.</li>
	<li>On some development environments, data must be both forwards and backwards compatible.  Handling that under the covers in an intelligent way would be awesome.</li>
	<li>The editor should be extensible with custom types and plugins for visualizations of data, as well as interactive editing of data.  This same code path could be used to integrate parts of the game engine with the editor for instance (slippery slope to making the editor slow, however).</li>
	<li>Being able to craft custom curves, and being able to query them simply and efficiently from the game side at runtime would be awesome.</li>
	<li>Support "cook time computations".  The data the user works with isn't always set up the way that would be best for the machine.  It'd be great to be able to do custom calculations and computations at runtime.  Also great for building acceleration data structures.</li>
	<li>You should be able to run queries against the data or custom scripts.  To answer questions like "Is anyone using this feature?" and "I need to export data from our game into a format that this other program can read"</li>
	<li>Being able to export data as c++ literal data structures, for people who want to embed (at least some of) their data in the exe to reduce complexity, loading times, etc.</li>
</ol>

It should also be as fast and lightweight as possible.  It should allow games to specify memory and file i/o overrides.

Localized text is also a "solved problem" that needs an available solution.  It could perhaps be rolled into this, or maybe it would make most sense for it to be separate.

As another example of how having something like this would be useful, on multiple occasions at previous studios, people have suggested we change the format of the data that the game uses at runtime.  For instance, from json to a binary format.  In each case this has come up so far, people have said it would take too long and it got backlogged (ie killed).  With data pipeline middleware that works as i describe it, you would click a few checkboxes, recook your data and test it to have your runtime results.  That's as hard as it SHOULD be, but in practice it's much harder because everyone rolls their own and the cobbler never has time to fix his shoes (;

Anyone out there want to make this happen? (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4271</wp:post_id>
		<wp:post_date><![CDATA[2016-04-01 13:14:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-01 21:14:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[game-development-needs-data-pipeline-middleware]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="gamedev-commentary"><![CDATA[Gamedev Commentary]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495406976;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:194;}i:1;a:1:{s:2:"id";i:4999;}i:2;a:1:{s:2:"id";i:54;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Turning a Truth Table Into A digital Circuit (ANF)</title>
		<link>http://blog.demofox.org/2016/04/09/turning-a-truth-table-into-a-digital-circuit-anf/</link>
		<pubDate>Sun, 10 Apr 2016 04:32:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4281</guid>
		<description></description>
		<content:encoded><![CDATA[In this post I'm going to show how you turn a truth table into a digital logic circuit that uses XOR and AND gates.

<h2>My Usage Case</h2>

My specific usage case for this is in my investigations into homomorphic encryption, which as you may recall is able to perform computation on encrypted data.  This lets encrypted data be operated on by an untrusted source, given back to you, and then you can decrypt your data to get a result.

Lots of use cases if this can ever get fast enough to become practical, such as doing cloud computing with private data.  However, when doing homomorphic encryption (at least currently, for the techniques I'm using), you only have XOR and AND logic operations.

So, I'm using the information in this post to be able to turn a lookup table, or a specific boolean function, into a logic circuit that I can feed into a homomorphic encryption based digital circuit.

Essentially I want to figure out how to do a homomorphic table lookup to try and make some simple as possible circuits, that will in turn be as fast and lean as possible.

If you want to know more about homomorphic encryption, here's a post I wrote which explains a very simple algorithm: <a href="http://blog.demofox.org/2015/09/05/super-simple-symmetric-leveled-homomorphic-encryption-implementation/" target="_blank">Super Simple Symmetric Leveled Homomorphic Encryption Implementation</a>

<h2>Algebraic Normal Form</h2>

Algebraic normal form (ANF) is a way of writing a boolean function using only XOR and AND.

Since it's a normal form, two functions that do the same thing will be the same thing in ANF.

There are other forms for writing boolean logic, but ANF suits me best for my homomorphic encryption circuit needs!

An example of boolean logic in ANF is the below:

$latex
f(x_1, x_2, x_3, x_4) = x_1 x_2 \\oplus x_1 x_3 \\oplus x_1 x_4
$

It is essentially a boolean polynomial, where AND is like multiplication, and XOR is like addition.  It even factors the same way.  In fact, ANF is not always the smallest circuit possible, you'd have to factor common ANDs to find the smallest way you could represent the circuit, like the below:

$latex
f(x_1, x_2, x_3, x_4) = x_1 (x_2 \\oplus x_3 \\oplus x_4)
$

That smaller form does 1 AND and 2 XORs, versus the ANF which does 3 ANDs and 2 XORs.  In homomorphic encryption, since AND is so much more costly than XOR, minimizing the ANDs is a very nice win, and worth the effort.

Wikipedia has some more info about ANF here: <a href="https://en.wikipedia.org/wiki/Algebraic_normal_form" target="_blank">Wikipedia: Algebraic normal form</a>

<h2>Truth Tables and Lookup Tables</h2>

A truth table is just where you specify the inputs into a boolean function and the output of that boolean function for the given input:

$latex
\\begin{array}{c|c|c|c}
x_1 & x_2 & x_3 & f(x_1, x_2, x_3) \\\\
\\hline
0 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 1 \\\\
0 & 1 & 0 & 1 \\\\
0 & 1 & 1 & 0 \\\\
1 & 0 & 0 & 1 \\\\
1 & 0 & 1 & 0 \\\\
1 & 1 & 0 & 0 \\\\
1 & 1 & 1 & 1 \\\\
\\end{array}
$

A lookup table is similar in functionality, except that it has multi bit output.  When dealing with digital circuits, you can make a lookup table by making a truth table per output bit.  For instance, the above truth table might just be the low bit of the lookup table below, which is just a truth table for addition of the input bits.

$latex
\\begin{array}{c|c|c|c}
x_1 & x_2 & x_3 & f(x_1, x_2, x_3) \\\\
\\hline
0 & 0 & 0 & 00 \\\\
0 & 0 & 1 & 01 \\\\
0 & 1 & 0 & 01 \\\\
0 & 1 & 1 & 10 \\\\
1 & 0 & 0 & 01 \\\\
1 & 0 & 1 & 10 \\\\
1 & 1 & 0 & 10 \\\\
1 & 1 & 1 & 11 \\\\
\\end{array}
$

<h2>Converting Truth Table to ANF</h2>

When I first saw the explanation for converting a truth table to ANF, it looked pretty complicated, but luckily it turns out to be pretty easy.

The basic idea is that you make a term for each possible combination of x inputs, ANDing a term by each constant, and then solving for those constants.

Let's use the truth table from the last section:

$latex
\\begin{array}{c|c|c|c}
x_1 & x_2 & x_3 & f(x_1, x_2, x_3) \\\\
\\hline
0 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 1 \\\\
0 & 1 & 0 & 1 \\\\
0 & 1 & 1 & 0 \\\\
1 & 0 & 0 & 1 \\\\
1 & 0 & 1 & 0 \\\\
1 & 1 & 0 & 0 \\\\
1 & 1 & 1 & 1 \\\\
\\end{array}
$

For three inputs, the starting equation looks like this:

$latex
f(x_1, x_2, x_3) = \\\\
a_0 \\\\
\\oplus a_1 x_1 \\oplus a_2 x_2 \\oplus a_3 x_3 \\\\
\\oplus a_{12} x_1 x_2 \\oplus a_{13} x_1 x_3 \\oplus a_{23} x_2 x_3 \\\\
\\oplus a_{123} x_1 x_2 x_3
$

Now we have to solve for the a values.

To solve for $latex a_{123} $, we just look in the truth table for function $latex f(x_1, x_2, x_3) $ to see if we have an odd or even number of ones in the output of the function.  If there is an even number, it is 0, else it is a 1.

Since we have an even number of ones, the value is 0, so our equation becomes this:

$latex
f(x_1, x_2, x_3) = \\\\
a_0 \\\\
\\oplus a_1 x_1 \\oplus a_2 x_2 \\oplus a_3 x_3 \\\\
\\oplus a_{12} x_1 x_2 \\oplus a_{13} x_1 x_3 \\oplus a_{23} x_2 x_3 \\\\
\\oplus 0 \\land x_1 x_2 x_3
$

Note that $latex \\land $ is the symbol for AND.  I'm showing it explicitly because otherwise the equation looks weird, and a multiplication symbol isn't correct.

Since 0 ANDed with anything else is 0, and also since n XOR 0 = n, that whole last term disappears, leaving us with this equation:

$latex
f(x_1, x_2, x_3) = \\\\
a_0 \\\\
\\oplus a_1 x_1 \\oplus a_2 x_2 \\oplus a_3 x_3 \\\\
\\oplus a_{12} x_1 x_2 \\oplus a_{13} x_1 x_3 \\oplus a_{23} x_2 x_3
$

Next up, to solve for $latex a_{12} $, we need to limit our truth table to $latex f(x_1, x_2, 0) $.  That truth table is below, made from the original truth table, but throwing out any row where $latex x_{3} $ is 1.

$latex
\\begin{array}{c|c|c|c}
x_1 & x_2 & x_3 & f(x_1, x_2, 0) \\\\
\\hline
0 & 0 & 0 & 0 \\\\
0 & 1 & 0 & 1 \\\\
1 & 0 & 0 & 1 \\\\
1 & 1 & 0 & 0 \\\\
\\end{array}
$

We again just look at whether there are an odd or even number of ones in the function output, and use that to set $latex a_{12} $ appropriately.  In this case, there are an even number, so we set it to 0, which makes that term disappear again.  Our function is now down to this:

$latex
f(x_1, x_2, x_3) = \\\\
a_0 \\\\
\\oplus a_1 x_1 \\oplus a_2 x_2 \\oplus a_3 x_3 \\\\
\\oplus a_{13} x_1 x_3 \\oplus a_{23} x_2 x_3
$

If we look at $latex f(x_1,0,x_3) $, we find that it also has an even number of ones, making $latex a_{13} $ become 0 and making that term disappear.

Looking at $latex f(0,x_2,x_3) $, it also has an even number of ones, making $latex a_{23} $ become 0 and making that term disappear as well.

That leaves us with this equation:

$latex
f(x_1, x_2, x_3) = \\\\
a_0 \\\\
\\oplus a_1 x_1 \\oplus a_2 x_2 \\oplus a_3 x_3
$

To solve for $latex a_1 $, we look at the truth table for $latex f(x_1,0,0) $, which is below:

$latex
\\begin{array}{c|c|c|c}
x_1 & x_2 & x_3 & f(x_1, 0, 0) \\\\
\\hline
0 & 0 & 0 & 0 \\\\
1 & 0 & 0 & 1 \\\\
\\end{array}
$

There are an odd number of ones in the output, so $latex a_1 $ becomes 1.  Finally, we get to keep a term!  The equation is below:

$latex
f(x_1, x_2, x_3) = \\\\
a_0 \\\\
\\oplus 1 \\land x_1 \\oplus a_2 x_2 \\oplus a_3 x_3
$

Since 1 AND n = n, we can drop the explicit 1 to become this:

$latex
f(x_1, x_2, x_3) = \\\\
a_0 \\\\
\\oplus x_1 \\oplus a_2 x_2 \\oplus a_3 x_3
$

If you do the same process for $latex a_2 $ and $latex a_3 $, you'll find that they also have odd numbers of ones in the output so also become ones.  That puts our equation at:

$latex
f(x_1, x_2, x_3) = \\\\
a_0 \\\\
\\oplus x_1 \\oplus x_2 \\oplus x_3
$

Solving for $latex a_0 $, is just looking at whether there are an odd or even number of ones in the function $latex f(0,0,0) $ which you can look up directly in the lookup table.  It's even, so $latex a_0 $ becomes 0, which makes our full final equation into this:

$latex
f(x_1, x_2, x_3) = x_1 \\oplus x_2 \\oplus x_3
$

We are done!  This truth table can be implemented with 3 XORs and 0 ANDs.  A pretty efficient operation!

You can see this is true if you work it out with the truth table.  Try it out and see!

$latex
\\begin{array}{c|c|c|c}
x_1 & x_2 & x_3 & f(x_1, x_2, x_3) \\\\
\\hline
0 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 1 \\\\
0 & 1 & 0 & 1 \\\\
0 & 1 & 1 & 0 \\\\
1 & 0 & 0 & 1 \\\\
1 & 0 & 1 & 0 \\\\
1 & 1 & 0 & 0 \\\\
1 & 1 & 1 & 1 \\\\
\\end{array}
$

<h2>Sample Code</h2>

Here is some sample code that lets you define a lookup table by implementing an integer function, and it generates the ANF for each output bit for the truth table.  It also verifies that the ANF gives the correct answer.  It shows you how to use this to make various circuits: bit count, addition, multiplication, division and modulus.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;
#include &lt;vector&gt;

#define PRINT_TRUTHTABLES() 0
#define PRINT_NUMOPS() 1
#define PRINT_ANF() 1

void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

template &lt;size_t NUM_INPUT_BITS&gt;
bool LookupEntryPassesMask (size_t entry, size_t mask)
{
    for (size_t i = 0; i &lt; NUM_INPUT_BITS; ++i)
    {
        const size_t bitMask = 1 &lt;&lt; i;
        const bool allowOnes = (mask &amp; bitMask) != 0;
        const bool bitPassesMask = allowOnes || (entry &amp; bitMask) == 0;
        if (!bitPassesMask)
            return false;
    }
    return true;
}

template &lt;size_t NUM_INPUT_BITS&gt;
bool ANFHasTerm (const std::array&lt;size_t, 1 &lt;&lt; NUM_INPUT_BITS&gt; &amp;lookupTable, size_t outputBitIndex, size_t termMask)
{
    const size_t c_inputValueCount = 1 &lt;&lt; NUM_INPUT_BITS;

    int onesCount = 0;
    for (size_t i = 0; i &lt; c_inputValueCount; ++i)
    {
        if (LookupEntryPassesMask&lt;NUM_INPUT_BITS&gt;(i, termMask) &amp;&amp; ((lookupTable[i] &gt;&gt; outputBitIndex) &amp; 1) != 0)
            onesCount++;
    }

    return (onesCount &amp; 1) != 0;
}

template &lt;size_t NUM_INPUT_BITS&gt;
void MakeANFTruthTable (const std::array&lt;size_t, 1 &lt;&lt; NUM_INPUT_BITS&gt; &amp;lookupTable, std::array&lt;size_t, 1 &lt;&lt; NUM_INPUT_BITS&gt; &amp;reconstructedLookupTable, size_t outputBitIndex)
{
    const size_t c_inputValueCount = 1 &lt;&lt; NUM_INPUT_BITS;
    printf(&quot;-----Output Bit %u-----\r\n&quot;, outputBitIndex);

    // print truth table if we should
    #if PRINT_TRUTHTABLES()
        for (size_t inputValue = 0; inputValue &lt; c_inputValueCount; ++inputValue)
            printf(&quot;  [%u] = %u\r\n&quot;, inputValue, ((lookupTable[inputValue] &gt;&gt; outputBitIndex) &amp; 1) ? 1 : 0);
        printf(&quot;\r\n&quot;);
    #endif

    // find each ANF term
    std::vector&lt;size_t&gt; terms;
    for (size_t termMask = 0; termMask &lt; c_inputValueCount; ++termMask)
    {
        if (ANFHasTerm&lt;NUM_INPUT_BITS&gt;(lookupTable, outputBitIndex, termMask))
            terms.push_back(termMask);
    }

    // print function params
    #if PRINT_ANF()
        printf(&quot;f(&quot;);
        for (size_t i = 0; i &lt; NUM_INPUT_BITS; ++i)
        {
            if (i &gt; 0)
                printf(&quot;,&quot;);
            printf(&quot;x%i&quot;,i+1);
        }
        printf(&quot;) = \r\n&quot;);
    #endif

    // print ANF and count XORs and ANDs
    size_t numXor = 0;
    size_t numAnd = 0;
    if (terms.size() == 0)
    {
        #if PRINT_ANF()
        printf(&quot;0\r\n&quot;);
        #endif
    }
    else
    {
        for (size_t termIndex = 0, termCount = terms.size(); termIndex &lt; termCount; ++termIndex)
        {
            if (termIndex &gt; 0) {
                #if PRINT_ANF()
                printf(&quot;XOR &quot;);
                #endif
                ++numXor;
            }

            size_t term = terms[termIndex];
            if (term == 0)
            {
                #if PRINT_ANF()
                printf(&quot;1&quot;);
                #endif
            }
            else
            {
                bool firstProduct = true;
                for (size_t bitIndex = 0; bitIndex &lt; NUM_INPUT_BITS; ++bitIndex)
                {
                    const size_t bitMask = 1 &lt;&lt; bitIndex;
                    if ((term &amp; bitMask) != 0)
                    {
                        #if PRINT_ANF()
                        printf(&quot;x%i &quot;, bitIndex + 1);
                        #endif
                        if (firstProduct)
                            firstProduct = false;
                        else
                            ++numAnd;
                    }
                }
            }
            #if PRINT_ANF()
            printf(&quot;\r\n&quot;);
            #endif
        }
    }
    #if PRINT_ANF()
    printf(&quot;\r\n&quot;);
    #endif

    #if PRINT_NUMOPS()
    printf(&quot;%u XORs, %u ANDs\r\n\r\n&quot;, numXor, numAnd);
    #endif

    // reconstruct a bit of the reconstructedLookupTable for each entry to be able to verify correctness
    const size_t c_outputBitMask = 1 &lt;&lt; outputBitIndex;
    for (size_t valueIndex = 0; valueIndex &lt; c_inputValueCount; ++valueIndex)
    {
        bool xorSum = false;
        for (size_t termIndex = 0, termCount = terms.size(); termIndex &lt; termCount; ++termIndex)
        {
            size_t term = terms[termIndex];
            if (term == 0)
            {
                xorSum = 1 ^ xorSum;
            }
            else
            {
                bool andProduct = true;
                for (size_t bitIndex = 0; bitIndex &lt; NUM_INPUT_BITS; ++bitIndex)
                {
                    const size_t bitMask = 1 &lt;&lt; bitIndex;
                    if ((term &amp; bitMask) != 0)
                    {
                        if ((valueIndex &amp; bitMask) == 0)
                            andProduct = false;
                    }
                }
                xorSum = andProduct ^ xorSum;
            }
        }
        if (xorSum)
            reconstructedLookupTable[valueIndex] |= c_outputBitMask;
    }
}

template &lt;size_t NUM_INPUT_BITS, size_t NUM_OUTPUT_BITS, typename LAMBDA&gt;
void MakeANFLookupTable (const LAMBDA&amp; lambda)
{
    // make lookup table
    const size_t c_outputValueMask = (1 &lt;&lt; NUM_OUTPUT_BITS) - 1;
    const size_t c_inputValueCount = 1 &lt;&lt; NUM_INPUT_BITS;
    std::array&lt;size_t, c_inputValueCount&gt; lookupTable;
    for (size_t inputValue = 0; inputValue &lt; c_inputValueCount; ++inputValue)
        lookupTable[inputValue] = lambda(inputValue, NUM_INPUT_BITS, NUM_OUTPUT_BITS) &amp; c_outputValueMask;

    // make the anf for each truth table (each output bit of the lookup table)
    std::array&lt;size_t, c_inputValueCount&gt; reconstructedLookupTable;
    std::fill(reconstructedLookupTable.begin(), reconstructedLookupTable.end(), 0);
    for (size_t outputBitIndex = 0; outputBitIndex &lt; NUM_OUTPUT_BITS; ++outputBitIndex)
        MakeANFTruthTable&lt;NUM_INPUT_BITS&gt;(lookupTable, reconstructedLookupTable, outputBitIndex);

    // verify that our anf expressions perfectly re-create the lookup table
    for (size_t inputValue = 0; inputValue &lt; c_inputValueCount; ++inputValue)
    {
        if (lookupTable[inputValue] != reconstructedLookupTable[inputValue])
            printf(&quot;ERROR: expression / lookup mismatch for index %u\r\n&quot;, inputValue);
    }
    printf(&quot;expression / lookup verification complete.\r\n\r\n&quot;);
}

size_t CountBits (size_t inputValue, size_t numInputBits, size_t numOutputBits)
{
    // Count how many bits there are
    int result = 0;
    while (inputValue)
    {
        if (inputValue &amp; 1)
            result++;
        inputValue = inputValue &gt;&gt; 1;
    }
    return result;
}

size_t AddBits (size_t inputValue, size_t numInputBits, size_t numOutputBits)
{
    // break the input bits in half and add them
    const size_t bitsA = numInputBits / 2;
    const size_t mask = (1 &lt;&lt; bitsA) - 1;

    size_t a = inputValue &amp; mask;
    size_t b = inputValue &gt;&gt; bitsA;
    
    return a+b;
}

size_t MultiplyBits (size_t inputValue, size_t numInputBits, size_t numOutputBits)
{
    // break the input bits in half and add them
    const size_t bitsA = numInputBits / 2;
    const size_t mask = (1 &lt;&lt; bitsA) - 1;

    size_t a = inputValue &amp; mask;
    size_t b = inputValue &gt;&gt; bitsA;

    return a * b;
}

size_t DivideBits (size_t inputValue, size_t numInputBits, size_t numOutputBits)
{
    // break the input bits in half and add them
    const size_t bitsA = numInputBits / 2;
    const size_t mask = (1 &lt;&lt; bitsA) - 1;

    size_t a = inputValue &amp; mask;
    size_t b = inputValue &gt;&gt; bitsA;

    // workaround for divide by zero
    if (b == 0)
        return 0;

    return a / b;
}

size_t ModulusBits (size_t inputValue, size_t numInputBits, size_t numOutputBits)
{
    // break the input bits in half and add them
    const size_t bitsA = numInputBits / 2;
    const size_t mask = (1 &lt;&lt; bitsA) - 1;

    size_t a = inputValue &amp; mask;
    size_t b = inputValue &gt;&gt; bitsA;

    // workaround for divide by zero
    if (b == 0)
        return 0;

    return a % b;
}

int main (int argc, char **argv)
{
    //MakeANFLookupTable&lt;3, 2&gt;(CountBits);    // Output bits needs to be enough to store the number &quot;input bits&quot;
    //MakeANFLookupTable&lt;4, 3&gt;(AddBits);      // Output bits needs to be (InputBits / 2)+1
    //MakeANFLookupTable&lt;4, 4&gt;(MultiplyBits); // Output bits needs to be same as input bits
    //MakeANFLookupTable&lt;4, 2&gt;(DivideBits);   // Output bits needs to be half of input bits (rounded down)
    //MakeANFLookupTable&lt;4, 2&gt;(ModulusBits);  // Output bits needs to be half of input bits (rounded down)
    //MakeANFLookupTable&lt;10, 5&gt;(DivideBits);  // 5 bit vs 5 bit division is amazingly complex!
    MakeANFLookupTable&lt;4, 2&gt;(ModulusBits);  // Output bits needs to be half of input bits (rounded down)
    WaitForEnter();
    return 0;
}
[/code]

<h2>Sample Code Runs</h2>

Here is the program output for a "bit count" circuit.  It counts the number of bits that are 1, in the 3 bit input, and outputs the answer as 2 bit output.  Note that the bit 0 output is the same functionality as the example we worked through by hand, and you can see that it comes up with the same answer.
<img src="https://demofox2.files.wordpress.com/2016/04/anf_bitcount.png"/>

Here is the program output for an adder circuit.  It adds two 2 bit numbers, and outputs a 3 bit output.
<img src="https://demofox2.files.wordpress.com/2016/04/anf_add.png"/>

Here is the program output for a multiplication circuit.  It multiplies two 2 bit numbers, and outputs a 4 bit number.
<img src="https://demofox2.files.wordpress.com/2016/04/anf_multiply.png"/>

Here is the program output for a division circuit.  It divides a 2 bit number by another 2 bit number and outputs a 2 bit number.  When higher bit counts are involved, the division circuit gets super complicated, it's really crazy!  5 bit divided by 5 bit is several pages of output for instance.  Note that it returns 0 whenever it would divide by 0.
<img src="https://demofox2.files.wordpress.com/2016/04/anf_divide.png"/>

Lastly, here is the program output for a modulus circuit.  It divides a 2 bit number by another 2 bit number and outputs the remainder as a 2 bit number.
<img src="https://demofox2.files.wordpress.com/2016/04/anf_modulus.png"/>

<h2>Closing and Links</h2>

While the above shows you how to turn a single bit truth table into ANF, extending this to a multi bit lookup table is super simple;  you just do the same process for each output bit in the lookup table.

Here are a few links in case anything above is unclear, or you want more information.

<a href="http://math.stackexchange.com/questions/109296/finding-boolean-logical-expressions-for-truth-tables-in-algebraic-normal-forman" target="_blank">Finding Boolean/Logical Expressions for truth tables in algebraic normal form(ANF)</a>

<a href="http://math.stackexchange.com/questions/38335/finding-boolean-logical-expressions-for-truth-tables" target="_blank">Finding Boolean/Logical Expressions for truth tables</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4281</wp:post_id>
		<wp:post_date><![CDATA[2016-04-09 20:32:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-04-10 04:32:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[turning-a-truth-table-into-a-digital-circuit-anf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="encryption-security"><![CDATA[Encryption + Security]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495673977;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3077;}i:1;a:1:{s:2:"id";i:5090;}i:2;a:1:{s:2:"id";i:5321;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_2b9698d136b8fc930fb595dae94b5b85]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_665fb54ea24a898c219c9eda27583a3b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Shamir&#039;s Quest: Collect Any 3 Keys To Unlock The Secret!</title>
		<link>http://blog.demofox.org/2016/04/30/shamirs-quest-collect-any-3-keys-to-unlock-the-secret/</link>
		<pubDate>Sun, 01 May 2016 04:06:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4341</guid>
		<description></description>
		<content:encoded><![CDATA[This post is on something called Shamir's Secret Sharing.  It's a technique where you can break a secret number up into $latex M $ different pieces, where if you have any $latex N $ of those $latex M $ pieces, you are able to figure out the secret.

Thinking of it in video game terms, imagine there are 10 keys hidden in a level, but you can escape the level whenever you find any 7 of them.  This is what Shamir's Secret Sharing enables you to set up cryptographically.

Interestingly in this case, the term sharing in "secret sharing" doesn't mean sharing the secret with others.  It means breaking the secret up into pieces, or SHARES.  Secret sharing means that you make shares out of a secret, such that if you have enough of the shares, you can recover the secret.

<h2>How Do You Share (Split) The Secret?</h2>

The basic idea of how it works is actually really simple.  This is good for us trying to learn the technique, but also good to show it's security since there are so few moving parts.

It relies on something called the <a href="https://en.wikipedia.org/wiki/Polynomial_interpolation#unisolvence_theorem" target="_blank">Unisolvence Theorem</a> which is a fancy label meaning these things:
<ul>
	<li>If you have a linear equation, it takes two (x,y) points to uniquely identify that line.  No matter how you write a linear equation, if it passes through those same two points, it's mathematically equivelant.</li>
	<li>If you have a quadratic equation, it takes three (x,y) points to uniquely identify that quadratic curve.  Again, no matter how you write a quadratic equation, if it passes through those same three points, it's mathematically equivalent.</li>
	<li>The pattern continues for equations of any degree.  Cubic equations require four points to be uniquely identified, Quartic equations require five points, and so on.</li>
</ul>

At a high level, how this technique works is that the number of shares (keys) you want someone to collect ($latex N $) defines the degree of an equation.

You use random numbers as the coefficients of the powers of $latex x $ in that equation, but use your secret number as the constant term.

You then create $latex M $ data points of the form $latex (x,y) $ aka $latex (x,f(x)) $.  Those are your shares. You then give individual shares to people, or go hide them in your dungeon or do whatever you are going to do with them.

As soon as any one person has $latex N $ of those $latex M $ shares (data points), they will be able to figure out the equation of the curve and thus get the secret.

The secret number is the constant term of the polynomial, which is also just $latex f(0) $.

This image below from wikipedia is great for seeing how you may have two points of a cubic curve, but without a third point you can't be sure what the quadratic equation is.  In fact, there are an infinite number of quadratic curves that pass through any two points!  Because of that, it takes the full number of required shares for you to be able to unlock the secret.

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/3_polynomials_of_degree_2_through_2_points.svg/240px-3_polynomials_of_degree_2_through_2_points.svg.png"/>

<h2>Example: Sharing (Splitting) The Secret</h2>

First you decide how many shares you want it to take to unlock the secret.  This determines the degree of your equation.

Let's say you wanted a person to have to have four shares to unlock the secret.  This means our equation will be a cubic equation, since it takes four points to uniquely define a cubic equation.

Our equation is:

$latex f(x) = R_1x^3 + R_2x^2 + R_3x + S $

Where the $latex R_i $ values are random numbers, and $latex S $ is the secret value.

Let's say that our secret value is 435, and that we picked some random numbers for the equation, making the below:

$latex f(x) = 28x^3 + 64x^2 + 9x + 435 $

We now have a function that is uniquely identifiable by any 4 points of data on it's curve.

Next we decide how many pieces we are going to create total.  We need at least 4 so that it is in fact solvable.  Let's make 6 shares.

To do this, you just plug in 6 different values of x and pair each x value with it's y value.  Let's do that:

$latex
\\begin{array}{c|c}
x & f(x) \\\\
\\hline
1 & 536 \\\\
2 & 933 \\\\
3 & 1794 \\\\
4 & 3287 \\\\
5 & 5580 \\\\
6 & 8841 \\\\
\\end{array}
$

When doing this part, remember that the secret number is $latex f(0) $, so make sure and not share what the value of the function is when x is 0!

You could then distribute the shares (data pairs) as you saw fit.  Maybe some people are more important, so you give them more than one share, requiring a smaller amount of cooperation with them to unlock the secret.

Share distribution details are totally up to you, but we now have our shares, whereby if you have any of the 4 of the 6 total shares, you can unlock the secret.

<h2>How Do You Join The Secret?</h2>

Once you have the right number of shares and you know the degree of the polynomial (pre-shared "public" information), unlocking the secret is a pretty straightforward process too.  To unlock the secret, you just need to use ANY method available for creating an equation of the correct degree from a set of data points.

This can be one of several different interpolation techniques, but the most common one to use seems to be Lagrange interpolation, which is something I previously wrote up that you can read about here: <a href="http://blog.demofox.org/2015/07/08/lagrange-interpolation/">Lagrange Interpolation</a>.

Once you have the equation, you can either evaluate $latex f(0) $, or you can write the equation in polynomial form and the constant term will be the secret value. 

<h2>Example: Joining the Secret</h2>

Let's say that we have these four shares and are ready to get the cubic function and then unlock the secret number:

$latex
\\begin{array}{c|c}
x & y \\\\
\\hline
1 & 536 \\\\
2 & 933 \\\\
4 & 3287 \\\\
6 & 8841 \\\\
\\end{array}
$

We could bust out some Lagrange interpolation and figure this out, but let's be lazy... err efficient I mean.  Wolfram alpha can do this for us!

<a href="http://www.wolframalpha.com/input/?i=cubic+fit+(1,+536),+(2,+933),+(4,+3287),+(6,+8841)" target="_blank">Wolfram Alpha: cubic fit (1, 536), (2, 933), (4, 3287), (6, 8841)</a>

That gives us this equation, saying that it is a perfect fit (which it is!)
$latex 28x^3 + 64x^2 + 9x + 435 $

You can see that our constant term (and $latex f(0) $) is the correct secret value of 435.

Daaaayummm Bru... that is lit AF!  We just got hacked by wolfram alpha :P

<h2>A Small Complication</h2>

Unfortunately, the above has a weakness.  The weakness is that each share you get gives you a little bit more information about the secret value.  You can read more about this in the links section at the end if you want to know more details.

Ideally, you wouldn't have any information about the secret value until you had the full number of shares required to unlock the secret.

To address this problem, we are going to choose some prime number $latex k $ and instead of shares being $latex (x,y) $ data points on the curve, they are going to be $latex (x,y \\bmod k) $.  In technical terms we are going to be using points on a finite field, or a Galois field.

The value we choose for $latex k $ needs to be larger than any of the coefficients of our terms (the random numbers) as well as larger than our secret value and larger than the number of shares we want to create.  The larger the better besides that, because a larger $latex k $ value means a larger "brute force" space to search.

If you want to use this technique in a situation which has real needs for security, please make sure and read more on this technique from more authoritative sources.  I'm glossing over the details of security quite a bit, and just trying to give an intuitive understanding of this technique (:

<h2>Source Code</h2>

Below is some sample source code that implements Shamir's Secret Sharing in C++.

I use 64 bit integers, but if you were going to be using this in a realistic situation you could very well overflow 64 bit ints and get the wrong answers.  I hit this problem for instance when trying to require more than about 10 shares, using a prime of 257, and generating 50 shares.  If you hit the limit of 64 bit ints you can use a multi precision math library instead to have virtually unlimited sized ints.  The boost multiprecision header library is a decent choice for multi precision integers, specifically cpp_int.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;
#include &lt;vector&gt;
#include &lt;math.h&gt;
#include &lt;random&gt;
#include &lt;assert.h&gt;
#include &lt;stdint.h&gt;
#include &lt;inttypes.h&gt;

typedef int64_t TINT;
typedef std::array&lt;TINT, 2&gt; TShare;
typedef std::vector&lt;TShare&gt; TShares;

class CShamirSecretSharing
{
public:
    CShamirSecretSharing (size_t sharesNeeded, TINT prime)
        : c_sharesNeeded(sharesNeeded), c_prime(prime)
    {
        // There needs to be at least 1 share needed
        assert(sharesNeeded &gt; 0);
    }

    // Generate N shares for a secretNumber
    TShares GenerateShares (TINT secretNumber, TINT numShares) const
    {
        // calculate our curve coefficients
        std::vector&lt;TINT&gt; coefficients;
        {
            // store the secret number as the first coefficient;
            coefficients.resize((size_t)c_sharesNeeded);
            coefficients[0] = secretNumber;

            // randomize the rest of the coefficients
            std::array&lt;int, std::mt19937::state_size&gt; seed_data;
            std::random_device r;
            std::generate_n(seed_data.data(), seed_data.size(), std::ref(r));
            std::seed_seq seq(std::begin(seed_data), std::end(seed_data));
            std::mt19937 gen(seq);
            std::uniform_int_distribution&lt;TINT&gt; dis(1, c_prime - 1);
            for (TINT i = 1; i &lt; c_sharesNeeded; ++i)
                coefficients[(size_t)i] = dis(gen);
        }

        // generate the shares
        TShares shares;
        shares.resize((size_t)numShares);
        for (size_t i = 0; i &lt; numShares; ++i)
            shares[i] = GenerateShare(i + 1, coefficients);
        return shares;
    }

    // use lagrange polynomials to find f(0) of the curve, which is the secret number
    TINT JoinShares (const TShares&amp; shares) const
    {
        // make sure there is at elast the minimum number of shares
        assert(shares.size() &gt;= size_t(c_sharesNeeded));

        // Sigma summation loop
        TINT sum = 0;
        for (TINT j = 0; j &lt; c_sharesNeeded; ++j)
        {
            TINT y_j = shares[(size_t)j][1];

            TINT numerator = 1;
            TINT denominator = 1;

            // Pi product loop
            for (TINT m = 0; m &lt; c_sharesNeeded; ++m)
            {
                if (m == j)
                    continue;

                numerator = (numerator * shares[(size_t)m][0]) % c_prime;
                denominator = (denominator * (shares[(size_t)m][0] - shares[(size_t)j][0])) % c_prime;
            }

            sum = (c_prime + sum + y_j * numerator * modInverse(denominator, c_prime)) % c_prime;
        }
        return sum;
    }

    const TINT GetPrime () const { return c_prime; }
    const TINT GetSharesNeeded () const { return c_sharesNeeded; }

private:

    // Generate a single share in the form of (x, f(x))
    TShare GenerateShare (TINT x, const std::vector&lt;TINT&gt;&amp; coefficients) const
    {
        TINT xpow = x;
        TINT y = coefficients[0];
        for (TINT i = 1; i &lt; c_sharesNeeded; ++i) {
            y += coefficients[(size_t)i] * xpow;
            xpow *= x;
        }
        return{ x, y % c_prime };
    }

    // Gives the decomposition of the gcd of a and b.  Returns [x,y,z] such that x = gcd(a,b) and y*a + z*b = x
    static const std::array&lt;TINT, 3&gt; gcdD (TINT a, TINT b) {
        if (b == 0)
            return{ a, 1, 0 };

        const TINT n = a / b;
        const TINT c = a % b;
        const std::array&lt;TINT, 3&gt; r = gcdD(b, c);

        return{ r[0], r[2], r[1] - r[2] * n };
    }

    // Gives the multiplicative inverse of k mod prime.  In other words (k * modInverse(k)) % prime = 1 for all prime &gt; k &gt;= 1 
    static TINT modInverse (TINT k, TINT prime) {
        k = k % prime;
        TINT r = (k &lt; 0) ? -gcdD(prime, -k)[2] : gcdD(prime, k)[2];
        return (prime + r) % prime;
    }

private:
    
    // Publically known information
    const TINT          c_prime;
    const TINT          c_sharesNeeded;
};

void WaitForEnter ()
{
    printf(&quot;Press Enter to quit&quot;);
    fflush(stdin);
    getchar();
}

int main (int argc, char **argv)
{
    // Parameters
    const TINT c_secretNumber = 435;
    const TINT c_sharesNeeded = 7;
    const TINT c_sharesMade = 50;
    const TINT c_prime = 439;   // must be a prime number larger than the other three numbers above

    // set up a secret sharing object with the public information
    CShamirSecretSharing secretSharer(c_sharesNeeded, c_prime);

    // split a secret value into multiple shares
    TShares shares = secretSharer.GenerateShares(c_secretNumber, c_sharesMade);

    // shuffle the shares, so it's random which ones are used to join
    std::array&lt;int, std::mt19937::state_size&gt; seed_data;
    std::random_device r;
    std::generate_n(seed_data.data(), seed_data.size(), std::ref(r));
    std::seed_seq seq(std::begin(seed_data), std::end(seed_data));
    std::mt19937 gen(seq);
    std::shuffle(shares.begin(), shares.end(), gen);

    // join the shares
    TINT joinedSecret = secretSharer.JoinShares(shares);

    // show the public information and the secrets being joined
    printf(&quot;%&quot; PRId64 &quot; shares needed, %i shares made\n&quot;, secretSharer.GetSharesNeeded(), shares.size());
    printf(&quot;Prime = %&quot; PRId64 &quot;\n\n&quot;, secretSharer.GetPrime());
    for (TINT i = 0, c = secretSharer.GetSharesNeeded(); i &lt; c; ++i)
        printf(&quot;Share %&quot; PRId64 &quot; = (%&quot; PRId64 &quot;, %&quot; PRId64 &quot;)\n&quot;, i+1, shares[i][0], shares[i][1]);

    // show the result
    printf(&quot;\nJoined Secret = %&quot; PRId64 &quot;\nActual Secret = %&quot; PRId64 &quot;\n\n&quot;, joinedSecret, c_secretNumber);
    assert(joinedSecret == c_secretNumber);
    WaitForEnter();
    return 0;
}
[/code]

<h2>Example Output</h2>

Here is some example output of the program:
<img src="https://demofox2.files.wordpress.com/2016/04/SSS.png"/>

<h2>Links</h2>

<a href="https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing" target="_blank">Wikipedia: Shamir's Secret Sharing</a> (Note: for some reason the example javascript implementation here only worked for odd numbered keys required)
<a href="https://en.wikipedia.org/wiki/Finite_field" target="_blank">Wikipedia: Finite Field</a>
<a href="http://cryptography.wikia.com/wiki/Shamir's_Secret_Sharing" target="_blank">Cryptography.wikia.com: Shamir's Secret Sharing</a>
<a href="http://stackoverflow.com/questions/19327651/java-implementation-of-shamirs-secret-sharing" target="_blank">Java Implementation of Shamir's Secret Sharing</a> (Note: I don't think this implementation is correct, and neither is the one that someone posted to correct them!)

When writing this post I wondered if maybe you could use the coefficients of the other terms as secrets as well.  These two links talk about the details of that:
<a href="http://crypto.stackexchange.com/questions/34827/why-only-one-secret-value-with-shamirs-secret-sharing" target="_blank">Cryptography Stack Exchange: Why only one secret value with Shamir's secret sharing?</a>
<a href="http://crypto.stackexchange.com/questions/12549/coefficients-in-shamirs-secret-sharing-scheme" target="_blank">Cryptography Stack Exchange: Coefficients in Shamir's Secret Sharing Scheme</a>

Now that you understand this, you are probably ready to start reading up on elliptic curve cryptography.  Give this link below a read if you are interested in a gentle introduction on that!
<a href="https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/" target="_blank">A (Relatively Easy To Understand) Primer on Elliptic Curve Cryptography</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4341</wp:post_id>
		<wp:post_date><![CDATA[2016-04-30 20:06:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-01 04:06:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[shamirs-quest-collect-any-3-keys-to-unlock-the-secret]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<category domain="category" nicename="encryption-security"><![CDATA[Encryption + Security]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495691754;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2697;}i:1;a:1:{s:2:"id";i:2473;}i:2;a:1:{s:2:"id";i:3239;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Who Cares About Dynamic Array Growth Strategies?</title>
		<link>http://blog.demofox.org/2016/05/18/who-cares-about-dynamic-array-growth-strategies/</link>
		<pubDate>Thu, 19 May 2016 05:35:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4391</guid>
		<description></description>
		<content:encoded><![CDATA[Let's say that you've allocated an array of 20 integers and have used them all.  Now it's time to allocate more, but you aren't quite sure how many integers you will need in the end.  What do you do?

Realloc is probably what you think of first for solving this problem, but let's ignore that option for the moment.  (If you haven't used realloc before, give this a read! <a href="http://blog.demofox.org/2013/09/09/alloca-and-realloc-useful-tools-not-ancient-relics/" target="_blank">Alloca and Realloc – Useful Tools, Not Ancient Relics</a>)

Without realloc you are left with allocating a new buffer of memory, copying the old buffer to the new buffer, and then freeing the old buffer.

The question remains though, how much memory should you allocate for this new, larger buffer?

You could double your current buffer size whenever you ran out of space.  This would mean that as the buffer grew over time, you would do fewer allocations but would have more wasted (allocated but unused) memory.

You could also go the other way and just add 10 more int's every time you ran out of space.  This would mean that you would do a larger number of allocations (more CPU usage, possibly more fragmentation), but you'd end up with less wasted space.

Either way, it obviously depends entirely on usage patterns and it's all subjective and situational.

...Or is it?

<h2>A Surprising Reason For Caring</h2>

Believe it or not, growth strategies can make a huge difference.  Below we will explore the difference between the seemingly arbitrary rules of making a buffer twice as big, or 1.5 times as big.

Let's say that we have a bunch of free memory starting at address 0.  Let's analyze what happens as we resize arrays in each scenario.

<b>2x Buffer Size</b>

First let's see what happens when we double a buffer's size when it gets full.

<img src="https://demofox2.files.wordpress.com/2016/05/BufferDouble.png"/>

We start by allocating 16 bytes.  The allocator gives us address 0 for our pointer.

When the buffer gets full, we allocate 32 bytes (at address 16), copy the 16 bytes into it and then free our first 16 byte buffer.

When that buffer gets full, we allocate 64 bytes (at address 48), copy the 32 bytes into it and then free our 32 byte buffer.

Lastly, that buffer gets full, so we allocate 128 bytes (at address 112), copy the 64 bytes into it and then free our 64 byte buffer.

As you can see, doubling the buffer size causes our pointer to keep moving further down in address space, and a free piece of memory before it will never be large enough to hold a future allocation.

<b>1.5x Buffer Size</b>

Let's see what happens when we make a buffer 1.5x as large when it gets full.

<img src="https://demofox2.files.wordpress.com/2016/05/Buffer15.png"/>

We start by allocating 16 bytes.  The allocator gives us address 0 for our pointer.

When the buffer gets full, we allocate 24 bytes (at address 16), copy the 16 bytes into it and then free our first 16 byte buffer.

When that buffer gets full, we allocate 36 bytes (at address 40), copy the 24 bytes into it and free the 24 byte buffer.

When that buffer gets full, we allocate 54 bytes (at address 76), copy the 36 bytes into it and free the 36 byte buffer.

When that buffer gets full, we allocate 81 bytes (at address 130), copy the 54 bytes into it and free the 54 byte buffer.

Lastly, when that buffer gets full, we need to allocate 122 bytes (we rounded it up).  In this case, there is 130 bytes of unused memory starting at address 0, so we can just allocate 122 of those bytes, copy our 81 bytes into it and free the 81 byte buffer.

Our allocations have folded back into themselves.  Our pattern of resizing hasn't created an ever moving / ever growing memory fragmentation monster, unlike the buffer size doubling, which has!

<h2>Small Print</h2>

The above does decrease memory fragmentation, by encouraging an allocation to tend to stay in one spot in memory, but it comes at a cost.  That cost is that since it's allocating less extra memory when it runs out, that you will end up having to do more allocations to reach the same level of memory usage.

That might be a benefit though, depending on your specific needs.  Another way of looking at that is that you will end up with fewer bytes of wasted memory.  By wasted memory I mean allocated bytes which are not actually used to store anything.

<h2>Realloc Makes This Moot Right?</h2>

You may be thinking "well if I use realloc, I don't need to care about this right?"

That isn't exactly true.  If realloc is unable to give you more memory at the current pointer location, it will allocate a new buffer, copy the old data to the new buffer, free the old buffer, and return you the pointer to the new buffer.  This is exactly the case that happens when you don't use realloc.

Using the above growth strategy with realloc makes realloc work even better.  It's a good thing!

Caveat: exotic allocator behavior may not actually benefit from using this strategy with realloc, so have a look for yourself if you are in doubt!

<h2>Links</h2>
Here's a discussion on the topic:
<a href="http://stackoverflow.com/questions/1100311/what-is-the-ideal-growth-rate-for-a-dynamically-allocated-array" target="_blank">What is the ideal growth rate for a dynamically allocated array?</a>

From the link above, apparently the ideal factor to use when upsizing a buffer in general (when worrying about fragmentation like this), is the golden ratio 1.618.  Weird, huh?

Have other information about why various growth factors matter?  Leave a comment or drop me a line (:

Thanks to Tom for mentioning this concept.  Pretty interesting and surprising IMO.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4391</wp:post_id>
		<wp:post_date><![CDATA[2016-05-18 21:35:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-05-19 05:35:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[who-cares-about-dynamic-array-growth-strategies]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495706191;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:624;}i:1;a:1:{s:2:"id";i:1760;}i:2;a:1:{s:2:"id";i:4423;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Synthesizing a Plucked String Sound With the Karplus-Strong Algorithm</title>
		<link>http://blog.demofox.org/2016/06/16/synthesizing-a-pluked-string-sound-with-the-karplus-strong-algorithm/</link>
		<pubDate>Thu, 16 Jun 2016 18:21:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4423</guid>
		<description></description>
		<content:encoded><![CDATA[If you are looking to synthesize the sound of a plucked string, there is an amazingly simple algorithm for doing so called the Karplus-Strong Algorithm.

Give it a listen: <a href="https://demofox2.files.wordpress.com/2016/06/karplusstrong.wav" target="_blank">KarplusStrong.wav</a>
Here it is with flange and reverb effects applied: <a href="https://demofox2.files.wordpress.com/2016/06/kpflangereverb.wav" target="_blank">KPFlangeReverb.wav</a>

It works like this:
<ol>
	<li>Fill a circular buffer with static (random numbers)</li>
	<li>Play the contents of the circular buffer over and over</li>
	<li>Each time you play a sample, replace that sample with the average of itself and the next sample in the buffer.  Also multiplying that average by a feedback value (like say, 0.996)
</li>
</ol>

Amazingly, that is all there is to it!

<h2>Why Does That Work?!</h2>

The reason this works is that it is actually very similar to how a real guitar string pluck works.

When you pluck a guitar string, if you had a perfect pluck at the perfect location with the perfect transfer of energy, you'd get a note that was "perfect".  It wouldn't be a pure sine wave since strings have harmonics (integer multiple frequencies) beyond their basic tuning, but it would be a pure note.

In reality, that isn't what happens, so immediately after plucking the string, there is a lot of vibrations in there that "don't belong" due to the imperfect pluck.  Since the string is tuned, it wants to be vibrating a specific way, so over time the vibrations evolve from the imperfect pluck vibrations to the tuning of the guitar string.  As you average the samples together, you are removing the higher frequency noise/imperfections.  Averaging is a crude low pass filter.  This makes it converge to the right frequencies over time.

It's also important to note that with a real stringed instrument, when you play a note, the high frequencies disappear before the low frequencies.  This averaging / low pass filter makes that happen as well and is part of what helps it sound so realistic.

Also while all that is going on, the energy in the string is being diminished as it becomes heat and sound waves and such, so the noise gets quieter over time.  When you multiply the values by a feedback value which is less than 1, you are simulating this loss of energy by making the values get smaller over time.

<h2>Tuning The Note</h2>

This wasn't intuitive for me at first, but the frequency that the note plays at is determined ENTIRELY by the size of the circular buffer.

If your audio has a sample rate of 44100hz (44100 samples played a second), and you use this algorithm with a buffer size of 200 samples, that means that the note synthesized will be 220.5hz.  This is because 44100/200 = 220.5.

Thinking about the math from another direction, we can figure out what our buffer size needs to be for a specific frequency.  If our sample rate is 44100hz and we want to play a note at 440hz, that means we need a buffer size of 100.23 samples.  This is because 44100/440 = 100.23.  Since we can't have a fractional number of samples, we can just round to 100.

You can actually deal with the fractional buffer size by stepping through the ring buffer in non integer steps and using the fraction to interpolate audio samples, but I'll leave that as an exercise for you if you want that perfectly tuned note.  IMO leaving it slightly off could actually be a good thing.  What guitar is ever perfectly in tune, right?!  With it being slightly out of tune, it's more likely to make more realistic sounds and sound interactions when paired with other instruments.

You are probably wondering like I was, why the buffer size affects the frequency of the note.  The reason for this is actually pretty simple and intuitive after all.

The reason is because the definition of frequency is just how many times a wave form repeats per second.  The wave form could be a sine wave, a square wave, a triangle wave, or it could be something more complex, but frequency is always the number of repetitions per second.  If you think about our ring buffer as being a wave form, you can now see that if we have a buffer size of 200 samples, and a sample rate of 44100hz, when we play that buffer continually, it's going to play back 220.5 times every second, which means it will play with a frequency of 220.5!

Sure, we modify the buffer (and waveform) as we play it, but the modifications are small, so the waveform is similar from play to play.

<h2>Some More Details</h2>

I've found that this algorithm doesn't work as well with low frequency notes as it does with high frequency notes.

They say you can prime the buffer with a saw tooth wave (or other wave forms) instead of static (noise).  While it still "kind of works", in my experimentation, it didn't work out that well.

You could try using other low pass filters to see if that affects the quality of the note generated.  The simple averaging method works so well, I didn't explore alternative options very much.

Kmm on hacker news commented that averaging the current sample with the last and next, instead of just the next had the benefit that the wave form didn't move forward half a step each play through and that there is an audible difference between the techniques.  I gave it a try and sure enough, there is an audible difference, the sound is less harsh on the ears.  I believe this is so because averaging 3 samples instead of 2 is a stronger low pass filter, so gets rid of higher frequencies faster.

<h2>Example Code</h2>

Here is the C++ code that generated the sample at the top of the post.  Now that you can generate plucked string sounds, you can add some distortion, flange, reverb, etc and make some sweet (synthesized) metal without having to learn to play guitar and build up finger calluses :P

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;memory.h&gt;
#include &lt;inttypes.h&gt;
#include &lt;vector&gt;

// constants
const float c_pi = 3.14159265359f;
const float c_twoPi = 2.0f * c_pi;

// typedefs
typedef uint16_t    uint16;
typedef uint32_t    uint32;
typedef int16_t     int16;
typedef int32_t     int32;

//this struct is the minimal required header data for a wav file
struct SMinimalWaveFileHeader
{
    //the main chunk
    unsigned char m_chunkID[4];
    uint32		  m_chunkSize;
    unsigned char m_format[4];

    //sub chunk 1 &quot;fmt &quot;
    unsigned char m_subChunk1ID[4];
    uint32		  m_subChunk1Size;
    uint16		  m_audioFormat;
    uint16		  m_numChannels;
    uint32		  m_sampleRate;
    uint32		  m_byteRate;
    uint16		  m_blockAlign;
    uint16		  m_bitsPerSample;

    //sub chunk 2 &quot;data&quot;
    unsigned char m_subChunk2ID[4];
    uint32		  m_subChunk2Size;

    //then comes the data!
};

//this writes
template &lt;typename T&gt;
bool WriteWaveFile(const char *fileName, std::vector&lt;T&gt; data, int16 numChannels, int32 sampleRate)
{
    int32 dataSize = data.size() * sizeof(T);
    int32 bitsPerSample = sizeof(T) * 8;

    //open the file if we can
    FILE *File = nullptr;
    fopen_s(&amp;File, fileName, &quot;w+b&quot;);
    if (!File)
        return false;

    SMinimalWaveFileHeader waveHeader;

    //fill out the main chunk
    memcpy(waveHeader.m_chunkID, &quot;RIFF&quot;, 4);
    waveHeader.m_chunkSize = dataSize + 36;
    memcpy(waveHeader.m_format, &quot;WAVE&quot;, 4);

    //fill out sub chunk 1 &quot;fmt &quot;
    memcpy(waveHeader.m_subChunk1ID, &quot;fmt &quot;, 4);
    waveHeader.m_subChunk1Size = 16;
    waveHeader.m_audioFormat = 1;
    waveHeader.m_numChannels = numChannels;
    waveHeader.m_sampleRate = sampleRate;
    waveHeader.m_byteRate = sampleRate * numChannels * bitsPerSample / 8;
    waveHeader.m_blockAlign = numChannels * bitsPerSample / 8;
    waveHeader.m_bitsPerSample = bitsPerSample;

    //fill out sub chunk 2 &quot;data&quot;
    memcpy(waveHeader.m_subChunk2ID, &quot;data&quot;, 4);
    waveHeader.m_subChunk2Size = dataSize;

    //write the header
    fwrite(&amp;waveHeader, sizeof(SMinimalWaveFileHeader), 1, File);

    //write the wave data itself
    fwrite(&amp;data[0], dataSize, 1, File);

    //close the file and return success
    fclose(File);
    return true;
}

template &lt;typename T&gt;
void ConvertFloatSamples (const std::vector&lt;float&gt;&amp; in, std::vector&lt;T&gt;&amp; out)
{
    // make our out samples the right size
    out.resize(in.size());

    // convert in format to out format !
    for (size_t i = 0, c = in.size(); i &lt; c; ++i)
    {
        float v = in[i];
        if (v &lt; 0.0f)
            v *= -float(std::numeric_limits&lt;T&gt;::lowest());
        else
            v *= float(std::numeric_limits&lt;T&gt;::max());
        out[i] = T(v);
    }
}
//calculate the frequency of the specified note.
//fractional notes allowed!
float CalcFrequency(float octave, float note)
/*
	Calculate the frequency of any note!
	frequency = 440×(2^(n/12))

	N=0 is A4
	N=1 is A#4
	etc...

	notes go like so...
	0  = A
	1  = A#
	2  = B
	3  = C
	4  = C#
	5  = D
	6  = D#
	7  = E
	8  = F
	9  = F#
	10 = G
	11 = G#
*/
{
    return (float)(440 * pow(2.0, ((double)((octave - 4) * 12 + note)) / 12.0));
}

class CKarplusStrongStringPluck
{
public:
    CKarplusStrongStringPluck (float frequency, float sampleRate, float feedback)
    {
        m_buffer.resize(uint32(float(sampleRate) / frequency));
        for (size_t i = 0, c = m_buffer.size(); i &lt; c; ++i) {
            m_buffer[i] = ((float)rand()) / ((float)RAND_MAX) * 2.0f - 1.0f;  // noise
            //m_buffer[i] = float(i) / float(c); // saw wave
        }
        m_index = 0;
        m_feedback = feedback;
    }

    float GenerateSample ()
    {
        // get our sample to return
        float ret = m_buffer[m_index];

        // low pass filter (average) some samples
        float value = (m_buffer[m_index] + m_buffer[(m_index + 1) % m_buffer.size()]) * 0.5f * m_feedback;
        m_buffer[m_index] = value;

        // move to the next sample
        m_index = (m_index + 1) % m_buffer.size();

        // return the sample from the buffer
        return ret;
    }

private:
    std::vector&lt;float&gt;  m_buffer;
    size_t              m_index;
    float               m_feedback;
};

void GenerateSamples (std::vector&lt;float&gt;&amp; samples, int sampleRate)
{
    std::vector&lt;CKarplusStrongStringPluck&gt; notes;

    enum ESongMode {
        e_twinkleTwinkle,
        e_strum
    };

    int timeBegin = 0;
    ESongMode mode = e_twinkleTwinkle;
    for (int index = 0, numSamples = samples.size(); index &lt; numSamples; ++index)
    {
        switch (mode) {
            case e_twinkleTwinkle: {
                const int c_noteTime = sampleRate / 2;
                int time = index - timeBegin;
                // if we should start a new note
                if (time % c_noteTime == 0) {
                    int note = time / c_noteTime;
                    switch (note) {
                        case 0:
                        case 1: {
                            notes.push_back(CKarplusStrongStringPluck(CalcFrequency(3, 0), float(sampleRate), 0.996f));
                            break;
                        }
                        case 2:
                        case 3: {
                            notes.push_back(CKarplusStrongStringPluck(CalcFrequency(3, 7), float(sampleRate), 0.996f));
                            break;
                        }
                        case 4:
                        case 5: {
                            notes.push_back(CKarplusStrongStringPluck(CalcFrequency(3, 9), float(sampleRate), 0.996f));
                            break;
                        }
                        case 6: {
                            notes.push_back(CKarplusStrongStringPluck(CalcFrequency(3, 7), float(sampleRate), 0.996f));
                            break;
                        }
                        case 7: {
                            mode = e_strum;
                            timeBegin = index+1;
                            break;
                        }
                    }
                }
                break;
            }
            case e_strum: {
                const int c_noteTime = sampleRate / 32;
                int time = index - timeBegin - sampleRate;
                // if we should start a new note
                if (time % c_noteTime == 0) {
                    int note = time / c_noteTime;
                    switch (note) {
                        case 0: notes.push_back(CKarplusStrongStringPluck(55.0f, float(sampleRate), 0.996f)); break;
                        case 1: notes.push_back(CKarplusStrongStringPluck(55.0f + 110.0f, float(sampleRate), 0.996f)); break;
                        case 2: notes.push_back(CKarplusStrongStringPluck(55.0f + 220.0f, float(sampleRate), 0.996f)); break;
                        case 3: notes.push_back(CKarplusStrongStringPluck(55.0f + 330.0f, float(sampleRate), 0.996f)); break;
                        case 4: mode = e_strum; timeBegin = index + 1; break;
                    }
                }
                break;
            }
        }

        // generate and mix our samples from our notes
        samples[index] = 0;
        for (CKarplusStrongStringPluck&amp; note : notes)
            samples[index] += note.GenerateSample();

        // to keep from clipping
        samples[index] *= 0.5f;
    }
}

//the entry point of our application
int main(int argc, char **argv)
{
    // sound format parameters
    const int c_sampleRate = 44100;
    const int c_numSeconds = 9;
    const int c_numChannels = 1;
    const int c_numSamples = c_sampleRate * c_numChannels * c_numSeconds;

    // make space for our samples
    std::vector&lt;float&gt; samples;
    samples.resize(c_numSamples);

    // generate samples
    GenerateSamples(samples, c_sampleRate);

    // convert from float to the final format
    std::vector&lt;int32&gt; samplesInt;
    ConvertFloatSamples(samples, samplesInt);

    // write our samples to a wave file
    WriteWaveFile(&quot;out.wav&quot;, samplesInt, c_numChannels, c_sampleRate);
}
[/code]

<h2>Links</h2>

<a href="https://news.ycombinator.com/item?id=11918983" target="_blank">Hacker News Discussion (This got up to topic #7, woo!)</a>

<a href="https://en.wikipedia.org/wiki/Karplus%E2%80%93Strong_string_synthesis" target="_blank">Wikipedia: Karplus-Strong String Synthesis</a>

<a href="http://www.cs.princeton.edu/courses/archive/fall07/cos126/assignments/guitar.html" target="_blank">Princeton COS 126: Plucking a Guitar String</a>

<a href="https://www.shadertoy.com/view/MdyXRd" target="_blank">Shadertoy: Karplus-Strong Variation (Audio)</a> - I tried to make a bufferless Karplus-Strong implementation on shadertoy.  It didn't quite work out but is still a bit interesting.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4423</wp:post_id>
		<wp:post_date><![CDATA[2016-06-16 10:21:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-16 18:21:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[synthesizing-a-pluked-string-sound-with-the-karplus-strong-algorithm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495611550;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2084;}i:1;a:1:{s:2:"id";i:4999;}i:2;a:1:{s:2:"id";i:2055;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2016/06/karplusstrong.wav
1587644
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2016/06/kpflangereverb.wav
2323244
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Beating Effect</title>
		<link>http://blog.demofox.org/2016/06/23/the-beating-effect/</link>
		<pubDate>Fri, 24 Jun 2016 04:12:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4448</guid>
		<description></description>
		<content:encoded><![CDATA[This post is going to be a pretty short one, so here it is :P

<h1>The Beating Effect</h1>

The beating effect occurs when you play two similar frequencies of sound at the same time.

Because playing two sounds at once means adding them together, and due to the fact that sound waves are made up of positive and negative values (aka positive and negative pressures), the sounds playing at different frequencies will sometimes add peaks and troughs together to get louder, and other times the peak of one wave will add to the valley of another wave and the result will be quieter.  This is know as constructive and destructive interference respectively.

The end result is that the sound will have a pulsing quality to it, like a tremolo effect.  If one sound is played at frequency F1 and the other sound is played at frequency F2, the pulsing sound will occur at 2*(F2-F1) times a second.

Here's a demo of this in action where the first sound is 200hz, the second sound is 205hz, and the result of them played together has a 10hz tremolo effect!

<a href="https://demofox2.files.wordpress.com/2016/06/monobeat.wav" target="_blank">monobeat.wav</a>

<h1>Binaural Beat</h1>

The beating effect happens when sound waves physically mix together.

Believe it or not though, there is a part of your brain where it mixes (adds) the sounds from each ear together as well.

That means that if you play similar frequencies to different ears, they will mix <em><strong>INSIDE YOUR BRAIN</strong></em>, and you will perceive a different kind of beating effect.

Below is a demo of that.  You might need a pair of headphones to get the full effect.

<a href="https://demofox2.files.wordpress.com/2016/06/stereobeat.wav" target="_blank">stereobeat.wav</a>

If you think this is pretty neat, you might want to google "psycho-acoustics" for more stuff like this (:

<h2>Source Code</h2>

Here's the C++ code that generated these sound files.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;memory.h&gt;
#include &lt;inttypes.h&gt;
#include &lt;vector&gt;

// constants
const float c_pi = 3.14159265359f;
const float c_twoPi = 2.0f * c_pi;

// typedefs
typedef uint16_t    uint16;
typedef uint32_t    uint32;
typedef int16_t     int16;
typedef int32_t     int32;

//this struct is the minimal required header data for a wav file
struct SMinimalWaveFileHeader
{
    //the main chunk
    unsigned char m_chunkID[4];
    uint32		  m_chunkSize;
    unsigned char m_format[4];

    //sub chunk 1 &quot;fmt &quot;
    unsigned char m_subChunk1ID[4];
    uint32		  m_subChunk1Size;
    uint16		  m_audioFormat;
    uint16		  m_numChannels;
    uint32		  m_sampleRate;
    uint32		  m_byteRate;
    uint16		  m_blockAlign;
    uint16		  m_bitsPerSample;

    //sub chunk 2 &quot;data&quot;
    unsigned char m_subChunk2ID[4];
    uint32		  m_subChunk2Size;

    //then comes the data!
};

//this writes
template &lt;typename T&gt;
bool WriteWaveFile(const char *fileName, std::vector&lt;T&gt; data, int16 numChannels, int32 sampleRate)
{
    int32 dataSize = data.size() * sizeof(T);
    int32 bitsPerSample = sizeof(T) * 8;

    //open the file if we can
    FILE *File = nullptr;
    fopen_s(&amp;File, fileName, &quot;w+b&quot;);
    if (!File)
        return false;

    SMinimalWaveFileHeader waveHeader;

    //fill out the main chunk
    memcpy(waveHeader.m_chunkID, &quot;RIFF&quot;, 4);
    waveHeader.m_chunkSize = dataSize + 36;
    memcpy(waveHeader.m_format, &quot;WAVE&quot;, 4);

    //fill out sub chunk 1 &quot;fmt &quot;
    memcpy(waveHeader.m_subChunk1ID, &quot;fmt &quot;, 4);
    waveHeader.m_subChunk1Size = 16;
    waveHeader.m_audioFormat = 1;
    waveHeader.m_numChannels = numChannels;
    waveHeader.m_sampleRate = sampleRate;
    waveHeader.m_byteRate = sampleRate * numChannels * bitsPerSample / 8;
    waveHeader.m_blockAlign = numChannels * bitsPerSample / 8;
    waveHeader.m_bitsPerSample = bitsPerSample;

    //fill out sub chunk 2 &quot;data&quot;
    memcpy(waveHeader.m_subChunk2ID, &quot;data&quot;, 4);
    waveHeader.m_subChunk2Size = dataSize;

    //write the header
    fwrite(&amp;waveHeader, sizeof(SMinimalWaveFileHeader), 1, File);

    //write the wave data itself
    fwrite(&amp;data[0], dataSize, 1, File);

    //close the file and return success
    fclose(File);
    return true;
}

template &lt;typename T&gt;
void ConvertFloatSamples (const std::vector&lt;float&gt;&amp; in, std::vector&lt;T&gt;&amp; out)
{
    // make our out samples the right size
    out.resize(in.size());

    // convert in format to out format !
    for (size_t i = 0, c = in.size(); i &lt; c; ++i)
    {
        float v = in[i];
        if (v &lt; 0.0f)
            v *= -float(std::numeric_limits&lt;T&gt;::lowest());
        else
            v *= float(std::numeric_limits&lt;T&gt;::max());
        out[i] = T(v);
    }
}

void GenerateMonoBeatingSamples (std::vector&lt;float&gt;&amp; samples, int sampleRate)
{
    int sectionLength = samples.size() / 3;
    int envelopeLen = sampleRate / 20;

    for (int index = 0, numSamples = samples.size(); index &lt; numSamples; ++index)
    {
        samples[index] = 0.0f;
        int section = index / sectionLength;
        int sectionOffset = index % sectionLength;

        // apply an envelope at front and back  of each section keep it from popping between sounds
        float envelope = 1.0f;
        if (sectionOffset &lt; envelopeLen)
            envelope = float(sectionOffset) / float(envelopeLen);
        else if (sectionOffset &gt; sectionLength - envelopeLen)
            envelope = (float(sectionLength) - float(sectionOffset)) / float(envelopeLen);

        // first sound
        if (section == 0 || section == 2)
            samples[index] += sin(float(index) * c_twoPi * 200.0f / float(sampleRate)) * envelope;

        // second sound
        if (section == 1 || section == 2)
            samples[index] += sin(float(index) * c_twoPi * 205.0f / float(sampleRate)) * envelope;

        // scale it to prevent clipping
        if (section == 2)
            samples[index] *= 0.5f;
        samples[index] *= 0.95f;
    }
}

void GenerateStereoBeatingSamples (std::vector&lt;float&gt;&amp; samples, int sampleRate)
{
    int sectionLength = (samples.size() / 2) / 3;
    int envelopeLen = sampleRate / 20;

    for (int index = 0, numSamples = samples.size() / 2; index &lt; numSamples; ++index)
    {
        samples[index * 2] = 0.0f;
        samples[index * 2 + 1] = 0.0f;

        int section = index / sectionLength;
        int sectionOffset = index % sectionLength;

        // apply an envelope at front and back  of each section keep it from popping between sounds
        float envelope = 1.0f;
        if (sectionOffset &lt; envelopeLen)
            envelope = float(sectionOffset) / float(envelopeLen);
        else if (sectionOffset &gt; sectionLength - envelopeLen)
            envelope = (float(sectionLength) - float(sectionOffset)) / float(envelopeLen);
        envelope *= 0.95f;

        // first sound
        if (section == 0 || section == 2)
            samples[index * 2] += sin(float(index) * c_twoPi * 200.0f / float(sampleRate)) * envelope;

        // second sound
        if (section == 1 || section == 2)
            samples[index * 2 + 1] += sin(float(index) * c_twoPi * 205.0f / float(sampleRate)) * envelope;
    }
}

//the entry point of our application
int main(int argc, char **argv)
{
    // generate the mono beating effect
    {
        // sound format parameters
        const int c_sampleRate = 44100;
        const int c_numSeconds = 4;
        const int c_numChannels = 1;
        const int c_numSamples = c_sampleRate * c_numChannels * c_numSeconds;

        // make space for our samples
        std::vector&lt;float&gt; samples;
        samples.resize(c_numSamples);

        // generate samples
        GenerateMonoBeatingSamples(samples, c_sampleRate);

        // convert from float to the final format
        std::vector&lt;int32&gt; samplesInt;
        ConvertFloatSamples(samples, samplesInt);

        // write our samples to a wave file
        WriteWaveFile(&quot;monobeat.wav&quot;, samplesInt, c_numChannels, c_sampleRate);
    }

    // generate the stereo beating effect (binaural beat)
    {
        // sound format parameters
        const int c_sampleRate = 44100;
        const int c_numSeconds = 4;
        const int c_numChannels = 2;
        const int c_numSamples = c_sampleRate * c_numChannels * c_numSeconds;

        // make space for our samples
        std::vector&lt;float&gt; samples;
        samples.resize(c_numSamples);

        // generate samples
        GenerateStereoBeatingSamples(samples, c_sampleRate);

        // convert from float to the final format
        std::vector&lt;int32&gt; samplesInt;
        ConvertFloatSamples(samples, samplesInt);

        // write our samples to a wave file
        WriteWaveFile(&quot;stereobeat.wav&quot;, samplesInt, c_numChannels, c_sampleRate);
    }
}
[/code]

<h1>Links</h1>

For a more mathematical explanation of these, check out wikipedia (:
<a href="https://en.wikipedia.org/wiki/Beat_(acoustics)" target="_blank">Wikipedia: Beat (acoustics)</a>

<a href="https://en.wikipedia.org/wiki/Binaural_beats" target="_blank">Wikipedia: Binaural beats</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4448</wp:post_id>
		<wp:post_date><![CDATA[2016-06-23 20:12:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-24 04:12:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[the-beating-effect]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495047791;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:31;}i:1;a:1:{s:2:"id";i:2001;}i:2;a:1:{s:2:"id";i:1940;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2016/06/monobeat.wav
705644
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://demofox2.files.wordpress.com/2016/06/stereobeat.wav
1411244
audio/wav
]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Intro To Audio Synthesis For Music Presentation</title>
		<link>http://blog.demofox.org/2016/07/01/intro-to-audio-synthesis-for-music-presentation/</link>
		<pubDate>Sat, 02 Jul 2016 01:09:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4465</guid>
		<description></description>
		<content:encoded><![CDATA[Today I gave a presentation at work on the basics of audio synthesis for music.  It seemed to go fairly well and I was surprised to hear that so many others also dabbled in audio synth and music.

The slide deck and example C++ program (uses portaudio) are both up on github here:
<a href="https://github.com/Atrix256/MusicSynth" target="_blank">https://github.com/Atrix256/MusicSynth</a>

Questions, feedback, etc?  Drop me a line (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4465</wp:post_id>
		<wp:post_date><![CDATA[2016-07-01 17:09:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-02 01:09:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[intro-to-audio-synthesis-for-music-presentation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495153637;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:7;}i:1;a:1:{s:2:"id";i:2268;}i:2;a:1:{s:2:"id";i:2285;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fourier Transform (And Inverse) Of Images</title>
		<link>http://blog.demofox.org/2016/07/28/fourier-transform-and-inverse-of-images/</link>
		<pubDate>Fri, 29 Jul 2016 04:26:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4470</guid>
		<description></description>
		<content:encoded><![CDATA[I attended SIGGRAPH this year and there were some amazing talks.

There were quite a few talks dealing with the Fourier transform of images and sampling patterns, signal frequencies and bandwidth so I feel compelled to write up a blog post about the Fourier transform and inverse Fourier transform of images, as a transition to some other things that I want to write up.

At the bottom of this post is the source code to the program i used to make the examples.  It's a single CPP file that does not link to any libraries, and does not include any non standard headers (besides windows.h).  It should be super simple to copy, paste, compile and use!

<h2>Fourier Transform Overview</h2>

The Fourier transform converts data into the frequencies of sine and cosine waves that make up that data.  Since we are going to be dealing with sampled data (pixels), we are going to be using the discrete Fourier transform.

After you perform the Fourier transform, you can run the inverse Fourier transform to get the original image back out.

You can also optionally modify the frequency data before running the inverse Fourier transform, which would give you an altered image as output.

In audio, a fourier transform is 1D, while with images, it's 2D.  That slows things down because a 1D Fourier transform is $latex O(N^2) $ while a 2D Fourier transform is $latex O(N^4) $.

This is quite an expensive operation as you can see, but there are some things that can mitigate the issue:
<ul>
	<li>The operation is separable on each axis.  AKA only the naive implementation is $latex O(N^4) $.</li>
	<li>There is something called "The Fast Fourier Transform" which can make a 1D fourier transform go from $latex O(N^2) $ to $latex O(N log N) $ time complexity.</li>
	<li>Each pixel of output can be calculated without consideration of the other output pixels.  The algorithm only needs read access to the source image or source data.  This means that you can run this across however many cores you have on your CPU or GPU.</li>
</ul>

The items above are true of both the Fourier transform as well as the inverse Fourier transform.

The 2D Fourier transform takes a grid of REAL values as input of size MxN and returns a grid of COMPLEX values as output, also of size MxN.

The inverse 2D Fourier transform takes a grid of COMPLEX values as input, of size MxN and returns a grid of REAL values as output, also of size MxN.

The complex values are (of course!) made up of two components.  You can get the amplitude of the frequency represented by the complex value by treating these components as a vector and getting the length.  You can get the phase (angle that the frequency starts at) of the frequency by treating it like a vector and getting the angle it represents - like by using atan2(imaginary, real).

For more detailed information about the Fourier transform or the inverse Fourier transform, including the mathematical equations, please see the links at the end of this post!

<h2>Image Examples</h2>

I'm going to show some examples of images that have been Fourier transformed, modified, and inverse Fourier transformed back.  This should hopefully give you a more intuitive idea of what this stuff is all about.

I'm working with the source images in grey scale so i only have to work with one color channel (more on how to do that here: <a href="http://blog.demofox.org/2014/02/03/converting-rgb-to-grayscale/">Blog.Demofox.Org: Converting RGB to Grayscale</a>).  You could easily do this same stuff with color images, but you would need to work with each color channel individually.

<b>Zelda Guy</b>

Here is the old man from "The Legend of Zelda" who gives you the sword.  This image is 84x80 which takes about 1.75 seconds to do a fourier or inverse fourier transform with my naiive implementation of unoptimized code.

<img src="https://demofox2.files.wordpress.com/2016/07/zeldaguy.bmp"/>

Taking a fourier transform of the greyscale version of that image gives me the following frequency amplitude (first) and phase (second) information.  Note that we put the frequency amplitude through a log function to make the lesser represented frequencies show up more visibly.

<img src="https://demofox2.files.wordpress.com/2016/07/zeldaguy.raw_.mag_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/zeldaguy.raw_.phase_.bmp"/>

Note that the center of the image represents frequency 0, aka DC.  As you move out from the center, you get to higher and higher frequencies.

If you put that information into the inverse Fourier transform, you get the original image back out (in greyscale of course):

<img src="https://demofox2.files.wordpress.com/2016/07/zeldaguy.raw_.idft_.bmp"/>

What if we changed the phase information though?  Here's what it looks like if we set all the frequencies to start at phase (angle) 0 instead of the proper angles, and then do an inverse Fourier transform:

<img src="https://demofox2.files.wordpress.com/2016/07/zeldaguy.phase0_.idft_.bmp"/>

It came out to be a completely different image!  It has all the right frequencies, but the image is completely unrecognizable due to us messing with the phase data.

Interestingly, while your eyes are good at noticing differences in phase, your ears are not.  That means that if this was a sound, instead of an image, you wouldn't even be able to tell the difference.  Strange isn't it?

Now let's do a low pass filter to our data.  In other words, we are going to zero out the amplitude of all frequencies that are above a certain amount.  We are going to zero out the frequencies that are farther than 10% of the image diagonal radius.  That makes our frequency information look like this:

<img src="https://demofox2.files.wordpress.com/2016/07/zeldaguy.lpf_.mag_.bmp"/>

If we run the inverse Fourier transform on it, we get this:

<img src="https://demofox2.files.wordpress.com/2016/07/zeldaguy.lpf_.idft_.bmp"/>

The image got blurier because the high frequencies were removed.  The high frequencies represent the small details of the image.

We also got some "ringing artifacts" which are the things that look like halos around the old man.  This is also due to removing high frequency details.  The short explanation for this is that it is very difficult to add sinusoids of different amplitudes and frequencies together to make a flat surface.  To do so, you need a lot of small high frequency waves to fill in the areas next to the round hum humps to flatten it out.  It's the same issue you see when trying to make a square wave with additive synthesis, if you've read any of my posts on audio synthesis.

Now let's try a high pass filter, where we remove frequencies that are closer than 10% of the image diagonal radius.  First is the frequency amplitude information, and then the resulting image:

<img src="https://demofox2.files.wordpress.com/2016/07/zeldaguy.hpf_.mag_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/zeldaguy.hpf_.idft_.bmp"/>

The results look pretty strange.  These are the high frequency details that the blurry image is missing!

You could use a high pass filter on an image to do edge detection.  You could use a low pass filter on an image to remove high frequency details before making the image smaller to prevent the aliasing that can happen when making an image smaller.

Let's look at some other images that have been given similar treatment.

<b>SIGGRAPH</b>

Here's a picture of myself at SIGGRAPH with my friend Paul who I used to work with at inXile!  The image is 100x133 and takes about 6.5-7 seconds to do a Fourier transform or an inverse Fourier transform.

<img src="https://demofox2.files.wordpress.com/2016/07/paulalan.bmp"/>

Here is the Fourier transform and inverse Fourier transform:

<img src="https://demofox2.files.wordpress.com/2016/07/paulalan.raw_.mag_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/paulalan.raw_.phase_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/paulalan.raw_.idft_.bmp"/>

Here is the low pass frequency info and inverse Fourier transform:

<img src="https://demofox2.files.wordpress.com/2016/07/paulalan.lpf_.mag_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/paulalan.lpf_.idft_.bmp"/>

Here is the high pass:

<img src="https://demofox2.files.wordpress.com/2016/07/paulalan.hpf_.mag_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/paulalan.hpf_.idft_.bmp"/>

And here is the zero phase:

<img src="https://demofox2.files.wordpress.com/2016/07/paulalan.phase0_.idft_.bmp"/>

<b>Simple Images</b>

Lastly, here are some simple images, along with their frequency magnitude and phases.  Sorry that they are so small, but hopefully you get the idea.

Horizontal Stripes:
<img src="https://demofox2.files.wordpress.com/2016/07/StripesH.raw_.idft_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/StripesH.raw_.mag_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/StripesH.raw_.phase_.bmp"/>

Horizontal Stripe:
<img src="https://demofox2.files.wordpress.com/2016/07/StripeH.raw_.idft_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/StripeH.raw_.mag_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/StripeH.raw_.phase_.bmp"/>

Vertical Stripes:
<img src="https://demofox2.files.wordpress.com/2016/07/StripesV.raw_.idft_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/StripesV.raw_.mag_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/StripesV.raw_.phase_.bmp"/>

Vertical Stripe:
<img src="https://demofox2.files.wordpress.com/2016/07/StripeV.raw_.idft_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/StripeV.raw_.mag_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/StripeV.raw_.phase_.bmp"/>

Diagonal Stripe:
<img src="https://demofox2.files.wordpress.com/2016/07/StripeD.raw_.idft_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/StripeD.raw_.mag_.bmp"/>
<img src="https://demofox2.files.wordpress.com/2016/07/StripeD.raw_.phase_.bmp"/>

You might notice that the Fourier transform frequency amplitudes actually run perpendicular to the orientation of the stripes.  Look for a post soon which makes use of this property (:

<h2>Example Code</h2>

Here is the code I used to generate the examples above.

If you pass this program the name of a 24 bit bmp file, it will generate and save the DFT, and also the inverse DFT to show that the image can survive a round trip.  It will also do a low pass filter, high pass filter, and set the phase of all frequencies to zero, saving off both the frequency amplitude information, as well as the image generated from the frequency information for those operations.

The program below is written for clarity, not speed.  In particular, the DFT and IDFT code is naively implemented so is O(N^4).  To speed it up, it should be threaded, do the work on each axis separately, and also use a fast Fourier transform implementation.

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS
 
#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;array&gt;
#include &lt;vector&gt;
#include &lt;complex&gt;
#include &lt;windows.h&gt;  // for bitmap headers and performance counter.  Sorry non windows people!

const float c_pi = 3.14159265359f;
const float c_rootTwo = 1.41421356237f;

typedef uint8_t uint8;

struct SProgress
{
    SProgress (const char* message, int total) : m_message(message), m_total(total)
    {
        m_amount = 0;
        m_lastPercent = 0;
        printf(&quot;%s   0%%&quot;, message);

        QueryPerformanceFrequency(&amp;m_freq);
        QueryPerformanceCounter(&amp;m_start);
    }

    ~SProgress ()
    {
        // make it show 100%
        m_amount = m_total;
        Update(0);

        // show how long it took
        LARGE_INTEGER end;
        QueryPerformanceCounter(&amp;end);
        float seconds = ((float)(end.QuadPart - m_start.QuadPart)) / m_freq.QuadPart;
        printf(&quot; (%0.2f seconds)\n&quot;, seconds);
    }

    void Update (int delta = 1)
    {
        m_amount += delta;
        int percent = int(100.0f * float(m_amount) / float(m_total));
        if (percent &lt;= m_lastPercent)
            return;

        m_lastPercent = percent;
        printf(&quot;%c%c%c%c&quot;, 8, 8, 8, 8);
        if (percent &lt; 100)
            printf(&quot; &quot;);
        if (percent &lt; 10)
            printf(&quot; &quot;);
        printf(&quot;%i%%&quot;, percent);
    }

    int m_lastPercent;
    int m_amount;
    int m_total;
    const char* m_message;

    LARGE_INTEGER m_start;
    LARGE_INTEGER m_freq;
};
 
struct SImageData
{
    SImageData ()
        : m_width(0)
        , m_height(0)
    { }
 
    long m_width;
    long m_height;
    long m_pitch;
    std::vector&lt;uint8&gt; m_pixels;
};

struct SImageDataComplex
{
    SImageDataComplex ()
        : m_width(0)
        , m_height(0)
    { }

    long m_width;
    long m_height;
    std::vector&lt;std::complex&lt;float&gt;&gt; m_pixels;
};
 
bool LoadImage (const char *fileName, SImageData&amp; imageData)
{
    // open the file if we can
    FILE *file;
    file = fopen(fileName, &quot;rb&quot;);
    if (!file)
        return false;
 
    // read the headers if we can
    BITMAPFILEHEADER header;
    BITMAPINFOHEADER infoHeader;
    if (fread(&amp;header, sizeof(header), 1, file) != 1 ||
        fread(&amp;infoHeader, sizeof(infoHeader), 1, file) != 1 ||
        header.bfType != 0x4D42 || infoHeader.biBitCount != 24)
    {
        fclose(file);
        return false;
    }
 
    // read in our pixel data if we can. Note that it's in BGR order, and width is padded to the next power of 4
    imageData.m_pixels.resize(infoHeader.biSizeImage);
    fseek(file, header.bfOffBits, SEEK_SET);
    if (fread(&amp;imageData.m_pixels[0], imageData.m_pixels.size(), 1, file) != 1)
    {
        fclose(file);
        return false;
    }
 
    imageData.m_width = infoHeader.biWidth;
    imageData.m_height = infoHeader.biHeight;
 
    imageData.m_pitch = imageData.m_width*3;
    if (imageData.m_pitch &amp; 3)
    {
        imageData.m_pitch &amp;= ~3;
        imageData.m_pitch += 4;
    }
 
    fclose(file);
    return true;
}
 
bool SaveImage (const char *fileName, const SImageData &amp;image)
{
    // open the file if we can
    FILE *file;
    file = fopen(fileName, &quot;wb&quot;);
    if (!file) {
        printf(&quot;Could not save %s\n&quot;, fileName);
        return false;
    }
 
    // make the header info
    BITMAPFILEHEADER header;
    BITMAPINFOHEADER infoHeader;
 
    header.bfType = 0x4D42;
    header.bfReserved1 = 0;
    header.bfReserved2 = 0;
    header.bfOffBits = 54;
 
    infoHeader.biSize = 40;
    infoHeader.biWidth = image.m_width;
    infoHeader.biHeight = image.m_height;
    infoHeader.biPlanes = 1;
    infoHeader.biBitCount = 24;
    infoHeader.biCompression = 0;
    infoHeader.biSizeImage = image.m_pixels.size();
    infoHeader.biXPelsPerMeter = 0;
    infoHeader.biYPelsPerMeter = 0;
    infoHeader.biClrUsed = 0;
    infoHeader.biClrImportant = 0;
 
    header.bfSize = infoHeader.biSizeImage + header.bfOffBits;
 
    // write the data and close the file
    fwrite(&amp;header, sizeof(header), 1, file);
    fwrite(&amp;infoHeader, sizeof(infoHeader), 1, file);
    fwrite(&amp;image.m_pixels[0], infoHeader.biSizeImage, 1, file);
    fclose(file);

    printf(&quot;%s saved\n&quot;, fileName);
    return true;
}
 
void ImageToGrey (const SImageData &amp;srcImage, SImageData &amp;destImage)
{
    destImage = srcImage;

    for (int x = 0; x &lt; srcImage.m_width; ++x)
    {
        for (int y = 0; y &lt; srcImage.m_height; ++y)
        {
            const uint8 *src = &amp;srcImage.m_pixels[(y * srcImage.m_pitch) + x * 3];
            uint8 *dest = &amp;destImage.m_pixels[(y * destImage.m_pitch) + x * 3];

            uint8 grey = uint8((float(src[0]) * 0.3f + float(src[1]) * 0.59f + float(src[2]) * 0.11f));
            dest[0] = grey;
            dest[1] = grey;
            dest[2] = grey;
        }
    }
}

std::complex&lt;float&gt; DFTPixel (const SImageData &amp;srcImage, int K, int L)
{
    std::complex&lt;float&gt; ret(0.0f, 0.0f);

    for (int x = 0; x &lt; srcImage.m_width; ++x)
    {
        for (int y = 0; y &lt; srcImage.m_height; ++y)
        {
            // Get the pixel value (assuming greyscale) and convert it to [0,1] space
            const uint8 *src = &amp;srcImage.m_pixels[(y * srcImage.m_pitch) + x * 3];
            float grey = float(src[0]) / 255.0f;

            // Add to the sum of the return value
            float v = float(K * x) / float(srcImage.m_width);
            v += float(L * y) / float(srcImage.m_height);
            ret += std::complex&lt;float&gt;(grey, 0.0f) * std::polar&lt;float&gt;(1.0f, -2.0f * c_pi * v);
        }
    }

    return ret;
}
 
void DFTImage (const SImageData &amp;srcImage, SImageDataComplex &amp;destImage)
{
    // NOTE: this function assumes srcImage is greyscale, so works on only the red component of srcImage.
    // ImageToGrey() will convert an image to greyscale.

    // size the output dft data
    destImage.m_width = srcImage.m_width;
    destImage.m_height = srcImage.m_height;
    destImage.m_pixels.resize(destImage.m_width*destImage.m_height);

    SProgress progress(&quot;DFT:&quot;, srcImage.m_width * srcImage.m_height);
 
    // calculate 2d dft (brute force, not using fast fourier transform)
    for (int x = 0; x &lt; srcImage.m_width; ++x)
    {
        for (int y = 0; y &lt; srcImage.m_height; ++y)
        {
            // calculate DFT for that pixel / frequency
            destImage.m_pixels[y * destImage.m_width + x] = DFTPixel(srcImage, x, y);

            // update progress
            progress.Update();
        }
    }
}

uint8 InverseDFTPixel (const SImageDataComplex &amp;srcImage, int K, int L)
{
    std::complex&lt;float&gt; total(0.0f, 0.0f);
    for (int x = 0; x &lt; srcImage.m_width; ++x)
    {
        for (int y = 0; y &lt; srcImage.m_height; ++y)
        {
            // Get the pixel value
            const std::complex&lt;float&gt; &amp;src = srcImage.m_pixels[(y * srcImage.m_width) + x];

            // Add to the sum of the return value
            float v = float(K * x) / float(srcImage.m_width);
            v += float(L * y) / float(srcImage.m_height);
            std::complex&lt;float&gt; result = src * std::polar&lt;float&gt;(1.0f, 2.0f * c_pi * v);

            // sum up the results
            total += result;
        }
    }

    float idft = std::abs(total) / float(srcImage.m_width*srcImage.m_height);

    // make sure the values are in range
    if (idft &lt; 0.0f)
        idft = 0.0f;
    if (idft &gt; 1.0f)
        idft = 1.0;

    return uint8(idft * 255.0f);
}

void InverseDFTImage (const SImageDataComplex &amp;srcImage, SImageData &amp;destImage)
{
    // size the output image
    destImage.m_width = srcImage.m_width;
    destImage.m_height = srcImage.m_height;
    destImage.m_pitch = srcImage.m_width * 3;
    if (destImage.m_pitch &amp; 3)
    {
        destImage.m_pitch &amp;= ~3;
        destImage.m_pitch += 4;
    }
    destImage.m_pixels.resize(destImage.m_pitch*destImage.m_height);

    SProgress progress(&quot;Inverse DFT:&quot;, srcImage.m_width*srcImage.m_height);

    // calculate inverse 2d dft (brute force, not using fast fourier transform)
    for (int x = 0; x &lt; srcImage.m_width; ++x)
    {
        for (int y = 0; y &lt; srcImage.m_height; ++y)
        {
            // calculate DFT for that pixel / frequency
            uint8 idft = InverseDFTPixel(srcImage, x, y);
            uint8* dest = &amp;destImage.m_pixels[y*destImage.m_pitch + x * 3];
            dest[0] = idft;
            dest[1] = idft;
            dest[2] = idft;

            // update progress
            progress.Update();
        }
    }
}

void GetMagnitudeData (const SImageDataComplex&amp; srcImage, SImageData&amp; destImage)
{
    // size the output image
    destImage.m_width = srcImage.m_width;
    destImage.m_height = srcImage.m_height;
    destImage.m_pitch = srcImage.m_width * 3;
    if (destImage.m_pitch &amp; 3)
    {
        destImage.m_pitch &amp;= ~3;
        destImage.m_pitch += 4;
    }
    destImage.m_pixels.resize(destImage.m_pitch*destImage.m_height);

    // get floating point magnitude data
    std::vector&lt;float&gt; magArray;
    magArray.resize(srcImage.m_width*srcImage.m_height);
    float maxmag = 0.0f;
    for (int x = 0; x &lt; srcImage.m_width; ++x)
    {
        for (int y = 0; y &lt; srcImage.m_height; ++y)
        {
            // Offset the information by half width &amp; height in the positive direction.
            // This makes frequency 0 (DC) be at the image origin, like most diagrams show it.
            int k = (x + srcImage.m_width / 2) % srcImage.m_width;
            int l = (y + srcImage.m_height / 2) % srcImage.m_height;
            const std::complex&lt;float&gt; &amp;src = srcImage.m_pixels[l*srcImage.m_width + k];

            float mag = std::abs(src);
            if (mag &gt; maxmag)
                maxmag = mag;

            magArray[y*srcImage.m_width + x] = mag;
        }
    }
    if (maxmag == 0.0f)
        maxmag = 1.0f;

    const float c = 255.0f / log(1.0f+maxmag);

    // normalize the magnitude data and send it back in [0, 255]
    for (int x = 0; x &lt; srcImage.m_width; ++x)
    {
        for (int y = 0; y &lt; srcImage.m_height; ++y)
        {
            float src = c * log(1.0f + magArray[y*srcImage.m_width + x]);

            uint8 magu8 = uint8(src);

            uint8* dest = &amp;destImage.m_pixels[y*destImage.m_pitch + x * 3];
            dest[0] = magu8;
            dest[1] = magu8;
            dest[2] = magu8;
        }
    }
}

void GetPhaseData (const SImageDataComplex&amp; srcImage, SImageData&amp; destImage)
{
    // size the output image
    destImage.m_width = srcImage.m_width;
    destImage.m_height = srcImage.m_height;
    destImage.m_pitch = srcImage.m_width * 3;
    if (destImage.m_pitch &amp; 3)
    {
        destImage.m_pitch &amp;= ~3;
        destImage.m_pitch += 4;
    }
    destImage.m_pixels.resize(destImage.m_pitch*destImage.m_height);

    // get floating point phase data, and encode it in [0,255]
    for (int x = 0; x &lt; srcImage.m_width; ++x)
    {
        for (int y = 0; y &lt; srcImage.m_height; ++y)
        {
            // Offset the information by half width &amp; height in the positive direction.
            // This makes frequency 0 (DC) be at the image origin, like most diagrams show it.
            int k = (x + srcImage.m_width / 2) % srcImage.m_width;
            int l = (y + srcImage.m_height / 2) % srcImage.m_height;
            const std::complex&lt;float&gt; &amp;src = srcImage.m_pixels[l*srcImage.m_width + k];

            // get phase, and change it from [-pi,+pi] to [0,255]
            float phase = (0.5f + 0.5f * std::atan2(src.real(), src.imag()) / c_pi);
            if (phase &lt; 0.0f)
                phase = 0.0f;
            if (phase &gt; 1.0f)
                phase = 1.0;
            uint8 phase255 = uint8(phase * 255);

            // write the phase as grey scale color
            uint8* dest = &amp;destImage.m_pixels[y*destImage.m_pitch + x * 3];
            dest[0] = phase255;
            dest[1] = phase255;
            dest[2] = phase255;
        }
    }
}

int main (int argc, char **argv)
{
    float scale = 1.0f;
    int filter = 0;
 
    bool showUsage = argc &lt; 2;
    char *srcFileName = argv[1];
 
    if (showUsage)
    {
        printf(&quot;Usage: &lt;source&gt;\n\n&quot;);
        return 1;
    }

    // trim off file extension from source filename so we can make our other file names
    char baseFileName[1024];
    strcpy(baseFileName, srcFileName);
    for (int i = strlen(baseFileName) - 1; i &gt;= 0; --i)
    {
        if (baseFileName[i] == '.')
        {
            baseFileName[i] = 0;
            break;
        }
    }

    // Load source image if we can
    SImageData srcImage;
    if (LoadImage(srcFileName, srcImage))
    {
        printf(&quot;%s loaded (%i x %i)\n&quot;, srcFileName, srcImage.m_width, srcImage.m_height);

        // do DFT on a greyscale version of the image, instead of doing it per color channel
        SImageData greyImage;
        ImageToGrey(srcImage, greyImage);
        SImageDataComplex frequencyData;
        DFTImage(greyImage, frequencyData);

        // save magnitude information
        {
            char outFileName[1024];
            strcpy(outFileName, baseFileName);
            strcat(outFileName, &quot;.raw.mag.bmp&quot;);

            SImageData destImage;
            GetMagnitudeData(frequencyData, destImage);
            SaveImage(outFileName, destImage);
        }

        // save phase information
        {
            char outFileName[1024];
            strcpy(outFileName, baseFileName);
            strcat(outFileName, &quot;.raw.phase.bmp&quot;);

            SImageData destImage;
            GetPhaseData(frequencyData, destImage);
            SaveImage(outFileName, destImage);
        }

        // inverse dft the modified frequency and save the result
        {
            char outFileName[1024];
            strcpy(outFileName, baseFileName);
            strcat(outFileName, &quot;.raw.idft.bmp&quot;);

            SImageData modifiedImage;
            InverseDFTImage(frequencyData, modifiedImage);
            SaveImage(outFileName, modifiedImage);
        }

        // Low Pass Filter: Remove high frequencies, write out frequency magnitudes, write out inverse dft
        {
            printf(&quot;\n=====LPF=====\n&quot;);

            // remove frequencies that are too far from frequency 0.
            // Note that even though our output frequency images have frequency 0 (DC) in the center, that
            // isn't actually how it's stored in our SImageDataComplex structure.  Pixel (0,0) is frequency 0.
            SImageDataComplex dft = frequencyData;
            float halfWidth = float(dft.m_width / 2);
            float halfHeight = float(dft.m_height / 2);
            for (int x = 0; x &lt; dft.m_width; ++x)
            {
                for (int y = 0; y &lt; dft.m_height; ++y)
                {
                    float relX = 0.0f;
                    float relY = 0.0f;

                    if (x &lt; halfWidth)
                        relX = float(x) / halfWidth;
                    else
                        relX = (float(x) - float(dft.m_width)) / halfWidth;

                    if (y &lt; halfHeight)
                        relY = float(y) / halfHeight;
                    else
                        relY = (float(y) - float(dft.m_height)) / halfHeight;

                    float dist = sqrt(relX*relX + relY*relY) / c_rootTwo; // divided by root 2 so our distance is from 0 to 1
                    if (dist &gt; 0.1f)
                        dft.m_pixels[y*dft.m_width + x] = std::complex&lt;float&gt;(0.0f, 0.0f);
                }
            }

            // write dft magnitude data
            char outFileName[1024];
            strcpy(outFileName, baseFileName);
            strcat(outFileName, &quot;.lpf.mag.bmp&quot;);
            SImageData destImage;
            GetMagnitudeData(dft, destImage);
            SaveImage(outFileName, destImage);

            // inverse dft and save the image
            strcpy(outFileName, baseFileName);
            strcat(outFileName, &quot;.lpf.idft.bmp&quot;);
            SImageData modifiedImage;
            InverseDFTImage(dft, modifiedImage);
            SaveImage(outFileName, modifiedImage);
        }

        // High Pass Filter: Remove low frequencies, write out frequency magnitudes, write out inverse dft
        {
            printf(&quot;\n=====HPF=====\n&quot;);

            // remove frequencies that are too close to frequency 0.
            // Note that even though our output frequency images have frequency 0 (DC) in the center, that
            // isn't actually how it's stored in our SImageDataComplex structure.  Pixel (0,0) is frequency 0.
            SImageDataComplex dft = frequencyData;
            float halfWidth = float(dft.m_width / 2);
            float halfHeight = float(dft.m_height / 2);
            for (int x = 0; x &lt; dft.m_width; ++x)
            {
                for (int y = 0; y &lt; dft.m_height; ++y)
                {
                    float relX = 0.0f;
                    float relY = 0.0f;

                    if (x &lt; halfWidth)
                        relX = float(x) / halfWidth;
                    else
                        relX = (float(x) - float(dft.m_width)) / halfWidth;

                    if (y &lt; halfHeight)
                        relY = float(y) / halfHeight;
                    else
                        relY = (float(y) - float(dft.m_height)) / halfHeight;

                    float dist = sqrt(relX*relX + relY*relY) / c_rootTwo; // divided by root 2 so our distance is from 0 to 1
                    if (dist &lt; 0.1f)
                        dft.m_pixels[y*dft.m_width + x] = std::complex&lt;float&gt;(0.0f, 0.0f);
                }
            }

            // write dft magnitude data
            char outFileName[1024];
            strcpy(outFileName, baseFileName);
            strcat(outFileName, &quot;.hpf.mag.bmp&quot;);
            SImageData destImage;
            GetMagnitudeData(dft, destImage);
            SaveImage(outFileName, destImage);

            // inverse dft and save the image
            strcpy(outFileName, baseFileName);
            strcat(outFileName, &quot;.hpf.idft.bmp&quot;);
            SImageData modifiedImage;
            InverseDFTImage(dft, modifiedImage);
            SaveImage(outFileName, modifiedImage);
        }

        // ZeroPhase
        {
            printf(&quot;\n=====Zero Phase=====\n&quot;);

            // Set phase to zero for all frequencies.
            // Note that even though our output frequency images have frequency 0 (DC) in the center, that
            // isn't actually how it's stored in our SImageDataComplex structure.  Pixel (0,0) is frequency 0.
            SImageDataComplex dft = frequencyData;
            float halfWidth = float(dft.m_width / 2);
            float halfHeight = float(dft.m_height / 2);
            for (int x = 0; x &lt; dft.m_width; ++x)
            {
                for (int y = 0; y &lt; dft.m_height; ++y)
                {
                    std::complex&lt;float&gt;&amp; v = dft.m_pixels[y*dft.m_width + x];
                    float mag = std::abs(v);
                    v = std::complex&lt;float&gt;(mag, 0.0f);
                }
            }

            // write dft magnitude data
            char outFileName[1024];
            strcpy(outFileName, baseFileName);
            strcat(outFileName, &quot;.phase0.mag.bmp&quot;);
            SImageData destImage;
            GetMagnitudeData(dft, destImage);
            SaveImage(outFileName, destImage);

            // inverse dft and save the image
            strcpy(outFileName, baseFileName);
            strcat(outFileName, &quot;.phase0.idft.bmp&quot;);
            SImageData modifiedImage;
            InverseDFTImage(dft, modifiedImage);
            SaveImage(outFileName, modifiedImage);
        }
    }
    else
        printf(&quot;could not read 24 bit bmp file %s\n\n&quot;, srcFileName);

    return 0;
}
[/code]

<h2>Links</h2>
Here are some links that I found useful:
<a target="_blank" href="http://homepages.inf.ed.ac.uk/rbf/HIPR2/fourier.htm">Fourier Transform</a>
<a target="_blank" href="http://www.thefouriertransform.com/">http://www.thefouriertransform.com/</a>
<a target="_blank" href="https://www.cs.unm.edu/~brayer/vision/fourier.html">Introduction To Fourier Transforms For Image Processing</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4470</wp:post_id>
		<wp:post_date><![CDATA[2016-07-28 20:26:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-29 04:26:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[fourier-transform-and-inverse-of-images]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495643996;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4555;}i:1;a:1:{s:2:"id";i:2285;}i:2;a:1:{s:2:"id";i:2268;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Understanding The Discrete Fourier Transform</title>
		<link>http://blog.demofox.org/2016/08/11/understanding-the-discrete-fourier-transform/</link>
		<pubDate>Thu, 11 Aug 2016 17:39:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4555</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="https://demofox2.files.wordpress.com/2016/08/spidermandft.jpg"/>

I've been working on getting a better understanding of the Discrete Fourier Transform.  I've figured out some things which have really helped my intuition, and made it a lot simpler in my head, so I wanted to write these up for the benefit of other folks, as well as for my future self when I need a refresher.

The discrete Fourier transform takes in data and gives out the frequencies that the data contains.  This is useful if you want to analyze data, but can also be useful if you want to modify the frequencies then use the inverse discrete Fourier transform to generate the frequency modified data.

<h2>Multiplying By Sinusoids (Sine / Cosine)</h2>

If you had a stream of data that had a single frequency in it at a constant amplitude, and you wanted to know the amplitude of that frequency, how could you figure that out?

One way would be to make a cosine wave of that frequency and multiply each sample of your wave by the corresponding samples.

For instance, let's say that we have a data stream of four values that represent a 1hz cosine wave: 1, 0, -1, 0.

<img src="https://demofox2.files.wordpress.com/2016/08/samples4cos.png"/>

We could then multiply each point by a corresponding point on a cosine wave, add sum them together:

<img src="https://demofox2.files.wordpress.com/2016/08/cosine4samples.png"/>

We get.. 1*1 + 0*0 + -1*-1 + 0*0 = 2.

The result we get is 2, which is twice the amplitude of the data points we had.  We can divide by two to get the real amplitude.

To show that this works for any amplitude, here's the same 1hz cosine wave data with an amplitude of five: 5, 0, -5, 0.

Multiplying by the 1hz cosine wave, we get... 5*1 + 0*0 + -5*-1 + 0*0 = 10.

The actual amplitude is 5, so we can see that our result was still twice the amplitude.

In general, you will need to divide by N / 2 where N is the number of samples you have.

What happens if our stream of data has something other than a cosine wave in it though?  

Let's try a sine wave: 0, 1, 0, -1

When we multiply those values by our cosine wave values we get: 0*1 + 1*0 + 0*-1 + -1*0 = 0.

We got zero. Our method broke!

In this case, if instead of multiplying by cosine, we multiply by sine, we get what we expect: 0*0 + 1*1 + 0*0 + -1*-1 = 2.  We get results consistent with before, where our answer is the amplitude times two.

That's not very useful if we have to know whether we are looking for a sine or cosine wave though.  We might even have some other type of wave that is neither one!

The solution to this problem is actually to multiply the data points by both cosine and sine waves, and keep both results.

Let's see how that works.

For this example We'll take a cosine wave and shift it 0.25 radians to give us samples: 0.97, -0.25, -0.97, 0.25.  (The formula is <a target="_blank" href="http://www.wolframalpha.com/input/?i=cos(x*2*pi%2F4%2B0.25)+from+0+to+3">cos(x*2*pi/4+0.25) from 0 to 3</a>)

<img src="https://demofox2.files.wordpress.com/2016/08/cosShifted4Samples.png"/>

When we multiply that by a cosine wave we get: 0.97*1 + -0.25*0 + -0.97*-1 + 0.25*0 = 1.94
When we multiply it by a sine wave we get: 0.97*0 + -0.25*1 + -0.97*0 + 0.25*-1 = -0.5

Since we know both of those numbers are twice the actual amplitude, we can divide them both by two to get:
cosine: 0.97
sine: -0.25

Those numbers kind of makes sense if you think about it.  We took a cosine wave and shifted it over a little bit so our combined answer is that it's mostly a cosine wave, but is heading towards being a sine wave (technically a sine wave that has an amplitude of -1, so is a negative sine wave, but is still a sine wave).

To get the amplitude of our phase shifted wave, we treat those values as a vector, and get the magnitude.  sqrt((0.97*0.97)+(-0.25*-0.25)) = 1.00.  That is correct!  Our wave's amplitude is 1.0.

To get the starting angle (phase) of the wave, we use inverse tangent of sine over cosine.  We want to take atan2(sine, cosine), aka atan2(-0.25, 0.97) which gives us a result of -0.25 radians.  That's the amount that we shifted our wave, so it is also correct!

<h2>Formulas So Far</h2>

Let's take a look at where we are at mathematically.  For $latex N $ samples of data, we multiply each sample of data by a sample from a wave with the frequency we are looking for and sum up the results (Note that this is really just a dot product between N dimensional vectors!).  We have to do this both with a cosine wave and a sine wave, and keep the two resulting values to be able to get our true amplitude and phase information.

For now, let's drop the "divide by two" part and look at the equations we have.

$latex Value_{cosine} = \\sum\\limits_{n=0}^{N-1} Sample_n * Cos(2\\pi*Frequency*n/N) $

$latex Value_{sine} = \\sum\\limits_{n=0}^{N-1} Sample_n * Sin(2\\pi*Frequency*n/N) $

Those equations above do exactly what we worked through in the samples.

The part that might be confusing is the part inside of the Cos() and Sin() so I'll explain that real quick.

Looking at the graph cos(x) and sin(x) you'll see that they both make one full cycle between the x values of 0 and 2*pi (aprox. 6.28):

<img src="https://demofox2.files.wordpress.com/2016/08/sincos2pi.png"/>

If instead we change it to a graph of cos(2*pi*x) and sin(2*pi*x) you'll notice that they both make one full cycle between the x values of 0 and 1:

<img src="https://demofox2.files.wordpress.com/2016/08/sincos01.png"/>

This means that we can think of the wave forms in terms of percent (0 to 1) instead of in radians (0 to 2pi).

Next, we multiply by the frequency we are looking for.  We do this because that multiplication makes the wave form repeat that many times between 0 and 1.  It makes us a wave of the desired frequency, still remaining in "percent space" where we can go from 0 to 1 to get samples on our cosine and sine waves.

Here's a graph of cos(2*pi*x*2) and sin(2*pi*x*2), to show some 2hz frequency waves:

<img src="https://demofox2.files.wordpress.com/2016/08/sincos2hz01.png"/>

Lastly, we multiply by n/N.  In our sum, n is our index variable and it goes from 0 to N-1.  This is very much like a for loop.  n/N is our current percent done we are in the for loop, so when we multiply by n/N, we are just sampling at a different location (by percentage done) on our cosine and sine waves that are at the specified frequencies.

Not too difficult right?

<h2>Imaginary Numbers</h2>

Wouldn't it be neat if instead of having to do two separate calculations for our cosine and sine values, we could just do a single calculation that would give us both values?

Well, interestingly, we can!  This is where imaginary numbers come in.  Don't get scared, they are here to make things simpler and more convenient, not to make things more complicated or harder to understand (:

There is something called <a target="_blank" href="https://en.wikipedia.org/wiki/Euler%27s_identity">Euler's Identity</a> which states the below:

$latex e^{ix} = cos(x) + i*sin(x) $ 

That looks pretty useful for our usage case doesn't it?  If you notice that our equations both had the same parameters for cos and sin, that means that we can just use this identity instead!

We can now take our two equations and combine them into a single equation:

$latex Value = \\sum\\limits_{n=0}^{N-1} Sample_n * e^{i *2\\pi * Frequency*n/N} $

When we do the above calculation, we will get a complex number out with a real and imaginary part.  The real part of the complex number is just the cosine value, while the imaginary part of the complex number is the sine value.  Nothing scary has happened, we've just used/abused complex numbers a bit to give us what we want in a more compact form.

<h2>Multiple Frequencies</h2>

Now we know how to look for a single, specific frequency.

What if you want to look for multiple frequencies though?  Further more, what if you don't even know what frequencies to look for?

When doing the discrete Fourier transform on a stream of samples, there are a specific set of frequencies that it checks for.  If you have N samples, it only checks for N different frequencies.  You could ask about other frequencies, but these frequencies are enough to reconstruct the original signal from only the frequency data.

The first N/2 frequencies are going to be the frequencies 0 (DC) through N/2.  N/2 is the Nyquist frequency and is the highest frequency that your signal is able of holding.

After N/2 comes the negative frequencies, counting from a large negative frequency (N/2-1) up to the last frequency which is -1.

As an example, if you had 8 samples and ran the DFT, you'd get 8 complex numbers as outputs, which represent these frequencies:

[0hz, 1hz, 2hz, 3hz, 4hz, -3hz, -2hz, -1hz]

The important take away from this section is that if you have N samples, the DFT asks only about N very specific frequencies, which will give enough information to go from frequency domain back to time domain and get the signal data back.

That then leads to this equation below, where we just put a subscript on Value, to signify which frequency we are probing for.

$latex Value_{Frequency} = \\sum\\limits_{n=0}^{N-1} Sample_n * e^{2\\pi i*Frequency*n/N} $

Frequency is an integer, and is between 0 and N-1.  We can say that mathematically by listing this information along with the equation:

$latex Frequency \\in [0,N), Frequency \\in \\mathbb Z $

<h2>Final Form</h2>

Math folk use letters and symbols instead of words in their equations.

The letter $latex k $ is used instead of frequency.

Instead of $latex Value_{Frequency} $, the symbol is $latex X_{k} $.

Instead of $latex Sample_n $, the symbol is $latex x_n$.

This gives us a more formal version of the equation:

$latex X_k= \\sum\\limits_{n=0}^{N-1} x_n * e^{2\\pi ikn/N} $

$latex k\\in [0,N), k \\in \\mathbb Z $

We are close to the final form, but we aren't quite done yet!

Remember the divide by two?  I had us take out the divide by two so that I could re-introduce it now in it's correct form.  Basically, since we are querying for N frequencies, we need to divide each frequency's result by N.  I mentioned that we had to divide by N/2 to make the amplitude information correct, but since we are checking both positive AND negative frequencies, we have to divide by 2*(N/2), or just N.  That makes our equation become this:

$latex X_k= 1/N \\sum\\limits_{n=0}^{N-1} x_n * e^{2\\pi ikn/N} $

$latex k\\in [0,N), k \\in \\mathbb Z $

Lastly, we actually want to make the waves go backwards, so we make the exponent negative.  The reason for this is a deeper topic than I want to get into right now, but you can read more about why here if you are curious: <a href="http://math.stackexchange.com/q/58163/138443">DFT - Why are the definitions for inverse and forward commonly switched?</a>

That brings us to our final form of the formula for the discrete Fourier transform:

$latex X_k= 1/N \\sum\\limits_{n=0}^{N-1} x_n * e^{-2\\pi ikn/N} $

$latex k\\in [0,N), k \\in \\mathbb Z $

<h2>Taking a Test Drive</h2>

If we use that formula to calculate the DFT of a simple, 4 sample, 1hz cosine wave (1, 0, -1, 0), we get as output [0, 0.5, 0, -0.5].

That means the following:

<ul>
	<li>0hz : 0 amplitude</li>
	<li>1hz : 0.5 amplitude</li>
	<li>2hz : 0 amplitude</li>
	<li>-1hz : -0.5 amplitude</li>
</ul>

It is a bit strange that the simple 1hz, 1.0 amplitude cosine wave was split in half, and made into a 1hz cosine wave and -1hz cosine wave, each contributing half amplitude to the result, but that is "just how it works".  I don't have a very good explanation for this though.  My personal understanding just goes that if we are checking for both positive AND negative frequencies, that makes it ambiguous whether it's a 1hz wave with 1 amplitude, or -1hz wave with -1 amplitude.  Since it's ambiguous, both must be true, and they get half the amplitude each.  If I get a better understanding, I'll update this paragraph, or make a new post on it.

<h2>Making The Inverse Discrete Fourier Transform</h2>

Making the formula for the Inverse DFT is really simple.

We start with our DFT formula, drop the 1/N from the front, and also make the exponent to e positive instead of negative.  That is all!  The intuition here for me is that we are just doing the reverse of the DFT process, to do the inverse DFT process.

$latex x_k= \\sum\\limits_{n=0}^{N-1} X_n * e^{2\\pi ikn/N} $

$latex k\\in [0,N), k \\in \\mathbb Z $

While the DFT takes in real valued signals and gives out complex valued frequency data, the IDFT takes in complex valued frequency data, and gives out real valued signals.

A fun thing to try is to take some data, DFT it, modify the frequency data, then IDFT it to see what comes out the other side.

<h2>Other Notes</h2>

Here are some other things of note about the discrete Fourier transform and it's inverse.

<b>Data Repeating Forever</b>

When you run the DFT on a stream of data, the math is such that it assumes that the stream of data you gave it repeats forever both forwards and backwards in time.  This is important because if you aren't careful, you can add frequency content to your data that you didn't intend to be there.

For instance, if you tile a 1hz sine wave, it's continuous, and there is only the 1hz frequency present:

<img src="https://demofox2.files.wordpress.com/2016/08/readyex_sine1hz.png"/>

However, if you tile a 0.9hz sine wave, there is a discontinuity, which means that there will be other, unintended frequencies present when you do a DFT of the data, to be able to re-create the discontinuity:

<img src="https://demofox2.files.wordpress.com/2016/08/readyex_sine0_9hz.png"/>

<b>Fast Fourier Transform</b>

There are a group of algorithms called "Fast Fourier Transforms".  You might notice that if we have N samples, taking the DFT is an O(N^2) operation.  Fast Fourier transforms can bring it down to O(N log N).

<b>DFT / IDFT Formula Variations</b>

The formula we came up with is one possible DFT formula, but there are a handful of variations that are acceptable, even though different variations come up with different values!

The first option is whether to make the e exponent negative or not.  Check out these two formulas to see what I mean.

$latex X_k= \\sum\\limits_{n=0}^{N-1} x_n * e^{2\\pi ikn/N} $
vs
$latex X_k= \\sum\\limits_{n=0}^{N-1} x_n * e^{-2\\pi ikn/N} $

Either one is acceptable, but when providing DFT'd data, you should mention which one you did, and make sure and use the opposite one in your inverse DFT formula.

The next options is whether to divide by N or not, like the below:

$latex X_k= \\sum\\limits_{n=0}^{N-1} x_n * e^{2\\pi ikn/N} $
vs
$latex X_k= 1/N \\sum\\limits_{n=0}^{N-1} x_n * e^{2\\pi ikn/N} $

Again, either one is acceptable, but you need to make sure and let people know which one you did, and also make sure and use the opposite one in your inverse DFT formula.

Instead of dividing by N, some people actually divide by 1/sqrt(N) in both the DFT and inverse DFT.  Wolfram alpha does this for instance!

You can read more about this stuff here: <a target="_blank" href="http://math.stackexchange.com/questions/58163/dft-why-are-the-definitions-for-inverse-and-forward-commonly-switched">DFT - Why are the definitions for inverse and forward commonly switched?</a>

One thing to note though is that if doing 1/N on the DFT (my personal preference), the 0hz (DC) frequency bin gives you the average value of the signal, and the amplitude data you get out of the other bins is actually correct (keeping in mind the amplitudes are split in half between positive and negative frequencies).

<b>Why Calculate Negative Frequencies</b>

The negative frequencies are able to be calculated on demand from the positive frequency information (eg complex conjugation), so why should we even bother calculating them?  Sure it'd be more computationally efficient not to calculate them, especially when just doing frequency analysis, right?!

Here's a discussion about that: <a target="_blank" href="http://dsp.stackexchange.com/questions/33524/why-calculate-negative-frequencies-of-dft">Why calculate negative frequencies of DFT?</a>

<b>Higher Dimensions</b>

It's possible to DFT in 2d, 3d, and higher.  The last blog post shows how to do this with 2d images, but I'd also like to write a blog post like this one specifically talking about the intuition behind multi dimensional DFTs.


<h2>Example Program Source Code</h2>

Here's some simple C++ source code which calculates the DFT and inverse DFT, optionally showing work in case you want to try to work some out by hand to better understand this.  Working a few out by hand really helped me get a better intuition for all this stuff.

Program Output:

<img src="https://demofox2.files.wordpress.com/2016/08/dftidftprogram.png"/>

Source Code:

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;complex&gt;
#include &lt;vector&gt;

#include &lt;fcntl.h&gt;
#include &lt;io.h&gt;
 
// set to 1 to have it show you the steps performed.  Set to 0 to hide the work.
// useful if checking work calculated by hand.
#define SHOW_WORK 1
 
#if SHOW_WORK
    #define PRINT_WORK(...) wprintf(__VA_ARGS__)
#else
    #define PRINT_WORK(...)
#endif

// Use UTF-16 encoding for Greek letters
static const wchar_t kPi = 0x03C0;
static const wchar_t kSigma = 0x03A3;
 
typedef float TRealType;
typedef std::complex&lt;TRealType&gt; TComplexType;
 
const TRealType c_pi = (TRealType)3.14159265359;
const TRealType c_twoPi = (TRealType)2.0 * c_pi;
 
//=================================================================================
TComplexType DFTSample (const std::vector&lt;TRealType&gt;&amp; samples, int k)
{
    size_t N = samples.size();
    TComplexType ret;
    for (size_t n = 0; n &lt; N; ++n)
    {
        TComplexType calc = TComplexType(samples[n], 0.0f) * std::polar&lt;TRealType&gt;(1.0f, -c_twoPi * TRealType(k) * TRealType(n) / TRealType(N));
        PRINT_WORK(L&quot;    n = %i : (%f, %f)\n&quot;, n, calc.real(), calc.imag());
        ret += calc;
    }
    ret /= TRealType(N);
    PRINT_WORK(L&quot;    Sum the above and divide by %i\n&quot;, N);
    return ret;
}
 
//=================================================================================
std::vector&lt;TComplexType&gt; DFTSamples (const std::vector&lt;TRealType&gt;&amp; samples)
{
    PRINT_WORK(L&quot;DFT:  X_k = 1/N %cn[0,N) x_k * e^(-2%cikn/N)\n&quot;, kSigma, kPi);
 
    size_t N = samples.size();
    std::vector&lt;TComplexType&gt; ret;
    ret.resize(N);
    for (size_t k = 0; k &lt; N; ++k)
    {
        PRINT_WORK(L&quot;  k = %i\n&quot;, k);
        ret[k] = DFTSample(samples, k);
        PRINT_WORK(L&quot;  X_%i = (%f, %f)\n&quot;, k, ret[k].real(), ret[k].imag());
    }
    PRINT_WORK(L&quot;\n&quot;);
    return ret;
}
 
//=================================================================================
TRealType IDFTSample (const std::vector&lt;TComplexType&gt;&amp; samples, int k)
{
    size_t N = samples.size();
    TComplexType ret;
    for (size_t n = 0; n &lt; N; ++n)
    {
        TComplexType calc = samples[n] * std::polar&lt;TRealType&gt;(1.0f, c_twoPi * TRealType(k) * TRealType(n) / TRealType(N));
        PRINT_WORK(L&quot;    n = %i : (%f, %f)\n&quot;, n, calc.real(), calc.imag());
        ret += calc;
    }
    PRINT_WORK(L&quot;    Sum the above and take the real component\n&quot;);
    return ret.real();
}
 
//=================================================================================
std::vector&lt;TRealType&gt; IDFTSamples (const std::vector&lt;TComplexType&gt;&amp; samples)
{
    PRINT_WORK(L&quot;IDFT:  x_k = %cn[0,N) X_k * e^(2%cikn/N)\n&quot;, kSigma, kPi);
 
    size_t N = samples.size();
    std::vector&lt;TRealType&gt; ret;
    ret.resize(N);
    for (size_t k = 0; k &lt; N; ++k)
    {
        PRINT_WORK(L&quot;  k = %i\n&quot;, k);
        ret[k] = IDFTSample(samples, k);
        PRINT_WORK(L&quot;  x_%i = %f\n&quot;, k, ret[k]);
    }
    PRINT_WORK(L&quot;\n&quot;);
    return ret;
}
 
//=================================================================================
template&lt;typename LAMBDA&gt;
std::vector&lt;TRealType&gt; GenerateSamples (int numSamples, LAMBDA lambda)
{
    std::vector&lt;TRealType&gt; ret;
    ret.resize(numSamples);
    for (int i = 0; i &lt; numSamples; ++i)
    {
        TRealType percent = TRealType(i) / TRealType(numSamples);
        ret[i] = lambda(percent);
    }
    return ret;
}
 
//=================================================================================
int main (int argc, char **argv)
{
	// Enable Unicode UTF-16 output to console
	_setmode(_fileno(stdout), _O_U16TEXT);

    // You can test specific data samples like this:
    //std::vector&lt;TRealType&gt; sourceData = { 1, 0, 1, 0 }; 
    //std::vector&lt;TRealType&gt; sourceData = { 1, -1, 1, -1 };
 
    // Or you can generate data samples from a function like this
    std::vector&lt;TRealType&gt; sourceData = GenerateSamples(
        4,
        [] (TRealType percent)
        {
            const TRealType c_frequency = TRealType(1.0);
            return cos(percent * c_twoPi * c_frequency);
        }
    );
 
    // Show the source data
    wprintf(L&quot;\nSource = [ &quot;);
    for (TRealType v : sourceData)
        wprintf(L&quot;%f &quot;,v);
    wprintf(L&quot;]\n\n&quot;);
 
    // Do a dft and show the results
    std::vector&lt;TComplexType&gt; dft = DFTSamples(sourceData);
    wprintf(L&quot;dft = [ &quot;);
    for (TComplexType v : dft)
        wprintf(L&quot;(%f, %f) &quot;, v.real(), v.imag());
    wprintf(L&quot;]\n\n&quot;);
 
    // Do an inverse dft of the dft data, and show the results
    std::vector&lt;TRealType&gt; idft = IDFTSamples(dft);
    wprintf(L&quot;idft = [ &quot;);
    for (TRealType v : idft)
        wprintf(L&quot;%f &quot;, v);
    wprintf(L&quot;]\n&quot;);
     
    return 0;
}
[/code]

<h2>Links</h2>

Explaining how to calculate the frequencies represented by the bins of output of DFT:
<a target="_blank" href="http://stackoverflow.com/questions/4364823/how-do-i-obtain-the-frequencies-of-each-value-in-an-fft">How do I obtain the frequencies of each value in an FFT?</a>

Another good explanation of the Fourier transform if it isn't quite sinking in yet:
<a target="_blank" href="https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/"/>An Interactive Guide To The Fourier Transform</a>

Some nice dft calculators that also have inverse dft equivelants:
<a target="_blank" href="https://www.easycalculation.com/engineering/mechanical/discrete-fourier-transform.php">DFT Calculator 1</a>
<a target="_blank" href="https://www.easycalculation.com/engineering/mechanical/inverse-fourier-transform.php">IDFT Calculator 1</a>
<a target="_blank" href="http://calculator.vhex.net/calculator/fast-fourier-transform-calculator-fft/1d-discrete-fourier-transform">DFT Calculator 2</a>
<a target="_blank" href="http://calculator.vhex.net/calculator/fast-fourier-transform-calculator-fft/1d-inverse-discrete-fourier-transform">IDFT Calculator 2</a>

Wolfram alpha can also do DFT and IDFT, but keep in mind that the formula used there is different and divides the results by 1/sqrt(N) in both DFT and IDFT so will be different values than you will get if you use a different formula.

<a target="_blank" href="http://www.wolframalpha.com/input/?i=Fourier%5B%7B1,+0,+-1,+0%7D%5D">Wolfram Alpha: Fourier[{1, 0, -1, 0}]</a> = [0,1,0,1]

<a target="_blank" href="http://www.wolframalpha.com/input/?i=Inverse+Fourier%5B%7B0,+1+,+0,+1%7D%5D">Wolfram Alpha: Inverse Fourier[{0, 1 , 0, 1}]</a> = [1, 0, -1, 0]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4555</wp:post_id>
		<wp:post_date><![CDATA[2016-08-11 09:39:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-11 17:39:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[understanding-the-discrete-fourier-transform]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio-synthesis"><![CDATA[Audio Synthesis]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495688348;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4470;}i:1;a:1:{s:2:"id";i:2285;}i:2;a:1:{s:2:"id";i:31;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_10f6faa4355e43d6b20e0758901a7086]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_9c6e95e073ad4dbf70d2d3659c20d589]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_1435397bedbbead023d7225491b9f62e]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3a7bb48d710f005ed271b518e5d01afb]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c403176413c4d0ea844b5eee84902054]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_00c27d451fb2515b0f554898245df8ea]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Incremental Averaging</title>
		<link>http://blog.demofox.org/2016/08/23/incremental-averaging/</link>
		<pubDate>Tue, 23 Aug 2016 19:36:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4676</guid>
		<description></description>
		<content:encoded><![CDATA[This is a super short post about something I want to be able to reference again in the future (:

Let's say that you need to average N things, where you don't know what the final N will be, but you want to keep an average as you go.

For instance, let's say you are doing monte carlo path tracing rendering, where the pixel you are showing is the average of however many samples you've had so far, but you are continuing to get new samples and want to show the updated average as you get new samples.

The formula for doing this is super simple.

[code language="cpp"]
NewAverage = OldAverage + (NewValue - OldAverage) / NewSampleCount;

// Or:

Average += (NewValue - Average) / NewSampleCount;
[/code]

One way of thinking of the above equations is that you are adjusting the average by how much the new value would adjust the average.

Another way of thinking of the above two equations is this:

First figure out how far the new sample is from the average, then move towards that new amount by an ever decreasing amount, as the number of samples grow.

Because of this, if you are in a language such as glsl or hlsl which has linear interpolation built in (mix in glsl, lerp in hlsl), you can use linear interpolation as well:

[code language="cpp"]
Average = mix(Average, NewValue, 1.0 / NewSampleCount);
[/code]

To see how this works out, check out the formula for lerp:

$latex Lerp(a,b,t) = a + (b-a)*t$

Substituting Average for a, NewValue for b, and 1/NewSampleCount for t, we get this:

$latex Lerp(Average, NewValue, 1/NewSampleCount)$
$latex = Average + (NewValue-Average)/NewSampleCount$

Which is the exact same formula as above.  So, using lerp in that way is mathematically equivalent.

Here's a link with more discussion on this:
<a target="_blank" href="http://math.stackexchange.com/questions/106700/incremental-averageing">Math Stack Exchange: Incremental averageing</a>

Here's an awesome post on this same subject, with a different resulting formula, by Christer Ericson (<a target="_blank" href="https://twitter.com/ChristerEricson">@ChristerEricson</a>), author of the famous "Real Time Collision Detection" book, and VP of technology at Activision.  His solution looks like it might be more numerically robust, but I haven't analyzed it well enough yet to know for sure:
<a target="_blank" href="http://realtimecollisiondetection.net/blog/?p=48">Robustly computing the centroid for a point set</a>

A somewhat related topic, here's a method for keeping a sum with floating point numbers, that is more accurate than normal summation.  Useful when you need to sum numbers of different magnitudes, which would normally be a problem in floating point.
<a href="https://en.wikipedia.org/wiki/Kahan_summation_algorithm" target="_blank">Wikipedia: Kahan Summation</a>

Here's an incremental (aka online) algorithm that gives you the average as well as the variance, which you can square root to get the standard deviation.  This is useful for when you need to know how volatile data samples are - like if reporting results from profiling code, or maybe useful for path tracing for finding how much variance is in a pixel, so you know whether you need more samples or can get away with fewer.
<a href="https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm" target="_blank">Wikipedia: Standard deviation - Online algorithm</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4676</wp:post_id>
		<wp:post_date><![CDATA[2016-08-23 11:36:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-23 19:36:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[incremental-averaging]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495704556;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4744;}i:1;a:1:{s:2:"id";i:5413;}i:2;a:1:{s:2:"id";i:4555;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Path Tracing - Getting Started With Diffuse and Emissive</title>
		<link>http://blog.demofox.org/2016/09/21/path-tracing-getting-started-with-diffuse-and-emissive/</link>
		<pubDate>Thu, 22 Sep 2016 03:48:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4744</guid>
		<description></description>
		<content:encoded><![CDATA[The images below were path traced using 100,000 samples per pixel, using the sample code provided in this post.
<img src="https://demofox2.files.wordpress.com/2016/09/HeaderImage2.png"/>

Path tracing is a specific type of ray tracing that aims to make photo realistic images by solving something called the rendering equation.  Path tracing relies heavily on a method called Monte Carlo integration to get an approximate solution.  In fact, it's often called "Monte Carlo Path Tracing", but I'll refer to it as just "Path Tracing".

In solving the rendering equation, path tracing automatically gets many graphical "features" which are cutting edge research topics of real time graphics, such as soft shadows, global illumination, color bleeding and ambient occlusion.

Unfortunately, path tracing can take a very long time to render - like minutes, hours, or days even, depending on scene complexity, image quality desired and specific algorithms used.  Despite that, learning path tracing can still be very useful for people doing real time rendering, as it can give you a "ground truth" to compare your real time approximating algorithms to, and can also help you understand the underlying physical processes involved, to help you make better real time approximations.  Sometimes even, data is created offline using path tracing, and is "baked out" so that it can be a quick and simple lookup during runtime.

<img src="https://demofox2.files.wordpress.com/2016/09/scene2-features.png"/>

There is a lot of really good information out there about path tracing, walking you through the rendering equations, monte carlo integration, and the dozen or so relevant statistical topics required to do monte carlo integration.

While understanding that stuff is important if you really want to get the most out of path tracing, this series of blog posts is meant to be more informal, explaining more what to do, and less deeply about why to do it.

When and if you are looking for resources that go deeper into the why, I highly recommend starting with these!

<ul>
<li><a target="_blank" href="http://graphicscodex.com/">http://graphicscodex.com/</a> - Online book, not free but well worth the 10$. I never thought I would understand the render equation until I read this.</li>
<li><a target="_blank" href="http://pbrt.org/">Physically Based Rendering - From Theory To Implementation</a> - A physical book that is very good.</li>
<li><a target="_blank" href="http://www.scratchapixel.com/lessons/3d-basic-rendering/global-illumination-path-tracing">Scratchpixel 2.0 - Global Illumination and Path Tracing</a> - A free online resource.</li>
<li><a target="_blank" href="http://www.kevinbeason.com/smallpt/">smallpt</a> is a path tracer written in 99 lines of code.  Go check it out!</li>
</ul>

<h2>Source Code</h2>

You can find the source code that goes along with this post here:

<a target="_blank" href="https://github.com/Atrix256/RandomCode/tree/master/PTBlogPost1"/>Github: Atrix256/RandomCode/PTBlogPost1/</a>

You can also download a zip of the source code here:

<a href="https://demofox2.files.wordpress.com/2016/09/PTBlogPost1.zip">PTBlogPost1.zip</a>

<h2>The Rendering Equation</h2>

The rendering equation might look a bit scary at first but stay with me, it is actually a lot simpler than it looks.

$latex L_o( \\omega_o)= L_e(\\omega_o)+\\int_{\\Omega}{f(\\omega_i, \\omega_o)L_i(\\omega_i)(\\omega_i \\cdot n)\\mathrm{d}\\omega_i}$

Here's a simplified version:

$latex LightOut(ViewDirection) = EmissiveLight(ViewDirection) + ReflectedLight(ViewDirection,AllDirections)$

In other words, the light you see when looking at an object is made up of how much it glows in your direction (like how a lightbulb or a hot coal in a fireplace glows), and also how much light is reflected in your direction, from light that is hitting that point on the object from all other directions.

It's pretty easy to know how much an object is glowing in a particular direction.  In the sample code, I just let a surface specify how much it glows (an emissive color) and use that for the object's glow at any point on the surface, at any viewing angle.

The rest of the equation is where it gets harder.  The rest of the equation is this:

$latex \\int_{\\Omega}{f(\\omega_i, \\omega_o)L_i(\\omega_i)(\\omega_i \\cdot n)\\mathrm{d}\\omega_i}$

The integral (the $latex \\int_{\\Omega}$ at the front and the $latex \\mathrm{d}\\omega_i$ at the back) just means that we are going to take the result of everything between those two symbols, and add them up for every point in a hemisphere, multiplying each value by the fractional size of the point's area for the hemisphere. The hemisphere we are talking about is the positive hemisphere surrounding the normal of the surface we are looking at.

One of the reasons things get harder at this point is that there are an infinite number of points on the hemisphere.

Let's ignore the integral for a second and talk about the rest of the equation.  In other words, lets consider only one of the points on the hemisphere for now.

<ul>
	<li>$latex f(\\omega_i, \\omega_o)$ - This is the "Bidirectional reflectance distribution function", otherwise known as the BRDF.  It describes how much light is reflected towards the view direction, of the light coming in from the point on the hemisphere we are considering.</li>
	<li>$latex L_i(\\omega_i)$ - This is how much light is coming in from the point on the hemisphere we are considering.</li>
	<li>$latex (\\omega_i \\cdot n)$ - This is the cosine of the angle between the point on the hemisphere we are considering and the surface normal, gotten via a dot product.  What this term means is that as the light direction gets more perpendicular to the normal, light is reflected less and less.  This is based on the actual behavior of light and you can read more about it here if you want to: <a target="_blank" href="https://en.wikipedia.org/wiki/Lambert%27s_cosine_law">Wikipedia: Lambert's Cosine Law</a>.  Here is another great link about it <a target="_blank" href="http://www.cgl.uwaterloo.ca/wmcowan/teaching/cs488/pdf/lambertian.pdf">lambertian.pdf</a>. (Thanks for the link Jay!)</li>
</ul>

So what this means is that for a specific point on the hemisphere, we find out how much light is coming in from that direction, multiply it by how much the BRDF says light should be reflected towards the view direction from that direction, and then apply Lambert's cosine law to make light dimmer as the light direction gets more perpendicular with the surface normal (more parallel with the surface).

Hopefully that makes enough sense.

Bringing the integral back into the mix, we have to sum up the results of that process for each of the infinite points on the hemisphere, multiplying each value by the fractional size of the point's area for the hemisphere.  When we've done that, we have our answer, and have our final pixel color.

This is where Monte Carlo integration comes in.  Since we can't really sum the infinite points, multiplied by their area (which is infinitely small), we are instead going to take a lot of random samples of the hemisphere and average them together.  The more samples we take, the closer we get to the actual correct value.  Not too hard right?

Now that we have the problem of the infinite points on the hemisphere solved, we actually have a second infinity to deal with.

The light incoming from a specific direction (a point on the hemisphere) is just the amount of light leaving a different object from that direction.  So, to find out how much light is coming in from that direction, you have to find what object is in that direction, and calculate how much light is leaving that direction for that object.  The problem is, the amount of light leaving that direction for that object is in fact calculated using the rendering equation, so it in turn is based on light leaving a different object and so on.  It continues like this, possibly infinitely, and even possibly in loops, where light bounces between objects over and over (like putting two mirrors facing eachother).  We have possibly infinite recursion!

The way this is dealt with in path tracers is to just limit the maximum amount of bounces that are considered.  Higher numbers of bounces gives diminishing returns in general, so usually it's just the first couple of bounces that really make a difference.  For instance, the images at the top of this post were made using 5 bounces.

<h2>The Algorithm</h2>

Now that we know how the rendering equation works, and what we need to do to solve it, let's write up the algorithm that we perform for each pixel on the screen.

<ol>
	<li>First, we calculate the camera ray for the pixel.</li>
	<li>If the camera ray doesn't hit an object, the pixel is black.</li>
	<li>If the camera ray does hit an object, the pixel's color is determined by how much light that object is emitting and reflecting down the camera ray.</li>
	<li>To figure out how much light that is, we choose a random direction in the hemisphere of that object's normal and recurse.</li>
	<li>At each stage of the recursion, we return: EmittedLight + 2 * RecursiveLight * Dot(Normal, RandomHemisphereAngle) * SurfaceDiffuseColor.</li>
	<li>If we ever reach the maximum number of bounces, we return black for the RecursiveLight value.</li>
</ol>

We do the above multiple times per pixel and average the results together.  The more times we do the process (the more samples we have), the closer the result gets to the correct answer.

By the way, the multiplication by 2 in step five is a byproduct of some math that comes out of integrating the BRDF.  Check the links i mentioned at the top of the post for more info, or you can at least verify that I'm not making it up by seeing that wikipedia says the same thing.  There is also some nice psuedo code there! (:
<a target="_blank" href="https://en.wikipedia.org/wiki/Path_tracing#Algorithm">Wikipedia: Path Tracing: Algorithm</a>

<h2>Calculating Camera Rays</h2>

There are many ways to calculate camera rays, but here's the method I used.

In this post we are going to path trace using a pin hole camera.  In a future post we'll switch to using a lens to get interesting lens effects like depth of field.

To generate rays for our pin hole camera, we'll need an eye position, a target position that the eye is looking at, and an imaginary grid of pixels between the eye and the target.

This imaginary grid of pixels is what is going to be displayed on the screen, and may be thought of as the "near plane".  If anything gets between the eye and the near plane it won't be visible.

To calculate a ray for a pixel, we get the direction from the eye to the pixel's location on the grid and normalize that.  That gives us the ray's direction.  The ray's starting position is just the pixel's location on that imaginary grid.

<img src="https://demofox2.files.wordpress.com/2016/09/pinhole.png"/>

I'll explain how to do this below, but keep in mind that the example code also does this process, in case reading the code is easier than reading a description of the math used.

First we need to figure out the orientation of the camera:
<ol>
	<li>Calculate the camera's <strong>forward</strong> direction by normalizing (Target - Eye).</li>
	<li>To calculate the camera's <strong>right</strong> vector, cross product the forward vector with (0,1,0).</li>
	<li>To calculate the camera's <strong>up</strong> vector, cross product the forward vector with the right vector.</li>
</ol>

Note that the above assumes that there is no roll (z axis rotation) on the camera, and that it isn't looking directly up.

Next we need to figure out the size of our near plane on the camera's x and y axis.  To calculate this, we have to define both a near plane distance (I use 0.1 in the sample code) as well as a horizontal and vertical field of view (I use a FOV of 40 degrees both horizontally and vertically, and make a square image, in the sample code).

You can get the size of the window on each axis then like this:
<ol>
	<li>WindowRight = tangent(HorizontalFOV / 2) * NearDistance</li>
	<li>WindowTop = tangent(VerticalFOV / 2) * NearDistance</li>
</ol>

Note that we divide the field of view by 2 on each axis because we are going to treat the center of the near plane as (0,0).  This centers the near plane on the camera.

Next we need to figure out where our pixel's location is in world space, when it is at pixel location (x,y):
<ol>
	<li>Starting at the camera's position, move along the camera's <strong>forward</strong> vector by whatever your near plane distance is (I use a value of 0.1).  This gets us to the center of the imaginary pixel grid.</li>
	<li>Next we need to figure out what percentage on the X and Y axis our pixel is.  This will tell us what percentage on the near plane it will be.  We divide x by ScreenWidth and y by ScreenHeight.  We then put these percentages in a [-1,1] space by multiplying the percentages by 2 and subtracting 1.  We will call these values u and v, which equate to the x and y axis of the screen.</li>
	<li>Starting at the center of the pixel grid that we found, we are going to move along the camera's right vector a distance of u and the camera's up vector a distance of v.</li>
</ol>

We now have our pixel's location in the world.

Lastly, this is how we calculate the ray's position and direction:
<ol>
	<li>RayDir = normalize(PixelWorld - Eye)</li>
	<li>RayStart = PixelWorld</li>
</ol>

We now have a ray for our pixel and can start solving eg ray vs triangle equations to see what objects in the scene our ray intersects with.

That's basically all there is to path tracing at a high level.  Next up I want to talk about some practical details of path tracing.

<h2>Rendering Parameters, Rendering Quality and Rendering Time</h2>

A relevant quote from <a target="_blank" href="https://twitter.com/CasualEffects">@CasualEffects</a>:
<img src="https://demofox2.files.wordpress.com/2016/09/morganptquote.png"/>

Below are a few scenes rendered at various samples per pixel (spp) and their corresponding rendering times.  They are rendered at 128x128 with 5 bounces.  I used 8 threads to utilize my 8 cpu cores. Exact machine specs aren't really important here, I just want to show how sample count affects render quality and render times in a general way.

<img src="https://demofox2.files.wordpress.com/2016/09/Scene0_spp2.png"/>
<img src="https://demofox2.files.wordpress.com/2016/09/Scene1_spp.png"/>
<img src="https://demofox2.files.wordpress.com/2016/09/Scene2_spp.png"/>
<img src="https://demofox2.files.wordpress.com/2016/09/Scene3_spp.png"/>

There's a couple things worth noting.

First, render time grows roughly linearly with the number of samples per pixel.  This lets you have a pretty good estimate how long a render will take then, if you know how long it took to render 1000 samples per pixel, and now you want to make a 100,000 samples per pixel image - it will take roughly 100 times as long!

Combine that with the fact that you need 4 times as many samples to half the amount of error (noise) in an image and you can start to see why monte carlo path tracing takes so long to render nice looking images.

This also applies to the size of your render.  The above were rendered at 128x128.  If we instead rendered them at 256x256, the render times would actually be four times as long!  This is because our image would have four times as many pixels, which means we'd be taking four times as many samples (at the same number of samples per pixel) to make an image of the same quality at the higher resolution.

You can affect rendering times by adjusting the maximum number of bounces allowed in your path tracer as well, but that is not as straightforward of a relationship to rendering time.  The rendering time for a given number of bounces depends on the complexity and geometry of the scene, so is very scene dependent.  One thing you can count on though is that decreasing the maximum number of bounces will give you the same or faster rendering times, while increasing the maximum number of bounces will give you the same or slower rendering times.

Something else that's really important to note is that the first scene takes a lot more samples to start looking reasonable than the second scene does.  This is because there is only one small light source in the first image but there is a lot of ambient light from a blue sky in the second image.  What this means is that in the first scene, many rays will hit darkness, and only a few will hit light.  In the second scene, many rays will hit either the small orb of light, or will hit the blue sky, but all rays will hit a light source.

The third scene also takes a lot more samples to start looking reasonable compared to the fourth scene.  This is because in the third scene, there is a smaller, brighter light in the middle of the ceiling, while in the fourth scene there is a dimmer but larger light that covers the entire ceiling.  Again, in the third scene, rays are less likely to hit a light source than in the fourth scene.

Why do these scenes converge at different rates?

Well it turns out that the more difference there is in the things your rays are likely to hit (this difference is called variance, and is the source of the "noisy look" in your path tracing), the longer it takes to converge (find the right answer).

This makes a bit of sense if you think of it just from the point of view of taking an average.

If you have a bunch of numbers with an average of N, but the individual numbers vary wildly from one to the next, it will take more numbers averaged together to get closer to the actual average.

If on the other hand, you have a bunch of numbers with an average of N that aren't very different from eachother (or very different from N), it will take fewer numbers to get closer to the actual average.

Taken to the extreme, if you have a bunch of numbers with an average of N, that are all exactly the value N, it only takes one sample to get to the actual true average of N!

You can read a discussion on this here: <a target="_blank" href="http://computergraphics.stackexchange.com/questions/3972/is-it-expected-that-a-naive-path-tracer-takes-many-many-samples-to-converge">Computer Graphics Stack Exchange: Is it expected that a naive path tracer takes many, many samples to converge?</a>

There are lots of different ways of reducing variance of path tracing in both the sampling, as well as in the final image.

Some techniques actually just "de-noise" the final image rendered with lower sample counts.  Some techniques use some extra information about each pixel to denoise the image in a smarter way (such as using a Z buffer type setup to do bilateral filtering).

Here's such a technique that has really impressive results.  Make sure and watch the video!

<a target="_blank" href="https://www.cs.dartmouth.edu/~wjarosz/publications/bitterli16nonlinearly.html">Nonlinearly Weighted First-order Regression for Denoising Monte Carlo Renderings</a>

There is also a nice technique called importance sampling where instead of shooting the rays out in a uniform random way, you actually shoot your rays in directions that matter more and will get you to the actual average value faster.  Importance sampling lets you get better results with fewer rays.

In the next post or two, I'll show a very simple importance sampling technique (cosine weighted hemisphere sampling) and hope in the future to show some more sophisticated importance sampling methods.

<h2>Some Other Practical Details</h2>

Firstly, I want to mention that this is called "naive" path tracing.  There are ways to get better images in less time, and algorithms that are better suited for different scenes or different graphical effects (like fog or transparent objects), but this is the most basic, and most brute force way to do path tracing.  We'll talk about some ways to improve it and get some more features in future posts.

<b>Hitting The Wrong Objects</b>

I wanted to mention that when you hit an object and you calculate a random direction to cast a new ray in, there's some very real danger that the new ray you cast out will hit the same object you just hit!  This is due to the fact that you are starting the ray at the collision point of the object, and the floating point math may or may not consider the new ray to hit the object at time 0 or similar.

One way to deal with this is to move the ray's starting point a small amount down the ray direction before testing the ray against the scene.  If pushed out far enough (I use a distance of 0.001) it will make sure the ray doesn't hit the same object again.  It sounds like a dodgy thing to do, because if you don't push it out enough (how far is enough?) it will give you the wrong result, and if you push it out too far to be safe, you can miss thin objects, or can miss objects that are very close together.  In practice though, this is the usual solution to the problem and works pretty well without too much fuss.  Note that this is a problem in all ray tracing, not just path tracing, and this solution of moving the ray by a small epsilon is common in all forms of ray tracing I've come across!

Another way to deal with the problem is to give each object a unique ID and then when you cast a ray, tell it to ignore the ID of the object you just hit.  This works flawlessly in practice, so long as your objects are convex - which is usually the case for ray tracing since you often use triangles, quads, spheres, boxes and similar to make your scene.  However, this falls apart when you are INSIDE of a shape (like how the images at the top of this post show objects INSIDE a box), and it also falls apart when you have transparent objects, since sometimes it is appropriate for an object to be intersected again by a new ray.

I used to be a big fan of object IDs, but am slowly coming to terms with just pushing the ray out a little bit.  It's not so bad, and handles transparents and being inside an object (:

<b>Gamma Correction</b>

After we generate our image, we need to apply gamma correction by taking each color channel to the power of 1/2.2.  A decent approximation to that is also to just take the square root of each color channel, as the final value for that color channel.  You can read about why we do this here: <a target="_blank" href="http://www.cambridgeincolour.com/tutorials/gamma-correction.htm">Understanding Gamma Correction</a>

<b>HDR vs LDR</b>

There is nothing in our path tracer that has any limitations on how bright something can be.  We could have a bright green light that had a color value of (0, 100000, 0)!  Because of this, the final pixel color may not necessarily be less than one (but it will be a positive number).  Our color with be a "High Dynamic Range" color aka HDR color.  You can use various tone mapping methods to turn an HDR color into an LDR color - and we will be looking at that in a future post - but for now, I am just clamping the color value between 0 and 1.  It's not the best option, but it works fine for our needs right now.

<b>Divide by Pi?</b>

When looking at explanations or implementations of path tracing, you'll see that some of them divide colors by pi at various stages, and others don't.  Since proper path tracing is very much about making sure you have every little detail of your math correct, you might wonder whether you should be dividing by pi or not, and if so, where you should do that.  The short version is it actually doesn't really matter believe it or not!

Here are two great reads on the subject for a more in depth answer:
<a target="_blank" href="https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/">PI or not to PI in game lighting equation</a>
<a target="_blank" href="https://seblagarde.wordpress.com/2011/08/17/hello-world/">Adopting a physically based shading model</a>

<b>Random Point on Sphere and Bias</b>

Correctly finding a uniformly random point on a sphere or hemisphere is actually a little bit more complicated that you might expect.  If you get it wrong, you'll introduce bias into your images which will make for some strange looking things.

Here is a good read on some ways to do it correctly:
<a target="_blank" href="http://mathworld.wolfram.com/SpherePointPicking.html">Wolfram Math World: Sphere Point Picking</a>

Here's an image where the random point in sphere function was just completely wrong:
<img src="https://demofox2.files.wordpress.com/2016/09/bias1.png"/>

Here's an image where the the random hemisphere function worked by picking a random point in a cube and normalizing the resulting vector (and multiplying it by -1 if it was in the wrong hemisphere).  That gives too much weighting to the corners, which you can see manifests itself in the image on the left as weird "X" shaped lighting (look at the wall near the green light), instead of on the right where the lighting is circular.  Apologies if it's hard to distinguish.  Wordpress is converting all my images to 8BPP! :X

<img src="https://demofox2.files.wordpress.com/2016/09/bias2.png"/>

<b>Primitive Types & Counts Matter</b>

Here are some render time comparisons of the Cornell box scene rendered at 512x512, using 5 bounces and 100 samples per pixel.

There are 3 boxes which only have 5 sides - the two boxes inside don't have a bottom, and the box containing the boxes doesn't have a front.

I started out by making the scene with 30 triangles, since it takes 2 triangles to make a quad, and 5 quads to make a box, and there are 3 boxes.

Those 30 triangles rendered in 21.1 seconds.

I then changed it from 30 triangles to 15 quads.

It then took 6.2 seconds to render.  It cut the time in half!

This is not so surprising though.  If you look at the code for ray vs triangle compared to ray vs quad, you see that ray vs quad is just a ray vs triangle test were we first test the "diagonal line" of the quad, to see which of the 2 corners should be part of the ray vs triangle test.  Because of this, testing a quad is just about as fast as testing a triangle.  Since using quads means we have half the number of primitives, turning our triangles into quads means our rendering time is cut in half.

Lastly, i tried turning the two boxes inside into oriented boxes that have a width, height, depth, an axis of rotation and an angle of rotation around that axis.  The collision test code puts the ray into the local space of the oriented box and then just does a ray vs axis aligned box test.

Doing that, i ended up with 5 quads (for the box that doesn't have a front, it needed to stay quads, unless i did back face culling, which i didn't want to) and two oriented boxes.

The render time for that was 5.5 seconds, so it did shave off 0.7 seconds, which is a little over 11% of the rendering time.  So, it was worth while.

For such a low number of primitives, I didn't bother with any spatial acceleration structures, but people do have quite a bit of luck on more complex scenes with bounding volume hierarchies (BVH's).

For naive path tracing code, since the first ray hit is entirely deterministic which object it will hit (if any), we could also cache that first intersection and re-use it for each subsequent sample.  That ought to make a significant difference to rendering times, but basically in the next path tracing post we'll be removing the ability to do that, so I didn't bother to try it and time it.

<b>Debugging</b>

As you are working on your path tracer, it can be useful to render an image at a low number of samples so that it's quick to render and you can see whether things are turning out the way you want or not.

Another option is to have it show you the image as it's rendering more and more samples per pixel, so that you can see it working.

If you make a "real time" visualizer like that, some real nice advice from Morgan McGuire (Computer graphics professor and the author of <a target="_blank" href="http://graphicscodex.com/">http://graphicscodex.com/</a>) is to make a feature where if you click on a pixel, it re-renders just that pixel, and does so in a single thread so that you can step through the process of rendering that pixel to see what is going wrong.

I personally find a lot of value in visualizing per-pixel values in the image to see how values look across the pixels to be able to spot problems.  You can do this by setting the emissive lighting to be based on the value you want to visualize and setting the bounce count to 1, or other similar techniques.

Below are two debug images I made while writing the code for this post to try and understand how some things were going wrong.  The first image shows the normals of the surface that the camera rays hit (i put x,y,z of the normal into r,g,b but multiply the values by 0.5 and add 0.5 to make them be 0 to 1, instead of -1 to 1).  This image let me see that the normals coming out of my ray vs oriented box test were correct.

The second image shows the number of bounces done per pixel.  I divided the bounce count by the maximum number of bounces and used that as a greyscale value for the pixel.  This let me see that rays were able to bounce off of oriented boxes.  A previous image that I don't have anymore showed darker sides on the boxes, which meant that the ray bouncing wasn't working correctly.

<img src="https://demofox2.files.wordpress.com/2016/09/debug-norm.png"/>

<img src="https://demofox2.files.wordpress.com/2016/09/debug-bounces.png"/>

<b>Immensely Parallelizable: CPU, GPU, Grid Computing</b>

At an image size of 1024x1024, that is a little over 1 million pixels.

At 1000 samples per pixel, that means a little over 1 billion samples.

Every sample of every pixel only needs one thing to do it's work:  Read only access to the scene.

Since each of those samples are able to do their work independently, if you had 1 billion cores, path tracing could use them all!

The example code is multithreaded and uses as many threads as cores you have on your CPU.

Since GPUs are meant for massively parallelizable work, they can path trace much faster than CPUs.

I haven't done a proper apples to apples test, but evidence indicates something like a 100x speed up on the GPU vs the CPU.

You can also distribute work across a grid of computers!

One way to do path tracing in grid computing would be to have each machine do a 100 sample image, and then you could average all of those 100 sample images together to get a much higher sample image.

The downside to that is that network bandwidth and disk storage pays the cost of the full size image for each computer you have helping.

A better way to do it would probably be to make each machine do all of the samples for a small portion of the image and then you can put the tiles together at the end.

While decreasing network bandwidth and disk space usage, this also allows you to do all of the pixel averaging in floating point, as opposed to doing it in 8 bit 0-255 values like you'd get from a bmp file made on another machine.

<h2>Closing</h2>

In this post and the sample code that goes with it, we are only dealing with a purely diffuse (lambertian) surface, and emissive lighting.  In future posts we'll cover a lot more features like specular reflection (mirror type reflection), refraction (transparent objects), caustics, textures, bump mapping and more.  We'll also look at how to make better looking images with fewer samples and lots of other things too.

I actually have to confess that I did a bit of bait and switch.  The images at the top of this post were rendered with an anti aliasing technique, as well as an importance sampling technique (cosine weighted hemisphere samples) to make the image look better faster.  These things are going to be the topics of my next two path tracing posts, so be on the lookout!  Here are the same scenes with the same number of samples, but with no AA, and uniform hemisphere sampling:

<img src="https://demofox2.files.wordpress.com/2016/09/scene23-2raw.png"/>

And the ones at the top for comparison:

<img src="https://demofox2.files.wordpress.com/2016/09/HeaderImage2.png"/>

While making this post I received a lot of good information from the twitter graphics community (see the people I'm following and follow them too! <a target="_blank" href="https://twitter.com/Atrix256">@Atrix256</a>) as well as the <a target="_blank" href="http://computergraphics.stackexchange.com/">Computer Graphics Stack Exchange</a>.

Also, two specific individuals helped me out quite a bit:

<a target="_blank" href="https://twitter.com/lh0xfb">@lh0xfb</a> - She was also doing a lot of path tracing at the time and helped me understand where some of my stuff was going wrong, including replicating my scenes in her renderer to be able to compare and contrast with.  I was sure my renderer was wrong, because it was so noisy!  It turned out that while i tended to have small light sources and high contrast scenes, Lauren did a better job of having well lit scenes that converged more quickly.

<a target="_blank" href="https://twitter.com/Reedbeta">@Reedbeta</a> - He was a wealth of information for helping me understand some details about why things worked the way they did and answered a handful of graphics stack exchange questions I posted.

Thanks a bunch to you both, and to everyone else that participated in the discussions (:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4744</wp:post_id>
		<wp:post_date><![CDATA[2016-09-21 19:48:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-22 03:48:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[path-tracing-getting-started-with-diffuse-and-emissive]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="path-tracing"><![CDATA[Path Tracing]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495684827;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5699;}i:1;a:1:{s:2:"id";i:4676;}i:2;a:1:{s:2:"id";i:1127;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Exploring Compile Time Hashing</title>
		<link>http://blog.demofox.org/2016/09/23/exploring-compile-time-hashing/</link>
		<pubDate>Fri, 23 Sep 2016 20:56:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4899</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Never put off til run time what can be done at compile time.</blockquote>

C++11 gave us <a target="_blank" href="http://en.cppreference.com/w/cpp/language/constexpr">constexpr</a> which lets us make C++ code that the compiler can run during compilation, instead of at runtime.

This is great because now we can use C++ to do some things that we previously had to use macros or templates for.

As with many of the newish C++ features, it feels like there are some rough edges to work out with constexpr, but it adds a lot of new exciting capabilities.

In this post we will explore some new possibilities, and get a better feel for this new world of compile time code execution.  There are going to be some unexpected surprises along the way :P

<h2>Testing Details</h2>

The code in this post will be using some compile time crc code I found at <a target="_blank" href="https://gist.github.com/oktal/5573082">Github Gist: oktal/compile-time-crc32.cc</a>.  I haven't tested it for correctness or speed, but it serves the purpose of being a compile time hash implementation that allows us to explore things a bit.

I've compiled and analyzed the code in this post in visual studio 2015, in both debug/release and x86/x64.  There are differences in behavior between debug and release of course, but x86 and x64 behaved the same.  If you have different results with different compilers or different code, please share!

With that out of the way, onto the fun!

We are going to be looking at:
<ol>
	<li>Simple Compile Time Hashing Behavior</li>
	<li>Compile Time Hash Switching</li>
	<li>Leveraging Jump Tables</li>
	<li>Perfect Hashing</li>
	<li>Minimally Perfect Hashing</li>
	<li>Compile Time Assisted String To Enum</li>
</ol>

<h2>Simple Compile Time Hashing Behavior</h2>

Let's analyze some basic cases of trying to do some compile time hashing

[code language="cpp"]
    const char *hello1String = &quot;Hello1&quot;;
    unsigned int hashHello1 = crc32(hello1String);  // 1) Always Run Time.
    unsigned int hashHello2 = crc32(&quot;Hello2&quot;);      // 2) Always Run Time.

    // 3) error C2131: expression did not evaluate to a constant
    //const char *hello3String = &quot;Hello3&quot;;
    //constexpr unsigned int hashHello3 = crc32(hello3String);
    constexpr unsigned int hashHello4 = crc32(&quot;Hello4&quot;);  // 4) Debug: Run Time.  Release: Compile Time

    printf(&quot;%X %X %X %X\n&quot;, hashHello1, hashHello2, hashHello4, crc32(&quot;hello5&quot;));  // 5) Always Run Time. (!!!)
[/code]

Let's take a look at the assembly for the above code when compiled in debug.  The assembly line calls to crc32 are highlighted for clarity.

[code language="cpp" highlight="7,12,21,27"]
    const char *hello1String = &quot;Hello1&quot;;
00007FF717B71C3E  lea         rax,[string &quot;Hello1&quot; (07FF717B7B124h)]  
00007FF717B71C45  mov         qword ptr [hello1String],rax  
    unsigned int hashHello1 = crc32(hello1String);  // 1) Always Run Time.
00007FF717B71C49  xor         edx,edx  
00007FF717B71C4B  mov         rcx,qword ptr [hello1String]  
00007FF717B71C4F  call        crc32 (07FF717B710C3h)  
00007FF717B71C54  mov         dword ptr [hashHello1],eax  
    unsigned int hashHello2 = crc32(&quot;Hello2&quot;);      // 2) Always Run Time.
00007FF717B71C57  xor         edx,edx  
00007FF717B71C59  lea         rcx,[string &quot;Hello2&quot; (07FF717B7B12Ch)]  
00007FF717B71C60  call        crc32 (07FF717B710C3h)  
00007FF717B71C65  mov         dword ptr [hashHello2],eax  

    // 3) error C2131: expression did not evaluate to a constant
    //const char *hello3String = &quot;Hello3&quot;;
    //constexpr unsigned int hashHello3 = crc32(hello3String);
    constexpr unsigned int hashHello4 = crc32(&quot;Hello4&quot;);  // 4) Debug: Run Time.  Release: Compile Time
00007FF717B71C68  xor         edx,edx  
00007FF717B71C6A  lea         rcx,[string &quot;Hello4&quot; (07FF717B7B134h)]  
00007FF717B71C71  call        crc32 (07FF717B710C3h)  
00007FF717B71C76  mov         dword ptr [hashHello4],eax  

    printf(&quot;%X %X %X %X\n&quot;, hashHello1, hashHello2, hashHello4, crc32(&quot;hello5&quot;));  // 5) Always Run Time. (!!!)
00007FF717B71C79  xor         edx,edx  
00007FF717B71C7B  lea         rcx,[string &quot;hello5&quot; (07FF717B7B13Ch)]  
00007FF717B71C82  call        crc32 (07FF717B710C3h)  
00007FF717B71C87  mov         dword ptr [rsp+20h],eax  
00007FF717B71C8B  mov         r9d,0BECA76E1h  
00007FF717B71C91  mov         r8d,dword ptr [hashHello2]  
00007FF717B71C95  mov         edx,dword ptr [hashHello1]  
00007FF717B71C98  lea         rcx,[string &quot;%X %X %X %X\n&quot; (07FF717B7B150h)]  
00007FF717B71C9F  call        printf (07FF717B711FEh)  
[/code]

As you can see, there is a "call crc32" in the assembly for every place that we call crc32 in the c++ code - 4 crc32 calls in the c++, and 4 crc32 calls in the asm.  That means that all of these crc32 calls happen at run time while in debug mode.

I can sort of see the reasoning for always doing constexpr at runtime in debug mode, since you probably want to be able to step through constexpr functions to see how they operate.  I'd bet that is the reasoning here.

Let's see what it compiles to in release.  Release is a little bit harder to understand since the optimizations make it difficult/impossible to pair the c++ lines with the asm.

[code language="cpp" highlight="3,7,11,12"]
00007FF68DC010BA  lea         rdx,[string &quot;Hello1&quot;+1h (07FF68DC02211h)]  
00007FF68DC010C1  mov         ecx,7807C9A2h  
00007FF68DC010C6  call        crc32_rec (07FF68DC01070h)  
00007FF68DC010CB  lea         rdx,[string &quot;Hello2&quot;+1h (07FF68DC02219h)]  
00007FF68DC010D2  mov         ecx,7807C9A2h  
00007FF68DC010D7  mov         edi,eax  
00007FF68DC010D9  call        crc32_rec (07FF68DC01070h)  
00007FF68DC010DE  lea         rdx,[string &quot;hello5&quot;+1h (07FF68DC02221h)]  
00007FF68DC010E5  mov         ecx,4369E96Ah  
00007FF68DC010EA  mov         ebx,eax  
00007FF68DC010EC  call        crc32_rec (07FF68DC01070h)  
00007FF68DC010F1  mov         r9d,0BECA76E1h  
00007FF68DC010F7  mov         dword ptr [rsp+20h],eax  
00007FF68DC010FB  mov         r8d,ebx  
00007FF68DC010FE  lea         rcx,[string &quot;%X %X %X %X\n&quot; (07FF68DC02228h)]  
00007FF68DC01105  mov         edx,edi  
00007FF68DC01107  call        printf (07FF68DC01010h)  
[/code]

We can see that in release, there are still 3 calls to crc32 which means that only one hash actually happens at compile time.

From the assembly we can easily see that "Hello1", "Hello2" and "Hello5" are hashed at runtime.  The assembly shows those strings as parameters to the function.

That leaves only "Hello4" remaining, which means that is the one that got hashed at compile time.  You can actually see that on line 12, the value 0x0BECA76E1 is being moved into register r9d.  If you step through the code in debug mode, you can see that the value of hashHello4 is actually 0x0BECA76E1, so that "move constant into register" on line 12 is the result of our hash happening at compile time.  Pretty neat right?

I was actually surprised to see how many hashes remained happening at run time though, especially the one that is a parameter to printf.  There really is no reason I can think of why they would need to remain happening at run time, versus happening at compile time, other than (this?) compiler not aggressively moving whatever it can to compile time.  I really wish it worked more like that though, and IMO I think it should.  Maybe in the future we'll see compilers move more that direction.

<h2>Compile Time Hash Switching</h2>

Something neat about being able to do hashing at compile time, is that you can use the result of a compile time hash as a case value in a switch statement!

Let's explore that a bit:

[code language="cpp"]
    unsigned int hash = crc32(&quot;Hello1&quot;);  // 1) Run Time.
    constexpr unsigned int hashTestHello2 = crc32(&quot;Hello2&quot;); // 2) Debug: Run Time. Release: Not calculated at all.
    switch (hash) { // 3) Uses variable on stack
        case hashTestHello2: {  // 4) Compile Time Constant.
            printf(&quot;A\n&quot;);
            break;
        }
        case crc32(&quot;Hello3&quot;): {  // 5) Compile Time Constant.
            printf(&quot;B\n&quot;);
            break;
        }
        // 6) error C2196: case value '1470747604' already used
        /*
        case crc32(&quot;Hello2&quot;): { 
            printf(&quot;C\n&quot;);
            break;
        }
        */
        default: {
            printf(&quot;C\n&quot;);
            break;
        }
    }
[/code]

Something interesting to note is that if you have duplicate cases in your switch statement, due to things hashing to the same value (either duplicates, or actual hash collisions) that you will get a compile time error.  This might come in handy, let's come back to that later.

Let's look at the assembly code in debug:

[code language="cpp" highlight="4,9,12,14,16"]
    unsigned int hash = crc32(&quot;Hello1&quot;);  // 1) Run Time.
00007FF77B4119FE  xor         edx,edx  
00007FF77B411A00  lea         rcx,[string &quot;Hello1&quot; (07FF77B41B124h)]  
00007FF77B411A07  call        crc32 (07FF77B4110C3h)  
00007FF77B411A0C  mov         dword ptr [hash],eax  
    constexpr unsigned int hashTestHello2 = crc32(&quot;Hello2&quot;); // 2) Debug: Run Time. Release: Not calculated at all.
00007FF77B411A0F  xor         edx,edx  
00007FF77B411A11  lea         rcx,[string &quot;Hello2&quot; (07FF77B41B12Ch)]  
00007FF77B411A18  call        crc32 (07FF77B4110C3h)  
00007FF77B411A1D  mov         dword ptr [hashTestHello2],eax  
    switch (hash) { // 3) Uses variable on stack
00007FF77B411A20  mov         eax,dword ptr [hash]  
00007FF77B411A23  mov         dword ptr [rbp+0F4h],eax  
00007FF77B411A29  cmp         dword ptr [rbp+0F4h],20AEE342h  
00007FF77B411A33  je          Snippet_CompileTimeHashSwitching1+71h (07FF77B411A51h)  
00007FF77B411A35  cmp         dword ptr [rbp+0F4h],57A9D3D4h  
00007FF77B411A3F  je          Snippet_CompileTimeHashSwitching1+63h (07FF77B411A43h)  
00007FF77B411A41  jmp         Snippet_CompileTimeHashSwitching1+7Fh (07FF77B411A5Fh)  
        case hashTestHello2: {  // 4) Compile Time Constant.
            printf(&quot;A\n&quot;);
00007FF77B411A43  lea         rcx,[string &quot;A\n&quot; (07FF77B41B144h)]  
00007FF77B411A4A  call        printf (07FF77B4111FEh)  
            break;
00007FF77B411A4F  jmp         Snippet_CompileTimeHashSwitching1+8Bh (07FF77B411A6Bh)  
        }
        case crc32(&quot;Hello3&quot;): {  // 5) Compile Time Constant.
            printf(&quot;B\n&quot;);
00007FF77B411A51  lea         rcx,[string &quot;B\n&quot; (07FF77B41B160h)]  
00007FF77B411A58  call        printf (07FF77B4111FEh)  
            break;
00007FF77B411A5D  jmp         Snippet_CompileTimeHashSwitching1+8Bh (07FF77B411A6Bh)  
        }
        // 6) error C2196: case value '1470747604' already used
        /*
        case crc32(&quot;Hello2&quot;): { 
            printf(&quot;C\n&quot;);
            break;
        }
        */
        default: {
            printf(&quot;C\n&quot;);
00007FF77B411A5F  lea         rcx,[string &quot;C\n&quot; (07FF77B41B164h)]  
00007FF77B411A66  call        printf (07FF77B4111FEh)  
            break;
        }
    }
[/code]

We can see that the hash for "Hello1" and "Hello2" are both calculated at run time, and that the switch statement uses the stack variable [hash] to move the value into a register to do the switch statement.

Interestingly though, on lines 14 and 16 we can see it moving a constant value into registers to use in a cmp (compare) operation.  0x20AEE342 is the hash value of "Hello3" and 0x57A9D3D4 is the hash value of "Hello2" so it ended up doing those hashes at compile time, even though we are in debug mode.  This is because case values must be known at compile time.

It's interesting to see though that the compiler calculates hashTestHello2 at runtime, even though the only place we use it (in the case statement), it puts a compile time constant from a compile time hash.  Odd.

Let's see what happens in release:

[code language="cpp" highlight="3,4,6"]
00007FF7FA9B10B4  lea         rdx,[string &quot;Hello1&quot;+1h (07FF7FA9B2211h)]  
00007FF7FA9B10BB  mov         ecx,7807C9A2h  
00007FF7FA9B10C0  call        crc32_rec (07FF7FA9B1070h)  
00007FF7FA9B10C5  cmp         eax,20AEE342h  
00007FF7FA9B10CA  je          main+49h (07FF7FA9B10F9h)  
00007FF7FA9B10CC  cmp         eax,57A9D3D4h  
00007FF7FA9B10D1  je          main+36h (07FF7FA9B10E6h)  
00007FF7FA9B10D3  lea         rcx,[string &quot;C\n&quot; (07FF7FA9B2220h)]  
00007FF7FA9B10DA  call        printf (07FF7FA9B1010h)  
// ... More asm code below, but not relevant
[/code]

Release is a little more lean which is nice.  On line 3 we calculate the hash of "Hello1" at runtime, then on lines 4 and 6, we compare it against the constant values of our compile time hashes for "Hello2" and "Hello3".  That is all that is done at runtime, which is more in line with what we'd like to see the compiler do.  It's still a little bit lame that it didn't see that "Hello1" was a compile time constant that was being hashed, and did it at runtime, but at least it got most of the hashing to happen at compile time.

What if we change the "hash" variable to be constexpr? 

[code language="cpp"]
    // Release: this function just prints &quot;C\n&quot; and exits.  All code melted away at compile time!
    constexpr unsigned int hash = crc32(&quot;Hello1&quot;);  // 1) Debug: Run Time
    constexpr unsigned int hashTestHello2 = crc32(&quot;Hello2&quot;); // 2) Debug: Run Time
    switch (hash) { // 3) Debug: Compile Time Constant.
        case hashTestHello2: {   // 4) Debug: Compile Time Constant.
            printf(&quot;A\n&quot;);
            break;
        }
        case crc32(&quot;Hello3&quot;): {   // 5) Debug: Compile Time Constant.
            printf(&quot;B\n&quot;);
            break;
        }
        default: {
            printf(&quot;C\n&quot;);
            break;
        }
    }
[/code]

Let's check it out in debug first:

[code language="cpp" highlight="4,9,12,13,15"]
constexpr unsigned int hash = crc32(&quot;Hello1&quot;);  // 1) Debug: Run Time
00007FF71F7A1ABE  xor         edx,edx  
00007FF71F7A1AC0  lea         rcx,[string &quot;Hello1&quot; (07FF71F7AB124h)]  
00007FF71F7A1AC7  call        crc32 (07FF71F7A10C3h)  
00007FF71F7A1ACC  mov         dword ptr [hash],eax  
    constexpr unsigned int hashTestHello2 = crc32(&quot;Hello2&quot;); // 2) Debug: Run Time
00007FF71F7A1ACF  xor         edx,edx  
00007FF71F7A1AD1  lea         rcx,[string &quot;Hello2&quot; (07FF71F7AB12Ch)]  
00007FF71F7A1AD8  call        crc32 (07FF71F7A10C3h)  
00007FF71F7A1ADD  mov         dword ptr [hashTestHello2],eax  
    switch (hash) { // 3) Debug: Compile Time Constant.
00007FF71F7A1AE0  mov         dword ptr [rbp+0F4h],0CEA0826Eh  
00007FF71F7A1AEA  cmp         dword ptr [rbp+0F4h],20AEE342h  
00007FF71F7A1AF4  je          Snippet_CompileTimeHashSwitching2+72h (07FF71F7A1B12h)  
00007FF71F7A1AF6  cmp         dword ptr [rbp+0F4h],57A9D3D4h  
00007FF71F7A1B00  je          Snippet_CompileTimeHashSwitching2+64h (07FF71F7A1B04h)  
00007FF71F7A1B02  jmp         Snippet_CompileTimeHashSwitching2+80h (07FF71F7A1B20h)  
        case hashTestHello2: {   // 4) Debug: Compile Time Constant.
            printf(&quot;A\n&quot;);
00007FF71F7A1B04  lea         rcx,[string &quot;A\n&quot; (07FF71F7AB144h)]  
        case hashTestHello2: {   // 4) Debug: Compile Time Constant.
            printf(&quot;A\n&quot;);
00007FF71F7A1B0B  call        printf (07FF71F7A11FEh)  
            break;
00007FF71F7A1B10  jmp         Snippet_CompileTimeHashSwitching2+8Ch (07FF71F7A1B2Ch)  
        }
        case crc32(&quot;Hello3&quot;): {   // 5) Debug: Compile Time Constant.
            printf(&quot;B\n&quot;);
00007FF71F7A1B12  lea         rcx,[string &quot;B\n&quot; (07FF71F7AB160h)]  
00007FF71F7A1B19  call        printf (07FF71F7A11FEh)  
            break;
00007FF71F7A1B1E  jmp         Snippet_CompileTimeHashSwitching2+8Ch (07FF71F7A1B2Ch)  
        }
        default: {
            printf(&quot;C\n&quot;);
00007FF71F7A1B20  lea         rcx,[string &quot;C\n&quot; (07FF71F7AB164h)]  
00007FF71F7A1B27  call        printf (07FF71F7A11FEh)  
            break;
        }
    }
[/code]

The code does a runtime hash of "Hello1" and "Hello2" on lines 4 and 9.  Then, on line 12, it moves the compile time hash value of "Hello1" into memory.  On line 13 it compares that against the compile time hash value of "Hello3".  On line 15 it compares it against the compile time hash value of "Hello2".

Now let's check release:

[code language="cpp"]
00007FF7B7B91074  lea         rcx,[string &quot;C\n&quot; (07FF7B7B92210h)]  
00007FF7B7B9107B  call        printf (07FF7B7B91010h)  
[/code]

Awesome! It was able to do ALL calculation at compile time, and only do the printf at run time.  Neat!

As one final test, let's see what happens when we put a crc32 call straight into the switch statement.

[code language="cpp"]
    constexpr unsigned int hashTestHello2 = crc32(&quot;Hello2&quot;); // 1) Debug: Run Time. Release: Not calculated at all.
    switch (crc32(&quot;Hello1&quot;)) {  // 2) Always Run Time (!!!)
        case hashTestHello2: {  // 3) Compile Time Constant.
            printf(&quot;A\n&quot;);
            break;
        }
        case crc32(&quot;Hello3&quot;): {  // 4) Compile Time Constant.
            printf(&quot;B\n&quot;);
            break;
        }
        default: {
            printf(&quot;C\n&quot;);
            break;
        }
    }
[/code]

Here's the debug assembly:

[code language="cpp" highlight="4,9,11,13"]
    constexpr unsigned int hashTestHello2 = crc32(&quot;Hello2&quot;); // 1) Debug: Run Time. Release: Not calculated at all.
00007FF72ED51B7E  xor         edx,edx  
00007FF72ED51B80  lea         rcx,[string &quot;Hello2&quot; (07FF72ED5B12Ch)]  
00007FF72ED51B87  call        crc32 (07FF72ED510C3h)  
00007FF72ED51B8C  mov         dword ptr [hashTestHello2],eax  
    switch (crc32(&quot;Hello1&quot;)) {  // 2) Always Run Time (!!!)
00007FF72ED51B8F  xor         edx,edx  
00007FF72ED51B91  lea         rcx,[string &quot;Hello1&quot; (07FF72ED5B124h)]  
00007FF72ED51B98  call        crc32 (07FF72ED510C3h)  
00007FF72ED51B9D  mov         dword ptr [rbp+0D4h],eax  
00007FF72ED51BA3  cmp         dword ptr [rbp+0D4h],20AEE342h  
00007FF72ED51BAD  je          Snippet_CompileTimeHashSwitching3+6Bh (07FF72ED51BCBh)  
00007FF72ED51BAF  cmp         dword ptr [rbp+0D4h],57A9D3D4h  
00007FF72ED51BB9  je          Snippet_CompileTimeHashSwitching3+5Dh (07FF72ED51BBDh)  
00007FF72ED51BBB  jmp         Snippet_CompileTimeHashSwitching3+79h (07FF72ED51BD9h)  
        case hashTestHello2: {  // 3) Compile Time Constant.
            printf(&quot;A\n&quot;);
00007FF72ED51BBD  lea         rcx,[string &quot;A\n&quot; (07FF72ED5B144h)]  
00007FF72ED51BC4  call        printf (07FF72ED511FEh)  
            break;
00007FF72ED51BC9  jmp         Snippet_CompileTimeHashSwitching3+85h (07FF72ED51BE5h)  
        }
        case crc32(&quot;Hello3&quot;): {  // 4) Compile Time Constant.
            printf(&quot;B\n&quot;);
00007FF72ED51BCB  lea         rcx,[string &quot;B\n&quot; (07FF72ED5B160h)]  
00007FF72ED51BD2  call        printf (07FF72ED511FEh)  
            break;
00007FF72ED51BD7  jmp         Snippet_CompileTimeHashSwitching3+85h (07FF72ED51BE5h)  
        }
        default: {
            printf(&quot;C\n&quot;);
00007FF72ED51BD9  lea         rcx,[string &quot;C\n&quot; (07FF72ED5B164h)]  
00007FF72ED51BE0  call        printf (07FF72ED511FEh)  
            break;
        }
    }
[/code]

It was able to do the case value crc's at compile time, but the other two it did at runtime.  Not surprising for debug.  Let's check release:

[code language="cpp" highlight="3,4,6"]
00007FF6A46D10B4  lea         rdx,[string &quot;Hello1&quot;+1h (07FF6A46D2211h)]  
00007FF6A46D10BB  mov         ecx,7807C9A2h  
00007FF6A46D10C0  call        crc32_rec (07FF6A46D1070h)  
00007FF6A46D10C5  cmp         eax,20AEE342h  
00007FF6A46D10CA  je          main+49h (07FF6A46D10F9h)  
00007FF6A46D10CC  cmp         eax,57A9D3D4h  
00007FF6A46D10D1  je          main+36h (07FF6A46D10E6h)  
00007FF6A46D10D3  lea         rcx,[string &quot;C\n&quot; (07FF6A46D2220h)]  
00007FF6A46D10DA  call        printf (07FF6A46D1010h)  
// ... More asm code below, but not relevant
[/code]

It did the hash for "Hello1" at run time (why??), but it did the others at release.  A bit disappointing that it couldn't make the "Hello1" hash be compile time, but we saw this behavior before so nothing new there.  

<h2>Leveraging Jump Tables</h2>

In the above switch statements, the tests for hashes were very much "If hash is a, do this, else if hash is b, do that".  It was an if/else if/else if style chain.

Switch statements actually have the ability to become jump tables though, which let them get to the right case value with fewer comparisons.

Check out this code:

[code language="cpp"]
    // Debug: Jump Table
    // Release: Just does the constant case, everything else goes away
    unsigned int i = 3;
    switch (i) {
        case 0: printf(&quot;A\n&quot;); break;
        case 1: printf(&quot;B\n&quot;); break;
        case 2: printf(&quot;C\n&quot;); break;
        case 3: printf(&quot;D\n&quot;); break;
        case 4: printf(&quot;E\n&quot;); break;
        case 5: printf(&quot;F\n&quot;); break;
        case 6: printf(&quot;G\n&quot;); break;
        case 7: printf(&quot;H\n&quot;); break;
        default: printf(&quot;None\n&quot;); break;
    }
[/code]

Here's the debug assembly:

[code language="cpp" highlight="8,9,14"]
    // Debug: Jump Table
    // Release: Just does the constant case, everything else goes away
    unsigned int i = 3;
00007FF69CF9238E  mov         dword ptr [i],3  
    switch (i) {
00007FF69CF92395  mov         eax,dword ptr [i]  
00007FF69CF92398  mov         dword ptr [rbp+0D4h],eax  
00007FF69CF9239E  cmp         dword ptr [rbp+0D4h],7  
00007FF69CF923A5  ja          $LN11+0Eh (07FF69CF92434h)  
00007FF69CF923AB  mov         eax,dword ptr [rbp+0D4h]  
00007FF69CF923B1  lea         rcx,[__ImageBase (07FF69CF80000h)]  
00007FF69CF923B8  mov         eax,dword ptr [rcx+rax*4+1244Ch]  
00007FF69CF923BF  add         rax,rcx  
00007FF69CF923C2  jmp         rax  
        case 0: printf(&quot;A\n&quot;); break;
00007FF69CF923C4  lea         rcx,[string &quot;A\n&quot; (07FF69CF9B144h)]  
00007FF69CF923CB  call        printf (07FF69CF911FEh)  
00007FF69CF923D0  jmp         $LN11+1Ah (07FF69CF92440h)  
        case 1: printf(&quot;B\n&quot;); break;
00007FF69CF923D2  lea         rcx,[string &quot;B\n&quot; (07FF69CF9B160h)]  
00007FF69CF923D9  call        printf (07FF69CF911FEh)  
00007FF69CF923DE  jmp         $LN11+1Ah (07FF69CF92440h)  
        case 2: printf(&quot;C\n&quot;); break;
00007FF69CF923E0  lea         rcx,[string &quot;C\n&quot; (07FF69CF9B164h)]  
00007FF69CF923E7  call        printf (07FF69CF911FEh)  
00007FF69CF923EC  jmp         $LN11+1Ah (07FF69CF92440h)  
        case 3: printf(&quot;D\n&quot;); break;
00007FF69CF923EE  lea         rcx,[string &quot;D\n&quot; (07FF69CF9B168h)]  
00007FF69CF923F5  call        printf (07FF69CF911FEh)  
00007FF69CF923FA  jmp         $LN11+1Ah (07FF69CF92440h)  
        case 4: printf(&quot;E\n&quot;); break;
00007FF69CF923FC  lea         rcx,[string &quot;E\n&quot; (07FF69CF9B16Ch)]  
00007FF69CF92403  call        printf (07FF69CF911FEh)  
00007FF69CF92408  jmp         $LN11+1Ah (07FF69CF92440h)  
        case 5: printf(&quot;F\n&quot;); break;
00007FF69CF9240A  lea         rcx,[string &quot;F\n&quot; (07FF69CF9B170h)]  
00007FF69CF92411  call        printf (07FF69CF911FEh)  
00007FF69CF92416  jmp         $LN11+1Ah (07FF69CF92440h)  
        case 6: printf(&quot;G\n&quot;); break;
00007FF69CF92418  lea         rcx,[string &quot;G\n&quot; (07FF69CF9B174h)]  
00007FF69CF9241F  call        printf (07FF69CF911FEh)  
00007FF69CF92424  jmp         $LN11+1Ah (07FF69CF92440h)  
        case 7: printf(&quot;H\n&quot;); break;
00007FF69CF92426  lea         rcx,[string &quot;H\n&quot; (07FF69CF9B178h)]  
00007FF69CF9242D  call        printf (07FF69CF911FEh)  
00007FF69CF92432  jmp         $LN11+1Ah (07FF69CF92440h)  
        default: printf(&quot;None\n&quot;); break;
00007FF69CF92434  lea         rcx,[string &quot;None\n&quot; (07FF69CF9AFDCh)]  
00007FF69CF9243B  call        printf (07FF69CF911FEh)  
    }
[/code]

On line 8 and 9 it checks to see if the value we are switching on is greater than 7, and if so, jumps to 07FF69CF92434h, which is the "default" case where it prints "None".

If the number is not greater than 7, it calculates an address based on the value we are switching on, and then jumps to it, on line 14.

Instead of testing for every possible value in an if/else if/else if/else if type setup, it can go IMMEDIATELY to the code associated with the particular case statement.

This is a jump table and can be a big speed improvement if you have a lot of cases, or if the code is called a lot.

I'll spare you the release assembly.  The compiler can tell that this is a compile time known result and only has the printf for the "D" without any of the other logic.

Let's go back to our crc32 code and try and leverage a jump table:

[code language="cpp"]
    // Debug / Release: Does hash and jump table.
    // Note: It AND's against 7 and then tests to see if i is greater than 7 (!!!)
    unsigned int i = crc32(&quot;Hello&quot;) &amp; 7;
    switch (i) {
        case 0: printf(&quot;A\n&quot;); break;
        case 1: printf(&quot;B\n&quot;); break;
        case 2: printf(&quot;C\n&quot;); break;
        case 3: printf(&quot;D\n&quot;); break;
        case 4: printf(&quot;E\n&quot;); break;
        case 5: printf(&quot;F\n&quot;); break;
        case 6: printf(&quot;G\n&quot;); break;
        case 7: printf(&quot;H\n&quot;); break;
        default: printf(&quot;None\n&quot;); break;
    }
[/code]

I'll show you just the debug assembly for brevity.  It does the hash and jump table at runtime for both debug and release.  Interestingly, even though we do &7 on the hash value, the switch statement STILL makes sure that the value being switched on is not greater than 7.  It can never be greater than 7, and that can be known at compile time, but it still checks.  This is true even of the release assembly!

[code language="cpp" highlight="6,7,12,13,18"]
    // Debug / Release: Does hash and jump table.
    // Note: It AND's against 7 and then tests to see if i is greater than 7 (!!!)
    unsigned int i = crc32(&quot;Hello&quot;) &amp; 7;
00007FF7439C24CE  xor         edx,edx  
00007FF7439C24D0  lea         rcx,[string &quot;Hello&quot; (07FF7439CB180h)]  
00007FF7439C24D7  call        crc32 (07FF7439C10C3h)  
00007FF7439C24DC  and         eax,7  
00007FF7439C24DF  mov         dword ptr [i],eax  
    switch (i) {
00007FF7439C24E2  mov         eax,dword ptr [i]  
00007FF7439C24E5  mov         dword ptr [rbp+0D4h],eax  
00007FF7439C24EB  cmp         dword ptr [rbp+0D4h],7  
00007FF7439C24F2  ja          $LN11+0Eh (07FF7439C2581h)  
00007FF7439C24F8  mov         eax,dword ptr [rbp+0D4h]  
00007FF7439C24FE  lea         rcx,[__ImageBase (07FF7439B0000h)]  
00007FF7439C2505  mov         eax,dword ptr [rcx+rax*4+12598h]  
00007FF7439C250C  add         rax,rcx  
00007FF7439C250F  jmp         rax  
        case 0: printf(&quot;A\n&quot;); break;
00007FF7439C2511  lea         rcx,[string &quot;A\n&quot; (07FF7439CB144h)]  
        case 0: printf(&quot;A\n&quot;); break;
00007FF7439C2518  call        printf (07FF7439C11FEh)  
00007FF7439C251D  jmp         $LN11+1Ah (07FF7439C258Dh)  
        case 1: printf(&quot;B\n&quot;); break;
00007FF7439C251F  lea         rcx,[string &quot;B\n&quot; (07FF7439CB160h)]  
00007FF7439C2526  call        printf (07FF7439C11FEh)  
00007FF7439C252B  jmp         $LN11+1Ah (07FF7439C258Dh)  
        case 2: printf(&quot;C\n&quot;); break;
00007FF7439C252D  lea         rcx,[string &quot;C\n&quot; (07FF7439CB164h)]  
00007FF7439C2534  call        printf (07FF7439C11FEh)  
00007FF7439C2539  jmp         $LN11+1Ah (07FF7439C258Dh)  
        case 3: printf(&quot;D\n&quot;); break;
00007FF7439C253B  lea         rcx,[string &quot;D\n&quot; (07FF7439CB168h)]  
00007FF7439C2542  call        printf (07FF7439C11FEh)  
00007FF7439C2547  jmp         $LN11+1Ah (07FF7439C258Dh)  
        case 4: printf(&quot;E\n&quot;); break;
00007FF7439C2549  lea         rcx,[string &quot;E\n&quot; (07FF7439CB16Ch)]  
00007FF7439C2550  call        printf (07FF7439C11FEh)  
00007FF7439C2555  jmp         $LN11+1Ah (07FF7439C258Dh)  
        case 5: printf(&quot;F\n&quot;); break;
00007FF7439C2557  lea         rcx,[string &quot;F\n&quot; (07FF7439CB170h)]  
00007FF7439C255E  call        printf (07FF7439C11FEh)  
00007FF7439C2563  jmp         $LN11+1Ah (07FF7439C258Dh)  
        case 6: printf(&quot;G\n&quot;); break;
00007FF7439C2565  lea         rcx,[string &quot;G\n&quot; (07FF7439CB174h)]  
00007FF7439C256C  call        printf (07FF7439C11FEh)  
00007FF7439C2571  jmp         $LN11+1Ah (07FF7439C258Dh)  
        case 7: printf(&quot;H\n&quot;); break;
00007FF7439C2573  lea         rcx,[string &quot;H\n&quot; (07FF7439CB178h)]  
00007FF7439C257A  call        printf (07FF7439C11FEh)  
00007FF7439C257F  jmp         $LN11+1Ah (07FF7439C258Dh)  
        default: printf(&quot;None\n&quot;); break;
00007FF7439C2581  lea         rcx,[string &quot;None\n&quot; (07FF7439CAFDCh)]  
00007FF7439C2588  call        printf (07FF7439C11FEh)  
    }
[/code]

If we make "i" be a constexpr variable, it doesn't affect debug, but in release, it is able to melt away all the code and just prints the correct case.

[code language="cpp"]
00007FF6093F1074  lea         rcx,[string &quot;A\n&quot; (07FF6093F2210h)]  
00007FF6093F107B  call        printf (07FF6093F1010h)  
[/code]

<h2>Perfect Hashing</h2>

Perfect hashing is when you have a known set of inputs, and a hash function such that there is no collision between any of the inputs.

Perfect hashing can be great for being able to turn complex objects into IDs for faster lookup times, but the IDs are not usually going to be contiguous.  One ID might be 3, and another might be 45361.  Perfect hashing can still be useful though.

The code below shows show some compile time perfect hashing could be achieved.

[code language="cpp"]
    // Debug: Does have some sort of jump table setup, despite the cases not being continuous.
    // Release: prints &quot;A\n&quot;.  All other code melts away at compile time.
    static const unsigned int c_numBuckets = 16;
    static const unsigned int c_salt = 1337;

    constexpr unsigned int i = crc32(&quot;Identifier_A&quot;, c_salt) % c_numBuckets;
    switch (i) {
        case (crc32(&quot;Identifier_A&quot;, c_salt) % c_numBuckets): printf(&quot;A\n&quot;); break;
        case (crc32(&quot;Identifier_B&quot;, c_salt) % c_numBuckets): printf(&quot;B\n&quot;); break;
        case (crc32(&quot;Identifier_C&quot;, c_salt) % c_numBuckets): printf(&quot;C\n&quot;); break;
        case (crc32(&quot;Identifier_D&quot;, c_salt) % c_numBuckets): printf(&quot;D\n&quot;); break;
        case (crc32(&quot;Identifier_E&quot;, c_salt) % c_numBuckets): printf(&quot;E\n&quot;); break;
        case (crc32(&quot;Identifier_F&quot;, c_salt) % c_numBuckets): printf(&quot;F\n&quot;); break;
        case (crc32(&quot;Identifier_G&quot;, c_salt) % c_numBuckets): printf(&quot;G\n&quot;); break;
        case (crc32(&quot;Identifier_H&quot;, c_salt) % c_numBuckets): printf(&quot;H\n&quot;); break;
        default: printf(&quot;None\n&quot;); break;
    }
[/code]

One nice thing about doing perfect hashing at compile time like this is that if you ever have a hash collision, you'll have a duplicate case in your switch statement, and will get a compile error.  This means that you are guaranteed that your perfect hash is valid at runtime.  With non compile time perfect hashes, you could easily get into a situation where you added some more valid inputs and may now have a hash collision, which would make hard to track subtle bugs as two input values would be sharing the same index for whatever read and/or write data they wanted to interact with.

You might notice that i am doing %16 on the hash instead of %8, even though there are only 8 items I want to test against.

The reason for that is hash collisions.

When you hash a string you are effectively getting a pseudo random number back that will always be the same for when that string is given as input.

For the above to work correctly and let me modulus against 8, i would have to roll an 8 sided dice 8 times and get no repeats.

There are 8! (8 factorial) different ways to roll that 8 sided dice 8 times and not get any collisions.

There are 8^8 different ways to roll the 8 sided dice 8 times total.

To get the chance that we roll an 8 sided dice 8 times and get no repeats (no hash collisions), the probability is 8! / 8^8 or 0.24%.

The salt in the crc32 function allows us to effectively re-roll our dice.  Each salt value is a different roll of the dice.

How that fits in is that 0.24% of all salt values should let us be able to do %8 on our hashes and not have a hash collision.

Those odds are pretty bad, but they aren't SUPER bad.  We could just brute force search to find a good salt value to use and then hard code the salt in, like i did in the example above.

Unfortunately, the probability I calculated above only works if the hash function gives uniformly distributed output and is "truly random".

In practice no hash function or pseudo random number generator is, and in fact this crc32 function has NO salt values which make for no collisions!  I brute force tested all 2^32 (4.2 billion) possible salt values and came up with no salt that worked!

To get around that problem, instead of trying to get a perfect fit of 8 hashes with values 0-7 without collisions, i opted to go for 8 hashes with values 0-15 with no collisions.  That changes my odds for the better, and there are in fact many salts that satisfy that.

It's the equivalent of rolling a 16 sided dice 8 times without repeats.

Thinking about things a bit differently than before, the first roll has a 100% chance of not being a duplicate.  The next roll has a 15/16 chance of not being duplicate. The next has a 14/16 chance and so on until the 8th roll which has a 9/16 chance.

Multiplying those all together, we end up with a 12.08% chance of rolling a 16 sided dice 8 times and not getting a duplicate.  That means 12% of the salts (about 1 in 9) won't produce collisions when we use 16 buckets, which makes it much easier for us to find a salt to use.

Looking at the disassembly in debug, we can see the jump table is miraculously in tact!  This is great because now we can get compile time assured perfect hashing of objects, and can use a jump table to convert a runtime object into a perfect hash result.

Note that in release, the code melts away and just does the "correct printf".

[code language="cpp" highlight="9,17,18,23"]
    // Debug: Does have some sort of jump table setup, despite the cases not being continuous.
    // Release: prints &quot;A\n&quot;.  All other code melts away at compile time.
    static const unsigned int c_numBuckets = 16;
    static const unsigned int c_salt = 1337;

    constexpr unsigned int i = crc32(&quot;Identifier_A&quot;, c_salt) % c_numBuckets;
00007FF7CE651E5E  mov         edx,539h  
00007FF7CE651E63  lea         rcx,[string &quot;Identifier_A&quot; (07FF7CE65B190h)]  
00007FF7CE651E6A  call        crc32 (07FF7CE6510C3h)  
00007FF7CE651E6F  xor         edx,edx  
00007FF7CE651E71  mov         ecx,10h  
00007FF7CE651E76  div         eax,ecx  
00007FF7CE651E78  mov         eax,edx  
00007FF7CE651E7A  mov         dword ptr [i],eax  
    switch (i) {
00007FF7CE651E7D  mov         dword ptr [rbp+0D4h],4  
00007FF7CE651E87  cmp         dword ptr [rbp+0D4h],0Eh  
00007FF7CE651E8E  ja          $LN11+0Eh (07FF7CE651F1Dh)  
00007FF7CE651E94  mov         eax,dword ptr [rbp+0D4h]  
00007FF7CE651E9A  lea         rcx,[__ImageBase (07FF7CE640000h)]  
00007FF7CE651EA1  mov         eax,dword ptr [rcx+rax*4+11F34h]  
00007FF7CE651EA8  add         rax,rcx  
00007FF7CE651EAB  jmp         rax  
        case (crc32(&quot;Identifier_A&quot;, c_salt) % c_numBuckets): printf(&quot;A\n&quot;); break;
00007FF7CE651EAD  lea         rcx,[string &quot;A\n&quot; (07FF7CE65B144h)]  
00007FF7CE651EB4  call        printf (07FF7CE6511FEh)  
00007FF7CE651EB9  jmp         $LN11+1Ah (07FF7CE651F29h)  
        case (crc32(&quot;Identifier_B&quot;, c_salt) % c_numBuckets): printf(&quot;B\n&quot;); break;
00007FF7CE651EBB  lea         rcx,[string &quot;B\n&quot; (07FF7CE65B160h)]  
00007FF7CE651EC2  call        printf (07FF7CE6511FEh)  
00007FF7CE651EC7  jmp         $LN11+1Ah (07FF7CE651F29h)  
        case (crc32(&quot;Identifier_C&quot;, c_salt) % c_numBuckets): printf(&quot;C\n&quot;); break;
00007FF7CE651EC9  lea         rcx,[string &quot;C\n&quot; (07FF7CE65B164h)]  
00007FF7CE651ED0  call        printf (07FF7CE6511FEh)  
00007FF7CE651ED5  jmp         $LN11+1Ah (07FF7CE651F29h)  
        case (crc32(&quot;Identifier_D&quot;, c_salt) % c_numBuckets): printf(&quot;D\n&quot;); break;
00007FF7CE651ED7  lea         rcx,[string &quot;D\n&quot; (07FF7CE65B168h)]  
00007FF7CE651EDE  call        printf (07FF7CE6511FEh)  
00007FF7CE651EE3  jmp         $LN11+1Ah (07FF7CE651F29h)  
        case (crc32(&quot;Identifier_E&quot;, c_salt) % c_numBuckets): printf(&quot;E\n&quot;); break;
00007FF7CE651EE5  lea         rcx,[string &quot;E\n&quot; (07FF7CE65B16Ch)]  
00007FF7CE651EEC  call        printf (07FF7CE6511FEh)  
00007FF7CE651EF1  jmp         $LN11+1Ah (07FF7CE651F29h)  
        case (crc32(&quot;Identifier_F&quot;, c_salt) % c_numBuckets): printf(&quot;F\n&quot;); break;
00007FF7CE651EF3  lea         rcx,[string &quot;F\n&quot; (07FF7CE65B170h)]  
00007FF7CE651EFA  call        printf (07FF7CE6511FEh)  
00007FF7CE651EFF  jmp         $LN11+1Ah (07FF7CE651F29h)  
        case (crc32(&quot;Identifier_G&quot;, c_salt) % c_numBuckets): printf(&quot;G\n&quot;); break;
00007FF7CE651F01  lea         rcx,[string &quot;G\n&quot; (07FF7CE65B174h)]  
00007FF7CE651F08  call        printf (07FF7CE6511FEh)  
00007FF7CE651F0D  jmp         $LN11+1Ah (07FF7CE651F29h)  
        case (crc32(&quot;Identifier_H&quot;, c_salt) % c_numBuckets): printf(&quot;H\n&quot;); break;
00007FF7CE651F0F  lea         rcx,[string &quot;H\n&quot; (07FF7CE65B178h)]  
00007FF7CE651F16  call        printf (07FF7CE6511FEh)  
00007FF7CE651F1B  jmp         $LN11+1Ah (07FF7CE651F29h)  
        default: printf(&quot;None\n&quot;); break;
00007FF7CE651F1D  lea         rcx,[string &quot;None\n&quot; (07FF7CE65AFDCh)]  
00007FF7CE651F24  call        printf (07FF7CE6511FEh)  
    }
[/code]

<h2>Minimally Perfect Hashing</h2>

Minimally perfect hashing is like perfect hashing, except the results are contiguous values.

If you have 8 possible inputs to your minimally perfect hash function, you are going to get as output 0-7.  The order of what inputs map to which outputs isn't strictly defined unless you want to go through a lot of extra effort to make it be that way though.

This is even more useful than perfect hashing, as you can hash a (known good) input and use the result as an index into an array, or similar!

For more info on MPH, check out my post on it: <a href="http://blog.demofox.org/2015/12/14/o1-data-lookups-with-minimal-perfect-hashing/">O(1) Data Lookups With Minimal Perfect Hashing</a>

The code below is a way of doing compile time assisted minimally perfect hashing:

[code language="cpp"]
    // Debug / Release:
    //   Runs crc32 at runtime only for &quot;i&quot;.  The cases are compile time constants as per usual.
    //   Does a jumptable type setup for the switch and does fallthrough to do multiple increments to get the right ID.
    //
    // Release with constexpr on i:
    //   does the printf with a value of 2.  The rest of the code melts away.
    static const unsigned int c_numBuckets = 16;
    static const unsigned int c_salt = 1337;
    static const unsigned int c_invalidID = -1;

    unsigned int i = crc32(&quot;Identifier_F&quot;, c_salt) % c_numBuckets;
    unsigned int id = c_invalidID;
    switch (i) {
        case (crc32(&quot;Identifier_A&quot;, c_salt) % c_numBuckets): ++id;
        case (crc32(&quot;Identifier_B&quot;, c_salt) % c_numBuckets): ++id;
        case (crc32(&quot;Identifier_C&quot;, c_salt) % c_numBuckets): ++id;
        case (crc32(&quot;Identifier_D&quot;, c_salt) % c_numBuckets): ++id;
        case (crc32(&quot;Identifier_E&quot;, c_salt) % c_numBuckets): ++id;
        case (crc32(&quot;Identifier_F&quot;, c_salt) % c_numBuckets): ++id;
        case (crc32(&quot;Identifier_G&quot;, c_salt) % c_numBuckets): ++id;
        case (crc32(&quot;Identifier_H&quot;, c_salt) % c_numBuckets): ++id; 
        // the two lines below are implicit behavior of how this code works
        // break;
        // default: id = c_invalidID; break;
    }

    printf(&quot;id = %i\n&quot;, id);
[/code]

Here's the debug assembly for the above.  The release does similar, so i'm not showing it.

[code language="cpp" highlight="14,25,26,31"]
    // Debug / Release:
    //   Runs crc32 at runtime only for &quot;i&quot;.  The cases are compile time constants as per usual.
    //   Does a jumptable type setup for the switch and does fallthrough to do multiple increments to get the right ID.
    //
    // Release with constexpr on i:
    //   does the printf with a value of 2.  The rest of the code melts away.
    static const unsigned int c_numBuckets = 16;
    static const unsigned int c_salt = 1337;
    static const unsigned int c_invalidID = -1;

    unsigned int i = crc32(&quot;Identifier_F&quot;, c_salt) % c_numBuckets;
00007FF79E481D0E  mov         edx,539h  
00007FF79E481D13  lea         rcx,[string &quot;Identifier_F&quot; (07FF79E48B1E0h)]  
00007FF79E481D1A  call        crc32 (07FF79E4810C3h)  
00007FF79E481D1F  xor         edx,edx  
00007FF79E481D21  mov         ecx,10h  
00007FF79E481D26  div         eax,ecx  
00007FF79E481D28  mov         eax,edx  
00007FF79E481D2A  mov         dword ptr [i],eax  
    unsigned int id = c_invalidID;
00007FF79E481D2D  mov         dword ptr [id],0FFFFFFFFh  
    switch (i) {
00007FF79E481D34  mov         eax,dword ptr [i]  
00007FF79E481D37  mov         dword ptr [rbp+0F4h],eax  
00007FF79E481D3D  cmp         dword ptr [rbp+0F4h],0Eh  
00007FF79E481D44  ja          $LN11+8h (07FF79E481D9Fh)  
00007FF79E481D46  mov         eax,dword ptr [rbp+0F4h]  
00007FF79E481D4C  lea         rcx,[__ImageBase (07FF79E470000h)]  
00007FF79E481D53  mov         eax,dword ptr [rcx+rax*4+11DB8h]  
00007FF79E481D5A  add         rax,rcx  
00007FF79E481D5D  jmp         rax  
        case (crc32(&quot;Identifier_A&quot;, c_salt) % c_numBuckets): ++id;
00007FF79E481D5F  mov         eax,dword ptr [id]  
00007FF79E481D62  inc         eax  
00007FF79E481D64  mov         dword ptr [id],eax  
        case (crc32(&quot;Identifier_B&quot;, c_salt) % c_numBuckets): ++id;
00007FF79E481D67  mov         eax,dword ptr [id]  
00007FF79E481D6A  inc         eax  
00007FF79E481D6C  mov         dword ptr [id],eax  
        case (crc32(&quot;Identifier_C&quot;, c_salt) % c_numBuckets): ++id;
00007FF79E481D6F  mov         eax,dword ptr [id]  
00007FF79E481D72  inc         eax  
00007FF79E481D74  mov         dword ptr [id],eax  
        case (crc32(&quot;Identifier_D&quot;, c_salt) % c_numBuckets): ++id;
00007FF79E481D77  mov         eax,dword ptr [id]  
00007FF79E481D7A  inc         eax  
00007FF79E481D7C  mov         dword ptr [id],eax  
        case (crc32(&quot;Identifier_E&quot;, c_salt) % c_numBuckets): ++id;
00007FF79E481D7F  mov         eax,dword ptr [id]  
00007FF79E481D82  inc         eax  
00007FF79E481D84  mov         dword ptr [id],eax  
        case (crc32(&quot;Identifier_F&quot;, c_salt) % c_numBuckets): ++id;
00007FF79E481D87  mov         eax,dword ptr [id]  
00007FF79E481D8A  inc         eax  
00007FF79E481D8C  mov         dword ptr [id],eax  
        case (crc32(&quot;Identifier_G&quot;, c_salt) % c_numBuckets): ++id;
00007FF79E481D8F  mov         eax,dword ptr [id]  
00007FF79E481D92  inc         eax  
00007FF79E481D94  mov         dword ptr [id],eax  
        case (crc32(&quot;Identifier_H&quot;, c_salt) % c_numBuckets): ++id; 
00007FF79E481D97  mov         eax,dword ptr [id]  
00007FF79E481D9A  inc         eax  
00007FF79E481D9C  mov         dword ptr [id],eax  
        // the two lines below are implicit behavior of how this code works
        // break;
        // default: id = c_invalidID; break;
    }

    printf(&quot;id = %i\n&quot;, id);
00007FF79E481D9F  mov         edx,dword ptr [id]  
00007FF79E481DA2  lea         rcx,[string &quot;id = %i\n&quot; (07FF79E48B238h)]  
        // the two lines below are implicit behavior of how this code works
        // break;
        // default: id = c_invalidID; break;
    }

    printf(&quot;id = %i\n&quot;, id);
00007FF79E481DA9  call        printf (07FF79E4811FEh)  
[/code]

As you can see, the jump table is still in tact, which is good, but it does a lot of repeated increments to get the right ID values.  I wish the compiler were smart enough to "flatten" this and just give each case it's proper ID value.

As is, this could be a performance issue if you had a very large number of inputs.

You could always just hard code a number there instead of relying on the fallthrough and increment, but then there is a lot of copy pasting.  Maybe you could do something clever with macros or templates to help that though.

<h2>Compile Time Assisted String To Enum</h2>

Another interesting thing to think about is that we could actually use compile time hashing to convert a string to an enum.

In this case, let's say that we don't know if our input is valid or not.  Since we don't know that, we have to switch on the hash of our input string, but then do a string compare against whatever string has that hash, to make sure it matches.  If it does match, it should take that enum value, else it should be invalid.

Since that would be a lot of error prone copy/pasting, I simplified things a bit by using a macro list:

[code language="cpp"]
    // Debug / Release:
    //   Runs crc32 at runtime only for &quot;i&quot;.  The cases are compile time constants as per usual.
    //   Does a jumptable type setup for the switch and does a string comparison against the correct string.
    //   If strings are equal, sets the enum value.

    static const unsigned int c_numBuckets = 16;
    static const unsigned int c_salt = 1337;

    const char* testString = &quot;Identifier_F&quot;;
    unsigned int i = crc32(testString, c_salt) % c_numBuckets;

    // This macro list is used for:
    //  * making the enum
    //  * making the cases in the switch statement
    // D.R.Y. - Don't Repeat Yourself.
    // Fewer moving parts = fewer errors, but admittedly is harder to understand vs redundant code.
    #define ENUM_VALUE_LIST \
        VALUE(Identifier_A) \
        VALUE(Identifier_B) \
        VALUE(Identifier_C) \
        VALUE(Identifier_D) \
        VALUE(Identifier_E) \
        VALUE(Identifier_F) \
        VALUE(Identifier_G) \
        VALUE(Identifier_H) 

    // Make the enum values.
    // Note these enum values are also usable as a contiguous ID if you needed one for an array index or similar.
    // You could define an array with size EIdentifier::count for instance and use these IDs to index into it.
    enum class EIdentifier : unsigned char {
        #define VALUE(x) x,
        ENUM_VALUE_LIST
        #undef VALUE
        count,
        invalid = (unsigned char)-1
    };

    // do a compile time hash assisted string comparison to convert string to enum
    EIdentifier identifier = EIdentifier::invalid;
    switch (i) {
        #define VALUE(x) case (crc32(#x, c_salt) % c_numBuckets) : if(!strcmp(testString, #x)) identifier = EIdentifier::x; else identifier = EIdentifier::invalid; break;
        ENUM_VALUE_LIST
        #undef VALUE
        default: identifier = EIdentifier::invalid;
    }
    
    // undefine the enum value list
    #undef ENUM_VALUE_LIST

    printf(&quot;string translated to enum value %i&quot;, identifier);
[/code]

Here's the debug assembly showing it working like it's supposed to:

[code language="cpp" highlight="15,54,56,61"]
    // Debug / Release:
    //   Runs crc32 at runtime only for &quot;i&quot;.  The cases are compile time constants as per usual.
    //   Does a jumptable type setup for the switch and does a string comparison against the correct string.
    //   If strings are equal, sets the enum value.

    static const unsigned int c_numBuckets = 16;
    static const unsigned int c_salt = 1337;

    const char* testString = &quot;Identifier_F&quot;;
00007FF6B188179E  lea         rax,[string &quot;Identifier_F&quot; (07FF6B188B1E0h)]  
00007FF6B18817A5  mov         qword ptr [testString],rax  
    unsigned int i = crc32(testString, c_salt) % c_numBuckets;
00007FF6B18817A9  mov         edx,539h  
00007FF6B18817AE  mov         rcx,qword ptr [testString]  
00007FF6B18817B2  call        crc32 (07FF6B18810C3h)  
00007FF6B18817B7  xor         edx,edx  
00007FF6B18817B9  mov         ecx,10h  
00007FF6B18817BE  div         eax,ecx  
00007FF6B18817C0  mov         eax,edx  
00007FF6B18817C2  mov         dword ptr [i],eax  

    // This macro list is used for:
    //  * making the enum
    //  * making the cases in the switch statement
    // D.R.Y. - Don't Repeat Yourself.
    // Fewer moving parts = fewer errors, but admittedly is harder to understand vs redundant code.
    #define ENUM_VALUE_LIST \
        VALUE(Identifier_A) \
        VALUE(Identifier_B) \
        VALUE(Identifier_C) \
        VALUE(Identifier_D) \
        VALUE(Identifier_E) \
        VALUE(Identifier_F) \
        VALUE(Identifier_G) \
        VALUE(Identifier_H) 

    // Make the enum values.
    // Note these enum values are also usable as a contiguous ID if you needed one for an array index or similar.
    // You could define an array with size EIdentifier::count for instance and use these IDs to index into it.
    enum class EIdentifier : unsigned char {
        #define VALUE(x) x,
        ENUM_VALUE_LIST
        #undef VALUE
        count,
        invalid = (unsigned char)-1
    };

    // do a compile time hash assisted string comparison to convert string to enum
    EIdentifier identifier = EIdentifier::invalid;
00007FF6B18817C5  mov         byte ptr [identifier],0FFh  
    switch (i) {
00007FF6B18817C9  mov         eax,dword ptr [i]  
00007FF6B18817CC  mov         dword ptr [rbp+114h],eax  
00007FF6B18817D2  cmp         dword ptr [rbp+114h],0Eh  
    switch (i) {
00007FF6B18817D9  ja          $LN25+20h (07FF6B1881904h)  
00007FF6B18817DF  mov         eax,dword ptr [rbp+114h]  
00007FF6B18817E5  lea         rcx,[__ImageBase (07FF6B1870000h)]  
00007FF6B18817EC  mov         eax,dword ptr [rcx+rax*4+11924h]  
00007FF6B18817F3  add         rax,rcx  
00007FF6B18817F6  jmp         rax  
        #define VALUE(x) case (crc32(#x, c_salt) % c_numBuckets) : if(!strcmp(testString, #x)) identifier = EIdentifier::x; else identifier = EIdentifier::invalid; break;
        ENUM_VALUE_LIST
00007FF6B18817F8  lea         rdx,[string &quot;Identifier_A&quot; (07FF6B188B190h)]  
00007FF6B18817FF  mov         rcx,qword ptr [testString]  
00007FF6B1881803  call        strcmp (07FF6B18811CCh)  
00007FF6B1881808  test        eax,eax  
00007FF6B188180A  jne         Snippet_CompileTimeHashAssistedStringToEnum+92h (07FF6B1881812h)  
00007FF6B188180C  mov         byte ptr [identifier],0  
00007FF6B1881810  jmp         Snippet_CompileTimeHashAssistedStringToEnum+96h (07FF6B1881816h)  
00007FF6B1881812  mov         byte ptr [identifier],0FFh  
00007FF6B1881816  jmp         $LN25+24h (07FF6B1881908h)  
$LN7:
00007FF6B188181B  lea         rdx,[string &quot;Identifier_B&quot; (07FF6B188B1A0h)]  
00007FF6B1881822  mov         rcx,qword ptr [testString]  
00007FF6B1881826  call        strcmp (07FF6B18811CCh)  
00007FF6B188182B  test        eax,eax  
00007FF6B188182D  jne         Snippet_CompileTimeHashAssistedStringToEnum+0B5h (07FF6B1881835h)  
00007FF6B188182F  mov         byte ptr [identifier],1  
00007FF6B1881833  jmp         Snippet_CompileTimeHashAssistedStringToEnum+0B9h (07FF6B1881839h)  
00007FF6B1881835  mov         byte ptr [identifier],0FFh  
00007FF6B1881839  jmp         $LN25+24h (07FF6B1881908h)  
$LN10:
00007FF6B188183E  lea         rdx,[string &quot;Identifier_C&quot; (07FF6B188B1B0h)]  
00007FF6B1881845  mov         rcx,qword ptr [testString]  
00007FF6B1881849  call        strcmp (07FF6B18811CCh)  
00007FF6B188184E  test        eax,eax  
00007FF6B1881850  jne         Snippet_CompileTimeHashAssistedStringToEnum+0D8h (07FF6B1881858h)  
00007FF6B1881852  mov         byte ptr [identifier],2  
00007FF6B1881856  jmp         Snippet_CompileTimeHashAssistedStringToEnum+0DCh (07FF6B188185Ch)  
00007FF6B1881858  mov         byte ptr [identifier],0FFh  
00007FF6B188185C  jmp         $LN25+24h (07FF6B1881908h)  
$LN13:
00007FF6B1881861  lea         rdx,[string &quot;Identifier_D&quot; (07FF6B188B1C0h)]  
00007FF6B1881868  mov         rcx,qword ptr [testString]  
00007FF6B188186C  call        strcmp (07FF6B18811CCh)  
00007FF6B1881871  test        eax,eax  
00007FF6B1881873  jne         Snippet_CompileTimeHashAssistedStringToEnum+0FBh (07FF6B188187Bh)  
00007FF6B1881875  mov         byte ptr [identifier],3  
00007FF6B1881879  jmp         Snippet_CompileTimeHashAssistedStringToEnum+0FFh (07FF6B188187Fh)  
00007FF6B188187B  mov         byte ptr [identifier],0FFh  
00007FF6B188187F  jmp         $LN25+24h (07FF6B1881908h)  
$LN16:
00007FF6B1881884  lea         rdx,[string &quot;Identifier_E&quot; (07FF6B188B1D0h)]  
00007FF6B188188B  mov         rcx,qword ptr [testString]  
00007FF6B188188F  call        strcmp (07FF6B18811CCh)  
00007FF6B1881894  test        eax,eax  
00007FF6B1881896  jne         Snippet_CompileTimeHashAssistedStringToEnum+11Eh (07FF6B188189Eh)  
00007FF6B1881898  mov         byte ptr [identifier],4  
00007FF6B188189C  jmp         Snippet_CompileTimeHashAssistedStringToEnum+122h (07FF6B18818A2h)  
00007FF6B188189E  mov         byte ptr [identifier],0FFh  
00007FF6B18818A2  jmp         $LN25+24h (07FF6B1881908h)  
$LN19:
00007FF6B18818A4  lea         rdx,[string &quot;Identifier_F&quot; (07FF6B188B1E0h)]  
00007FF6B18818AB  mov         rcx,qword ptr [testString]  
00007FF6B18818AF  call        strcmp (07FF6B18811CCh)  
00007FF6B18818B4  test        eax,eax  
00007FF6B18818B6  jne         Snippet_CompileTimeHashAssistedStringToEnum+13Eh (07FF6B18818BEh)  
00007FF6B18818B8  mov         byte ptr [identifier],5  
00007FF6B18818BC  jmp         Snippet_CompileTimeHashAssistedStringToEnum+142h (07FF6B18818C2h)  
00007FF6B18818BE  mov         byte ptr [identifier],0FFh  
00007FF6B18818C2  jmp         $LN25+24h (07FF6B1881908h)  
$LN22:
00007FF6B18818C4  lea         rdx,[string &quot;Identifier_G&quot; (07FF6B188B1F0h)]  
00007FF6B18818CB  mov         rcx,qword ptr [testString]  
00007FF6B18818CF  call        strcmp (07FF6B18811CCh)  
00007FF6B18818D4  test        eax,eax  
00007FF6B18818D6  jne         Snippet_CompileTimeHashAssistedStringToEnum+15Eh (07FF6B18818DEh)  
00007FF6B18818D8  mov         byte ptr [identifier],6  
00007FF6B18818DC  jmp         Snippet_CompileTimeHashAssistedStringToEnum+162h (07FF6B18818E2h)  
00007FF6B18818DE  mov         byte ptr [identifier],0FFh  
00007FF6B18818E2  jmp         $LN25+24h (07FF6B1881908h)  
$LN25:
00007FF6B18818E4  lea         rdx,[string &quot;Identifier_H&quot; (07FF6B188B200h)]  
00007FF6B18818EB  mov         rcx,qword ptr [testString]  
00007FF6B18818EF  call        strcmp (07FF6B18811CCh)  
00007FF6B18818F4  test        eax,eax  
00007FF6B18818F6  jne         $LN25+1Ah (07FF6B18818FEh)  
00007FF6B18818F8  mov         byte ptr [identifier],7  
00007FF6B18818FC  jmp         $LN25+1Eh (07FF6B1881902h)  
00007FF6B18818FE  mov         byte ptr [identifier],0FFh  
00007FF6B1881902  jmp         $LN25+24h (07FF6B1881908h)  
        #undef VALUE
        default: identifier = EIdentifier::invalid;
00007FF6B1881904  mov         byte ptr [identifier],0FFh  
    }
    
    // undefine the enum value list
    #undef ENUM_VALUE_LIST

    printf(&quot;string translated to enum value %i&quot;, identifier);
00007FF6B1881908  movzx       eax,byte ptr [identifier]  
00007FF6B188190C  mov         edx,eax  
00007FF6B188190E  lea         rcx,[string &quot;string translated to enum value &quot;... (07FF6B188B248h)]  
00007FF6B1881915  call        printf (07FF6B18811FEh)  
[/code]

<h2>Other Possibilities</h2>

Besides the above, I think there is a lot of other really great uses for constexpr functions.

For instance, i'd like to see how it'd work to have compile time data structures to do faster read access of constant data.

I want to see compile time trees, hash tables, sparse arrays, bloom filters, and more.

I believe they have the potential to be a lot more performant than even static data structures, since empty or unaccessed sections of the data structure could possibly melt away when the optimizer does it's pass.

It may not turn out like that, but I think it'd be interesting to investigate it deeper and see how it goes.

I'd also like to see compilers get more aggressive about doing whatever it can at compile time.  If there's no reason for it to happen at runtime, why make it happen then?  It is only going to make things slower.

Thanks for reading!

<h2>Links</h2>

You can find the source code for the code snippets in this post here: <a target="_blank" href="https://github.com/Atrix256/RandomCode/tree/master/CompileTimeCRC">Github Atrix256/RandomCode/CompileTimeCRC/</a>

Here's a couple interesting discussions on constexpr on stack overflow:
<a target="_blank" href="http://stackoverflow.com/questions/36069853/detecting-execution-time-of-a-constexpr-function">detecting execution time of a constexpr function</a>
<a target="_blank" href="http://stackoverflow.com/questions/39650122/how-to-ensure-constexpr-function-never-called-at-runtime">How to ensure constexpr function never called at runtime?</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4899</wp:post_id>
		<wp:post_date><![CDATA[2016-09-23 12:56:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-23 20:56:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[exploring-compile-time-hashing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495700800;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4953;}i:1;a:1:{s:2:"id";i:5051;}i:2;a:1:{s:2:"id";i:78;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_2e4dedf82b6336587be5dda76a5e836a]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_5377f3a5003c646110e97a4c0a75fcc5]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_1daf4106a716829c143913a3398223f5]]></wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote data-secret="s2KebYHWls" class="wp-embedded-content"><a href="http://blog.demofox.org/2015/12/14/o1-data-lookups-with-minimal-perfect-hashing/">O(1) Data Lookups With Minimal Perfect Hashing</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="http://blog.demofox.org/2015/12/14/o1-data-lookups-with-minimal-perfect-hashing/embed/#?secret=s2KebYHWls" data-secret="s2KebYHWls" width="600" height="338" title="&#8220;O(1) Data Lookups With Minimal Perfect Hashing&#8221; &#8212; The blog at the bottom of the sea" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_1daf4106a716829c143913a3398223f5]]></wp:meta_key>
			<wp:meta_value><![CDATA[1474662975]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Is Code Faster Than Data? Switch Statements vs. Arrays</title>
		<link>http://blog.demofox.org/2016/09/26/is-code-faster-than-data-switch-statements-vs-arrays/</link>
		<pubDate>Mon, 26 Sep 2016 20:50:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4953</guid>
		<description></description>
		<content:encoded><![CDATA[The last post explored compile time hashing a bit and at the end showed a way to use compile time code to assist a string to enum function, by having a minimal perfect hash that was guaranteed at compile time not to have any hash collisions.

That was pretty interesting to me, and made me wonder what else was possible with compile time (or compile time assisted) data structures.  This would be mainly for static data structures that were read only.  We could get creative and allow for deletes, inserts and data edits, but we'll probably come back to that in a future post.

In pursuing other compile time data structures, there is one big question that would be easy to make assumptions about:  Is custom code for compile time data structure lookup functionality faster than data?

In other words, could we hard code a hash table key to value lookup that was more performant than a general case hash table which was meant to be used by any data?

The answer to this is "usually it can be" IMO, since we could do lots of things specific to the data, like finding cheaper / better hash functions for the specific data input we were expecting.  Since we aren't doing inserts or deletes, or data modification, we could also allocate just the right amount of memory, in one shot, which would reduce memory waste and memory fragmentation.

But lets do some experiments and see.  Let's start off by comparing how a switch statement performs compared to some simple array types.

<h2>Testing Details</h2>

I ran these tests in x86/x64 debug/release in visual studio 2015.

I made 5000 random uint32's and stored them in these containers:
<ul>
	<li>std::vector</li>
	<li>std::array</li>
	<li>C style array</li>
	<li>dynamic memory</li>
	<li>Switch statement function</li>
	<li>Switch statement function with __assume(0) in default case</li>
</ul>

The __assume(0) in the switch default case is a hint to the optimizer to not do the usual bounds checking needed for handling a value not present in the switch statement.  It's microsoft specific, but there are equivelants in other compilers. Note that if you switch a value that would usually be handled by the default case, you would then have undefined behavior.  It's a speed up, but comes at a price.  You can read about it here: <a href="https://msdn.microsoft.com/en-us/library/1b3fsfxw.aspx" target="_blank">msdn: __assume</a>.  This test code never passes values that would trigger the default case, so is arguably a good candidate for __assume, if you believe there are any good usages for __assume.

For a neat read on some details of undefined behavior check this out: <a href="https://blogs.msdn.microsoft.com/oldnewthing/20140627-00/?p=633/" target="_blank">Undefined behavior can result in time travel (among other things, but time travel is the funkiest)</a>

I did the following tests.

<ul>
	<li>Sequential Sum: Add up the values at the indices 0-4999, in order.  For the switch function, it was called with indices 0-4999 in order</li>
	<li>Shuffle Sum: Same as sequential sum, but in a shuffled order.</li>
	<li>Sparse Sum: Same as shuffle sum, but only doing the first 1000 indices.  An alternate switch function was used which only contained values for those first 1000 indices, simulating the ability for us to strip out values never actually needed, to see if that has an impact on performance.</li>
</ul>

Timing was measured using std::chrono::high_resolution_clock, timing each test done 1,000 times in a row to make timing differences more apparent.  I did this 50 times for each test to get an average and a standard deviation for those 50 samples.

The source code for the tests is at:
<a target="_blank" href="https://github.com/Atrix256/RandomCode/tree/master/ArrayAccessSpeeds">Github: Atrix256/RandomCode/ArrayAccessSpeeds</a>

<h2>Results</h2>

The results are below.  Times are in milliseconds.  The number in parentheses is the standard deviation, also in milliseconds.

<b>Sequential Sum: Sum 5,000 numbers 1,000 times, in order.</b>

<table>
<tr>
<td></td>
<td colspan=2 align="center">Debug</td>
<td colspan=2 align="center">Release</td>
</tr>
<tr>
<td></td>
<td align="center">Win32</td>
<td align="center">x64</td>
<td align="center">Win32</td>
<td align="center">x64</td>
</tr>
<tr>
<td>std::vector</td><td>177.16 (4.68)</td><td>57.87 (6.48)</td><td>1.23 (0.25)</td><td>0.30 (0.46)</td>
</tr>
<tr>
<td>std::array</td><td>94.53 (5.84)</td><td>53.61 (3.96)</td><td>1.25 (0.29)</td><td>0.34 (0.48)</td>
</tr>
<tr>
<td>C array</td><td>8.67 (0.48)</td><td>9.90 (0.57)</td><td>1.22 (0.37)</td><td>0.30 (0.46)</td>
</tr>
<tr>
<td>dynamic memory</td><td>8.96 (0.29)</td><td>10.01 (0.77)</td><td>1.27 (0.40)</td><td>0.30 (0.46)</td>
</tr>
<tr>
<td>switch function</td><td>148.50 (3.48)</td><td>115.01 (4.83)</td><td>47.53 (3.86)</td><td>43.53 (1.75)</td>
</tr>
<tr>
<td>switch function assume 0</td><td>135.96 (1.22)</td><td>95.54 (2.83)</td><td>46.33 (0.97)</td><td>38.91 (0.72)</td>
</tr>
</table>

<b>Shuffle Sum: Sum 5,000 numbers 1,000 times, in random order.</b>

<table>
<tr>
<td></td>
<td colspan=2 align="center">Debug</td>
<td colspan=2 align="center">Release</td>
</tr>
<tr>
<td></td>
<td align="center">Win32</td>
<td align="center">x64</td>
<td align="center">Win32</td>
<td align="center">x64</td>
</tr>
<tr>
<td>std::vector</td><td>179.82 (8.13)</td><td>46.75 (1.05)</td><td>2.78 (0.42)</td><td>1.41 (0.19)</td>
</tr>
<tr>
<td>std::array</td><td>89.94 (1.23)</td><td>39.47 (1.07)</td><td>2.58 (0.29)</td><td>1.42 (0.19)</td>
</tr>
<tr>
<td>C array</td><td>8.59 (0.41)</td><td>8.63 (0.49)</td><td>2.55 (0.25)</td><td>1.39 (0.21)</td>
</tr>
<tr>
<td>dynamic memory</td><td>8.23 (0.26)</td><td>8.41 (0.50)</td><td>2.73 (0.25)</td><td>1.40 (0.20)</td>
</tr>
<tr>
<td>switch function</td><td>151.83 (0.95)</td><td>116.37 (16.91)</td><td>55.74 (1.97)</td><td>48.20 (0.56)</td>
</tr>
<tr>
<td>switch function assume 0</td><td>142.07 (0.97)</td><td>103.01 (11.17)</td><td>55.45 (2.00)</td><td>42.09 (0.79)</td>
</tr>
</table>

<b>Sparse Sum: Sum 1,000 of the 5,000 numbers 1,000 times, in random order.</b>

<table>
<tr>
<td></td>
<td colspan=2 align="center">Debug</td>
<td colspan=2 align="center">Release</td>
</tr>
<tr>
<td></td>
<td align="center">Win32</td>
<td align="center">x64</td>
<td align="center">Win32</td>
<td align="center">x64</td>
</tr>
<tr>
<td>std::vector</td><td>34.86 (0.46)</td><td>9.35 (0.48)</td><td>0.54 (0.14)</td><td>0.26 (0.25)</td>
</tr>
<tr>
<td>std::array</td><td>17.88 (0.45)</td><td>7.93 (0.27)</td><td>0.52 (0.10)</td><td>0.25 (0.25)</td>
</tr>
<tr>
<td>C array</td><td>1.72 (0.39)</td><td>1.70 (0.46)</td><td>0.52 (0.10)</td><td>0.24 (0.25)</td>
</tr>
<tr>
<td>dynamic memory</td><td>1.67 (0.45)</td><td>1.70 (0.35)</td><td>0.55 (0.18)</td><td>0.26 (0.25)</td>
</tr>
<tr>
<td>switch function</td><td>29.10 (0.49)</td><td>18.88 (0.92)</td><td>13.42 (0.43)</td><td>9.51 (0.43)</td>
</tr>
<tr>
<td>switch function assume 0</td><td>26.74 (0.52)</td><td>18.19 (0.39)</td><td>12.15 (0.50)</td><td>9.23 (0.42)</td>
</tr>
</table>

<h2>Observations</h2>

It's interesting to see that std::array is 10 times slower than a c array or dynamic memory, in debug win32, and that std::vector is 20 times slower.  In debug x64 std::array is only about 5 times slower, and std::vector is only a little bit slower than std::array.  In release, std::vector and std::array are more in line with the cost of a c array, or dynamic memory.

It's expected that std::array and std::vector are slower in debug because they do things like check indices for being out of bounds.  They also have a lot more code associated with them which may not "optimize away" in debug, like it does in release (including inlining functions).  It's nice to see that they become basically free abstractions in release though.  It gives us more confidence that they can be used in performance critical areas without too much extra worry, as long as we are ok with the debug slowdowns and want or need the debug functionality the types give us.

It's also interesting to see that adding the __assume(0) to the default case in the switch statements actually improves performance a measurable amount in most tests.

But, onto the sad news...

The switch function IS NOT faster than the simple array access, and in fact is quite a bit slower!

Why is it so much slower?

One reason is because of the function call overhead associated with each lookup.  When I marked the function as inline, the compiler refused to inline it.  When i marked it as __forceinline to force it to inline, the compiler took A LONG TIME in the "generating code" section.  I left it for 10 minutes and it still wasn't done so killed it since it is unacceptably long.  I tried a bit to get apples to apples comparisons by putting the test code into the function, but the optimizer ended up realizing it could run the function once and multiply it's result by the number of test repeats I wanted to do.  Trying to fool the optimizer meant doing things that weren't quite an apples to apples comparison anymore, and made the results get slower.  So, I'm leaving it at this:  In the release assembly, you can see the function call to the switch function, where you don't have one with eg. dynamic memory and function calls are not free, so no, the function call is not faster than not having a function call!

The second reason is how switch statements work compared to how arrays work.  The switch statement first does a comparison to see if the value is within range of the maximum valued case (in other words, it does a range check, like what std::array and std::vector do in debug! It does this in debug and release both.), and then it does a jmp to a location of code where it then does a return with a constant value.

An array on the other hand just calculates the offset of a memory value based on the index passed in and the object size, and then reads that memory address.

Arrays have more direct access to the values than switch statements do.

It's true that the switch statements could be optimized to behave more like arrays, and the whole function could go away in lieu of a memory lookup, but the optimizer doesn't make that optimization here.

Here's a good read on details of how switch statements are actually implemented in msvc under various conditions:
<a href="http://www.codeproject.com/Articles/100473/Something-You-May-Not-Know-About-the-Switch-Statem" target="_blank">Something You May Not Know About the Switch Statement in C/C++</a>

On the memory usage front, the simplest array (not worrying about things like geometric dynamic growth policies or memory padding) takes 20,000 bytes to store 5000 uint32's.

In win32 (didn't try x64 but I'm sure it's similar), gutting the switch functions to only have a single case made a huge difference in executable size which shows us that switch statements are bad for memory efficiency too:
Debug went from 340 KB (348,160 bytes) to 244 KB (249,856 bytes).
Release went from 191 KB (196,096 bytes) to 133 KB (136,192 bytes).

<h2>More Questions</h2>

I'd like to see how switch statements compare to hash tables.  I think switch statements will still be slower, but it would be good to investigate the details and confirm.

This also makes me think that the "String To Enum" code in the last post, which makes use of a switch statement, is probably not the ideal code for doing that, as far as performance and memory usage go.

I think that instead of being switch statement based, it should probably be array based.

However, the idea that we can have compile time assurance that our hash has no collisions is really nice and we get that from doing case statements on run time hashes of our full set of valid inputs.  It would be nice to find a way to leverage that while still getting the speed we want, as automatically as possible.  At worst, code generation could be used, but it would be nicer to do something less rigid / heavy handed.

Lastly, I still believe that "ad hoc" custom fit code for specific data lookups have the best potential for performance.  I want to keep looking into it to see about finding some good avenues for success.

Have any info to share? Please do!

Thanks for reading and I hope you find this useful for at least interesting.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4953</wp:post_id>
		<wp:post_date><![CDATA[2016-09-26 12:50:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-26 20:50:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[is-code-faster-than-data-switch-statements-vs-arrays]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495688571;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4999;}i:1;a:1:{s:2:"id";i:3724;}i:2;a:1:{s:2:"id";i:4899;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Is Code Faster Than Data? Examining Hash Tables</title>
		<link>http://blog.demofox.org/2016/10/03/is-code-faster-than-data-examining-hash-tables/</link>
		<pubDate>Mon, 03 Oct 2016 19:34:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=4999</guid>
		<description></description>
		<content:encoded><![CDATA[This series of posts is aimed at examining if and how ad hoc code crafted for a specific static (unchanging / constant) data set can run faster than typical generic run time data structures.  I think the answer is an obvious "yes, we can often do better", but these posts explore the details of the problem space and explore how and when we might do better.

The last post explored switch statement performance compared to array access performance.

A switch statement is just a way of telling the compiler how we want to map integral inputs to either some code to run, or some value to return.  It's up to the compiler how to make that happen.

Because compiler makers presumably want to make their compiler generate fast code, it seems like a switch statement should be able to match the speed of an array since a switch statement could very well be implemented as an array when all it is doing is returning different values based on input.  Maybe it could even beat an array, in the case of a sparse array, an array with many duplicates, or other situations.

In practice, this doesn't seem to be the case though, and switch statements are actually quite a bit slower than arrays from the experimentation I've done.  The main part of the overhead seems to be that it always does a jump (goto) based on the input you are switching on.  It can do some intelligent things to find the right location to jump to, but if all you are doing is returning a value, it doesn't seem smart enough to do a memory read from an array and return that value, instead of doing a jump.

You can read a nice analysis on how switch statements are compiled on the microsoft compiler here: <a href="http://www.codeproject.com/Articles/100473/Something-You-May-Not-Know-About-the-Switch-Statem" target="_blank">Something You May Not Know About the Switch Statement in C/C++</a>.

Today we are going to be analyzing how hash tables fare against switch statements, arrays, and a few other things.

<h2>Testing Details</h2>

I ran these tests in x86/x64 debug/release in visual studio 2015.

I got a list of 100 random words from <a href="http://www.randomwordgenerator.com/" target="_blank">http://www.randomwordgenerator.com/</a> and made sure they were all lowercase.  I associated an integer value with them, from 1 to 100.  My tests are all based on the string being the key and the integer being the value.

I have that data stored/represented in several ways for performing lookups:

<ol>
	<li>std::map.</li>
	<li>std::unordered_map.</li>
	<li>std::unordered_map using crc32 hash function.</li>
	<li>std::unordered_map using crc32 hash function modulo 337 and salted with 1147287 to prevent collisions.</li>
	<li>SwitchValue() switches on crc32 of input string.</li>
	<li>SwitchValueValidate() switches on crc32 of input string but does a single strcmp to handle possibly invalid input.</li>
	<li>SwitchValueMinimized() switches on crc32 of input string modulo 337 and salted with 1147287 to prevent collisions.</li>
	<li>SwitchValueMinimizedValidate() like SwitchValueMinimized() but does a single strcmp to handle possibly invalid input.</li>
	<li>g_SwitchValueMinimizedArray, the array version of SwitchValueMinimized().</li>
	<li>g_SwitchValueMinimizedArrayValidate, the array version of SwitchValueMinimizedValidate().</li>
	<li>BruteForceByStartingLetter() switches on first letter, then brute force strcmp's words beginning with that letter.</li>
	<li>BruteForce() brute force strcmp's all words.</li>
</ol>

The non validating switch statement functions have an __assume(0) in their default case to remove the overhead of testing for invalid values.  This is to make them as fast as possible for the cases when you will only be passing valid values in.  If ever that contract was broken, you'd hit undefined behavior, so the performance boost comes at a cost.  The Validate versions of the switch functions don't do this, as they are meant to take possibly invalid input in, and handle it gracefully.  Both validating and not validating input are common use cases so I wanted to represent both in the performance analysis.

Here are the tests done:
<ol>
	<li><strong>In Order</strong> - looks up all strings in order and sums the associated values.</li>
	<li><strong>Shuffled</strong> - looks up all strings in random order and sums the associated values.</li>
	<li><strong>Pre-Hashed Keys In Order</strong> - looks up all strings in order and sums the associated values, using pre-hashed keys.</li>
	<li><strong>Pre-Hashed Keys Shuffled</strong> - looks up all strings in random order and sums the associated values, using pre-hashed keys.</li>
</ol>

The second two tests only apply to the value lookups which can take pre-hashed keys.  For instance, g_SwitchValueMinimizedArray can be indexed by a key that was hashed before the program ran, but a std::unordered_map cannot be indexed by a hash value that was calculated in advance.

Each of those tests were done 5,000 times in a row to make performance differences stand out more, and that full amount of time is the time reported.  That process was done 50 times to give both an average (a mean) and a standard deviation to show much much the time samples differed.

The source code for the tests can be found here:
<a href="https://github.com/Atrix256/RandomCode/tree/master/HashVsSwitch" target="_blank">Github: Atrix256/RandomCode/HashVsSwitch</a>

<h2>Results</h2>

Here are the results, in milliseconds.  The values in parentheses are the standard deviations, which are also in milliseconds.

<strong>In Order</strong>

Look up all strings in sequential order and sum the associated values. Repeat 5,000 times to get a timing sample.  Take 50 timing samples and report average and std deviation.

<table>
<tr>
<td></td>
<td colspan=2 align="center">Debug</td>
<td colspan=2 align="center">Release</td>
</tr>
<tr>
<td></td>
<td align="center">Win32</td>
<td align="center">x64</td>
<td align="center">Win32</td>
<td align="center">x64</td>
</tr>
<tr><td>std::map</td><td>7036.77 (126.41)</td><td>7070.18 (155.49)</td><td>33.02 (2.68)</td><td>35.40 (1.43)</td></tr>
<tr><td>std::unordered_map</td><td>4235.31 (24.41)</td><td>4261.36 (145.16)</td><td>19.97 (0.45)</td><td>20.12 (0.62)</td></tr>
<tr><td>std::unordered_map crc32</td><td>4236.38 (80.72)</td><td>4275.36 (116.65)</td><td>24.36 (0.47)</td><td>23.47 (0.86)</td></tr>
<tr><td>std::unordered_map crc32 minimized</td><td>4034.50 (12.72)</td><td>4323.67 (170.55)</td><td>26.39 (0.50)</td><td>23.68 (0.71)</td></tr>
<tr><td>SwitchValue()</td><td>123.28 (0.98)</td><td>144.29 (4.91)</td><td>6.81 (0.30)</td><td>5.47 (0.29)</td></tr>
<tr><td>SwitchValueValidate()</td><td>127.59 (1.22)</td><td>147.41 (5.20)</td><td>8.84 (0.35)</td><td>7.99 (0.36)</td></tr>
<tr><td>SwitchValueMinimized()</td><td>128.83 (0.95)</td><td>151.48 (4.66)</td><td>8.28 (0.38)</td><td>10.18 (0.37)</td></tr>
<tr><td>SwitchValueMinimizedValidate()</td><td>132.44 (1.02)</td><td>159.85 (6.73)</td><td>12.65 (0.40)</td><td>10.89 (0.36)</td></tr>
<tr><td>g_SwitchValueMinimizedArray</td><td>104.15 (1.13)</td><td>122.94 (5.98)</td><td>7.68 (0.36)</td><td>6.08 (0.36)</td></tr>
<tr><td>g_SwitchValueMinimizedArrayValidate</td><td>107.75 (1.07)</td><td>120.75 (2.80)</td><td>10.49 (0.37)</td><td>8.95 (0.32)</td></tr>
<tr><td>BruteForceByStartingLetter()</td><td>19.92 (0.63)</td><td>22.01 (0.86)</td><td>4.85 (0.24)</td><td>5.81 (0.26)</td></tr>
<tr><td>BruteForce()</td><td>118.65 (1.09)</td><td>140.20 (2.28)</td><td>31.53 (0.56)</td><td>46.47 (0.83)</td></tr>
</table>

<strong>Shuffled</strong>

Look up all strings in random order and sum the associated values. Repeat 5,000 times to get a timing sample.  Take 50 timing samples and report average and std deviation.

<table>
<tr>
<td></td>
<td colspan=2 align="center">Debug</td>
<td colspan=2 align="center">Release</td>
</tr>
<tr>
<td></td>
<td align="center">Win32</td>
<td align="center">x64</td>
<td align="center">Win32</td>
<td align="center">x64</td>
</tr>
<tr><td>std::map</td><td>7082.92 (214.13)</td><td>6999.90 (193.82)</td><td>32.14 (0.59)</td><td>34.20 (0.62)</td></tr>
<tr><td>std::unordered_map</td><td>4155.85 (133.00)</td><td>4221.84 (124.70)</td><td>20.21 (0.42)</td><td>20.09 (0.47)</td></tr>
<tr><td>std::unordered_map crc32</td><td>4286.44 (95.39)</td><td>4300.81 (64.37)</td><td>24.55 (0.57)</td><td>23.06 (0.57)</td></tr>
<tr><td>std::unordered_map crc32 minimized</td><td>4186.27 (75.35)</td><td>4111.73 (43.36)</td><td>26.36 (0.56)</td><td>23.65 (0.54)</td></tr>
<tr><td>SwitchValue()</td><td>127.93 (3.85)</td><td>137.63 (1.31)</td><td>6.97 (0.32)</td><td>5.47 (0.27)</td></tr>
<tr><td>SwitchValueValidate()</td><td>131.46 (2.34)</td><td>141.38 (1.47)</td><td>8.92 (0.38)</td><td>7.86 (0.37)</td></tr>
<tr><td>SwitchValueMinimized()</td><td>133.03 (2.93)</td><td>145.74 (1.50)</td><td>9.16 (0.37)</td><td>10.50 (0.41)</td></tr>
<tr><td>SwitchValueMinimizedValidate()</td><td>135.47 (2.27)</td><td>151.58 (1.48)</td><td>12.13 (0.40)</td><td>10.13 (0.43)</td></tr>
<tr><td>g_SwitchValueMinimizedArray</td><td>106.38 (2.70)</td><td>118.61 (3.73)</td><td>8.18 (0.31)</td><td>5.19 (0.29)</td></tr>
<tr><td>g_SwitchValueMinimizedArrayValidate</td><td>109.32 (2.34)</td><td>120.94 (3.02)</td><td>10.49 (0.55)</td><td>9.00 (0.40)</td></tr>
<tr><td>BruteForceByStartingLetter()</td><td>20.45 (0.92)</td><td>21.64 (0.76)</td><td>4.90 (0.31)</td><td>5.87 (0.32)</td></tr>
<tr><td>BruteForce()</td><td>120.70 (2.16)</td><td>140.95 (1.71)</td><td>32.50 (0.47)</td><td>45.90 (0.79)</td></tr>
</table>

<strong>Pre-hashed In Order</strong>

Look up all strings in sequential order and sum the associated values. Repeat 5,000 times to get a timing sample.  Take 50 timing samples and report average and std deviation.  Uses pre-hashed keys for lookups.

<table>
<tr>
<td></td>
<td colspan=2 align="center">Debug</td>
<td colspan=2 align="center">Release</td>
</tr>
<tr>
<td></td>
<td align="center">Win32</td>
<td align="center">x64</td>
<td align="center">Win32</td>
<td align="center">x64</td>
</tr>
<tr><td>SwitchValue()</td><td>12.49 (0.61)</td><td>13.23 (0.37)</td><td>1.94 (0.17)</td><td>1.81 (0.12)</td></tr>
<tr><td>SwitchValueValidate()</td><td>17.08 (1.06)</td><td>16.72 (0.57)</td><td>4.32 (0.30)</td><td>4.05 (0.21)</td></tr>
<tr><td>SwitchValueMinimized()</td><td>11.83 (0.69)</td><td>12.06 (0.51)</td><td>1.29 (0.13)</td><td>1.58 (0.17)</td></tr>
<tr><td>SwitchValueMinimizedValidate()</td><td>16.02 (0.84)</td><td>15.84 (0.66)</td><td>3.25 (0.24)</td><td>3.47 (0.27)</td></tr>
<tr><td>g_SwitchValueMinimizedArray</td><td>1.23 (0.06)</td><td>1.15 (0.10)</td><td>0.00 (0.00)</td><td>0.00 (0.00)</td></tr>
<tr><td>g_SwitchValueMinimizedArrayValidate</td><td>4.21 (0.32)</td><td>2.99 (0.20)</td><td>2.45 (0.17)</td><td>2.66 (0.20)</td></tr>
</table>

<strong>Pre-hashed Shuffled</strong>

Look up all strings in random order and sum the associated values. Repeat 5,000 times to get a timing sample.  Take 50 timing samples and report average and std deviation.  Uses pre-hashed keys for lookups.

<table>
<tr>
<td></td>
<td colspan=2 align="center">Debug</td>
<td colspan=2 align="center">Release</td>
</tr>
<tr>
<td></td>
<td align="center">Win32</td>
<td align="center">x64</td>
<td align="center">Win32</td>
<td align="center">x64</td>
</tr>
<tr><td>SwitchValue()</td><td>12.96 (1.37)</td><td>13.45 (0.47)</td><td>1.84 (0.11)</td><td>1.81 (0.16)</td></tr>
<tr><td>SwitchValueValidate()</td><td>16.27 (2.01)</td><td>16.57 (0.63)</td><td>2.65 (0.19)</td><td>2.85 (0.17)</td></tr>
<tr><td>SwitchValueMinimized()</td><td>11.75 (0.63)</td><td>12.15 (0.45)</td><td>1.07 (0.07)</td><td>1.06 (0.11)</td></tr>
<tr><td>SwitchValueMinimizedValidate()</td><td>16.44 (0.99)</td><td>16.33 (0.58)</td><td>3.43 (0.18)</td><td>3.41 (0.22)</td></tr>
<tr><td>g_SwitchValueMinimizedArray</td><td>1.13 (0.06)</td><td>1.18 (0.10)</td><td>0.32 (0.05)</td><td>0.31 (0.04)</td></tr>
<tr><td>g_SwitchValueMinimizedArrayValidate</td><td>4.50 (0.32)</td><td>3.31 (0.18)</td><td>2.82 (0.16)</td><td>3.29 (0.18)</td></tr>
</table>

<h2>Observations</h2>

There's a lot of data, but here's the things I found most interesting or relevant to what I'm looking at (generic data structures vs ad hoc code for data).

<b>Tests 1 and 2</b>

std::map and std::unordered map are very, very slow in debug as you might expect.  It would be interesting to look deeper and see what it is that they are doing in debug to slow them down so much.

There is some tribal knowledge in the C++ world that says to not use std::map and to use std::unordered_map instead, but I was surprised to see just how slow std::map was.  in x64 release, std::map took about 75% the time that brute force did, and in win32 release, it took the same time or was slower!  std::map isn't hash based, you give it a comparison function that returns -1,0, or 1 meaning less than, equal or greater than.  Even so, you have to wonder how the heck the algorithm can be so slow that brute force is a comparable replacement for lookup times!

It's interesting to see that everything i tried (except brute force) was significantly faster than both std::map and std::unordered_map.  That saddens me a little bit, but to be fair, the usage case I'm going after is a static data structure that has fast lookup speeds, which isn't what unordered_map aims to solve.  This just goes to show that yes, if you have static data that you want fast lookup times for, making ad hoc code or rolling your own read only data structure can give you significant wins to performance, and also can help memory issues (fragmentation and wasted allocations that will never be used).

It was surprising to see that switching on the first letter and brute forcing the strings with the same first letter did so well.  That is one of the faster results, competing with SwitchValue() for top dog.  The interesting thing though is that BruteForceByStartingLetter() gracefully handles invalid input, while SwitchValue() does not and has undefined behavior, so another point goes to BruteForceByStartingLetter().

<b>Tests 3 and 4</b>

These tests were done with pre-hashed keys to simulate an ideal setup.

If you have a static key to value data structure and have the ability to make ad hoc code for your specific static data, chances are pretty good that you'll also be able to pre-hash whatever keys you are going to be looking up so you don't have to hash them at run time.  Also, if you are doing multiple lookups with a single key for some reason, you may opt to calculate the hash only on the first lookup, and then from there re-use the hashed key.

These tests simulated those situations.

As expected, the perf results on these tests are much better than those that hash the key on demand for each lookup.  Less work done at runtime means better performance.

Based on the results of the last blog post - that array lookups are super fast - you probably aren't surprised to see that g_SwitchValueMinimizedArray is the winner for performance by far.

It is so fast that the in order case doesn't even register any time having been taken.  This is probably a little misleading, because doing the in order tests (and even the shuffled tests) are very cache friendly.  In reality, you probably would have more cache misses and it wouldn't be quite as cheap as what is being reported, but would still be super fast compared to the other options.

In second place comes SwitchValueMinimized() which is the switch statement function version of g_SwitchValueMinimizedArray.  Arrays still beat switch statements, as we found out in the last post!

In third place comes SwitchValue(), which is the same as SwitchValueMinimized() but has sparser values used in the switch statement, which make it more difficult for the compiler to generate efficient code.  For instance, having the full range of 32 bits as case statement values, and having them all be pseudo random numbers (because they are the result of a hash!) rules out the ability for the compiler to make a jump table array, or find any patterns in the numbers.  The SwitchValueMinimized() function on the other hand has only 337 possible values, and so even though the values are sparse (there are 100 items in those 337 possible values), it's a small enough number that a jump table array could be used without issues.

After that comes all the validated versions of the tests.  It makes sense that they would be slower, because they do all the same work, and then some additional work (strcmp) to ensure that the input is valid.

<h2>Getting The Fastest Results</h2>

If you have some static data that maps keys to values, and you need it to be fast for doing lookups, it looks like writing something custom is the way to go. 

The absolutely fastest way to do it is to make an array out of your data items and then pre-process (or compile time process) any places that do a lookup, to convert keys to array indices.  then, at run time, you only need to do an array lookup to a known index to get your data, which is super fast.  If your data has duplicates, you might also be able to make the keys which point at duplicate data instead just point at the same array index, to de-duplicate your data.

If doing that is too complex, or too much work, a low tech and low effort way to handle the problem seems to be to break your data up into buckets, possibly based on their first letter, and then doing brute force (or something else) to do the lookup among the fewer number of items.

In fact, that second method is sort of like a hard coded <a href="https://en.wikipedia.org/wiki/Trie" target="_blank">trie</a> which is only two levels deep.

If you needed to do some hashing at runtime, finding a faster hash function (that also worked in constexpr, or at least had a constexpr version!) could help you get closer to the pre-hashed keys timings.  The good news is the hash doesn't have to be particularly good.  It just has to be fast and have no collisions for the input values you wish to use.  That seems like something where brute force searching simple hash functions with various salt values may give you the ideal solution, but probably would take a very, very long time to find what you are looking for.  You might notice that the default hash used for std::unordered_map is actually faster than the crc32 implementation I used.

Of course, we also learned what NOT to do.  Don't use brute force, and don't use std::map.  Using std::unordered_map isn't super aweful compared to those solutions, but you can do a lot better if you want to.

<h2>Why This?</h2>

This fast key to value lookup might sound like a contrived need to some people, but in game development (I am a game developer!), there is commonly the concept of a game database, where you look up data about things (how much damage does this unit do?) by looking up a structure based on a unique ID that is a string, named by a human. So, in game dev, which also has high performance needs, optimizing this usage case can be very helpful.  There is a little bit more talk about game data needs here: <a href="http://blog.demofox.org/2016/04/01/game-development-needs-data-pipeline-middleware/" target="_blank">Game Development Needs Data Pipeline Middleware</a>.

<h2>Is Code Faster Than Data?</h2>

I still think ad hoc code for data structures can often be faster than generic data structures, and the experiments on this post have positive indications of that.

Another way I think ad hoc code could be helpful is when you have hierarchical and/or heterogeneous data structures.  By that I mean data structures which have multiple levels, where each level may actually have different needs for how best to look up data in it, and in fact, even siblings on the same level maybe have different needs for how best to look up data in it.

In these cases, you could make some data types which had virtual functions to handle the nature of the data needing different solutions at each level, but those virtual function calls and abstractions add up.

I think it'd be superior to have hard coded code that says "oh, you want index 4 of the root array? ok, that means you are going to binary search this list next".  Of course, that code needs to be generated by another program to be effective.  If a human has to make sure all that code stays up to date, it'll be a ton of work, and it'll be broken, making very subtle hard to reproduce bugs.

A downside I can see to ad hoc code solutions is possibly thrashing the instruction cache more.  Not sure if that'd be an issue in practice, it'd be interesting to try more complex data structures and see how it goes.

Also, it might be difficult to have good heuristics to figure out what is best in which situations.  I could see a utility possibly generating different variations of code and running them to see which was most performant.  Seems like it'd be a challenge to get 100% right all the time, but our experiments make it seems like it'd be easy to do significantly better than generic algorithms which are meant to be dynamic at runtime.

I also think that more complex data structures are more likely to get benefit of having custom code made for them.  Simple ones less likely so.  It's hard to beat an array lookup.  That being said, the unbeatable simple data structures make great building blocks for the more complex ones (;

It probably would also be good to look into memory usage a bit more to see how ad hoc code compares to generic algorithms.  If ad hoc code is much faster but uses more memory, that'd have to be a conscious decision to make when weighing the trade offs.

Maybe in the future, the C++ standards will allow for static data structure types that you have to initialize with compile time constants (allowing constexpr), that are optimized for lookup times since they can't have any inserts or deletes?  I wonder how much demand there would be for that?

Here's a good read on some other string friendly data structures:
<a href="http://cglab.ca/~morin/teaching/5408/notes/strings.pdf" target="_blank">Data Structures for Strings</a>

Twitter user <a href="https://twitter.com/ores">@ores</a> brought up two interesting points:
<ol>
	<li>It would be interesting to see <a href="https://www.gnu.org/software/gperf/" target="_blank">gperf</a> performs in this situation.  If makes a faster minimal perfect hash function, it'll get us closer to the pre-hashed keys timings.</li>
	<li>It would be interesting to time scripting languages to see if for them code is faster than data or not.  Another interesting aspect of this would be to look at a JIT compiled scripting language like lua-jit.  The thing that makes JIT interesting is that it can compile for your specific CPU, instead of having to compile for a more generic set of CPU features.  That gives it the opportunity to make code which will perform better on your specific machine.</li>
</ol>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4999</wp:post_id>
		<wp:post_date><![CDATA[2016-10-03 11:34:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-03 19:34:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[is-code-faster-than-data-examining-hash-tables]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:32:"f842994b53ce4df7b4f34efec094e807";a:2:{s:7:"expires";i:1495094996;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:78;}i:1;a:1:{s:2:"id";i:5116;}i:2;a:1:{s:2:"id";i:4899;}}}s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495095024;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4953;}i:1;a:1:{s:2:"id";i:78;}i:2;a:1:{s:2:"id";i:5116;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Data Point for MSVC vs Clang Code Generation</title>
		<link>http://blog.demofox.org/2016/10/14/a-data-point-for-msvc-vs-clang-code-generation/</link>
		<pubDate>Fri, 14 Oct 2016 17:10:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5051</guid>
		<description></description>
		<content:encoded><![CDATA[I'm a windows PC game developer using MSVC 2015 update 1, working in C++.

More and more, I hear people talk about how great clang is, and that it generates much better code than MSVC, among other niceties.

I have been chalking it up to maybe just being a fad, but keeping my feelers out there to see if I can get some concrete comparitive info.

Well, I've stumbled on some of that concrete comparitive info and want to share it with anyone else who is wondering if clang really is better than MSVC.  This is just one data point, but it feels like it's just the tip of the iceberg.

On twitter, Jason Turner (<a href="https://twitter.com/lefticus" target="_blank">@lefticus</a>) had an interesting tweet:
<img src="https://demofox2.files.wordpress.com/2016/10/lefticustweet.png"/>

I wasn't really sure what he was getting at, so clicked the link to check it out (<a href="http://godbolt.org/g/WDpPYq" target="_blank">http://godbolt.org/g/WDpPYq</a>).

It turned out to be very relevant to my interest, because his particular example is comparing a value to a bunch of compile time constants.  That is basically the core of what I've been looking into with my last few posts asking whether code or data was faster!

This first particular example is comparing a compile time constant to other compile time constants, so the code completely melts away and at runtime just returns the compile time calculated result.  That isn't very interesting, but it is nice to see that clang did so much at compile time.  FWIW MSVC was able to do this all at compile time as well, so they are even so far.

<img src="https://demofox2.files.wordpress.com/2016/10/clang1.png"/>

What is more interesting is what happens when you test a compile time unknown against compile time constants.  Let's check it out... (<a href="https://godbolt.org/g/dKBDSK" target="_blank">https://godbolt.org/g/dKBDSK</a>)

<img src="https://demofox2.files.wordpress.com/2016/10/clang2.png"/>

What the assembly does is subtract 1 from the input (it's unsigned so if 0, wraps around to max int value), and then compares it against 5 to know if it's in the group or not.  Clang realized the numbers were continuous and so made a nice optimization.

In this case, MSVC did similar in release x64:

[code language="cpp"]
#include &lt;initializer_list&gt;

template&lt;typename U, typename ... T&gt;
bool one_of(U&amp;&amp; u, T &amp;&amp; ... t)
{
    bool match = false;
    (void)std::initializer_list&lt;bool&gt;{ (match = match || u == t)... };
    return match;
}

int main(int argc, char** argv)
{
00007FF62DB61000  lea         eax,[rcx-1]  
00007FF62DB61003  cmp         eax,4  
00007FF62DB61006  setbe       al  
    return one_of(argc, 1, 2, 3, 4, 5);
00007FF62DB61009  movzx       eax,al  
}
00007FF62DB6100C  ret  
[/code]

But in x86 release it did a bunch of if/else if/else if's!

[code language="cpp"]
#include &lt;initializer_list&gt;

template&lt;typename U, typename ... T&gt;
bool one_of(U&amp;&amp; u, T &amp;&amp; ... t)
{
    bool match = false;
    (void)std::initializer_list&lt;bool&gt;{ (match = match || u == t)... };
    return match;
}

int main(int argc, char** argv)
{
00331002  in          al,dx  
    return one_of(argc, 1, 2, 3, 4, 5);
00331003  mov         eax,dword ptr [argc]  
00331006  cmp         eax,1  
00331009  je          main+26h (0331026h)  
0033100B  cmp         eax,2  
0033100E  je          main+26h (0331026h)  
00331010  cmp         eax,3  
00331013  je          main+26h (0331026h)  
00331015  cmp         eax,4  
00331018  je          main+26h (0331026h)  
0033101A  cmp         eax,5  
0033101D  je          main+26h (0331026h)  
0033101F  xor         al,al  
00331021  movzx       eax,al  
}
00331024  pop         ebp  
00331025  ret  
    return one_of(argc, 1, 2, 3, 4, 5);
00331026  mov         al,1  
00331028  movzx       eax,al  
}
0033102B  pop         ebp  
0033102C  ret  
[/code]

You are probably asking "what does clang do in x86?" well it turns out it does the same thing as in x64, it doesn't fall back to if/else if/else if like MVSC does (proof: add -m32 in goldbolt.  <a href="https://godbolt.org/g/khnrtO" target="_blank">https://godbolt.org/g/khnrtO</a>).  One point to clang!

What if the numbers are not so continuous though?  It turns out it can actually switch to using a binary search! (<a href="https://godbolt.org/g/iBkqja" target="_blank">https://godbolt.org/g/iBkqja</a>)

<img src="https://demofox2.files.wordpress.com/2016/10/clang3.png"/>

MSVC on the other hand just does a bunch of if/else if/else if tests, in both x86 release and x64 release.

[code language="cpp"]
#include &lt;initializer_list&gt;

template&lt;typename U, typename ... T&gt;
bool one_of(U&amp;&amp; u, T &amp;&amp; ... t)
{
    bool match = false;
    (void)std::initializer_list&lt;bool&gt;{ (match = match || u == t)... };
    return match;
}

int main(const int argc, const char *[])
{
00007FF6C05A1000  cmp         ecx,1AB42h  
00007FF6C05A1006  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1008  cmp         ecx,40Fh  
00007FF6C05A100E  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1010  cmp         ecx,0B131h  
00007FF6C05A1016  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1018  cmp         ecx,93BBh  
00007FF6C05A101E  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1020  cmp         ecx,121Bh  
00007FF6C05A1026  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1028  cmp         ecx,0EE9h  
00007FF6C05A102E  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1030  cmp         ecx,0E1Fh  
00007FF6C05A1036  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1038  cmp         ecx,995h  
00007FF6C05A103E  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1040  cmp         ecx,5FEh  
00007FF6C05A1046  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1048  cmp         ecx,5BFh  
00007FF6C05A104E  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1050  cmp         ecx,5  
00007FF6C05A1053  je          main+63h (07FF6C05A1063h)  
00007FF6C05A1055  cmp         ecx,0FFFEh  
00007FF6C05A105B  je          main+63h (07FF6C05A1063h)  
    return one_of(argc, 1471, 2453, 3817, 45361, 37819, 109378, 1534, 4635, 1039, 3615, 5, 65534);
00007FF6C05A105D  xor         al,al  
00007FF6C05A105F  movzx       eax,al  
}
00007FF6C05A1062  ret  
    return one_of(argc, 1471, 2453, 3817, 45361, 37819, 109378, 1534, 4635, 1039, 3615, 5, 65534);
00007FF6C05A1063  mov         al,1  
00007FF6C05A1065  movzx       eax,al  
}
00007FF6C05A1068  ret  
[/code]

<h2>Closing</h2>

This is just one data point about how clang is better than MSVC, but it is a data point.  I'm betting there are more if we looked for them.

This makes me wonder how switch statements do in clang vs msvc, and also makes me wonder if clang ever uses jump tables or more advanced data structures in either switch statements, or other code that does comparison against a potentially large number of compile time constants. Those thoughts are driven by this things seen in this article: <a href="http://www.codeproject.com/Articles/100473/Something-You-May-Not-Know-About-the-Switch-Statem" target="_blank">Something You May Not Know About the Switch Statement in C/C++</a>

The examples above used C++14 level C++ to implement "one_of".  If you can use C++17 level C++, you can also implement it this way, which also does the binary search (Also written by Jason Turner):
<a href="https://godbolt.org/g/RZgjRQ" target="_blank">https://godbolt.org/g/RZgjRQ</a>

PS wouldn't it be nice if godbolt supported MSVC so we could do this sort of analysis on MSVC code?  It's in the works, but unsure when it'll be available.  Apparently licensing isn't the issue, so lets hope it comes sooner rather than later!  If you want it, maybe ping <a href="https://twitter.com/mattgodbolt" target="_blank">@mattgodbolt</a> and let him know how much you want that functionality (:

Have any other clang vs MSVC info? If so, I'd love to hear about it!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5051</wp:post_id>
		<wp:post_date><![CDATA[2016-10-14 09:10:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-14 17:10:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[a-data-point-for-msvc-vs-clang-code-generation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="assembly"><![CDATA[assembly]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495705912;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:368;}i:1;a:1:{s:2:"id";i:650;}i:2;a:1:{s:2:"id";i:502;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Low Tech Homomorphic Encryption</title>
		<link>http://blog.demofox.org/2016/10/19/low-tech-homomorphic-encryption/</link>
		<pubDate>Thu, 20 Oct 2016 03:45:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5090</guid>
		<description></description>
		<content:encoded><![CDATA[Homomorphic encryption is a special type of encryption that lets you do calculations on encrypted values as if they weren't encrypted.  One reason it's desired is that secure computing could be done in the cloud, if practical homomorphic encryption were available.

Homomorphic encryption has been a hot research topic since 2009, when Craig Gentry figured out a way to do it while working on his PhD.  Since then, people have been working on making it better, faster and more efficient.

You can read more about a basic incarnation of his ideas in my blog posts:
<a href="http://blog.demofox.org/2015/09/05/super-simple-symmetric-leveled-homomorphic-encryption-implementation/" target="_blank">Super Simple Symmetric Leveled Homomorphic Encryption Implementation</a>
<a href="http://blog.demofox.org/2015/09/05/improving-the-security-of-the-super-simple-symmetric-leveled-homomorphic-encryption-implementation/" target="_blank">Improving the Security of the Super Simple Symmetric Leveled Homomorphic Encryption Implementation</a>

This post is about a low tech type of homomorphic encryption that anyone can easily do and understand.  There is also some very simple C++ that implements it.

This idea may very well be known about publically, but I'm not aware of any places that talk about it.  I may just be ignorant of them though so ::shrug::

<h2>Quick Update</h2>

I've gotten some feedback on this article, the most often feedback being that this is obfuscation not encryption.  I think that's a fair assessment as the secret value you are trying to protect is in no way transformed, but is just hidden.  This post could easily be titled Homomorphic Obfuscation, and perhaps should be.

To see other feedback and responses to this post, check out the reddit links at the bottom!

<h2>The Idea</h2>

The idea is actually super simple:
<ol>
	<li>Take the value you want to encrypt.</li>
	<li>Hide it in a list of a bunch of other random values, and remember where it is in the list.  The position in the list is your key.</li>
	<li>Send this list to an untrusted party.</li>
	<li>They do the same calculation on every item in the list and send it back.</li>
	<li>Since you know which value was your secret value, you know which answer is the one you care about.</li>
</ol>

At the end of that process, you have the resulting value, and they have no idea what value was your secret value.  You have done, by definition, homomorphic encryption!

There is a caveat of course... they know that your secret value was ONE of the values on the list.

<h2>Security Details</h2>

The thing here is that security is a sliding scale between resource usage (computation time, RAM, network bandwidth, etc) and security.

The list size is your security parameter in this case.

A larger list of random values means that it takes longer to transfer the data, more memory to store it, it takes longer to do the homomorphic computations, but the untrusted party is less sure about what your secret value is.

On the other hand, a shorter list is faster to transmit, easier to store, quicker to compute with, but the untrusted party has a better idea what your secret value is.

For maximal security you can just take this to the extreme - if your secret value is a 32 bit floating point number, you could make a list with all possible 2^32 floating point numbers in it, have them do the calculation and send it back.  You can even do an optimization here and not even generate or send the list, but rather just have the person doing the calculations generate the full 2^32 float list, do the calculations, and send you the results.

That gets pretty big pretty fast though.  That list would actually be 16 gigabytes, but the untrusted party would know almost nothing about your value, other than it can be represented by a 32 bit floating point number.

Depending on your security needs, you might be ok with shortening your list a bit to bring that number down.  Making your list only be one million numbers long (999,999 random numbers and one value you actually care about), your list is only 3.8 megabytes.

Not quite as bad.

<h2>Some Interesting Abilities</h2>

Using this homomorphic encryption, like other homomorphic encryption, you can do computation involving multiple encrypted values. AKA you could multiply two encrypted values together.  To do this, you are going to need to encrypt all values involved using the same key.  In other words, they are going to have to be at the same index in each of their respective lists of random numbers.

Something else that is interesting is that you can also encode MULTIPLE secret values in your encrypted value list.  You could have 1 secret value at index 50 and another at index 100 for instance.  Doing this, you get a sort of homomorphic SIMD setup.

Homomorphic SIMD is actually a real thing in other homomorphic encryption methods as well.  Check out this paper for instance:
<a href="http://homes.esat.kuleuven.be/~fvercaut/papers/DCC2011.pdf" target="_blank">Fully Homomorphic SIMD Operations</a>

The only problem with homomorphic SIMD is that adding more secret values to the same encrypted list decreases the security, since there are more values in the list that you don't want other people to know about.

You can of course also modify encrypted values by unencrypted values.  You could multiply an encrypted value by 3, by multiplying every value in the list by 3.

<h2>Extending to Public Key Cryptography</h2>

If you wanted to use asymmetric key cryptography (public/private keys) instead of symmetric key cryptography, that is doable here too.

What you would do is have the public key public as per usual, and that key would be used in a public key algorithm to encrypt the index of the secret value in the random list.

Doing this, the person who has the private key would be able to receive the list and encrypted index, decrypt the index, and then get the secret value out using that index.

<h2>Sample Code Tests</h2>

The sample code only does Symmetric key encryption, and does these 3 tests:
<ol>
	<li>Encrypts two floating point numbers into a single list, SIMD style, does an operation on the encrypted values, then unencrypts and verifies the results.</li>
	<li>Does the same with two sets of floats (three floats in each set), to show how you can make encrypted values interact with each other. Does the operation, then unencrypts and verifies the results.</li>
	<li>Encrypts three values of a 3 byte structure, does an operation on the encrypted values, then unencrypts and verifies the results.</li>
</ol>

All secret data was hidden in lists of 10,000,000 random values. That made the first two tests (the ones done with 4 byte floats) have encrypted files of 38.1MB (40,000,000 bytes), and the last test (the one done with a 3 byte struct) had a file size of 28.6 MB (30,000,000 bytes).

Here are the timing of the above tests:

<img src="https://demofox2.files.wordpress.com/2016/10/LTHE.png"/>

<h2>Sample Code</h2>

Here is the header, LTHE.h:

[code language="cpp"]
/*

Written by Alan Wolfe
http://blog.demofox.org
https://twitter.com/Atrix256

*/

#pragma once
#include &lt;vector&gt;
#include &lt;random&gt;

// A static class with template functions in it.
// A namespace would be nice, except I want to hide some things as private.
class LTHE
{
public:

    //=================================================================================
    template &lt;typename T&gt;
    static bool Encrypt (std::vector&lt;T&gt; values, size_t listSize, const char* fileName, std::vector&lt;size_t&gt;&amp; keys, bool generateKeys = true)
    {
        // Make sure we have a list that is at least as long as the values we want to encrypt
        if (values.size() &gt; listSize)
        {
            fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): values.size() &gt; listSize.\n&quot;);
            return false;
        }

        // Generate a list of keys if we are told to
        // Ideally you want to take the first M items of a cryptographically secure shuffle
        // of N items.
        // This could be done with format preserving encryption or some other method
        // to make it not roll and check, and also more secure random.
        if (generateKeys)
        {
            keys.clear();
            for (size_t i = 0, c = values.size(); i &lt; c; ++i)
            {
                size_t newKey;
                do
                {
                    newKey = RandomInt&lt;size_t&gt;(0, listSize - 1);
                }
                while (std::find(keys.begin(), keys.end(), newKey) != keys.end());
                keys.push_back(newKey);
            }
        }

        // make a file of random values, size of T, count of &lt;listSize&gt; 
        FILE *file = fopen(fileName, &quot;w+b&quot;);
        if (!file)
        {
            fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not open %s for writing.\n&quot;, fileName);
            return false;
        }

        // Note: this may not be the most efficient way to generate this much random data or 
        // write it all to the file.
        // In a real crypto usage case, you'd want a crypto secure random number generator.
        // You'd also want to make sure the random numbers had the same properties as your
        // input values to help anonymize them better.
        // Like if your numbers are not whole numbers, you don't want to generate only whole numbers.
        // Or if your numbers are salaries, you may not want purely random values, but more &quot;salaryish&quot;
        // looking numbers.
        // You could alternately just do all 2^N possible values which would definitely anonymize
        // the values you wanted to encrypt.  This is maximum security, but also takes most
        // memory and most processing time.
        size_t numUint32s = (listSize * sizeof(T)) / sizeof(uint32_t);
        size_t numExtraBytes = (listSize * sizeof(T)) % sizeof(uint32_t);
        for (size_t i = 0; i &lt; numUint32s; ++i)
        {
            uint32_t value = RandomInt&lt;uint32_t&gt;();
            if (fwrite(&amp;value, sizeof(value), 1, file) != 1)
            {
                fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not write random numbers (uint32s).\n&quot;);
                fclose(file);
                return false;
            }
        }
        for (size_t i = 0; i &lt; numExtraBytes; ++i)
        {
            uint8_t value = RandomInt&lt;uint8_t&gt;();
            if (fwrite(&amp;value, sizeof(value), 1, file) != 1)
            {
                fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not write random numbers (extra bytes).\n&quot;);
                fclose(file);
                return false;
            }
        }

        // Now put the values in the file where they go, based on their key
        for (size_t i = 0, c = values.size(); i &lt; c; ++i)
        {
            long pos = (long)(keys[i] * sizeof(T));
            if (fseek(file, pos, SEEK_SET) != 0)
            {
                fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not fseek.\n&quot;);
                fclose(file);
                return false;
            }
            if (fwrite(&amp;values[i], sizeof(values[i]), 1, file) != 1)
            {
                fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not write secret value.\n&quot;);
                fclose(file);
                return false;
            }
        }

        // close file and return success
        fclose(file);
        return true;
    }

    //=================================================================================
    template &lt;typename T, typename LAMBDA&gt;
    static bool TransformHomomorphically (const char* srcFileName, const char* destFileName, const LAMBDA&amp; function)
    {
        // open the source and dest file if we can
        FILE *srcFile = fopen(srcFileName, &quot;rb&quot;);
        if (!srcFile)
        {
            fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not open %s for reading.\n&quot;, srcFileName);
            return false;
        }
        FILE *destFile = fopen(destFileName, &quot;w+b&quot;);
        if (!destFile)
        {
            fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not open %s for writing.\n&quot;, destFileName);
            fclose(srcFile);
            return false;
        }

        // Process the data in the file and write it back out.
        // This could be done much better.
        // We could read more from the file at once.
        // We could use SIMD.
        // We could go multithreaded.
        // We could do this on the GPU for large data sets and longer transformations! Assuming data transfer time isn't too prohibitive.
        // We could decouple the disk access from processing, so it was reading and writing while it was processing.
        const size_t c_bufferSize = 1024;
        std::vector&lt;T&gt; dataBuffer;
        dataBuffer.resize(c_bufferSize);
        size_t elementsRead;
        do
        {
            // read data from the source file
            elementsRead = fread(&amp;dataBuffer[0], sizeof(T), c_bufferSize, srcFile);

            // transform the data
            for (size_t i = 0; i &lt; elementsRead; ++i)
                dataBuffer[i] = function(dataBuffer[i]);

            // write the transformed data to the dest file
            if (fwrite(&amp;dataBuffer[0], sizeof(T), elementsRead, destFile) != elementsRead)
            {
                fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not write transformed elements.\n&quot;);
                fclose(srcFile);
                fclose(destFile);
                return false;
            }
        }
        while (!feof(srcFile));

        // close files and return success
        fclose(srcFile);
        fclose(destFile);
        return true;
    }

    //=================================================================================
    template &lt;typename T, typename LAMBDA&gt;
    static bool TransformHomomorphically (const char* src1FileName, const char* src2FileName, const char* destFileName, const LAMBDA&amp; function)
    {
        // open the source and dest file if we can
        FILE *srcFile1 = fopen(src1FileName, &quot;rb&quot;);
        if (!srcFile1)
        {
            fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not open %s for reading.\n&quot;, src1FileName);
            return false;
        }
        FILE *srcFile2 = fopen(src2FileName, &quot;rb&quot;);
        if (!srcFile2)
        {
            fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not open %s for reading.\n&quot;, src2FileName);
            fclose(srcFile1);
            return false;
        }
        FILE *destFile = fopen(destFileName, &quot;w+b&quot;);
        if (!destFile)
        {
            fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not open %s for writing.\n&quot;, destFileName);
            fclose(srcFile1);
            fclose(srcFile2);
            return false;
        }

        // Process the data in the file and write it back out.
        // This could be done much better.
        // We could read more from the file at once.
        // We could use SIMD.
        // We could go multithreaded.
        // We could do this on the GPU for large data sets and longer transformations! Assuming data transfer time isn't too prohibitive.
        // We could decouple the disk access from processing, so it was reading and writing while it was processing.
        const size_t c_bufferSize = 1024;
        std::vector&lt;T&gt; dataBuffer1, dataBuffer2;
        dataBuffer1.resize(c_bufferSize);
        dataBuffer2.resize(c_bufferSize);
        size_t elementsRead1;
        size_t elementsRead2;
        do
        {
            // read data from the source files
            elementsRead1 = fread(&amp;dataBuffer1[0], sizeof(T), c_bufferSize, srcFile1);
            elementsRead2 = fread(&amp;dataBuffer2[0], sizeof(T), c_bufferSize, srcFile2);

            if (elementsRead1 != elementsRead2)
            {
                fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Different numbers of elements in each file!\n&quot;);
                fclose(srcFile1);
                fclose(srcFile2);
                fclose(destFile);
                return false;
            }

            // transform the data
            for (size_t i = 0; i &lt; elementsRead1; ++i)
                dataBuffer1[i] = function(dataBuffer1[i], dataBuffer2[i]);

            // write the transformed data to the dest file
            if (fwrite(&amp;dataBuffer1[0], sizeof(T), elementsRead1, destFile) != elementsRead1)
            {
                fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not write transformed elements.\n&quot;);
                fclose(srcFile1);
                fclose(srcFile2);
                fclose(destFile);
                return false;
            }
        }
        while (!feof(srcFile1));

        // close files and return success
        fclose(srcFile1);
        fclose(srcFile2);
        fclose(destFile);
        return true;
    }

    //=================================================================================
    template &lt;typename T&gt;
    static bool Decrypt (const char* fileName, std::vector&lt;T&gt;&amp; values, std::vector&lt;size_t&gt;&amp; keys)
    {
        // Open the file if we can
        FILE *file = fopen(fileName, &quot;rb&quot;);
        if (!file)
        {
            fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not open %s for reading.\n&quot;, fileName);
            return false;
        }

        // Read the values from the file.  The key is their location in the file.
        values.clear();
        for (size_t i = 0, c = keys.size(); i &lt; c; ++i)
        {
            long pos = (long)(keys[i] * sizeof(T));
            if (fseek(file, pos, SEEK_SET) != 0)
            {
                fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not fseek.\n&quot;);
                fclose(file);
                return false;
            }
            T value;
            if (!fread(&amp;value, sizeof(T), 1, file))
            {
                fprintf(stderr, &quot;ERROR in &quot; __FUNCTION__ &quot;(): Could not decrypt value for key.\n&quot;);
                fclose(file);
                return false;
            }
            values.push_back(value);
        }

        // Close file and return success
        fclose(file);
        return true;
    }

private:
    template &lt;typename T&gt;
    static T RandomInt (T min = std::numeric_limits&lt;T&gt;::min(), T max = std::numeric_limits&lt;T&gt;::max())
    {
        static std::random_device rd;
        static std::mt19937 mt(rd());
        static std::uniform_int&lt;T&gt; dist(min, max);
        return dist(mt);
    }
};
[/code]

And here is the test program, main.cpp:

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &quot;LTHE.h&quot;
#include &lt;chrono&gt;

//=================================================================================
// times a block of code
struct SBlockTimer
{
    SBlockTimer()
    {
        m_start = std::chrono::high_resolution_clock::now();
    }

    ~SBlockTimer()
    {
        std::chrono::duration&lt;float&gt; seconds = std::chrono::high_resolution_clock::now() - m_start;
        printf(&quot;    %0.2f seconds\n&quot;, seconds.count());
    }

    std::chrono::high_resolution_clock::time_point m_start;
};

//=================================================================================
float TransformDataUnitary (float&amp; value)
{
    return (float)sqrt(value * 2.17f + 0.132);
}

//=================================================================================
float TransformDataBinary (float&amp; value1, float value2)
{
    return (float)sqrt(value1 * value1 + value2 * value2);
}

//=================================================================================
struct SStruct
{
    uint8_t x, y, z;

    static SStruct Transform (const SStruct&amp; b)
    {
        SStruct ret;
        ret.x = b.x * 2;
        ret.y = b.y * 3;
        ret.z = b.z * 4;
        return ret;
    }

    bool operator != (const SStruct&amp; b) const
    {
        return b.x != x || b.y != y || b.z != z;
    }
};

//=================================================================================
int Test_FloatUnitaryOperation ()
{
    printf(&quot;\n----- &quot; __FUNCTION__ &quot; -----\n&quot;);

    // Encrypt the data
    printf(&quot;Encrypting data:  &quot;);
    std::vector&lt;float&gt; secretValues = { 3.14159265359f, 435.0f };
    std::vector&lt;size_t&gt; keys;
    {
        SBlockTimer timer;
        if (!LTHE::Encrypt(secretValues, 10000000, &quot;Encrypted.dat&quot;, keys))
        {
            fprintf(stderr, &quot;Could not encrypt data.\n&quot;);
            return -1;
        }
    }

    // Transform the data
    printf(&quot;Transforming data:&quot;);
    {
        SBlockTimer timer;
        if (!LTHE::TransformHomomorphically&lt;float&gt;(&quot;Encrypted.dat&quot;, &quot;Transformed.dat&quot;, TransformDataUnitary))
        {
            fprintf(stderr, &quot;Could not transform encrypt data.\n&quot;);
            return -2;
        }
    }

    // Decrypt the data
    printf(&quot;Decrypting data:  &quot;);
    std::vector&lt;float&gt; decryptedValues;
    {
        SBlockTimer timer;
        if (!LTHE::Decrypt(&quot;Transformed.dat&quot;, decryptedValues, keys))
        {
            fprintf(stderr, &quot;Could not decrypt data.\n&quot;);
            return -3;
        }
    }

    // Verify the data
    printf(&quot;Verifying data:   &quot;);
    {
        SBlockTimer timer;
        for (size_t i = 0, c = secretValues.size(); i &lt; c; ++i)
        {
            if (TransformDataUnitary(secretValues[i]) != decryptedValues[i])
            {
                fprintf(stderr, &quot;decrypted value mismatch!\n&quot;);
                return -4;
            }
        }
    }

    return 0;
}

//=================================================================================
int Test_FloatBinaryOperation ()
{
    printf(&quot;\n----- &quot; __FUNCTION__ &quot; -----\n&quot;);

    // Encrypt the data
    printf(&quot;Encrypting data:  &quot;);
    std::vector&lt;float&gt; secretValues1 = { 3.14159265359f, 435.0f, 1.0f };
    std::vector&lt;float&gt; secretValues2 = { 1.0f, 5.0f, 9.0f };
    std::vector&lt;size_t&gt; keys;
    {
        SBlockTimer timer;
        if (!LTHE::Encrypt(secretValues1, 10000000, &quot;Encrypted1.dat&quot;, keys))
        {
            fprintf(stderr, &quot;Could not encrypt data.\n&quot;);
            return -1;
        }
        if (!LTHE::Encrypt(secretValues2, 10000000, &quot;Encrypted2.dat&quot;, keys, false)) // reuse the keys made for secretValues1
        {
            fprintf(stderr, &quot;Could not encrypt data.\n&quot;);
            return -1;
        }
    }

    // Transform the data
    printf(&quot;Transforming data:&quot;);
    {
        SBlockTimer timer;
        if (!LTHE::TransformHomomorphically&lt;float&gt;(&quot;Encrypted1.dat&quot;, &quot;Encrypted2.dat&quot;, &quot;Transformed.dat&quot;, TransformDataBinary))
        {
            fprintf(stderr, &quot;Could not transform encrypt data.\n&quot;);
            return -2;
        }
    }

    // Decrypt the data
    printf(&quot;Decrypting data:  &quot;);
    std::vector&lt;float&gt; decryptedValues;
    {
        SBlockTimer timer;
        if (!LTHE::Decrypt(&quot;Transformed.dat&quot;, decryptedValues, keys))
        {
            fprintf(stderr, &quot;Could not decrypt data.\n&quot;);
            return -3;
        }
    }

    // Verify the data
    printf(&quot;Verifying data:   &quot;);
    {
        SBlockTimer timer;
        for (size_t i = 0, c = secretValues1.size(); i &lt; c; ++i)
        {
            if (TransformDataBinary(secretValues1[i], secretValues2[i]) != decryptedValues[i])
            {
                fprintf(stderr, &quot;decrypted value mismatch!\n&quot;);
                return -4;
            }
        }
    }

    return 0;
}

//=================================================================================
int Test_StructUnitaryOperation ()
{
    printf(&quot;\n----- &quot; __FUNCTION__ &quot; -----\n&quot;);

    // Encrypt the data
    printf(&quot;Encrypting data:  &quot;);
    std::vector&lt;SStruct&gt; secretValues = { {0,1,2},{ 3,4,5 },{ 6,7,8 } };
    std::vector&lt;size_t&gt; keys;
    {
        SBlockTimer timer;
        if (!LTHE::Encrypt(secretValues, 10000000, &quot;Encrypted.dat&quot;, keys))
        {
            fprintf(stderr, &quot;Could not encrypt data.\n&quot;);
            return -1;
        }
    }

    // Transform the data
    printf(&quot;Transforming data:&quot;);
    {
        SBlockTimer timer;
        if (!LTHE::TransformHomomorphically&lt;SStruct&gt;(&quot;Encrypted.dat&quot;, &quot;Transformed.dat&quot;, SStruct::Transform))
        {
            fprintf(stderr, &quot;Could not transform encrypt data.\n&quot;);
            return -2;
        }
    }

    // Decrypt the data
    printf(&quot;Decrypting data:  &quot;);
    std::vector&lt;SStruct&gt; decryptedValues;
    {
        SBlockTimer timer;
        if (!LTHE::Decrypt(&quot;Transformed.dat&quot;, decryptedValues, keys))
        {
            fprintf(stderr, &quot;Could not decrypt data.\n&quot;);
            return -3;
        }
    }

    // Verify the data
    printf(&quot;Verifying data:   &quot;);
    {
        SBlockTimer timer;
        for (size_t i = 0, c = secretValues.size(); i &lt; c; ++i)
        {
            if (SStruct::Transform(secretValues[i]) != decryptedValues[i])
            {
                fprintf(stderr, &quot;decrypted value mismatch!\n&quot;);
                return -4;
            }
        }
    }

    return 0;
}

//=================================================================================
int main (int argc, char **argv)
{
    // test doing an operation on a single encrypted float
    int ret = Test_FloatUnitaryOperation();
    if (ret != 0)
    {
        system(&quot;pause&quot;);
        return ret;
    }

    // test doing an operation on two encrypted floats
    ret = Test_FloatBinaryOperation();
    if (ret != 0)
    {
        system(&quot;pause&quot;);
        return ret;
    }

    // test doing an operation on a single 3 byte struct
    ret = Test_StructUnitaryOperation();
    if (ret != 0)
    {
        system(&quot;pause&quot;);
        return ret;
    }
    
    printf(&quot;\nAll Tests Passed!\n\n&quot;);
    system(&quot;pause&quot;);
    return 0;
}
[/code]

If you found this post interesting or useful, or you have anything to add or talk about, let me know!

Reddit discussion:
<a href="https://www.reddit.com/r/programming/comments/58gv4b/low_tech_homomorphic_encryption/" target="_blank">r/programming</a>
<a href="https://www.reddit.com/r/cryptography/comments/58gzbq/low_tech_homomorphic_encryption/" target="_blank">r/cryptography</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5090</wp:post_id>
		<wp:post_date><![CDATA[2016-10-19 19:45:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-20 03:45:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[low-tech-homomorphic-encryption]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="cryptography"><![CDATA[Cryptography]]></category>
		<category domain="category" nicename="encryption-security"><![CDATA[Encryption + Security]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495503418;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3077;}i:1;a:1:{s:2:"id";i:3167;}i:2;a:1:{s:2:"id";i:4281;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_bead41bc9a9a3816f6f1604b99c8e63d]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_9fbb372c39ad4daa83327e32ff9d1406]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Minimizing Code Complexity by Programming Declaratively</title>
		<link>http://blog.demofox.org/2016/11/13/minimizing-code-complexity-by-programming-declaratively/</link>
		<pubDate>Sun, 13 Nov 2016 15:47:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5116</guid>
		<description></description>
		<content:encoded><![CDATA[Writing good code is something all programmers aspire to, but the definition of what actually makes good code can be a bit tricky to pin down.  The idea of good code varies from person to person, from language to language, and also varies between problem domains.  Web services, embedded devices and game programming are few software domains that all have very different needs and so also have very different software development styles, methods and best practices.

I truly believe that we are in the stone ages of software development (ok, maybe the bronze age?), and that 100 years from now, people will be doing things radically differently than we do today because they (or we) will have figured out better best practices, and the languages of the day will usher people towards increased success with decreased effort.

This post is on something called declarative programming.  The idea is nothing new, as prolog from 1972 is a declarative language, but the idea of declarative programming is something I don't think is talked about enough in the context of code quality.

By the end of this read, I hope you will agree that programming declaratively by default is a good best practice that pertains to all languages and problem domains.  If not, leave a comment and let me know why!

<h2>Declarative vs Imperative Programming</h2>

Declarative programming is when you write code that says what to do.  Imperative programming is when you write code that says how to do it.

Below is some C++ code written imperatively.  How long does it take you to figure out what the code is doing?

[code language="cpp"]
	int values[4] = { 8, 23, 2, 4 };
	int sum = 0;
	for (int i = 0; i &lt; 4; ++i)
		sum += values[i];
	int temp = values[0];
	for (int i = 0; i &lt; 3; ++i)
		values[i] = values[i + 1];
	values[3] = temp;
[/code]

Hopefully it didn't take you very long to understand the code, but you had to read it line by line and reason about what each piece was doing.  It may not be difficult, but it wasn't trivial.

Here is the same code with some comments, which helps it be understandable more quickly, assuming the comments haven't become out of date (:

[code language="cpp"]
	// Declare array
	int values[4] = { 8, 23, 2, 4 };

	// Calculate sum
	int sum = 0;
	for (int i = 0; i &lt; 4; ++i)
		sum += values[i];

	// Rotate array items one slot left.
	int temp = values[0];
	for (int i = 0; i &lt; 3; ++i)
		values[i] = values[i + 1];
	values[3] = temp;
[/code]

Here is some declarative code that does the same thing:

[code language="cpp"]
	int values[4] = { 8, 23, 2, 4 };
	int sum = SumArray(values);
	RotateArrayIndices(values, -1);
[/code]

The code is a lot quicker and easier to understand.  In fact the comments aren't even needed anymore because the code is basically what the comments were.

Comments are often declarative, saying what to do right next to the imperative code that says how to do it.  If your code is also declarative though, there is no need for the declarative comments because they are redundant!  In fact, if you decide to start trying to write code more declaratively, one way to do so is if you ever find yourself writing a declarative comment to explain what some code is doing, wrap it in a new function, or see if there is an existing function you ought to be using instead.

As a quick tangent, you can use the newer C++ features to make code more declarative, like the below.  You arguably should be doing that when possible, if your code base uses STL, a custom STL implementation, or an in house STL type replacement, but I want to stress that this is a completely separate topic than whether or not we should be using new C++ features.  Some folks not used to STL will find the below hard to read compared to the last example, which takes away from the main point.  So, if you aren't a fan of STL due to it's readability (I agree!), or it's performance characteristics (I also agree!), don't worry about it.  For people on the other side of the fence, you can take this as a pro STL argument though, as it does make code more declarative, if the readability and perf things aren't impacting you.

[code language="cpp"]
	std::array&lt;int,4&gt; values = { 8, 23, 2, 4 };
	int sum = std::accumulate(values.begin(), values.end(), 0);
	std::rotate(values.begin(), values.begin() + 1, values.end());
[/code]

<h2>We Already Live in a Semi-Declarative World</h2>

When reading the tip about using (declarative) comments as a hint for when to break some functionality out into another function, you may be thinking to yourself: "Wait, isn't that just the rule about keeping functions small, like to a few lines per function?"

Yeah, that is true.  There is overlap between that rule and writing declarative code.  IMO declarative code is a more general version of that rule.  That rule is part of making code declarative, and gives some of the benefits, but isn't the whole story.

The concept of D.R.Y. "Don't Repeat Yourself" also ends up causing your code to become more declarative.  When you are repeating yourself, it's often because you are either duplicating code, or because there is boiler plate code that must be added in multiple places to make something work.  By applying D.R.Y. and making a single authoritative source of your information or work, you end up taking imperative details out of the code, thus making what remains more declarative.  For more information on that check out this post of mine: <a target="_blank" href="http://blog.demofox.org/2013/05/03/macro-lists-for-the-win/">Macro Lists For The Win</a>

<h2>TDD</h2>

If your particular engineering culture uses TDD (test driven development), you may also say "Hey, this isn't actually anything special, this is also what you get when you use TDD."

Yes, that is also true.  Test driven development forces you to write code such that each individual unit of work is broken up into it's own contained, commonly stateless, function or object.

It's suggested that the biggest value of TDD comes not from the actual testing, but from how TDD forces you to organize your code into small logical units of work, that are isolatable from the rest of the code.

In other words, TDD forces you to make smaller functions that do exactly what they say by their name and nothing else.  Sound familiar?  Yep, that is declarative programming.

<h2>Compilers, Optimizers and Interpreters</h2>

The whole goal of compilers, optimizers and interpreters is to make it so you the coder can be more declarative and less imperative.

Compilers make it so you don't have to write assembly (assembly being just about as imperative as you can get!).  You can instead write higher level concepts about what you want done - like loop over an array and sum up the values - instead of having to write the assembly (or machine code!) to load values into memory or registers, do work, and write them back out to memory or registers.

Similarly, the whole goal of optimizers are to take code where you describe what you want to happen, and find a way to do the equivalent functionality in a faster way.  In other words, you give the WHAT and it figures out the HOW.  That is declarative programming.

Interestingly, switch statements are declarative as well.  You tell the compiler what items to test for at run time but leave it up to the compiler to figure out how to test for them.  It turns out that switch statements can decide at compile time whether they want to use binary searching, if/else if statements, or other tricks to try and make an efficient lookup for the values you've provided.

Surprised to hear that? Give this a read: <a target="_blank" href="http://www.codeproject.com/Articles/100473/Something-You-May-Not-Know-About-the-Switch-Statem">Something You May Not Know About the Switch Statement in C/C++</a>

Similarly, profile guided optimization (PGO) is a way for the optimizer to know how your code actually behaves at runtime, to get a better idea at what machine code it ought to generate to be more optimal.  Again, it's taking your more declarative high level instructions, and creating imperative low level instructions that actually handle the HOW of doing what your code wants to do in a better way.

<h2>C#</h2>

If you've spent any time using C#, I'll bet you've come to the same conclusion I have: If it takes you more than one line of code to do a single logical unit of work (read a file into a string, sort a list, etc), then you are probably doing it wrong, and there is probably some built in functionality already there to do it for you.

When used "correctly", C# really tends to be declarative.

<h2>C++ Advancements Towards Being Declarative</h2>

In the old days of C, there were no constructors or destructors.  This meant that you had to code carefully and initialize, deinitialize things at just the right time.

These were imperative details that if you got wrong, would cause bugs and make a bad day for you and the users of your software.

C++ improved on this problem by adding constructors and destructors.  You could now put these imperative details off in another section and then not worry about it in the bulk of the code.  C++ made C code more declarative by letting you focus more on the WHAT to do, and less on HOW to do it, in every line of code.

In more recent years, we've seen C++ get a lot of upgrades, many of which make C++ more declarative.  In other words, common things are now getting language and/or STL library support.

For one, there are many operations built in which people used to do by hand that are now built in - such as std::sort or std::qsort.  You no longer have to write out a sorting algorithm imperatively, you just use std::sort and move on.

Another really good example of C++ getting more declarative is lambdas.  Lambdas look fancy and new, but they are really just a syntactic shortcut to doing something we could do all along.  When you make a lambda, the compiler makes a class for you that overloads the parentheses operator, has storage for your captures and captures those captures.  A struct that looks like this is called a functor and has existed for a long time before lambdas ever entered C++.  The only difference is that if you want to use a functor now, you don't have to go through a bunch of nitty gritty imperative details for making your functor class.  Now, you just defined a lambda and move on.

<h2>Domain Specific Languages</h2>

Domain specific languages - aka DSLs - exist to let people write code meant for specific purposes. Some examples of DSLs are:
<ul>
	<li>HTML - what we use to make static webpages</li>
	<li>XSLT - a language to transform XML data into other data</li>
	<li>SQL - a language to query information from databases</li>
	<li>Regex - a language to search text</li>
</ul>

Believe it or not, DSL is a synonym of declarative programming languages.

HTML for instance completely cuts out things like loops, memory allocation and image loading, and lets you just specify how a web page should look.  HTML is declarative because you deal only with the issues in the problem space, not with the imperative details of how to make it all happen.

It's similar for the others in the list, and other DSLs not on the list.  They all try to remove complexity you don't care about to try and distill a language that deals only with the things in the problem space.

<h2>Our Job As Programmers</h2>

As programmers, it's only one part of our job to make "good code" that is easy to read and easy to maintain, but many non programmers would laugh to hear that we spend so much time thinking about that.

The other part of our job is the end result of what our program does.  This is what non programmers focus more heavily on of course, and is ultimately what makes software successful or not - at least in the short term.  Software needs to do good stuff well to be successful, but if you don't make good code, you are going to sink your business in bugs, inflexibility, maintenance costs, etc.

Programmers mainly either write code for use by other programmers (such as libraries and APIs), or they make software for use by other people.

In both cases, the job is really that we are trying to hide away imperative details (implementation complexity) and give our customers a domain specific language to do what they want to do in the easiest and best way possible.  It's very important in both cases that the users of your API or the users of your software don't have to deal with things outside the problem space.  They want to work declaratively, saying only what to do, and have our software handle the imperative details of how to do it.  They paid for the software so they didn't have to deal with those details.

As an example, when you work in an excel spreadsheet and it does an average of a row of columns, it doesn't make you decide whether it should use SIMD instructions to do the math or scalar instructions.  You don't really care, and it almost certainly doesn't matter enough to anyone using excel which to do, so excel just does whatever it does internally to give you what you asked for.

It can be a challenge knowing what needs to be hidden away when making an API or software for users, but that comes from understanding what it is that your customers actually need and what they are trying to do, which is already a super important step.

The good news is that you don't have to perfectly match the customers needs to improve their lives.  Any imperative details that you can remove is a win.  I'm not talking about taking away abilities that people want and should have, I'm talking about removing "chores", especially ones that if done wrong can cause problems - like nulling out a pointer after deleting it, or initializing all members of a class when creating an object, or the details of loading an image into memory.

None of this should really be that surprising to anyone, but hopefully thinking of these things in a declarative vs imperative way formalizes and generalizes some ideas.

<h2>Why Wouldn't You Program Declaratively?</h2>

Purely declarative programming means that you only describe the things you care about and nothing else.  If this is true, why wouldn't you ALWAYS program declaratively?  In fact, why do imperative languages even exist?  Why would you ever want to waste time dealing with what you by definition did not care about?

Well, for one, it's impossible to nail down what it is exactly that people do and do not care about, especially in something like a programming language which is likely to be used for lots of different purposes by lots of different people.  It's been real eye opening seeing the diverse needs of the C++ community in recent years for instance.  As a C++ game programmer, surrounded by primarily C++ game programmers, I thought I knew what the language needed, but there are lots of things I never considered because I don't have a need for, unlike some other C++ programmers out there.

Another big point is that declarative languages by definition are a sort of black box.  You tell it what to do but not how.  It has to figure out the details of how to do it in a good way.  The problem is that the compiler (or similar process) has limited abilities to make these choices, and also has limited information about the problem space.

For instance, a declarative language may let you work with a set and say "put item X into the set" and "does item Y exist in this set?".  You can imagine it could perhaps use a hash table, where each hash bucket was a linked list of values.  This way, when you queried if the item Y was in the set, it could hash it, then do comparisons against whatever items were in that bucket.

That implementation is fairly reasonable for many programs.

What if instead, you want to keep a set of unique visitors to a popular website, like say google.com?  That set is going to use a ton of memory and/or be very slow because it's going to be HUGE.

In that case, someone is likely to go with a probabilistic algorithm perhaps (maybe a <a href="http://blog.demofox.org/2015/02/08/estimating-set-membership-with-a-bloom-filter/"  target="_blank">bloom filter</a>), where it's ok that the answer isn't exactly right, because the memory usage and computation time drops off significantly going probabilistic, and actually makes the feature possible.

The declarative language is likely not going to be smart enough to figure out that it should use a probabilistic algorithm, and nobody ever told it that it could.

Sure, you could add probabilistic set support to the declarative language, and people could specifically ask for it when they need it (they care about it, so it should be part of the DSL), but we could make this argument about many other things.  The point is just that without super smart AI and lots more information (and freedom to make decisions independently of humans), a declarative language is going to be pretty limited in how well it can do in all situations.

Because of this, it's important for the programmer to be able to profile processing time and other resource usage, and be able to "go imperative" where needed to address any problems that come up.

This is similar to how when writing C++, when we REALLY NEED TO, we can write some inline assembly.  The C++ is the more declarative language, that allows you to write more imperative assembly when you need to.

It's important to note that I'm not saying that declarative programming is inherently slower than imperative programming though.  Declarative languages can actually be much faster and more efficient with resources believe it or not.  In the example at the beginning of the post where i used std::rotate to replace a loop that moved items in an array, it's possible that std::rotate uses a memmove to move the bulk of the items, instead of an item by item copy like what I coded.  That would be a much better solution, especially for large array sizes.

So, declarative programming isn't necessarily slower than imperative programming, but, for the times it isn't doing well enough, we need a way to turn off "auto pilot" mode and give imperative instructions for how to do something better.

In more human terms:  If you asked someone to go get the mail, you likely will say "can you get my mail? here's the key and it's in box 62.".  You wouldn't tell the person how to walk to the door, open it, walk out, close it, etc.  However, if there were special instructions such as "please check the package locker too", you would give those details.

Basically, you give only the details that are needed, as simply as possible, but reserve the right to give as fine grained details as needed, when they are needed.

So, i propose this:

<ul>
	<li>We as programmers ought to be programming declaratively by default, only resorting to imperative programming when we need to.</li>
	<li>Our job is to empower our customers to work declaratively by making them good DSLs (aka interfaces), but we should remember that it <strong>might</strong> be important to let them also go more imperative when needed.</li>
</ul>

Thanks for reading, and let me know your thoughts!

<h2>Links</h2>

Here are some interesting links about managing code complexity and writing high quality code:
<a target="_blank" href="https://www.youtube.com/watch?v=rI8tNMsozo0&list=PLbWXzspNE_b5M2ZTdn0_dy3xWrR1yzldO&index=7">Youtube: Simplicity Matters (36 minutes)</a>
<a target="_blank" href="http://sam-koblenski.blogspot.com/2014/01/functions-should-be-short-and-sweet-but.html">Functions Should Be Short And Sweet, But Why?</a>
<a target="_blank" href="http://bitsquid.blogspot.com/2011/01/managing-coupling.html">Bitsquid: Managing Coupling</a>
<a target="_blank" href="http://blog.thinkful.com/post/71644244908/thoughts-on-declarative-and-imperative-languages">Thoughts on Declarative and Imperative Languages</a>
<a target="_blank" href="http://codenugget.co/2015/03/05/declarative-vs-imperative-programming-web.html">Declarative vs. Imperative Programming for the Web</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5116</wp:post_id>
		<wp:post_date><![CDATA[2016-11-13 07:47:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-11-13 15:47:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[minimizing-code-complexity-by-programming-declaratively]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="coding-style"><![CDATA[Coding Style]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495646951;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3904;}i:1;a:1:{s:2:"id";i:2460;}i:2;a:1:{s:2:"id";i:5202;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_4089aad62a1b338cfc31b84049b7b09d]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Secret to Writing Fast Code / How Fast Code Gets Slow</title>
		<link>http://blog.demofox.org/2016/12/06/the-secret-to-writing-fast-code-how-fast-code-gets-slow/</link>
		<pubDate>Wed, 07 Dec 2016 01:25:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5202</guid>
		<description></description>
		<content:encoded><![CDATA[This is a "soft tech" post.  If that isn't your thing, don't worry, I'll be returning to some cool "hard tech" and interesting algorithms after this.  I've been abusing the heck out of the GPU texture sampler lately, so be on the lookout for some posts on that soon (;

I'm about to show you some of the fastest code there is.  It's faster than the fastest real time raytracer, it's faster than <a href="https://en.wikipedia.org/wiki/Duff's_device" target="_blank">Duff's Device</a>.

Heck, despite the fact that it runs on a classical computer, it runs faster than <a href="https://en.wikipedia.org/wiki/Shor's_algorithm" target="_blank">Shor's Algorithm</a> which uses quantum computing to factor integers so quickly that it breaks modern cryptographic algorithms.

This code also runs faster than <a href="https://en.wikipedia.org/wiki/Grover's_algorithm" target="_blank">Grover's Algorithm</a> which is another quantum algorithm that can search an unsorted list in O(sqrt(N)).

Even when compiled in debug it runs faster than all of those things.

Are you ready? here it is...

[code language="cpp"]
// Some of the fastest code the world has ever seen
int main (int argc, char **argc)
{
    return 0;
}
[/code]

Yes, the code does nothing and that is precisely why it runs so fast.

<h1>The Secret to Writing Fast Code</h1>

The secret to writing fast code, no matter what you are writing is simple:  Don't do anything that is too slow.

Follow me on a made up example to see what I'm talking about.

Let's say you started with a main() function like i showed above and you decided you want to make a real time raytracer that runs on the CPU.

First thing you do is figure out what frame rate you want it to run at, at the desired resolution.  From there, you know how many milliseconds you have to render each frame, and now you have a defined budget you need to stay inside of.  If you stay in that budget, you'll consider it a real time raytracer.  If you go outside of that budget, it will no longer be real time, and will be a failed program.

You may get camera control working and primary rays intersecting a plane, and find you've used 10% of your budget and 90% of the budget remains.  So far so good.

Next up you add some spheres and boxes, diffuse and specular shade them with a directional light and a couple point lights.  You find that you've used 40% of your budget, and 60% remains.  We are still looking good.

Next you decide you want to add reflection and refraction, allowing up to 3 ray bounces.  You find you are at 80% of your budget and are still looking good.  We are still running fast enough to be considered real time.

Now you say to yourself "You know what? I'm going to do 4x super sampling for anti aliasing!", so you shoot 4 rays out per pixel instead of 1 and average them.

You profile and uh oh! You are at 320% of your budget!  Your ray tracer is no longer real time!

What do you do now?  Well, hopefully it's obvious: DON'T DO THAT, IT'S TOO SLOW!

So you revert it and maybe drop in some <a href="https://en.wikipedia.org/wiki/Fast_approximate_anti-aliasing" target="_blank">FXAA</a> as a post processing pass on your render each frame.  Now you are at 95% of your budget let's say.

Now you may want to add another feature, but with only 5% of your budget left you probably don't have much performance to spare to do it.

So, you implement whatever it is, find that you are at 105% of your budget.

Unlike the 4x super sampling, which was 220% overbudget, this new feature being only 5% over budget isn't THAT much.  At this point you could profile something that already exists (maybe even your new feature) and see if you can improve it's performance, or if you can find some clever solution that gives you a performance boost, at the cost of things you don't care about, you can do that to get some performance back.  This is a big part of the job as a successful programmer / software engineer - make trade offs where you gain benefits you care about, at the cost of things you do not care about.

At this point, you can also decide if this new feature is more desired than any of the existing features.  If it is, and you can cut an old feature you don't care about anymore, go for it and make the trade.

Rinse and repeat this process with new features and functionality until you have the features you want, that fit within the performance budget you have set.

Follow this recipe and you too will have your very own real time raytracer (BTW related:<a href="http://blog.demofox.org/2016/01/16/making-a-ray-traced-snake-game-in-shadertoy/" target="_blank">Making a Ray Traced Snake Game in Shadertoy</a>).

Maintaining a performance budget isn't magic.  It's basically subtractive synthesis.  Carve time away from your performance budget by adding a feature, then optimize or remove features if you are over budget.  Rinse and repeat until the sun burns out.

Ok, so if it's so easy, why do we EVER have performance problems?

<h2>How Fast Code Gets Slow</h2>

Performance problems come up when we are not paying attention.  Sometimes we cause them for ourselves, and sometimes things outside of our control cause them.

The biggest way we cause performance problems for ourselves is by NOT MEASURING.

If you don't know how your changes affect performance, and performance is something you care about, you are going to have a bad time.

If you care about performance, measure performance regularly!  Profile before and after your changes and compare the differences.  Have automated tests that profile your software and report the results.  Understand how your code behaves in the best and worst case.  Watch out for algorithms that sometimes take a lot longer than their average case.  Stable algorithms make for stable experiences (and stable frame rates in games).  This is because algorithms that have "perf spikes" sometimes line up on the same frame, and you'll have more erratic frame rate, which makes your game seem much worse than having a stable but lower frame rate.

But, again, performance problems aren't always the programmers fault.  Sometimes things outside of our control change and cause us perf problems.

Like what you might ask?

Well, let's say that you are tasked with writing some very light database software which keeps track of all employee's birthdays.

Maybe you use a hash map to store birthdays.  The key is the string of the person's name, and the value is a unix epoch timestamp.

Simple and to the point.  Not over-engineered.

Everything runs quickly, your decisions about the engineering choices you made were appropriate and your software runs great.

Now, someone else has a great idea - we have this database software you wrote, what if we use it to keep track of all of our customers and end user birthdays as well?

So, while you are out on vacation, they make this happen.  You come back and the "database" software you made is running super slow.  There are hundreds of thousands of people stored in the database, and it takes several seconds to look up a single birthday.  OUCH!

So hotshot, looks like your code isn't so fast huh?  Actually no, it's just that your code was used for something other than the original intended usage case.  If this was included in the original specs, you would have done something different (and more complex) to handle this need.

This was an exaggerated example, but this sort of thing happens ALL THE TIME.

If you are working on a piece of software, and the software requirements change, it could turn any of your previous good decisions into poor decisions in light of the new realities.

However, you likely don't have time to go back and re-think and possibly re-work every single thing you had written up to that point.  You move onward and upward, a little more heavy hearted.

The target moved, causing your code to rot a bit, and now things are likely in a less than ideal situation.  You wouldn't have planned for the code you have with the info you have now, but it's the code you do have, and the code you have to stick with for the time being.

Every time that happens, you incur a little more tech debt / code complexity and likely performance problems as well.

You'll find that things run a little slower than they should, and that you spend more time fighting symptoms with small changes and somewhat arbitrary rules - like telling people not to use name lengths more than 32 characters for maximum performance of your birthday database.

Unfortunately change is part of life, and very much part of software development, and it's impossible for anyone to fully predict what sort of changes might be coming.

Those changes are often due to business decisions (feedback on product, jockying for a new position in the marketplace, etc), so are ultimately what give us our paychecks and are ultimately good things.  Take it from me, who has worked at ~7 companies in 15 years.  Companies that don't change/adapt die.

So, change sucks for our code, but it's good for our wallets and keeps us employed :P

Eventually the less than ideal choices of the past affecting the present will reach some threshold where something will have to be done about it.  This will likely happen at the point that it's easier to refactor some code, than to keep fighting the problems it's creating by being less than ideal, or when something that really NEEDS to happen CAN'T happen without more effort than the refactor would take.

When that happens, the refactor comes in, where you DO get to go back and rethink your decisions, with knowledge of the current realities.

The great thing about the refactor is that you probably have a lot of stuff that your code is doing which it doesn't really even NEED to be doing.

Culling that dead functionality feels great, and it's awesome watching your code become simple again.  It's also nice not having to explain why that section of code behaves the way it does (poorly) and the history of it coming to be.  "No really, I do know better, but...!!!"

One of the best feelings as a programmer is looking at a complex chunk of code that has been a total pain, pressing the delete key, and getting a little bit closer back to the fastest code in the world:

[code language="cpp"]
// Some of the fastest code the world has ever seen
int main (int argc, char **argc)
{
    return 0;
}
[/code]

PS: Another quality of a successful engineer is being able to constantly improve software as it's touched.  If you are working in an area of code, and you see something ugly that can be fixed quickly and easily, do it while you are there.  Since the only constant in software development is change, and change causes code quality to continually degrade, make yourself a force of continual code improvement and help reverse the flow of the code flowing into the trash can.

<h2>Engines</h2>

In closing, I want to talk about game engines - 3rd party game engines, and re-using an engine from a different project.  This also applies to using middleware.

Existing engines are great in that when you and your team know how to use them, you can get things set up very quickly.  It lets you hit the ground running.

However, no engine is completely generic.  No engine is completely flexible.

That means that when you use an existing engine, there will be some amount of features and functionality which were made without your specific usage case in mind.

You will be stuck in the world where from day 1 you are incurring the tech debt type problems I describe above, but you will likely be unable or unwilling to refactor everything to suit your needs specifically.

I don't mention this to say that engines are bad.  Lots of successful games have used engines made by other people, or re-used engines from previous projects.

However, it's a different kind of beast using an existing engine.

Instead of making things that suit your needs, and then using them, you'll be spending your time figuring out how to use the existing puzzle pieces to do what you want.  You'll also be spending time backtracking as you hit dead ends, or where your first cobbled together solution didn't hold up to the new realities, and you need to find a new path to success that is more robust.

Just something to be aware of when you are looking at licensing or re-using an engine, and thinking that it'll solve all your problems and be wonderful.  Like all things, it comes at a cost!

Using an existing engine does put you ahead of the curve: At day 1 you already have several months of backlogged technical debt!

Unfortunately business realities mean we can't all just always write brand new engines all the time.  It's unsustainable :/

Agree / Disagree / Have something to say?

Leave a comment below, or tweet at me on twitter: <a href="https://twitter.com/Atrix256" target="_blank">@Atrix256</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5202</wp:post_id>
		<wp:post_date><![CDATA[2016-12-06 17:25:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-07 01:25:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[the-secret-to-writing-fast-code-how-fast-code-gets-slow]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495704914;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3724;}i:1;a:1:{s:2:"id";i:1369;}i:2;a:1:{s:2:"id";i:50;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Evaluating Polynomials with the GPU Texture Sampler</title>
		<link>http://blog.demofox.org/2016/12/08/evaluating-polynomials-with-the-gpu-texture-sampler/</link>
		<pubDate>Thu, 08 Dec 2016 14:54:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5276</guid>
		<description></description>
		<content:encoded><![CDATA[This is an extension of a paper I wrote which shows how to use the linear texture sampling capabilities of the GPU to calculate points on Bezier curves.   You store the control points in the texture, then sample along the texture's diagonal to get points on the curve:
<a href="http://blog.demofox.org/2016/02/22/gpu-texture-sampler-bezier-curve-evaluation/" target="_blank">GPU Texture Sampler Bezier Curve Evaluation</a>
<img src="https://demofox2.files.wordpress.com/2016/12/diagram.png"/>

I've been thinking about the items in the "future work" section and found some interesting things regarding polynomials, logic gates, surfaces and volumes.  This is the first post, which deals with evaluating polynomials.

<h1>Evaluating Polynomials</h1>

One of the main points of my paper was that N-linear interpolation (linear, bilinear, trilinear, etc) can be used to evaluate the <a href="http://blog.demofox.org/2015/07/05/the-de-casteljeau-algorithm-for-evaluating-bezier-curves/">De Casteljau algorithm</a> since both things are just linear interpolations of linear interpolations.  (Details on bilinear interpolation here: <a href="http://blog.demofox.org/2015/04/30/bilinear-filtering-bilinear-interpolation/" target="_blank">Bilinear Filtering & Bilinear Interpolation</a>).

This meant that it was also able to calculate <a href="https://en.wikipedia.org/wiki/Bernstein_polynomial" target="_href">Bernstein Polynomials</a> (aka the algebraic form of Bezier curves), since Bernstein polynomials are equivalent to the De Casteljau algorithm.

I started looking around to see what would happen if you messed around with the De Casteljau algorithm a bit, like interpolate at one level by 
$latex t^2$ or $latex t*0.5+0.5$ or by a constant or by another variable completely.  My hope was that I'd be able to make the technique more generic and open it up to a larger family of equations, so people weren't limited to just Bernstein polynomials.

That opened up a pretty deep rabbit hole on polynomial blossoming and something called Symmetric Multiaffine Functions.  There are some great links in the answer here:
<a href="http://math.stackexchange.com/questions/2037843/modifying-and-generalizing-the-de-casteljau-algorithm" target="_blank">Math Stack Exchange: Modifying and Generalizing the De Casteljau Algorithm</a>

In the end, it turned out to be pretty simple though.  It turns out that any polynomial can be converted back and forth from "Power Basis" (which looks like $latex Ax^2+Bx+C$) to "Bernstein Basis" (which looks like $latex A(1-t)^2+B(1-t)t+Ct^2$) so long as they are the same degree.

This isn't the result I was expecting but it is a nice result because it's simple.  I think there is more to be explored by sampling off the diagonal, and using different t values at different stages of interpolation, but this result is worth sharing.

By the way, you could also use curve fitting to try and approximate a higher degree function with a lower degree one, but for this post, I'm only going to be talking about exact conversion from Bernstein polynomials to Power polynomials.

Since we can convert power basis polynomials to Bernstein polynomials, and the technique already works for Bernstein polynomials, that means that if we have some random polynomial, say $latex y=2x^3+4x+2$, that we can make this technique work for that too.  The technique got a little closer to arbitrary equation evaluation.  Neat!

<h1>Converting Power Basis to Bernstein Basis</h1>

I found the details of the conversion process at <a href="http://cagd.cs.byu.edu/~557/text/ch3.pdf" target="_blank">Polynomial Evaluation and Basis Conversion</a> which was linked to by <a href="http://stackoverflow.com/questions/33859199/convert-polynomial-curve-to-bezier-curve-control-points" target="_blank">Math Stack Exchange: Convert polynomial curve to Bezier Curve control points</a>.

This is best explained working through examples, so let's start by converting a quadratic polynomial from power basis to Bernstein basis.

<b>Quadratic Function</b>

$latex y=2x^2+8x+3$

The first thing we do is write the coefficients vertically, starting with the $latex x^0$ coefficient, then the $latex x^1$ coefficient and continuing on to the highest value $latex x^n$:

$latex
\\begin{array}{c}
3 \\\\
8 \\\\
2 \\\\
\\end{array}
$

Next, we need to divide by the <a href="https://en.wikipedia.org/wiki/Binomial_coefficient" target="_blank">Binomial Coefficients</a> (aka the row of <a href="https://en.wikipedia.org/wiki/Pascal%27s_triangle" target="_blank">Pascal's Triangle</a> which has the same number of items as we have coefficients).  In this case we need to divide by: 1,2,1.

$latex
\\begin{array}{c|c}
3 & 3 / 1 = 3 \\\\ 
8 & 8 / 2 = 4 \\\\
2 & 2 / 1 = 2 \\\\
\\end{array}
$

Now we generate a difference table backwards.  it's hard to explain what that is in words, but if you notice, each value is the sum of the value to the left of it, and the one below that.

$latex
\\begin{array}{c|c|c|c}
3 & 3 / 1 = 3 & 7 & 13 \\\\ 
8 & 8 / 2 = 4 & 6 & \\\\
2 & 2 / 1 = 2 &   & \\\\
\\end{array}
$

We are all done.  The control points for the Bezier curve are on the top row (ignoring the left most column).  They are 3,7,13 which makes it so we have the following two equations being equal.  The first is in power basis, the second is in Bernstein basis.

$latex y=2x^2+8x+3$
$latex y=3(1-x)^2+14(1-x)x+13x^2$

Note: don't forget that Bezier curves multiply the control points by the appropriate row in Pascal's triangle.  That's where the 14 comes from in the middle term of the Bernstein polynomial.  We are multiplying the control points 3,7,13 by the row in Pascal's triangle 1,2,1 to get the final coefficients of 3,14,13.

Let's have Wolfram Alpha help us verify that they are equal.

<a href="https://www.wolframalpha.com/input/?i=graph+y%3D2x%5E2%2B8x%2B3,+y%3D3*(1-x)%5E2%2B14x*(1-x)%2B13x%5E2,+from+0+to+1" target="_blank">Wolfram Alpha: graph y=2x^2+8x+3, y=3*(1-x)^2+14x*(1-x)+13x^2, from 0 to 1</a>
<img src="https://demofox2.files.wordpress.com/2016/12/curves.png"/>

Yep, they are equal! If you notice the legend of the graph, wolfram actually converted the Bernstein form back to power basis, and you can see that they are exactly equivalent.

You can also write the Bernstein form like the below, which i prefer, using $latex t$ instead of $latex x$ and also setting $latex s=1-t$.

$latex y=3s^2+14st+13t^2$

<b>Cubic Function</b>

A cubic function is not that much harder than a quadratic function.  After this, you should see the pattern and be able to convert any degree easily.

$latex y=5x^3+9x-4$

Again, the first thing we do is write the coefficients vertically, starting with the constant term.  Note that we don't have an $latex x^2$ term, so it's coefficient is 0.

$latex
\\begin{array}{c}
-4 \\\\
 9 \\\\
 0 \\\\
 5 \\\\
\\end{array}
$

We next divide by the Pascal's triangle row 1,3,3,1.

$latex
\\begin{array}{c|c}
-4 & -4 / 1 = -4 \\\\
 9 &  9 / 3 =  3 \\\\
 0 &  0 / 3 =  0 \\\\
 5 &  5 / 1 =  5 \\\\
\\end{array}
$

Now, make the difference table going backwards again:

$latex
\\begin{array}{c|c|c|c|c}
-4 & -4 / 1 = -4 & -1 & 2 & 10 \\\\
 9 &  9 / 3 =  3 &  3 & 8 & \\\\
 0 &  0 / 3 =  0 &  5 &   & \\\\
 5 &  5 / 1 =  5 &    &   & \\\\
\\end{array}
$

Our Bezier control points are along the top: -4,-1,2,10.  Keeping in mind that the coefficients for a cubic bezier curve are multiplied by 1,3,3,1 we can make the Bernstein form and put it next to our original formula:

$latex y=5x^3+9x-4$
$latex y=-4(1-x)^3-3(1-x)^2x+6(1-x)x^2+10x^3$

Let's check in wolfram alpha again:
<a href="https://www.wolframalpha.com/input/?i=graph+y%3D5x%5E3%2B9x-4,+y%3D-4(1-x)%5E3-3x(1-x)%5E2%2B6x%5E2(1-x)%2B10x%5E3,+from+0+to+1" target="_blank">Wolfram Alpha: graph y=5x^3+9x-4, y=-4(1-x)^3-3x(1-x)^2+6x^2(1-x)+10x^3, from 0 to 1</a>
<img src="https://demofox2.files.wordpress.com/2016/12/curves2.png"/>

And here it is in the cleaner form:

$latex y=-4s^3-3s^2t+6st^2+10t^3$

<h2>Some Notes On Calculating Polynomials with the Texture Sampler</h2>

You may notice that in the comparison graphs i only plotted the graphs from 0 to 1 on the x axis (aka the t axis).  The equations are actually equivalent outside of that range as well, but the technique from my paper only works from the 0 to 1 range because it relies on built in hardware pixel interpolation.  This may sound like a big limitation, but if you know the minimum and maximum value of x that you want to plug into your equation at runtime, you can convert your x into a percent between those values, get the resulting polynomial, convert it to Bernstein form, set up the texture, and then at runtime convert your input parameter into that percent when you do the lookup.  In other words, you squeeze the parts of the function you care about into the 0 to 1 range.

Another issue you will probably hit is that standard RGBA8 textures have only 8 bits per channel and can only store values between 0 and 1.  Since the texture is supposed to be storing your control points, that is bad news.

One way to get around this is to find the largest coefficient value and divide the others by this value.  This will put the coefficients into the 0 to 1 range, which will be able to be stored in your texture.  After sampling the texture, you multiply the result by that scaling value to get the correct answer. 

Scaling won't help having both negative and positive coefficients though.  To handle negative coefficients, you could map the 0-1 space to be from -1 to 1, similar to how we often do it with normal maps and other signed data stored in textures.  After doing the lookup you'd have to unmap it too of course.

You could also solve negative values and scaling problems by squishing the y axis into the 0 to 1 space by subtracting the minimum and dividing by the maximum minus the minimum, similarly to how we squished the x range into 0 to 1.

If you instead move to an RGBAF32 texture, you'll have a full 32 bit float per color channel and won't have problems with either large values or negative values.  You will still have to deal with x only going from 0 to 1 though.

I also want to mention that the hardware texture interpolation works in a X.8 fixed point format.  There are more details in my paper, but that means that you'll get some jagged looking artifacts on your curve instead of a smoothly varying value.  If that is a problem for you in practice, my paper talks about a few ways to mitigate that issue.

Before moving on, I wanted to mention that it's easy to support rational polynomials using this method as well.  A rational polynomial is when you divide one polynomial by another polynomial, and relates to rational Bezier curves, where you divide one curve by another curve (aka you give weights to control points).  Rational curves are more powerful and in fact you can perfectly represent sine and cosine with a quadratic rational polynomial.  More info on that in my paper.

To calculate rational polynomials, you just encode the numerator polynomial in one color channel, and the denominator polynomial in another color channel.  After you sample the texture and get the result of your calculation, you divide the numerator value by the denominator value.  It costs one division in your shader code, but that's pretty cheap for the power it gives you!

Regarding the texture size requirements to store a polynomial of a specific degree...

Every dimension of the texture, and every color channel in that texture, adds a degree.

However, to get the benefit of the degree increase from the color channel, you need to do a little more math in the shader - check my paper for more details!

So, if you wanted to store a quadratic polynomial in a texture, you would need either a 2d texture with 1 color channel, or you could do it with a 1d texture that had 2 color channels.

If you wanted to store a cubic polynomial in a texture, you could use a 3d texture with 1 color channel, or a 2d texture with two color channels (there would be some waste here) or a 1d texture with three color channels.

For a polynomial that had a maximum degree term of 6, you could use a 3d volume texture that had 3 color channels: RGB.

If you need to evaluate a very high degree polynomial, you can actually take multiple texture samples and combine them.

For instance, if you had a 2d texture with a single color channel, you could do a single texture read to get a quadratic.

If you did two texture reads, you would have two quadratics.

If you linearly interpolated between those two quadratics, you would end up with a cubic.

That isn't a very high degree curve but is easier to grasp how they combine.

Taking this up to RGBA 3d volume textures, a single texture read will get you a curve of degree 6.  If you do another read, it will take it to degree 7.  Another read gets you to 8, another to 9, etc.

With support for 4d textures, an RGBA texture read would give you a degree 7 curve.  Another read would boost it to 8, another to 9, another to 10, etc.

Regarding the specific sizes of the textures, in all cases the texture size is "2" on each dimension because we are always just linearly interpolating within a hyper cube of pixel values.  You can increase the size of the texture for piecewise curves, check out the paper for more details on that and other options.

<h2>Closing</h2>

Hopefully you found this useful or interesting!

There may not have been much new information in here for the more math inclined people, but I still think it's worth while to explicitly show how the technique works for both Bernstein polynomials as well as the more common power basis polynomials.

I still think it would be interesting to look at what happens when you sample off of the diagonal, and also what happens if you use different values at different stages of the interpolation.  As an example, instead of just looking up a texture at (t,t) for the (u,v) value to get a quadratic curve point, what if we look up by (t,t^2)?  At first blush, it seems like by doing that we may be able to boost a curve to a higher degree, maybe at the cost of some reduced flexibility for the specific equations we can evaluate?

Next up I'll be writing up some more extensions to the paper involving logic gates, surfaces, and volumes.

Have any feedback, questions or interesting ideas? Let me know!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5276</wp:post_id>
		<wp:post_date><![CDATA[2016-12-08 06:54:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-08 14:54:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[evaluating-polynomials-with-the-gpu-texture-sampler]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495645743;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5413;}i:1;a:1:{s:2:"id";i:4018;}i:2;a:1:{s:2:"id";i:5321;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Failed Experiment: The GPU Texture Sampler is Turing Complete But That Fact is Pretty Useless</title>
		<link>http://blog.demofox.org/2016/12/10/failed-experiment-the-gpu-texture-sampler-is-turing-complete-but-that-fact-is-pretty-useless/</link>
		<pubDate>Sun, 11 Dec 2016 00:03:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5321</guid>
		<description></description>
		<content:encoded><![CDATA[While it's true that the GPU texture sampler can evaluate digital logic circuits, it turns out there's a much better and simpler way to evaluate logic with textures.  That better and simpler way isn't even that useful unfortunately!

This post will show the path I took from the initially intriguing possibilities to the more mundane final answer.  You may be able to see mistakes in my reasoning along the way, or be able to get to the punch line sooner (:

This was meant to be an extension to a paper I wrote talking about how you can evaluate Bezier curves by storing only the control points in a texture and then sampling along the texture diagonal:
<a href="http://blog.demofox.org/2016/02/22/gpu-texture-sampler-bezier-curve-evaluation/" target="_blank">GPU Texture Sampler Bezier Curve Evaluation</a>

The ideas from this post started with a tweet from <a href="https://twitter.com/marcosalvi" target="_blank">@marcosalvi</a>:

<img src="https://demofox2.files.wordpress.com/2016/12/turing.png"/>

Because the last post showed how to evaluate arbitrary polynomials using the texture sampler, and digital circuits can be described as as polynomials in Algebraic Normal Form (ANF), that means we can use the texture sampler to evaluate digital logic circuits. Let's check it out!

First up, we need to be able to convert logic into ANF.  Oddly enough, I already have a post about how to do that, with working C++ source code, so go check it out:  <a href="http://blog.demofox.org/2016/04/09/turning-a-truth-table-into-a-digital-circuit-anf/" target="_blank">Turning a Truth Table Into A digital Circuit (ANF)</a>.

As an example, let's work with a circuit that takes 3 input bits, and adds them together to make a 2 bit result.  We'll need one ANF expression per output bit.  $latex O_0$ will be the 1's place output bit (least significant bit), and $latex O_1$ will be the 2's place output bit (most significant bit).  Our 3 input bits will be u,v,w.

$latex O_0 = u \\oplus v \\oplus w$
$latex O_1 = uv \\oplus vw \\oplus uw$

If we want to use our polynomial evaluation technique, we need equations that are univariate (one variable) instead of multivariate (multiple variables).  We can try just using a single variable x in place of u,v and w.  Remember that in ANF, you work with polynomials mod 2 (aka $latex \\mathbb{Z}_2$), and that XOR ($latex \\oplus$) is addition while AND is multiplication.  This gives the formulas below:

$latex O_0 = x + x + x = 3x$
$latex O_1 = xx + xx + xx = 3x^2$

The next thing we need to use the technique is to know the Bezier control points that make a Bezier curve that is equivalent to this polynomial.  Since we have 3 input variables into our digital circuit, if they were all 3 multiplied together (ANDed together), we would have a cubic equation, so we need to convert those polynomials to cubic Bernstein basis polynomials.  We can use the technique from the last post to get the control points of that equivalent curve.

$latex
O_0 
\\begin{array}{c|c|c|c|c}
0 & 0 / 1 = 0 & 1 & 2 & 3 \\\\
3 & 3 / 3 = 1 & 1 & 1 &   \\\\
0 & 0 / 3 = 0 & 0 &   &   \\\\
0 & 0 / 1 = 0 &   &   &   \\\\
\\end{array}
$

$latex
O_1 
\\begin{array}{c|c|c|c|c}
0 & 0 / 1 = 0 & 0 & 1 & 3 \\\\
0 & 0 / 3 = 0 & 1 & 2 &   \\\\
3 & 3 / 3 = 1 & 1 &   &   \\\\
0 & 0 / 1 = 0 &   &   &   \\\\
\\end{array}
$

Now that we have our control points, we can set up our textures to evaluate our two cubic Bezier curves (one for $latex O_0$, one for $latex O_1$).  We'll need to use 3d textures and we'll need to set up the control points like the below, so that when we sample along the diagonal of the texture we get the points on our curves.

The picture below shows where each control point goes, to set up a cubic Bezier texture.  The blue dot is the origin (0,0,0) and the red dot is the extreme value of the cube (1,1,1).  The grey line represents the diagonal that we sample along.
<img src="https://demofox2.files.wordpress.com/2016/12/cube1.png"/>

Coincidentally, our control points for the $latex O_0$ curve are actually 0,1,2,3 so that cube above is what our 3d texture needs to look like for the $latex O_0$ curve.

Below is what the $latex O_1$ curve's 3d texture looks like.  Note that in reality, we could store these both in a single 3d texture, just use say the red color channel for $latex O_0$ and the green color channel for $latex O_1$.
<img src="https://demofox2.files.wordpress.com/2016/12/cube2.png"/>

Now that we have our textures set up let's try it out.  Let's make a table where we have our three input bits, and we use those as texture coordinates in our 3d textures (the texture cubes above) to see what values we get.  (Quick note - things are slightly simplified here vs reality.  The pixel's actual value is at a half pixel offset from the texture coordinates, so we'd be sampling between (0.5,0.5,0.5) and (1.5,1.5,1.5) instead of from (0,0,0) to (1,1,1), but we can ignore that detail for now to make this stuff clearer.)

$latex
\\begin{array}{|c|c|c|c|c|}
\\hline
u & v & w & O_1 & O_0 \\\\
\\hline
0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 1 \\\\
0 & 1 & 0 & 0 & 1 \\\\
0 & 1 & 1 & 1 & 2 \\\\
1 & 0 & 0 & 0 & 1 \\\\
1 & 0 & 1 & 1 & 2 \\\\
1 & 1 & 0 & 1 & 2 \\\\
1 & 1 & 1 & 3 & 3 \\\\
\\hline
\\end{array}
$

Now, let's modulus the result by 2 since ANF expects to work mod 2 ($latex \\mathbb{Z}_2$ to be more precise), and put the decimal value of the result next to it.

$latex
\\begin{array}{|c|c|c|c|c|c|}
\\hline
u & v & w & O_1 \\% 2 & O_0 \\% 2 & Result \\\\
\\hline
0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 1 & 1 \\\\
0 & 1 & 0 & 0 & 1 & 1 \\\\
0 & 1 & 1 & 1 & 0 & 2 \\\\
1 & 0 & 0 & 0 & 1 & 1 \\\\
1 & 0 & 1 & 1 & 0 & 2 \\\\
1 & 1 & 0 & 1 & 0 & 2 \\\\
1 & 1 & 1 & 1 & 1 & 3 \\\\
\\hline
\\end{array}
$

It worked! The result value is the count of the input bits set to 1.

Unfortunately we have a problem.  When we converted the multivariate equation into a univariate equation, we just replaced u,v,w with x.  This is only valid if the function is symmetric - if u,v,w can be interchanged with each other and not affect the result of the function.  This bit adding digital circuit we made happened to have that property, but most digital circuits do not have that property - most of the time, not all input bits are treated equal.  If we made a circuit that added two 2-bit numbers and have a 3-bit result for instance, the high bits of the input numbers have a very different meaning than the low bits and this technique falls apart.  (Quick note - we are actually doing the reverse of the polynomial blossoming thing i mentioned in the last post.  Blossoming is the act of taking a univariate function and breaking it into a multivariate function that is linear in each variable.  The term is called symmetric multiaffine equation if you want to find out more about that.)

This turns out not to be a deal breaker though because it turns out we didn't have to do a lot of the work that we did to get these volume textures.  It turns out we don't need to calculate the Bezier curve control points, and we don't even need to make an ANF expression of the digital circuit we want to evaluate.

Let's recap what we are trying to do.  We have 3 input values which are either 0 or 1, we have a 3d texture which is 2x2x2, and we are ultimately using those 3 input values as texture coordinates (u,v,w) to do a lookup into a texture to get a single bit value out.

Here's a big aha moment.  We are just making a binary 3d lookup table, so can take our truth table of whatever it is we are trying to do, and then directly make the final 3d textures described above.

Not only does it work for the example we gave, with a lot less effort and math, it also works for the broken case I mentioned of the function not being symmetric, and not all input bits being equal.

Something else to note is that because we are only sampling at 0 or 1, we don't need linear texture interpolation at all and can use nearest neighbor (point) sampling on our textures for increased performance.  Also because the texture data is just a binary 0 or 1, we could use 1 bit textures.

The second aha moment comes up when you realize that all we are doing is taking some number of binary input bits, using those as texture coordinates, and then looking up a value in a texture.

You can actually use a 1D texture for this!

You take your input bits and form an integer, then look up the value at that pixel location.  You build your texture lookup table using this same mapping.

So... it turns out this technique led to a dead end.  It was just extra complexity to do nothing special.

Before it all fell apart, I was also thinking this might be a good avenue for doing homomorphic encryption on the GPU, but I don't believe this aids that at all. (<a href="http://blog.demofox.org/2015/09/05/super-simple-symmetric-leveled-homomorphic-encryption-implementation/" target="_blank">Super Simple Symmetric Leveled Homomorphic Encryption Implementation</a>)

<h1>But Wait - Analog Valued Logic?</h1>

One thought I had while all this was unraveling was that maybe this was still useful, because if you put an analog value in (not a 0 or 1, but say 0.3), that maybe this could be used as a sort of "Fuzzy Logic" type logic evaluation.

Unfortunately, it looks like that doesn't work either!

You can see how it breaks down and some more info here:
<a href="http://cs.stackexchange.com/questions/67124/using-analog-values-with-algebraic-normal-form/" target="_blank">Computer Science Stack Exchange: Using analog values with Algebraic Normal Form?</a>

<h1>Oh Well</h1>

Sometimes when exploring new frontiers (even if they are just new to us) we hit dead ends, our ideas fail etc.  It happens.  It's part of the learning process, and also is useful sometimes to know what doesn't work and why, instead of just always knowing what DOES work.

Anyways... posts on using the texture sampler for calculating points on data surfaces and data volumes are coming next (:

To give a brief taste of how that is going to play out:
<ul>
	<li>Doing a single texture read of a 3d RGBA texture can give you a triquadratic interpolated value.</li>
	<li>Alternately, doing a single texture read of a 3d RGBA texture can give you a bicubic interpolated value.</li>
</ul>

Thanks for reading!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5321</wp:post_id>
		<wp:post_date><![CDATA[2016-12-10 16:03:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-11 00:03:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[failed-experiment-the-gpu-texture-sampler-is-turing-complete-but-that-fact-is-pretty-useless]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495676372;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5413;}i:1;a:1:{s:2:"id";i:5276;}i:2;a:1:{s:2:"id";i:4018;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Evaluating Points on Analytical Surfaces and in Analytical Volumes Using the GPU Texture Sampler</title>
		<link>http://blog.demofox.org/2016/12/16/analyticsurfacesvolumesgpu/</link>
		<pubDate>Fri, 16 Dec 2016 23:00:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5413</guid>
		<description></description>
		<content:encoded><![CDATA[This is an extension of a paper I wrote which shows how to use the linear texture sampling capabilities of the GPU to calculate points on Bezier curves. You store the control points in the texture, then sample along the texture’s diagonal to get points on the curve:
<a href="http://blog.demofox.org/2016/02/22/gpu-texture-sampler-bezier-curve-evaluation/">GPU Texture Sampler Bezier Curve Evaluation</a>

This extension shows how to use the technique to evaluate points on surfaces and inside of volumes, where those surfaces and volumes are defined either by Bezier curves or polynomials (Tensor products of polynomials to be more specific).

As an example of what this post will allow you to do:
<ul>
	<li>By taking a single sample of a 3d RGBA volume texture, you'll be able to get a bicubic interpolated value (a bicubic surface).</li>
	<li>Alternately, taking a single sample of a 3d RGBA volume texture will allow you to get a linear interpolation between two biquadratic surfaces (a linear/biquadratic volume).</li>
	<li>This post also covers how to extend this to higher degree surfaces and volumes.</li>
</ul>

Here are two images generated by the WebGL2 demos I made for this post which utilize this technique for rendering surfaces, fog volumes, and solid volumes.  (link to the demos at bottom of post!)
<img src="https://demofox2.files.wordpress.com/2016/12/teaser.png"/>

All textures are size 2 on each axis which makes it a cache friendly technique (you can grow the texture sizes for piecewise curves/surfaces/volumes though).  It leverages the hardware interpolation which makes it a relatively computationally inexpensive technique, and it supports all polynomials within the limitations of floating point math, so is also very flexible and expressive.  You could even extend this to rational polynomial surfaces and volumes which among other things would allow perfect representations of conic sections.

The animated Bezier curve images in this post came from wikipedia.  Go have a look and drop them a few bucks if you find wikipedia useful!
<a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve" target="_blank">Wikipedia: Bézier curve</a>

<h1>Curves</h1>

If you've read my curve paper and understand the basics you can skip this section and go onto the section "Before Going Into Surfaces".

Let's talk about how to store curves of various degrees in textures and evaluate points on them using the GPU Texture sampler.  We'll need this info when we are working with surfaces and volumes because a higher degree curve is dual to a section of lower degree surface or an even lower degree volume.

The three ways we'll be talking about controlling the order of curves are:
<ol>
	<li>Texture Dimensionality - 1d texture vs 2d texture vs 3d texture vs 4d texture.</li>
	<li>Number of Color Channels - How many color channels are used? R? RG? RGB? RGBA?</li>
	<li>Multiple Texture Samples - Doing multiple texture reads.</li>
</ol>

<h2>Texture Dimensionality</h2>

By texture dimensionality I mean how many dimensions the texture has.  In all cases, the size of the texture is going to be 2 on each axis.

Starting with a 1d texture, we have a single texture coordinate (u) to sample along.  As we change the u value from 0 to 1, we are just linearly interpolating between the two values.  A 1d texture that has 2 pixels in it can store a degree 1 curve, also known as a linear Bezier curve.  With linear texture sampling, the GPU hardware will do this linear interpolation for you.

The equation for linear interpolation between two values A and B which are at t=0 and t=1 respectively is:
$latex A*(1-t) + B*t$

Here's the 1d texture:
<img src="https://demofox2.files.wordpress.com/2016/12/texture1d.png"/>

Here's a linear curve:
<img src="https://demofox2.files.wordpress.com/2016/12/Bezier1.gif"/>

Going to a 2d texture it gets more interesting.  We now have two texture coordinates to sample along (u,v).  Using linear sampling, the hardware will do bilinear interpolation (linear interpolation across each axis) to get the value at a specific (u,v) texture coordinate.

Here is the equation for bilinear interpolation between 4 values A,B,C,D which are at texture coordinates (0,0), (1,0), (0,1), (1,1) respectively, being sampled at (u,v):

$latex (A*(1-u) + B*u)*(1-v) + (C*(1-u) + D*u) * v $

That equation interpolates from A to B by u (x axis), and from C to D by u (x axis), and then interpolates from the first result to the second by v (y axis).  Note that it doesn't actually matter which axis is interpolated by first.  An equivelant equation would be one that interpolates from A to B by v (y axis) and from B to C by v (y axis) and then between those results by u (x axis).

With that equation, something interesting starts to happen if you use the same value (t) for u and v, expand and simplify, and end up at this equation:

$latex A*(1-t)^2 + (B+C)*(1-t)t + Dt^2 $

That equation is very close to the quadratic Bezier formula, which is below:

$latex A*(1-t)^2 + B*2(1-t)t + Ct^2 $

To get to that equation, we just make B and C the same value (B), and rename D to C since that letter is unused.  This tells us how we need to set up our 2d texture such that when we sample along the diagonal, we get the correct point on our quadratic Bezier curve:

<img src="https://demofox2.files.wordpress.com/2016/12/texture2d.png"/>

Here's a quadratic Bezier curve in action.  You can see how it is a linear interpolation between two linear interpolations, just like taking a bilinearly interpolated sample on our texture is.

<img src="https://demofox2.files.wordpress.com/2016/12/bezier2.gif"/>

Taking this to a 3d texture, we now have three texture coordinates to sample along (u,v,w).  Again, with linear sampling turned on, the hardware will do trilinear interpolation to get the value at a specific (u,v,w) texture coordinate.

If we follow the same process as the 2d texture, we will wind up with the equation for a cubic Bezier curve:

$latex A*(1-t)^3 + B*3(1-t)^2t + C*3(1-t)t^2 + Dt^3$

Here's how the texture is laid out:
<img src="https://demofox2.files.wordpress.com/2016/12/texture3d.png"/>

Here's a cubic Bezier curve in action, where you can see 3 levels of linear interpolations, just like how trilinear interpolation works:
<img src="https://demofox2.files.wordpress.com/2016/12/bezier3.gif"/>

While I have never used a 4d texture it appears that <a href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff566472(v=vs.85).aspx" target="_blank">directx supports them</a> and there looks to be an <a href="https://www.opengl.org/registry/specs/SGIS/texture4D.txt" target="_blank">OpenGL extension</a> to support them as well.

If we took this to a 4d texture, we would end up with the equation for a quartic curve.  If you have trouble visualizing what a 4d texture even looks like, you aren't alone.  You have four texture coordinates to sample along (u,v,w,t).  When you sample it, there are two 3d volume textures that are sampled at (u,v,w), resulting in two values as a result.  These values are then interpolated by t to give you the final value.  A fourth dimensional texture lookup is just an interpolation between 2 three dimensional texture lookups.  That is true of all dimensional texture lookups in fact.  An N dimensional texture lookup is just the linear interpolation between two N-1 dimensional texture lookups.  For example, a three dimensional texture lookup is just an interpolation between 2 two dimensional texture lookups.  This "hierchical interpolation" is the link I noticed between texture interpolation and the De Casteljau algorithm, since that is also a hierchical interpolation algorithm, just with fewer values interpolated between.

Here's how the 4d texture is laid out:

<img src="https://demofox2.files.wordpress.com/2016/12/texture4d.png"/>

Here's the quartic Bezier equation, which is what you get the answer to if you sample a 4d texture at (t,t,t,t):

$latex A*(1-t)^4 + B*4(1-t)^3t + C*6(1-t)^2t^2 + D*4(1-t)t^3 + Et^4$

Here's a quartic Bezier curve in action, showing 4 levels of linear interpolation, just like how quadrilinear interpolation works with 4d textures:
<img src="https://demofox2.files.wordpress.com/2016/12/bezier4.gif"/>

So, the bottom line of this section is that if we sample along the diagonal of an N dimensional texture which has one color channel, we will get points on a degree N curve.

<h2>Number of Color Channels</h2>

Another way we can control the degree of a curve stored in a texture is by the number of color channels that are stored in the texture.

In the section above we showed a 1d texture that stored a linear curve.  it had only one color channel:

<img src="https://demofox2.files.wordpress.com/2016/12/texture1d.png"/>

Let's add another color channel.  A,B will be stored in the red channel, and B,C will be stored in the green channel:

<img src="https://demofox2.files.wordpress.com/2016/12/texture1dRG.png"/>

When we read that texture at location (t), we will get the following values:
<ol>
	<li>R: The linear interpolation between A and B at time t.</li>
	<li>G: The linear interpolation between B and C at time t.</li>
</ol>

Now, if we just lerp between R and G in our shader, for time t, we will get the point at time t, on the cubic Bezier curve defined by control points A,B,C.

Pretty cool right?

What happens if we add another color channel, blue?

<img src="https://demofox2.files.wordpress.com/2016/12/texture1dRGB.png"/>

Well, when we sample the texture at time t, we get the following values:
<ol>
	<li>R: The linear interpolation between A and B at time t.</li>
	<li>G: The linear interpolation between B and C at time t.</li>
	<li>B: The linear interpolation between C and D at time t.</li>
</ol>

We can combine these values using the quadratic Bezier curve formula, as if these were each a control point:

$latex R*(1-t)^2 + G*2(1-t)t + Bt^2 $

The result we get is a point on the CUBIC curve defined by the four control points A,B,C,D.

In the previous section, it took a 3d volume texture to calculate a cubic curve.  In this section we were able to do it with a 1d RGB texture, but it came at the cost of of having to do some calculation in the shader code after sampling the texture to combine the color channels and get the final result.

How exactly does adding a color channel affect the degree though?  Each color channel added increases the degree by 1.

You can see this is true by seeing in the last section how a 3 dimensional texture can evaluate a cubic, and a 4 dimensional texture can evalaute a quartic, but the 4th dimensional texture was just two 3 dimensional textures.  Adding a second color channel just doubles the size of your data (and adding two tripples, and adding three quadruples), so having a 3d volume texture that has two color channels is the same as having a 4d volume texture with a single color channel.  In both cases, you are just interpolating between two 3d texture samples. 

So, for every color channel we add, we add a degree.

<h2>Multiple Texture Samples</h2>

Multiple texture samples is the last way to control curve degree that we are going to talk about.

Taking extra texture samples is a lot like adding color channels.

If you have a 1d RGB texture, you get a result of 3 lerps - R,G,B - which you can use to calculate a cubic curve point (order 3).  If you take a second sample, you get R0,G0,B0,R1,G1,B1 which is a result of 6 lerps, which gives you a point on a sextic curve (order 6).

If you have a 2d RGBA texture, you get the result of 4 quadratic interpolations - R,G,B,A - which gives you an order 5 curve point.  Taking another texture read gives you 8 quadratic interpolation results, which you can put together to make an order 9 curve point.  Taking a third texture read would get you up to order 13.

Just like adding color channels, taking extra texture samples requires you to combine the multiple results in your shader, which increases computational cost.

Besides that, you are also doing more texture reads, which can be another source of performance loss.  The textures are small (up to 2x2x2x2) so are texture cache friendly, but if you have multiple textures, it could start to add up I'm sure.

IMO this option should be avoided in favor of the others, when possible.

<h1>Before Going Into Surfaces</h1>

Before we start on surfaces, I want to mention a few things.

Even though we've been talking about Bezier curves specifically, a previous post explained how to convert any polynomial from power basis form into Bernstein basis form (aka you can turn any polynomial into a Bezier curve that is exactly equivelant).  So, this generalizes to polynomials, and even rational polynomials if you do division in your shader code, but I'll point you towards that post for more information on that: <a href="http://blog.demofox.org/2016/12/08/evaluating-polynomials-with-the-gpu-texture-sampler/" target="_blank">Evaluating Polynomials with the GPU Texture Sampler</a>.

You can also extend the above for piecewise curves easily enough.  You just set up a different curve (or surface or volume, as we describe below) for different ranges of your parameter space values.  From time 0 to 1, you may use one texture, and from time 1 to 2, you may use another.  Better yet, you would store both curves in a single texture, and just make the texture be a little larger, instead of having two separate textures.

Also, many other types of curves - B-splines, nurbs - can be broken down exactly into piecewise Bezier curves (rational, if the source curve is rational).  Check these links for more info:
<a href="http://web.mit.edu/hyperbook/Patrikalakis-Maekawa-Cho/node18.html" target="_blank">Algorithms for B-Spline Curves</a>
<a href="https://en.wikipedia.org/wiki/De_Boor's_algorithm" target="_blank">Wikipedia: De Boor's Algorithm.</a>

<h1>Surfaces</h1>

Finally onto surfaces!

I'm going to show how to extend the curve calculation technique to calculating points on Bezier rectangles.  A Bezier rectangle is a rectangular surface which has one or more bezier curves across the X axis and one or more bezier curves across the Y axis.  The degree of the curve on each axis doesn't need to match so it could be quadratic on one axis and cubic on the other as an example.

To actually evaluate a point on the surface at location (u,v), you evaluate a point on each x axis curve for time u, and then you use those resulting values as control points in another curve that you evaluate at time v.

Just like linear interpolation, it doesn't matter which axis you evaluate first for a Bezier rectangle surface so you could switch the order of the axis evaluation if you want to.

<img src="https://demofox2.files.wordpress.com/2016/12/surface33.png"/>

The image above shows a bicubic surface, the blue lines show the x axis cubic bezier curves, while the yellow lines show the y axis cubic bezier curves.  Those lines are called "isolines" or "isocurves".  The 16 control points are shown in magenta.

Another name for a Bezier rectangle is a tensor product surface.  This is a more generalized term as it isn't limited to Bezier curves.

Note: there is another type of Bezier surface called a <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_triangle" target="_blank">Bezier Triangle</a> but I haven't worked much with them so can't say if any of these techniques work with them or not.  It would be interesting to explore how these techniques apply to Bezier triangles, if at all.

Hopefully it should come as no surprise that a 2d texture using regular bilinear interpolation is in fact a Bezier rectangle which is linear on the x axis and linear on the y axis.  It has a degree of (1,1) and is stored in a 2d texture (2x2 pixels), where the four control points are just stored in the four pixels.  You just sample the texture at (u,v) to get that point on the surface. Pretty simple stuff.

Order (1,1) Bezier Rectangle:
<img src="https://demofox2.files.wordpress.com/2016/12/surface11B.png"/>

Something interesting to note is that while the isolines (edges) of the rectangle are linear, the surface itself is curved.  In fact, we know that the diagonal of this surface is in fact a quadratic Bezier curve because we calculate curves by sampling along the diagonal! (if the middle corners are different, it's the same as if they were both replaced with the average of their values).

There are other ways to store this Degree (1,1) surface in a texture besides how i described.  You could also have a 1 dimensional texture with two color channels, where you sample it along the u axis, and then interpolate your R and G values, using the v axis value.  This would come at the cost of doing a lerp in the shader code, instead of having the texture sampler hardware do it for you.

Now that the simplest case is out of the way, how about the next simplest?  What if we want a surface where we linearly interpolate between two quadratic curves?  That is, what if we want to make a degree (2,1) Bezier rectangle?

Order (2,1) Bezier Rectangle:
<img src="https://demofox2.files.wordpress.com/2016/12/surface21.png"/>

Well if you think about it geometrically, we can store a quadratic curve in a 2d texture (2x2) with a single color channel.  To linearly interpolate between two of those, we need two of those to interpolate between.  So, we need a 3d texture, since that is just an interpolation between two 2d textures.

When we sample that texture, we use the coordinates (u,u,v).  That will make it quadratic in u, but linear in v.

Stepping up the complexity again, what if we wanted to make a biquadratic surface - aka degree (2,2)?

Order (2,2) Bezier Rectangle:
<img src="https://demofox2.files.wordpress.com/2016/12/surface22.png"/>

Well, to make a quadratic curve we need 3 control points, so for a biquadratic surface we need 3 quadratic curves to quadratically interpolate between.

One way to do this would be with a 4d texture, sampling along (u,u,v,v) to make it quadratic in both u and v.

But, because 4d textures are kind of exotic and may not be supported, we can achieve this by instead having a 3d texture with two color channels: R,G.

When we sample that texture, we sample at (u,u,v) to get two values: R,G.  Next we linearly interpolate from R to G using v.  This makes us quadratic in both u and v.

There are other ways to encode this surface as well, but i'll leave that to you to think about if you want to (:

Lastly, what if we wanted a bicubic surface?  A cubic curve has 4 control points, so we need 4 cubic curves to cubically interpolate between to make our final surface.

Order (3,3) Bezier Rectangle:
<img src="https://demofox2.files.wordpress.com/2016/12/surface33.png"/>

Thinking back to the first section, a 3d texture can evaluate a cubic curve.  Since we need four cubic curves, let's just use all four color channels RGBA.  We would sample our texture at (u,u,u) to get four cubic curves in RGBA and then would use the cubic Bezier formula to combine those four values using v into our final result.

<h1>Surfaces Generalized</h1>

Generalizing surface calculations a bit, there are basically two steps.

First is you need to figure out what your requirements for the x axis is as far as texture storage for the desired degree you want.  From there, you figure out what degree you want on your y axis, and that degree is what you multiply the x axis texture storage requirements for.

It can be a little bit like tetris trying to figure out how to fit various degree surfaces into various texture sizes and layouts, but it gets easier with a little practice.

It's also important to remember that the x axis being the first axis is by convention only.  It could easily be the y axis that defines the texture storage requirements, and is multiplied by the degree of the x axis.

<h1>Volumes</h1>

Volumes aren't a whole lot more complex than surfaces, but they are a lot hungrier for texture space and linear interpolations!

Extending the generalization of surfaces, you once again figure out requirements for the x axis, multiply those by the degree of the y axis, and then multiply that result by the degree of the z axis.

The simplest case for volumes is the trilinear case, aka the Degree (1,1,1) Bezier rectangle.

Order (1,1,1) Bezier Cube:
<img src="https://demofox2.files.wordpress.com/2016/12/volume111A.png"/>

It's a bit difficult to understand what's going on in that picture by seeing the data as just fog density, so the demos let you specify a surface threshold such that if the fog is denser than that amount, it shows it as a surface.  Here is the same trilinear Bezier volume with a surface threshold.

Order (1,1,1) Bezier Cube:
<img src="https://demofox2.files.wordpress.com/2016/12/volume111B.png"/>

You just store your 8 values in the 8 corners of the 2x2x2 texture cube, and sample at (u,v,w) to get your trilinear result.

The next simplest case is that you want to quadratically interpolate between two linear surfaces - a Degree (1,1,2) Bezier rectangle.

Order (1,1,2) Bezier Cube:
<img src="https://demofox2.files.wordpress.com/2016/12/volume112.png"/>

To do this, you need 3 bilinear surfaces to interpolate between.

One way to do this would be to have a 2d Texture with R,G,B color channels.  Sample the texture at (u,v), then quadratically interpolate R,G,B using w.

Another way to do this would be to have a 3d texture with R and G channels.  When sampling, you sample the 3d texture at (u,v,w) to get your R and G results.  You then linearly interpolate from R to G by w to get the final value.

Yet another way to do this would be to use a 4d texture if you have support for it, and sample along (u,v,w,w) to get your curve point using only hardware interpolation.

The next simplest volume type is a linear interpolation between two biquadratic surfaces - a Degree (2,2,1) Bezier rectangle.

Order (2,2,1) Bezier Cube:
<img src="https://demofox2.files.wordpress.com/2016/12/volume221.png"/>

From the surfaces section, we saw we could store a biquadratic surface in a 3d texture using two color channels R,G.  After sampling at (u,u,v) you interpolate from R to G by v.

To make a volume that linearly interpolates between two biquadratic surfaces, we need two biquadratic surfaces, so need to double the storage we had before.

We can use a 3d texture with 4 color channels to make this happen by storing the first biquadratic in R,G and the second in B,A, sampling this texture at (u,u,v).  Next, we interpolate between R and G by v, and also interpolate between B and A by v.  Lastly, we linearly interpolate between those two results using w.

The next higher surface would be a triquadratic volume, which is degree (2,2,2).  Since you can store a biquadratic surface in a 3d 2x2x2 texture with two color channels, and a triquadratic volume needs 3 of those, we need a 3d texture 6 color channels.  Since that doesn't exist, we could do something like store 2 of the quadratic surfaces in a 2x2x2 RGBA texture, and the other quadratic surface in a 2x2x2 RG texture.  We would take two texture samples and combine the 6 results into our final value.

Tricubic is actually pretty simple to conceptualize luckily.  We know that we can store a bicubic surface in a 3d 2x2x2 RGBA texture.  We also know that we would need 4 of those if we want to make a tricubic volume.  So, we could do 4 texture reads (one for each of our bicubic surfaces) and then combine those 4 samples across w to get our final volume value.

<h1>Closing</h1>

Hopefully you were able to follow along and see that this stuff is potentially pretty powerful.

Some profiling needs to be done to better understand the performance characteristics of using the texture sampler in this way, versus other methods of curve, surface and volume calculation.  I have heard that even when your texture samples are in the texture cache, that it can still take like ~100 cycles to get the information back on a texture read.  That means that this is probably not going to be as fast as using shader instructions to calculate the points on the curve.  However, if you are compute bound and can offload some work to the texture sampler, or if you are already using a texture to store 1d/2d/3d data (or beyond) that you can aproximate with this technique, that you will have a net win.

One thing I really like about this is that it makes use of non programmable hardware to do useful work.  It feels like if you were compute bound, that you could offload some work to the texture sampler if you had some polynomials to evaluate (or surfaces/volumes to sample), and get some perf back.

I also think this could possibly be an interesting way to make concise representations (and evaluation) of non polygonal models.  I imagine it would have to be piecewise to make things that look like real world objects, but you do have quite a bit of control with Bezier curves, surfaces and volumes, especially if you use rational ones by doing a divide in your shader.

Here's a few specifica areas I think this technique could help out with:
<ul>
	<li>Higher order texture interpolation with fewer samples - You'd have to preprocess textures and would spend more memory on them, but it may be worth while in some situations for higher quality results with a single texture read.</li>
	<li>2D signed distance field rendering - SDF textures are great for making pseudo vector art.  They do break down in some cases and at some magnification levels though.  It would be interesting to see if using this technique could improve things either with higher order interpolation, or maybe by encoding (signed) distances differently.  Possibly also just useful for describing 2d vector art in a polynomial form?</li>
	<li>3d signed distance field rendering - Ray marching can make use of signed distance fields to render 3d objects.  It can also make use of functions which can only give you inside or outside status based on a point.  It would be interesting to explore encoding and decoding both of these types of functions within textures using this technique, to sample shapes during ray marching.</li>
</ul>

If you are interested in the above, or curious to learn more, here are some good links!

<a href="http://www.decarpentier.nl/2d-catmull-rom-in-4-samples" target="_blank">2D Catmull-Rom in 4 samples</a>
<a href="http://blog.demofox.org/2014/06/30/distance-field-textures/" target="_blank">Distance Field Textures</a>
<a href="http://iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm" target="_blank">Inigo Quilez: raymarching distance fields</a>

If you have any questions, corrections, feedback, ideas for extensions, etc please let me know!  You can leave a comment below, or contact me on twitter at <a href="https://twitter.com/Atrix256" target="_blank">@Atrix256</a>.

<h2>Feedback / Ideas</h2>

<a href="https://twitter.com/anders_breakin" target="_blank">@anders_breakin</a> had some ideas that could possibly pan out:
<ol>
	<li>The derivative of a Bezier curve is another Bezier curve (<a href="https://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/Bezier/bezier-der.html" target="_blank">Derivatives of a Bézier Curve</a>).  You could encode the derivative curve(s) in a texture and use that to get the normal instead of using the central differences method.  That might give higher quality normals, but should also decrease the number of texture reads needed to get the normal.</li>
	<li>If you want more accuracy, you may subdivide the curve into more numerous piecewise curves.  The texture interpolator only has 8 bits of decimal precision (X.8 fixed point) when interpolating, but if you give it less of the curve/surface/volume to interpolate over at a time, it seems like that would result in more effective precision.</li>
</ol>

<a href="https://twitter.com/Vector_GL" target="_blank">@Vector_GL</a> suggested reading the values in the vertex shader and using the results in the pixel shader.  I think something like this could work where you read the control points in the VS, and pass them to the PS, which would then be able to ray march the tensor product surface by evaluating it without texture reads.  So long as you have fewer VS instances than PS instances (the triangles are not subpixel!) that this could be an interesting thing to try.  It doesn't take advantage of the texture interpolator, but maybe there would be a way to combine the techniques.  If not, this still seems very pragmatic.

I was thinking maybe this could be done via "rasterization" by drawing a bunch of unit cubes and having the PS do the ray marching.  With some careful planning, you could probably use Z-testing on this too, to quickly cull hidden pixels without having to ray march them.

<h2>Demos</h2>

Here are the WebGL2 demos:
<a href="http://demofox.org/TextureSamplerSurface.html" target="_blank">Analytical Surfaces Evaluated by the GPU Texture Sampler</a><br>
<a href="http://demofox.org/TextureSamplerVolume.html" target="_blank">Analytical Volume Evaluated by the GPU Texture Sampler</a><br>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5413</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 15:00:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 23:00:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[analyticsurfacesvolumesgpu]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495658524;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5276;}i:1;a:1:{s:2:"id";i:4018;}i:2;a:1:{s:2:"id";i:5321;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[__trashed-2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Incremental Least Squares Curve Fitting</title>
		<link>http://blog.demofox.org/2016/12/22/incremental-least-squares-curve-fitting/</link>
		<pubDate>Fri, 23 Dec 2016 04:23:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5556</guid>
		<description></description>
		<content:encoded><![CDATA[<b>This Post In Short:</b>
<ul>
<li>Fit a curve of degree N to a data set, getting data points 1 at a time.</li>
<li>Storage Required: 3*N+2 values.</li>
<li>Update Complexity: roughly 3*N+2 additions and multiplies.</li>
<li>Finalize Complexity: Solving Ax=b where A is an (N+1)x(N+1) matrix and b is a known vector. (Sample code inverts A matrix and multiplies by b, Gaussian elimination is better though).</li>
<li>Simple C++ code and HTML5 demo at bottom!</li>
</ul>

I was recently reading a post from a buddy on OIT or "Order Independent Transparency" which is an open problem in graphics:
<a href="http://gpudissector.blogspot.com/2016/12/fourier-series-based-oit-and-why-it.html" target="_blank">Fourier series based OIT and why it won't work</a>

In the article he talks about trying to approximate a function per pixel and shows the details of some methods he tried.  One of the difficulties with the problem is that during a render you can get any number of triangles affecting a specific pixel, but you need a fixed and bounded size amount of storage per pixel for those variable numbers of data points.

That made me wonder: Is there an algorithm that can approximate a data set with a function, getting only one data point at a time, and end up with a decent approximation?

It turns out that there is one, at least one that I am happy with: Incremental Least Squares Curve Fitting.

While this perhaps doesn't address all the problems that need addressing for OIT specifically, I think this is a great technique for programming in general, and I'm betting it still has it's uses in graphics, for other times when you want to approximate a data set per pixel.

We'll work through a math oriented way to do it, and then we'll convert it into an equivalent and simpler programmer friendly version.

At the bottom of the post is some simple C++ that implements everything we talk about and the image below is a screenshot of an an interactive HTML5 demo I made: <a target="_blank" href="http://demofox.org/LeastSquaresCurveFit.html">Least Squares Curve Fitting</a>
<img src="https://demofox2.files.wordpress.com/2016/12/demo.png"/>

<h1>Mathy Version</h1>

I found out about this technique by asking on math stack exchange and got a great (if not mathematically dense!) answer:
<a href="http://math.stackexchange.com/questions/2065218/creating-a-function-incrementally" target="_blank">Math Stack Exchange: Creating a function incrementally</a>
<img src="https://demofox2.files.wordpress.com/2016/12/answer.png"/>

I have to admit, I'm not so great with matrices outside of the typical graphics/gamedev usage cases of transormation and related, so it took me a few days to work through it and understand it all.  If reading that answer made your eyes go blurry, give my explanation a shot.  I'm hoping I gave step by step details enough such that you too can understand what the heck he was talking about.  If not, let me know where you got lost and I can explain better and update the post.

The first thing we need to do is figure out what degree of a function we want to approximate our data with.  For our example we'll pick a degree 2 function, also known as a quadratic function.  That means that when we are done we will get out a function of the form below:

$latex y=ax^2+bx+c$

We will give data points to the equation and it will calculate the values of a,b and c that approximate our function by minimizing the sum of the squared distance from each point to the curve.

We'll deal with regular least squared fitting before moving onto incremental, so here's the data set we'll be fitting our quadratic curve to:

$latex (1,5),(2,16),(3,31),(4,50)$

The x values in my data set start at 1 and count up by 1, but that is not a requirement.  You can use whatever x and y values you want to fit a curve to.

Next we need to calculate the matrix $latex A$, where $latex A_{jk} = x_j^k$ and the matrix has NumDataPoints rows and Degree+1 columns.  It looks like the below for a quadratic curve fitting 4 data points:

$latex
A = 
\\begin{bmatrix}
x_0^0 & x_0^1 & x_0^2 \\\\
x_1^0 & x_1^1 & x_1^2 \\\\
x_2^0 & x_2^1 & x_2^2 \\\\
x_3^0 & x_3^1 & x_3^2 \\\\
\\end{bmatrix}
$

When we plug in our specific x values we get this:

$latex
A = 
\\begin{bmatrix}
1^0 & 1^1 & 1^2 \\\\
2^0 & 2^1 & 2^2 \\\\
3^0 & 3^1 & 3^2 \\\\
4^0 & 4^1 & 4^2 \\\\
\\end{bmatrix}
$

Calculating it out we get this:

$latex
A = 
\\begin{bmatrix}
1 & 1 & 1 \\\\
1 & 2 & 4 \\\\
1 & 3 & 9 \\\\
1 & 4 & 16 \\\\
\\end{bmatrix}
$

Next we need to calculate the matrix $latex A^TA$, which we do below by multiplying the transpose of A by A:

$latex
A^TA = 
\\begin{bmatrix}
1 & 1 & 1 & 1 \\\\
1 & 2 & 3 & 4 \\\\
1 & 4 & 9 & 16 \\\\
\\end{bmatrix}
*
\\begin{bmatrix}
1 & 1 & 1 \\\\
1 & 2 & 4 \\\\
1 & 3 & 9 \\\\
1 & 4 & 16 \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
4 & 10 & 30 \\\\
10 & 30 & 100 \\\\
30 & 100 & 354 \\\\
\\end{bmatrix}
$

Next we need to find the inverse of that matrix to get $latex (A^TA)^{-1}$.  The inverse is:

$latex
(A^TA)^{-1} = 
\\begin{bmatrix}
31/4 & -27/4 & 5/4 \\\\
-27/4 & 129/20 & -5/4 \\\\
5/4 & -5/4 & 1/4 \\\\
\\end{bmatrix}
$

The next thing we need to calculate is $latex A^TY$, which is the transpose of A multiplied by all of the Y values of our data:

$latex
A^TY = 
\\begin{bmatrix}
1 & 1 & 1 & 1 \\\\
1 & 2 & 3 & 4 \\\\
1 & 4 & 9 & 16 \\\\
\\end{bmatrix}
*
\\begin{bmatrix}
5 \\\\
16 \\\\
31 \\\\
50 \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
102 & 330 & 1148 \\\\
\\end{bmatrix}
$

And finally, to calculate the coefficients of our quadratic function, we need to calculate $latex (A^TA)^{-1}*A^TY$:

$latex
(A^TA)^{-1}*A^TY =
\\begin{bmatrix}
31/4 & -27/4 & 5/4 \\\\
-27/4 & 129/20 & -5/4 \\\\
5/4 & -5/4 & 1/4 \\\\
\\end{bmatrix}
*
\\begin{bmatrix}
102 \\\\
330 \\\\
1148 \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
-2 & 5 & 2 \\\\
\\end{bmatrix}
$

Those coefficients are listed in power order of x, so the first value -2 is the coefficient for x^0, 5 is the coefficient for x^1 and 2 is the coefficient for x^2.  That gives us the equation:

$latex y=2x^2+5x-2$

If you plug in the x values from our data set, you'll find that this curve perfectly fits all 4 data points.

It won't always be (and usually won't be) that a resulting curve matches the input set for all values.  It just so happened that this time it does.  The only guarantee you'll get when fitting a curve to the data points is that the squared distance of the point to the curve (distance on the Y axis only, so vertical distance), is minimized for all data points.

Now that we've worked through the math, let's make some observations and make it more programmer friendly.

<h1>Making it Programmer Friendly</h1>

Let's look at the $latex A^TA$ matrix again:

$latex
\\begin{bmatrix}
4 & 10 & 30 \\\\
10 & 30 & 100 \\\\
30 & 100 & 354 \\\\
\\end{bmatrix}
$

One thing you probably noticed right away is that it's symmetric across the diagonal.  Another thing you may have noticed is that there are only 5 unique values in that matrix.

As it turns out, those 5 values are just the sum of the x values, when those x values are raised to increasing powers.

<ul>
<li>If you take all x values of our data set, raise them to the 0th power and sum the results, you get 4.</li>
<li>If you take all x values of our data set, raise them to the 1st power and sum the results, you get 10.</li>
<li>If you take all x values of our data set, raise them to the 2nd power and sum the results, you get 30.</li>
<li>If you take all x values of our data set, raise them to the 3rd power and sum the results, you get 100.</li>
<li>If you take all x values of our data set, raise them to the 4th power and sum the results, you get 354.</li>
</ul>

Further more, the power of the x values  in each part of the matrix is the zero based x axis index plus the zero based y axis index.  Check out what i mean below, which shows which power the x values are taken to before being summed for each location in the matrix:

$latex
\\begin{bmatrix}
0 & 1 & 2 \\\\
1 & 2 & 3 \\\\
2 & 3 & 4 \\\\
\\end{bmatrix}
$

That is interesting for two reasons...

<ol>
<li>This tells us that we only really need to store the 5 unique values, and that we can reconstruct the full matrix later when it's time to calculate the coefficients.</li>
<li>It also tells us that if we've fit a curve to some data points, but then want to add a new data point, that we can just raise the x value of our new data point to the different powers and add it into these 5 values we already have stored.  In other words, the $latex A^TA$ matrix can be incrementally adjusted as new data comes in.</li>
</ol>

This generalizes beyond quadratic functions too luckily.  If you are fitting your data points with a degree N curve, the $latex A^TA$ matrix will have N+1 rows, and N+1 columns, but will only have (N+1)*2-1 unique values stored in it.  Those values will be the sum of the x values taken from the 0th power up to the (N+1)*2-2th power.

As a concrete example, a cubic fit will have an $latex A^TA$ array that is 4x4, which will only have 7 unique values stored in it.  Those values will be the x values raised to the 0th power and summed, all the way up to the x values raised to the 6th power and summed.

So, the $latex A^TA$ matrix has a fixed storage amount of (degree+1)*2 - 1 values, and it can be incrementally updated.

That is great, but there is another value we need to look at too, which is the $latex A^TY$ vector.  Let's see that again:

$latex
\\begin{bmatrix}
102 & 330 & 1148 \\\\
\\end{bmatrix}
$

There are some patterns to this vector too luckily.  You may have noticed that the first entry is the sum of the Y values from our data set.  It's actually the sum of the y values multiplied by the x values raised to the 0th power.

The next number is the sum of the y values multiplied by the x values raised to the 1st power, and so on.

To generalize it, each entry in that vector is the sum of taking the x from each data point, raising it to the power that is the index in the vector, and multiplying it by the y value.

<ul>
<li>Taking each data point's x value, raising it to the 0th power, multiplying by the y value, and summing the results gives you 102. </li>
<li>Taking each data point's x value, raising it to the 1st power, multiplying by the y value, and summing the results gives you 330. </li>
<li>Taking each data point's x value, raising it to the 2nd power, multiplying by the y value, and summing the results gives you 1148. </li>
</ul>

So, this vector is incrementally updatable too.  When you get a new data point, for each entry in the vector, you take the x value to the specific power, multiply by y, and add that result to the entry in the vector.

This generalizes for other curve types as well.  If you are fitting your data points with a degree N curve, the $latex A^TY$ vector will have N+1 entries, corresponding to the powers: 0,1,...N.

As a concrete example, a cubic fit will have an $latex A^TY$ vector of size 4, corresponding to the powers: 0,1,2,3.

Combining the storage needs of the values needed for the $latex A^TA$ matrix, as well as the values needed for the $latex A^TY$ vector, the amount of storage we need for a degree N curve fit is 3*N+2 values.

<h1>Algorithm Summarized</h1>

Here is a summary of the algorithm:
<ol>
<li>First decide on the degree of the fit you want.  Call it N.</li>
<li>Ensure you have storage space for 3*N+2 values and initialize them all to zero.  These represent the (N+1)*2-1 values needed for the $latex A^TA$ matrix values, as well as the N+1 values needed for the $latex A^TY$ vector.</li>
<li>For each data point you get, you will need to update both the $latex A^TA$ matrix values, as well as the $latex A^TY$ vector valuess. (Note that there are not the same number of values in ATA and ATY!)
<ul>
<li>for(i in ATA) ATA[i] += x^i</li>
<li>for(i in ATY) ATY[i] += x^i*y</li>
</ul>
</li>
<li>When it's time to calculate the coefficients of your polynomial, convert the ATA values back into the $latex A^TA$ matrix, invert it and multiply that by the $latex A^TY$ value.</li>
</ol>

Pretty simple right?

<h1>Not Having Enough Points</h1>

When working through the mathier version of this algorithm, you may have noticed that if we were trying to fit using a degree N curve, that we needed N+1 data points at minimum for the math to even be able to happen.

So, you might ask, what happens in the real world, such as in a pixel shader, where we decide to do a cubic fit, but end up only getting 1 data point, instead of the 4 minimum that we need?

Well, first off, if you use the programmer friendly method of incrementally updating ATA and ATY, you'll end up with an uninvertible matrix (0 determinant), but that doesn't really help us any besides telling us when we don't have enough data.

There is something pretty awesome hiding here though.  Let's look at the ATA matrix and ATY values from our quadratic example again.

$latex
A^TA = 
\\begin{bmatrix}
4 & 10 & 30 \\\\
10 & 30 & 100 \\\\
30 & 100 & 354 \\\\
\\end{bmatrix}
$

$latex
A^TY = 
\\begin{bmatrix}
102 & 330 & 1148 \\\\
\\end{bmatrix}
$

The above values are for a quadratic fit.  What if we wanted a linear fit instead?  Well... the upper left 2x2 matrix in ATA is the ATA matrix for the linear fit!  Also, the first two values in the ATY vector is the ATY vector if we were doing a linear fit.

$latex
A^TA = 
\\begin{bmatrix}
4 & 10 \\\\
10 & 30 \\\\
\\end{bmatrix}
$

$latex
A^TY = 
\\begin{bmatrix}
102 & 330 \\\\
\\end{bmatrix}
$

You can verify that the linear fit above is correct if you want, but let's take it down another degree, down to approximating the fit with a point.  They become scalars instead of matrices and vectors:

$latex
A^TA = 4 \\\\
A^TY = 102
$

If we take the inverse of ATA and multiply it by ATY, we get:

$latex
1/4 * 102 = 25.5
$

if you average the Y values of our input data, you'll find that it is indeed 25.5, so we have verified that it does give us a degree 0 fit.

This is neat and all, but how can we KNOW if we've collected enough data or not?  Do we just try to invert our ATA matrix, and if it fails, try one degree lower, repeatedly, until we succeed or fail at a degree 0 approximation? Do we maybe instead store a counter to keep track of how many points we have seen?

Luckily no, and maybe you have already put it together.  The first value in the ATA array actually TELLS you how many points you have been given.  You can use that to decide what degree you are going to have to actually fit the data set to when it's time to calculate your coefficients, to avoid the uninvertible matrix and still get your data fit.

<h1>Interesting Tid Bits</h1>

Something pretty awesome about this algorithm is that it can work in a multithreaded fashion very easily.  One way would be to break apart the work into multiple job threads, have them calculate ATA and ATY independently, and then sum them all together on the main thread.  Another way to do it would be to let all threads share the same ATA and ATY storage, but to use an atomic add operation to update them.

Going the atomic add route, I think this could be a relatively GPU friendly algorithm.  You could use actual atomic operations in your shader code, or you could use alpha blending to add your result in.

Even though we saw it in the last section, I'll mention it again.  If you do a degree 0 curve fit to data points (aka fitting a point to the data), this algorithm is mathematically equivalent to just taking the average y value.  The ATA values will have a single value which is the sum of the x values to the 0th degree, so will be the count of how many x items there are.  The ATY values will also have only a single value, which will be the sum of the x^0*y values, so will be the sum of the y values.  Taking the inverse of our 1x1 ATA matrix will give us one divided by how many items there are, so when we multiply that by the ATA vector which only has one item, it will be the same as if we divided our Y value sum by how many data points we had.  So, in a way, this algorithm seems to be some sort of generalization of averaging, which is weird to me.

Another cool thing: if you have the minimum number of data points for your degree (aka degree+1 data points) or fewer, you can actually use the ATA and ATY values to get back your ORIGINAL data points - both the X and the Y values!  I'll leave it as an exercise for you, but if you look at it, you will always have more equations than you do unknowns.

If reconstructing the original data points is important to you, you could also have this algorithm operate in two modes.

Basically, always use the ATA[0] storage space to count the number of data points you've been given, since that is it's entire purpose.   You can then use the rest of the storage space as RAW data storage for your 2d input values.  As soon as adding another value would cause you to overflow your storage, you could process your data points into the correct format of storing just ATA and ATY values, so that from then on, it was an approximation, instead of explicit point storage.

When decoding those values, you would use the ATA[0] storage space to know whether the rest of the storage contained ATA and ATY values, or if they contained data points.  If they contained data points, you would also know how many there were, and where they were in the storage space, using the same logic to read data points out as you used to put them back in - basically like saying that the first data point goes immediately after ATA[0], the second data point after that, etc.

The last neat thing, let's say that you are in a pixel shader as an exmaple, and that you wanted to approximate 2 different values for each pixel, but let's say that the X value was always the same for these data sets - maybe you are approximating two different values over depth of the pixel for instance so X of both data points is the depth, but the Y values of the data points are different.

If you find yourself in a situation like this, you don't actually need to pay the full cost of storage to have a second approximation curve.

Since the ATA values are all based on powers of the x values only, the ATA values would be the same for both of these data sets.  You only need to pay the cost of the ATY values for the second curve.

This means that fitting a curve costs an initial 3*degree+2 in storage, but each additional curve only costs degree+1 in storage.

Also, since the ATA storage for a curve of degree N also contains the same values used for a curve of degree N-1, N-2, etc, you don't have to use the same degree when approximating multiple values using the same storage.  Your ATA just has to be large enough to hold the largest degree curve, and then you can have ATY values that are sized to the degree of the curve you want to use to approximate each data set.

This way, if you have limited storage, you could perhaps cubically fit one data set, and then linearly fit another data set where accuracy isn't as important.

For that example, you would pay 11 values of storage for the cubic fit, and then only 2 more values of storage to have a linear fit of some other data.

<h1>Example Code</h1>

There is some example code below that implements the ideas from this post.

The code is meant to be clear and readable firstly, with being a reasonably decent implementation second.  If you are using this in a place where you want high precision and/or high speeds, there are likely both macro and micro optimizations and code changes to be made.  The biggest of these is probably how the matrix is inverted.

You can read more on the reddit discussion: <a href="https://www.reddit.com/r/programming/comments/5jv6ya/incremental_least_squares_curve_fitting/" target="_blank">Reddit: Incremental Least Squares Curve Fitting</a>

Here's a run of the example code:
<img src="https://demofox2.files.wordpress.com/2016/12/examplecode.png"/>

Here is the example code:
[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;

//====================================================================
template&lt;size_t N&gt;
using TVector = std::array&lt;float, N&gt;;

template&lt;size_t M, size_t N&gt;
using TMatrix = std::array&lt;TVector&lt;N&gt;, M&gt;;

template&lt;size_t N&gt;
using TSquareMatrix = TMatrix&lt;N,N&gt;;

typedef TVector&lt;2&gt; TDataPoint; 

//====================================================================
template &lt;size_t N&gt;
float DotProduct (const TVector&lt;N&gt;&amp; A, const TVector&lt;N&gt;&amp; B)
{
    float ret = 0.0f;
    for (size_t i = 0; i &lt; N; ++i)
        ret += A[i] * B[i];
    return ret;
}

//====================================================================
template &lt;size_t M, size_t N&gt;
void TransposeMatrix (const TMatrix&lt;M, N&gt;&amp; in, TMatrix&lt;N, M&gt;&amp; result)
{
    for (size_t j = 0; j &lt; M; ++j)
        for (size_t k = 0; k &lt; N; ++k)
            result[k][j] = in[j][k];
}

//====================================================================
template &lt;size_t M, size_t N&gt;
void MinorMatrix (const TMatrix&lt;M, N&gt;&amp; in, TMatrix&lt;M-1, N-1&gt;&amp; out, size_t excludeI, size_t excludeJ)
{
    size_t destI = 0;
    for (size_t i = 0; i &lt; N; ++i)
    {
        if (i != excludeI)
        {
            size_t destJ = 0;
            for (size_t j = 0; j &lt; N; ++j)
            {
                if (j != excludeJ)
                {
                    out[destI][destJ] = in[i][j];
                    ++destJ;
                }
            }
            ++destI;
        }
    }
}

//====================================================================
template &lt;size_t M, size_t N&gt;
float Determinant (const TMatrix&lt;M,N&gt;&amp; in)
{
    float determinant = 0.0f;
	TMatrix&lt;M - 1, N - 1&gt; minor;
    for (size_t j = 0; j &lt; N; ++j)
    {
        MinorMatrix(in, minor, 0, j);

        float minorDeterminant = Determinant(minor);
        if (j % 2 == 1)
            minorDeterminant *= -1.0f;

        determinant += in[0][j] * minorDeterminant;
    }
    return determinant;
}

//====================================================================
template &lt;&gt;
float Determinant&lt;1&gt; (const TMatrix&lt;1,1&gt;&amp; in)
{
	return in[0][0];
}

//====================================================================
template &lt;size_t N&gt;
bool InvertMatrix (const TSquareMatrix&lt;N&gt;&amp; in, TSquareMatrix&lt;N&gt;&amp; out)
{
    // calculate the cofactor matrix and determinant
    float determinant = 0.0f;
    TSquareMatrix&lt;N&gt; cofactors;
    TSquareMatrix&lt;N-1&gt; minor;
    for (size_t i = 0; i &lt; N; ++i)
    {
        for (size_t j = 0; j &lt; N; ++j)
        {
            MinorMatrix(in, minor, i, j);

            cofactors[i][j] = Determinant(minor);
            if ((i + j) % 2 == 1)
                cofactors[i][j] *= -1.0f;

            if (i == 0)
                determinant += in[i][j] * cofactors[i][j];
        }
    }

    // matrix cant be inverted if determinant is zero
    if (determinant == 0.0f)
        return false;

    // calculate the adjoint matrix into the out matrix
    TransposeMatrix(cofactors, out);

    // divide by determinant
    float oneOverDeterminant = 1.0f / determinant;
    for (size_t i = 0; i &lt; N; ++i)
        for (size_t j = 0; j &lt; N; ++j)
            out[i][j] *= oneOverDeterminant;
    return true;
}

//====================================================================
template &lt;&gt;
bool InvertMatrix&lt;2&gt; (const TSquareMatrix&lt;2&gt;&amp; in, TSquareMatrix&lt;2&gt;&amp; out)
{
    float determinant = Determinant(in);
    if (determinant == 0.0f)
        return false;

    float oneOverDeterminant = 1.0f / determinant;
    out[0][0] =  in[1][1] * oneOverDeterminant;
    out[0][1] = -in[0][1] * oneOverDeterminant;
    out[1][0] = -in[1][0] * oneOverDeterminant;
    out[1][1] =  in[0][0] * oneOverDeterminant;
    return true;
}

//====================================================================
template &lt;size_t DEGREE&gt;  // 1 = linear, 2 = quadratic, etc
class COnlineLeastSquaresFitter
{
public:
    COnlineLeastSquaresFitter ()
    {
        // initialize our sums to zero
        std::fill(m_SummedPowersX.begin(), m_SummedPowersX.end(), 0.0f);
        std::fill(m_SummedPowersXTimesY.begin(), m_SummedPowersXTimesY.end(), 0.0f);
    }

    void AddDataPoint (const TDataPoint&amp; dataPoint)
    {
        // add the summed powers of the x value
        float xpow = 1.0f;
        for (size_t i = 0; i &lt; m_SummedPowersX.size(); ++i)
        {
            m_SummedPowersX[i] += xpow;
            xpow *= dataPoint[0];
        }

        // add the summed powers of the x value, multiplied by the y value
        xpow = 1.0f;
        for (size_t i = 0; i &lt; m_SummedPowersXTimesY.size(); ++i)
        {
            m_SummedPowersXTimesY[i] += xpow * dataPoint[1];
            xpow *= dataPoint[0];
        }
    }

    bool CalculateCoefficients (TVector&lt;DEGREE+1&gt;&amp; coefficients) const
    {
        // initialize all coefficients to zero
        std::fill(coefficients.begin(), coefficients.end(), 0.0f);

        // calculate the coefficients
        return CalculateCoefficientsInternal&lt;DEGREE&gt;(coefficients);
    }

private:

    template &lt;size_t EFFECTIVEDEGREE&gt;
    bool CalculateCoefficientsInternal (TVector&lt;DEGREE + 1&gt;&amp; coefficients) const
    {
        // if we don't have enough data points for this degree, try one degree less
        if (m_SummedPowersX[0] &lt;= EFFECTIVEDEGREE)
            return CalculateCoefficientsInternal&lt;EFFECTIVEDEGREE - 1&gt;(coefficients);

        // Make the ATA matrix
        TMatrix&lt;EFFECTIVEDEGREE + 1, EFFECTIVEDEGREE + 1&gt; ATA;
        for (size_t i = 0; i &lt; EFFECTIVEDEGREE + 1; ++i)
            for (size_t j = 0; j &lt; EFFECTIVEDEGREE + 1; ++j)
                ATA[i][j] = m_SummedPowersX[i + j];

        // calculate inverse of ATA matrix
        TMatrix&lt;EFFECTIVEDEGREE + 1, EFFECTIVEDEGREE + 1&gt; ATAInverse;
        if (!InvertMatrix(ATA, ATAInverse))
            return false;

        // calculate the coefficients for this degree. The higher ones are already zeroed out.
        TVector&lt;EFFECTIVEDEGREE + 1&gt; summedPowersXTimesY;
        std::copy(m_SummedPowersXTimesY.begin(), m_SummedPowersXTimesY.begin() + EFFECTIVEDEGREE + 1, summedPowersXTimesY.begin());
        for (size_t i = 0; i &lt; EFFECTIVEDEGREE + 1; ++i)
            coefficients[i] = DotProduct(ATAInverse[i], summedPowersXTimesY);
        return true;
    }

    // Base case when no points are given, or if you are fitting a degree 0 curve to the data set.
    template &lt;&gt;
    bool CalculateCoefficientsInternal&lt;0&gt; (TVector&lt;DEGREE + 1&gt;&amp; coefficients) const
    {
        if (m_SummedPowersX[0] &gt; 0.0f)
            coefficients[0] = m_SummedPowersXTimesY[0] / m_SummedPowersX[0];
        return true;
    }

    // Total storage space (# of floats) needed is 3 * DEGREE + 2
    // Where y is number of values that need to be stored and x is the degree of the polynomial
    TVector&lt;(DEGREE + 1) * 2 - 1&gt;   m_SummedPowersX;
    TVector&lt;DEGREE + 1&gt;             m_SummedPowersXTimesY;
};

//====================================================================
template &lt;size_t DEGREE&gt;
void DoTest(const std::initializer_list&lt;TDataPoint&gt;&amp; data)
{
	printf(&quot;Fitting a curve of degree %zi to %zi data points:\n&quot;, DEGREE, data.size());

    COnlineLeastSquaresFitter&lt;DEGREE&gt; fitter;

	// show data
    for (const TDataPoint&amp; dataPoint : data)
		printf(&quot;  (%0.2f, %0.2f)\n&quot;, dataPoint[0], dataPoint[1]);

	// fit data
    for (const TDataPoint&amp; dataPoint : data)
        fitter.AddDataPoint(dataPoint);

	// calculate coefficients if we can
	TVector&lt;DEGREE+1&gt; coefficients;
	bool success = fitter.CalculateCoefficients(coefficients);
	if (!success)
	{
		printf(&quot;ATA Matrix could not be inverted!\n&quot;);
		return;
	}

	// print the polynomial
	bool firstTerm = true;
	printf(&quot;y = &quot;);
    bool showedATerm = false;
	for (int i = (int)coefficients.size() - 1; i &gt;= 0; --i)
	{
		// don't show zero terms
		if (std::abs(coefficients[i]) &lt; 0.00001f)
			continue;

        showedATerm = true;

		// show an add or subtract between terms
		float coefficient = coefficients[i];
		if (firstTerm)
			firstTerm = false;
		else if (coefficient &gt;= 0.0f)
			printf(&quot; + &quot;);
		else
		{
			coefficient *= -1.0f;
			printf(&quot; - &quot;);
		}

		printf(&quot;%0.2f&quot;, coefficient);

		if (i &gt; 0)
			printf(&quot;x&quot;);

		if (i &gt; 1)
			printf(&quot;^%i&quot;, i);
	}
    if (!showedATerm)
        printf(&quot;0&quot;);
	printf(&quot;\n\n&quot;);
}

//====================================================================
int main (int argc, char **argv)
{
	// Point - 1 data points
    DoTest&lt;0&gt;(
        {
            TDataPoint{ 1.0f, 2.0f },
        }
    );

	// Point - 2 data points
    DoTest&lt;0&gt;(
        {
            TDataPoint{ 1.0f, 2.0f },
            TDataPoint{ 2.0f, 4.0f },
        }
    );

	// Linear - 2 data points
    DoTest&lt;1&gt;(
        {
            TDataPoint{ 1.0f, 2.0f },
            TDataPoint{ 2.0f, 4.0f },
        }
    );

	// Linear - 3 colinear data points
    DoTest&lt;1&gt;(
        {
            TDataPoint{ 1.0f, 2.0f },
            TDataPoint{ 2.0f, 4.0f },
            TDataPoint{ 3.0f, 6.0f },
        }
    );

	// Linear - 3 non colinear data points
    DoTest&lt;1&gt;(
        {
            TDataPoint{ 1.0f, 2.0f },
            TDataPoint{ 2.0f, 4.0f },
            TDataPoint{ 3.0f, 5.0f },
        }
    );

	// Quadratic - 3 colinear data points
    DoTest&lt;2&gt;(
        {
            TDataPoint{ 1.0f, 2.0f },
            TDataPoint{ 2.0f, 4.0f },
            TDataPoint{ 3.0f, 6.0f },
        }
    );

	// Quadratic - 3 data points
    DoTest&lt;2&gt;(
        {
            TDataPoint{ 1.0f, 5.0f },
            TDataPoint{ 2.0f, 16.0f },
            TDataPoint{ 3.0f, 31.0f },
        }
    );

	// Cubic - 4 data points
    DoTest&lt;3&gt;(
        {
            TDataPoint{ 1.0f, 5.0f },
            TDataPoint{ 2.0f, 16.0f },
            TDataPoint{ 3.0f, 31.0f },
            TDataPoint{ 4.0f, 16.0f },
        }
    );

	// Cubic - 2 data points
    DoTest&lt;3&gt;(
        {
            TDataPoint{ 1.0f, 7.0f },
            TDataPoint{ 3.0f, 17.0f },
        }
    );

	// Cubic - 1 data point
    DoTest&lt;3&gt;(
        {
            TDataPoint{ 1.0f, 7.0f },
        }
    );

	// Cubic - 0 data points
    DoTest&lt;3&gt;(
        {
        }
    );

    system(&quot;pause&quot;);
    return 0;
}
[/code]

<h1>Feedback</h1>

There's some interesting feedback on twitter.

<h1>Links</h1>

Here's an interactive demo to let you get a feel for how least squares curve fitting behaves:
<a target="_blank" href="http://demofox.org/LeastSquaresCurveFit.html">Least Squares Curve Fitting</a>
<br><br>
<a target="_blank" href="http://mathworld.wolfram.com/LeastSquaresFitting.html">Wolfram Mathworld: Least Squares Fitting</a>
<a target="_blank" href="https://en.wikipedia.org/wiki/Linear_least_squares_%28mathematics%29">Wikipedia: Least Squares Fitting</a>
<a target="_blank" href="https://www.mathsisfun.com/algebra/matrix-inverse.html">Inverting a 2x2 Matrix</a>
<a target="_blank" href="https://www.mathsisfun.com/algebra/matrix-inverse-minors-cofactors-adjugate.html">Inverting Larger Matrices</a>
<br><br>
<a target="_blank" href="http://www.xuru.org/rt/PR.asp">A good online polynomial curve fitting calculator</a>
<br><br>
By the way, the term for an algorithm which works incrementally by taking only some of the data at a time is called an "online algorithm". If you are ever in search of an online algorithm to do X (whatever X may be), using this term can be very helpful when searching for such an algorithm, or when asking people if such an algorithm exists (like on stack exchange).  Unfortunately, online is a bit overloaded in the modern world, so it can also give false hits (;
<a target="_blank" href="https://en.wikipedia.org/wiki/Online_algorithm">Wikipedia: Online algorithm</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5556</wp:post_id>
		<wp:post_date><![CDATA[2016-12-22 20:23:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-23 04:23:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[incremental-least-squares-curve-fitting]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="game-development"><![CDATA[Game Development]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495648289;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:6384;}i:1;a:1:{s:2:"id";i:4113;}i:2;a:1:{s:2:"id";i:6321;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0b3b7128b19a9704b234ed890ed35c84]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_31355522d2e1c9117234e445ec5cd6c1]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_98947cc473842862a03c54ab8324180b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_764b6ead8e2698bd34a1255ffee1e19c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_5481f6e2473974ca20386b758236a20b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Incremental Least Squares Surface and Hyper-Volume Fitting</title>
		<link>http://blog.demofox.org/2017/01/02/incremental-least-squares-surface-and-hyper-volume-fitting/</link>
		<pubDate>Tue, 03 Jan 2017 04:00:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5650</guid>
		<description></description>
		<content:encoded><![CDATA[The last post showed how to fit a $latex y=f(x)$ equation to a set of 2d data points, using least squares fitting.  It allowed you to do this getting only one data point at a time, and still come up with the same answer as if you had all the data points at once, so it was an incremental, or "online" algorithm.

This post generalizes that process to equations of any dimension such as $latex z=f(x,y)$, $latex w=f(x,y,z)$ or greater.

Below is an image of a surface that is degree (2,2). This is a screenshot taken from the interactive webgl2 demo I made for this post: <a href="http://demofox.org/LeastSquaresSurfaceFit.html" target="_blank">Least Squares Surface Fitting</a>
<img src="https://demofox2.files.wordpress.com/2017/01/surface.png"/>

<h1>How Do You Do It?</h1>

The two main players from the last post were the ATA matrix and the ATY vector.  These two could be incrementally updated as new data points came in, which would allow you to do an incremental (or "online") least squares fit of a curve.

When working with surfaces and volumes, you have the same things basically.  Both the ATA matrix and the ATY vector still exist, but they contain slightly different information - which I'll explain lower down.  However, the ATY vector is renamed, since in the case of a surface it should be called ATZ, and for a volume it should be called ATW.  I call it ATV to generalize it, where v stands for value, and represents the last component in a data point, which is the output value we are trying to fit given the input values.  The input values are the rest of the components of the data point.

At the end, you once again need to solve the equation $latex A^TA*c=A^Tv$ to calculate the coefficients (named c) of the equation.

It's all pretty similar to fitting a curve, but the details change a bit.  Let's work through an example to see how it differs.

<h1>Example: Bilinear Surface Fitting</h1>

Let's fit 4 data points to a bilinear surface, otherwise known as a surface that is linear on each axis, or a surface of degree(1,1):
(0,0,5)
(0,1,3)
(1,0,8)
(1,1,2)

Since we are fitting those data points with a bilinear surface, we are looking for a function that takes in x,y values and gives as output the z coordinate.  We want a surface that gives us the closest answer possible (minimizing the sum of the squared difference for each input data point) for the data points we do have, so that we can give it other data points and get z values as output that approximate what we expect to see for that input.

A linear equation looks like this, with coefficients A and B:
$latex y=Ax+B$

Since we want a bilinear equation this time around, this is the equation we are going to end up with, after solving for the coefficients A,B,C,D:
$latex y=Axy+Bx+Cy+D$

The first step is to make the A matrix.  In the last post, this matrix was made up of powers of the x coordinates.  In this post, they are actually going to be made up of the permutation of powers of the x and y coordinates.

Last time the matrix looked like this:
$latex
A = 
\\begin{bmatrix}
x_0^0 & x_0^1 & x_0^2 \\\\
x_1^0 & x_1^1 & x_1^2 \\\\
x_2^0 & x_2^1 & x_2^2 \\\\
x_3^0 & x_3^1 & x_3^2 \\\\
\\end{bmatrix}
$

This time, the matrix is going to look like this:
$latex
A = 
\\begin{bmatrix}
x_0^0y_0^0 & x_0^0y_0^1 & x_0^1y_0^0 & x_0^1y_0^1 \\\\
x_1^0y_1^0 & x_1^0y_1^1 & x_1^1y_1^0 & x_1^1y_1^1 \\\\
x_2^0y_2^0 & x_2^0y_2^1 & x_2^1y_2^0 & x_2^1y_2^1 \\\\
x_3^0y_3^0 & x_3^0y_3^1 & x_3^1y_3^0 & x_3^1y_3^1 \\\\
\\end{bmatrix}
$

Simplifying that matrix a bit, it looks like this:
$latex
A = 
\\begin{bmatrix}
1 & y_0 & x_0 & x_0y_0 \\\\
1 & y_1 & x_1 & x_1y_1 \\\\
1 & y_2 & x_2 & x_2y_2 \\\\
1 & y_3 & x_3 & x_3y_3 \\\\
\\end{bmatrix}
$

To simplify it even further, there is one row in the A matrix per data point, where the row looks like this:
$latex
\\begin{bmatrix}
1 & y & x & xy \\\\
\\end{bmatrix}
$

You can see that every permutation of the powers of x and y for each data point is present in the matrix.

The A matrix for our data points is this:
$latex
A = 
\\begin{bmatrix}
1 & 0 & 0 & 0 \\\\
1 & 1 & 0 & 0 \\\\
1 & 0 & 1 & 0 \\\\
1 & 1 & 1 & 1 \\\\
\\end{bmatrix}
$

Next we need to calculate the ATA matrix by multiplying the transpose of that matrix, by that matrix.

$latex
A^TA = 
\\begin{bmatrix}
1 & 1 & 1 & 1 \\\\
0 & 1 & 0 & 1 \\\\
0 & 0 & 1 & 1 \\\\
0 & 0 & 0 & 1 \\\\
\\end{bmatrix}
*
\\begin{bmatrix}
1 & 0 & 0 & 0 \\\\
1 & 1 & 0 & 0 \\\\
1 & 0 & 1 & 0 \\\\
1 & 1 & 1 & 1 \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
4 & 2 & 2 & 1 \\\\
2 & 2 & 1 & 1 \\\\
2 & 1 & 2 & 1 \\\\
1 & 1 & 1 & 1 \\\\
\\end{bmatrix}
$

Taking the inverse of that matrix we get this:

$latex
(A^TA)^{-1} = 
\\begin{bmatrix}
1 & -1 & -1 & 1 \\\\
-1 & 2 & 1 & -2 \\\\
-1 & 1 & 2 & -2 \\\\
1 & -2 & -2 & 4 \\\\
\\end{bmatrix}
$

Next we need to calculate the ATV vector (formerly known as ATY).  We calculate that by multiplying the transpose of the A matrix by the Z values:

$latex
A^TV = 
\\begin{bmatrix}
1 & 1 & 1 & 1 \\\\
0 & 1 & 0 & 1 \\\\
0 & 0 & 1 & 1 \\\\
0 & 0 & 0 & 1 \\\\
\\end{bmatrix}
*
\\begin{bmatrix}
5 \\\\
3 \\\\
8 \\\\
2 \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
18 \\\\
5 \\\\
10 \\\\
2 \\\\
\\end{bmatrix}
$

Lastly we multiply the inversed ATA matrix by the ATV vector to get our coefficients.

$latex
\\begin{bmatrix}
1 & -1 & -1 & 1 \\\\
-1 & 2 & 1 & -2 \\\\
-1 & 1 & 2 & -2 \\\\
1 & -2 & -2 & 4 \\\\
\\end{bmatrix}
*
\\begin{bmatrix}
18 \\\\
5 \\\\
10 \\\\
2 \\\\
\\end{bmatrix}
=
\\begin{bmatrix}
5 \\\\
-2 \\\\
3 \\\\
-4 \\\\
\\end{bmatrix}
$

In the last post, the coefficients we got out were in x power order, so the first (top) was for the $latex x^0$ term, the next was for the $latex x^1$ term etc.

This time around, the coefficients are in the same order as the permutations of the powers of x and y:
$latex
\\begin{bmatrix}
1 & y & x & xy \\\\
\\end{bmatrix}
$

That makes our final equation this:
$latex
z = -4xy+3x-2y+5
$

If you plug in the (x,y) values from the data set we fit, you'll see that you get the corresponding z values as output.  We perfectly fit the data set!

The process isn't too different from last post and not too difficult either right?

Let's see if we can generalize and formalize things a bit.

<h1>Some Observations</h1>

Firstly you may be wondering how we come up with the correct permutation of powers of our inputs.  It actually doesn't matter so long as you are consistent.  You can have your A matrix rows have the powers in any order, so long as all orders are present, and you use the same order in all operations.

Regarding storage sizes needed, the storage of surfaces and (hyper) volumes are a bit different and generally larger than curves.

To see how, let's look at the powers of the ATA matrix of a bilinear surface, using the ordering of powers that we used in the example:

$latex
\\begin{bmatrix}
x^0y^0 & x^0y^1 & x^1y^0 & x^1y^1 \\\\
x^0y^1 & x^0y^2 & x^1y^1 & x^1y^2 \\\\
x^1y^0 & x^1y^1 & x^2y^0 & x^2y^1 \\\\
x^1y^1 & x^1y^2 & x^2y^1 & x^2y^2 \\\\
\\end{bmatrix}
$

Let's rewrite it as just the powers:

$latex
\\begin{bmatrix}
00 & 01 & 10 & 11 \\\\
01 & 02 & 11 & 12 \\\\
10 & 11 & 20 & 21 \\\\
11 & 12 & 21 & 22 \\\\
\\end{bmatrix}
$

And the permutation we used as just powers to help us find the pattern in the powers of x and y in the ATA matrix:
$latex
\\begin{bmatrix}
00 & 01 & 10 & 11 \\\\
\\end{bmatrix}
$

Can you find the pattern of the powers used at the different spots in the ATA matrix?

I had to stare at it for a while before I figured it out but it's this: For the i,j location in the ATA matrix, the powers of x and y are the powers of x and y in the i permutation added to the powers of x and y in the j permutation.

For example, $latex A^TA_{0,2}$ has xy powers of 10.  Permutation 0 has powers of 0,0 and permutation 2 has powers of 1,0, so we add those together to get powers 1,0.

Another example, $latex A^TA_{2,3}$ has xy powers of 21.  Permutation 2 has powers of 1,0 and permutation 3 has powers 1,1.  Adding those together we get 2,1 which is correct.

That's a bit more complex than last post, not too much more difficult to construct the ATA matrix directly - and also construct it incrementally as new data points come in!

How many unique values are there in the ATA matrix though?  We need to know this to know how much storage we need.

In the last post, we needed (degree+1)*2–1 values to store the unique ATA matrix values.  That can also be written as degree*2+1.

It turns out that when generalizing this to surfaces and volumes, that we need to take the product of that for each axis.

For instance, a surface has ((degreeX*2)+1)*((degreeY*2)+1) unique values.  A volume has ((degreeX*2)+1)*((degreeY*2)+1)*((degreeZ*2)+1) unique values.

The pattern continues for higher dimensions, as well as lower, since you can see how in the curve case, it's the same formula as it was before.

For the same ATA matrix size, a surface has more unique values than a curve does.

As far as what those values actually are, they are the full permutations of the powers of a surface (or hyper volume) that is one degree higher on each axis. For a bilinear surface, that means the 9 permutations of x and y for powers 0,1 and 2:
$latex x^0y^0,x^0y^1,x^0y^2,x^1y^0,x^1y^1,x^1y^2,x^2y^0,x^2y^1,x^2y^2$
Or simplified:
$latex 1,y,y^2,x,xy,xy^2,x^2,x^2y,x^2y^2$

What about the ATV vector?

For the bilinear case, The ATV vector is the sums of the permutations of x,y multiplied by z, for every data point. In other words, you add this to ATV for each data point:
$latex
\\begin{bmatrix}
z & yz & xz & xyz \\\\
\\end{bmatrix}
$

How much storage space do we need in general for the ATV vector then? it's the product of (degree+1) for each axis.

For instance, a surface has (degreeX+1)*(degreeY+1) values in ATV, and a volume has (degreeX+1)*(degreeY+1)*(degreeZ+1).

You may also be wondering how many data points are required minimum to fit a curve, surface or hypervolume to a data set.  The answer is that you need as many data points as there are terms in the polynomial.  We are trying to solve for the polynomial coefficients, so there are as many unknowns as there are polynomial terms.

How many polynomial terms are there?  There are as many terms as there are permutations of the axes powers involved.  In other words, the size of ATV is also the minimum number of points you need to fit a curve, surface, or hypervolume to a data set.

<h1>Measuring Quality of a Fit</h1>

You are probably wondering if there's a way to calculate how good of a fit you have for a given data set.  It turns out that there are a few ways to calculate a value for this.

The value I use in the code below and in the demos is called $latex R^2$ or residue squared.

First you calculate the average (mean) output value from the input data set.

Then you calculate SSTot which is the sum of the square of the mean subtracted from each input point's output value. Pseudo code:

[code language="cpp"]
SSTot = 0;
for (point p in points)
  SSTot += (p.out - mean)^2;
[/code]

You then calculate SSRes which is the sum of the square of the fitted function evaluated at a point, subtracted from each input points' output value. Pseudo code:

[code language="cpp"]
SSRes= 0;
for (point p in points)
  SSRes += (p.out - f(p.in))^2;
[/code]

The final value for R^2 is 1-SSRes/SSTot.

The value is nice because it's unitless, and since SSRes and SSTot is a sum of squares, SSRes/SSTot is basically the value that the fitting algorithm minimizes.  The value is subtracted from 1 so that it's a fit quality metric.  A value of 0 is a bad fit, and a value of 1 is a good fit and generally it will be between those values.

If you want to read more about this, check out this link: <a href="https://en.m.wikipedia.org/wiki/Coefficient_of_determination" target="_blank">Coefficient of Determination</a>

<h1>Example Code</h1>

Here is a run from the sample code:

<img src="https://demofox2.files.wordpress.com/2017/01/example.png"/>

And here is the source code:
[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;

#define FILTER_ZERO_COEFFICIENTS true // if false, will show terms which have a coefficient of 0

//====================================================================
template&lt;size_t N&gt;
using TVector = std::array&lt;float, N&gt;;

template&lt;size_t M, size_t N&gt;
using TMatrix = std::array&lt;TVector&lt;N&gt;, M&gt;;

//====================================================================
// Specify a degree per axis.
// 1 = linear, 2 = quadratic, etc
template &lt;size_t... DEGREES&gt;
class COnlineLeastSquaresFitter
{
public:
    COnlineLeastSquaresFitter ()
    {
        // initialize our sums to zero
        std::fill(m_SummedPowers.begin(), m_SummedPowers.end(), 0.0f);
        std::fill(m_SummedPowersTimesValues.begin(), m_SummedPowersTimesValues.end(), 0.0f);
    }

	// Calculate how many summed powers we need.
	// Product of degree*2+1 for each axis.
	template &lt;class T&gt;
	constexpr static size_t NumSummedPowers(T degree)
	{
		return degree * 2 + 1;
	}
	template &lt;class T, class... DEGREES&gt;
	constexpr static size_t NumSummedPowers(T first, DEGREES... degrees)
	{
		return NumSummedPowers(first) * NumSummedPowers(degrees...);
	}

	// Calculate how many coefficients we have for our equation.
	// Product of degree+1 for each axis.
	template &lt;class T&gt;
	constexpr static size_t NumCoefficients(T degree)
	{
		return (degree + 1);
	}
	template &lt;class T, class... DEGREES&gt;
	constexpr static size_t NumCoefficients(T first, DEGREES... degrees)
	{
		return NumCoefficients(first) * NumCoefficients(degrees...);
	}

	// Helper function to get degree of specific axis
	static size_t Degree (size_t axisIndex)
	{
		static const std::array&lt;size_t, c_dimension-1&gt; c_degrees = { DEGREES... };
		return c_degrees[axisIndex];
	}
	
	// static const values
	static const size_t c_dimension = sizeof...(DEGREES) + 1; 
	static const size_t c_numCoefficients = NumCoefficients(DEGREES...);
	static const size_t c_numSummedPowers = NumSummedPowers(DEGREES...);

	// Typedefs
	typedef TVector&lt;c_numCoefficients&gt; TCoefficients;
	typedef TVector&lt;c_dimension&gt; TDataPoint;

	// Function for converting from an index to a specific power permutation
	static void IndexToPowers (size_t index, std::array&lt;size_t, c_dimension-1&gt;&amp; powers, size_t maxDegreeMultiply, size_t maxDegreeAdd)
	{
		for (int i = c_dimension-2; i &gt;= 0; --i)
		{
			size_t degree = Degree(i) * maxDegreeMultiply + maxDegreeAdd;
			powers[i] = index % degree;
			index = index / degree;
		}
	}

	// Function for converting from a specific power permuation back into an index
	static size_t PowersToIndex (std::array&lt;size_t, c_dimension - 1&gt;&amp; powers, size_t maxDegreeMultiply, size_t maxDegreeAdd)
	{
		size_t ret = 0;
		for (int i = 0; i &lt; c_dimension - 1; ++i)
		{
			ret *= Degree(i) * maxDegreeMultiply + maxDegreeAdd;
			ret += powers[i];
		}
		return ret;
	}

	// Add a datapoint to our fitting
    void AddDataPoint (const TDataPoint&amp; dataPoint)
    {
		// Note: It'd be a good idea to memoize the powers and calculate them through repeated
		// multiplication, instead of calculating them on demand each time, using std::pow.

        // add the summed powers of the input values
		std::array&lt;size_t, c_dimension-1&gt; powers;
        for (size_t i = 0; i &lt; m_SummedPowers.size(); ++i)
        {
			IndexToPowers(i, powers, 2, 1);
			float valueAdd = 1.0;
			for (size_t j = 0; j &lt; c_dimension - 1; ++j)
				valueAdd *= (float)std::pow(dataPoint[j], powers[j]);
			m_SummedPowers[i] += valueAdd;
        }

        // add the summed powers of the input value, multiplied by the output value
        for (size_t i = 0; i &lt; m_SummedPowersTimesValues.size(); ++i)
        {
			IndexToPowers(i, powers, 1, 1);
			float valueAdd = dataPoint[c_dimension - 1];
			for (size_t j = 0; j &lt; c_dimension-1; ++j)
				valueAdd *= (float)std::pow(dataPoint[j], powers[j]);
			m_SummedPowersTimesValues[i] += valueAdd;
        }
    }

	// Get the coefficients of the equation fit to the points
    bool CalculateCoefficients (TCoefficients&amp; coefficients) const
    {
		// make the ATA matrix
		std::array&lt;size_t, c_dimension - 1&gt; powersi;
		std::array&lt;size_t, c_dimension - 1&gt; powersj;
		std::array&lt;size_t, c_dimension - 1&gt; summedPowers;
		TMatrix&lt;c_numCoefficients, c_numCoefficients&gt; ATA;
		for (size_t j = 0; j &lt; c_numCoefficients; ++j)
		{
			IndexToPowers(j, powersj, 1, 1);

			for (size_t i = 0; i &lt; c_numCoefficients; ++i)
			{
				IndexToPowers(i, powersi, 1, 1);

				for (size_t k = 0; k &lt; c_dimension - 1; ++k)
					summedPowers[k] = powersi[k] + powersj[k];

				size_t summedPowersIndex = PowersToIndex(summedPowers, 2, 1);
				ATA[j][i] = m_SummedPowers[summedPowersIndex];
			}
		}

		// solve: ATA * coefficients = m_SummedPowers
		// for the coefficients vector, using Gaussian elimination.
		coefficients = m_SummedPowersTimesValues;
		for (size_t i = 0; i &lt; c_numCoefficients; ++i)
		{
			for (size_t j = 0; j &lt; c_numCoefficients; ++j)
			{
				if (ATA[i][i] == 0.0f)
					return false;

				float c = ((i == j) - ATA[j][i]) / ATA[i][i];
				coefficients[j] += c*coefficients[i];
				for (size_t k = 0; k &lt; c_numCoefficients; ++k)
					ATA[j][k] += c*ATA[i][k];
			}
		}

		// Note: this is the old, &quot;bad&quot; way to solve the equation using matrix inversion.
		// It's a worse choice for larger matrices, and surfaces and volumes use larger matrices than curves in general.
		/*
		// Inverse the ATA matrix
		TMatrix&lt;c_numCoefficients, c_numCoefficients&gt; ATAInverse;
		if (!InvertMatrix(ATA, ATAInverse))
			return false;

		// calculate the coefficients
		for (size_t i = 0; i &lt; c_numCoefficients; ++i)
			coefficients[i] = DotProduct(ATAInverse[i], m_SummedPowersTimesValues);
		*/

		return true;
    }

private:
	//Storage Requirements:
	// Summed Powers = Product of degree*2+1 for each axis.
	// Summed Powers Times Values = Product of degree+1 for each axis.
    TVector&lt;c_numSummedPowers&gt;		m_SummedPowers;
	TVector&lt;c_numCoefficients&gt;		m_SummedPowersTimesValues;
};

//====================================================================
char AxisIndexToLetter (size_t axisIndex)
{
	// x,y,z,w,v,u,t,....
	if (axisIndex &lt; 3)
		return 'x' + char(axisIndex);
	else
		return 'x' + 2 - char(axisIndex);
}

//====================================================================
template &lt;class T, size_t M, size_t N&gt;
float EvaluateFunction (const T&amp; fitter, const TVector&lt;M&gt;&amp; dataPoint, const TVector&lt;N&gt;&amp; coefficients)
{
	float ret = 0.0f;
	for (size_t i = 0; i &lt; coefficients.size(); ++i)
	{
		// start with the coefficient
		float term = coefficients[i];

		// then the powers of the input variables
		std::array&lt;size_t, T::c_dimension - 1&gt; powers;
		fitter.IndexToPowers(i, powers, 1, 1);
		for (size_t j = 0; j &lt; powers.size(); ++j)
			term *= (float)std::pow(dataPoint[j], powers[j]);

		// add this term to our return value
		ret += term;
	}
	return ret;
}

//====================================================================
template &lt;size_t... DEGREES&gt;
void DoTest (const std::initializer_list&lt;TVector&lt;sizeof...(DEGREES)+1&gt;&gt;&amp; data)
{
	// say what we are are going to do
	printf(&quot;Fitting a function of degree (&quot;);
	for (size_t i = 0; i &lt; COnlineLeastSquaresFitter&lt;DEGREES...&gt;::c_dimension - 1; ++i)
	{
		if (i &gt; 0)
			printf(&quot;,&quot;);
		printf(&quot;%zi&quot;, COnlineLeastSquaresFitter&lt;DEGREES...&gt;::Degree(i));
	}
	printf(&quot;) to %zi data points: \n&quot;, data.size());

	// show input data points
	for (const COnlineLeastSquaresFitter&lt;DEGREES...&gt;::TDataPoint&amp; dataPoint : data)
	{
		printf(&quot;  (&quot;);
		for (size_t i = 0; i &lt; dataPoint.size(); ++i)
		{
			if (i &gt; 0)
				printf(&quot;, &quot;);
			printf(&quot;%0.2f&quot;, dataPoint[i]);
		}
		printf(&quot;)\n&quot;);
	}

	// fit data
	COnlineLeastSquaresFitter&lt;DEGREES...&gt; fitter;
    for (const COnlineLeastSquaresFitter&lt;DEGREES...&gt;::TDataPoint&amp; dataPoint : data)
        fitter.AddDataPoint(dataPoint);

	// calculate coefficients if we can
	COnlineLeastSquaresFitter&lt;DEGREES...&gt;::TCoefficients coefficients;
	bool success = fitter.CalculateCoefficients(coefficients);
	if (!success)
	{
		printf(&quot;Could not calculate coefficients!\n\n&quot;);
		return;
	}

	// print the polynomial
	bool firstTerm = true;
	printf(&quot;%c = &quot;, AxisIndexToLetter(sizeof...(DEGREES)));
    bool showedATerm = false;
	for (int i = (int)coefficients.size() - 1; i &gt;= 0; --i)
	{
		// don't show zero terms
		if (FILTER_ZERO_COEFFICIENTS &amp;&amp; std::abs(coefficients[i]) &lt; 0.00001f)
			continue;

        showedATerm = true;

		// show an add or subtract between terms
		float coefficient = coefficients[i];
		if (firstTerm)
			firstTerm = false;
		else if (coefficient &gt;= 0.0f)
			printf(&quot; + &quot;);
		else
		{
			coefficient *= -1.0f;
			printf(&quot; - &quot;);
		}

		printf(&quot;%0.2f&quot;, coefficient);

		std::array&lt;size_t, COnlineLeastSquaresFitter&lt;DEGREES...&gt;::c_dimension - 1&gt; powers;
		fitter.IndexToPowers(i, powers, 1, 1);

		for (size_t j = 0; j &lt; powers.size(); ++j)
		{
			if (powers[j] &gt; 0)
				printf(&quot;%c&quot;, AxisIndexToLetter(j));
			if (powers[j] &gt; 1)
				printf(&quot;^%zi&quot;, powers[j]);
		}
	}
    if (!showedATerm)
        printf(&quot;0&quot;);
	printf(&quot;\n&quot;);

	// Calculate and show R^2 value.
	float rSquared = 1.0f;
	if (data.size() &gt; 0)
	{
		float mean = 0.0f;
		for (const COnlineLeastSquaresFitter&lt;DEGREES...&gt;::TDataPoint&amp; dataPoint : data)
			mean += dataPoint[sizeof...(DEGREES)];
		mean /= data.size();
		float SSTot = 0.0f;
		float SSRes = 0.0f;
		for (const COnlineLeastSquaresFitter&lt;DEGREES...&gt;::TDataPoint&amp; dataPoint : data)
		{
			float value = dataPoint[sizeof...(DEGREES)] - mean;
			SSTot += value*value;

			value = dataPoint[sizeof...(DEGREES)] - EvaluateFunction(fitter, dataPoint, coefficients);
			SSRes += value*value;
		}
		if (SSTot != 0.0f)
			rSquared = 1.0f - SSRes / SSTot;
	}
	printf(&quot;R^2 = %0.4f\n\n&quot;, rSquared);
}

//====================================================================
int main (int argc, char **argv)
{
	// bilinear - 4 data points
	DoTest&lt;1, 1&gt;(
		{
			TVector&lt;3&gt;{ 0.0f, 0.0f, 5.0f },
			TVector&lt;3&gt;{ 0.0f, 1.0f, 3.0f },
			TVector&lt;3&gt;{ 1.0f, 0.0f, 8.0f },
			TVector&lt;3&gt;{ 1.0f, 1.0f, 2.0f },
		}
	);

	// biquadratic - 9 data points
	DoTest&lt;2, 2&gt;(
		{
			TVector&lt;3&gt;{ 0.0f, 0.0f, 8.0f },
			TVector&lt;3&gt;{ 0.0f, 1.0f, 4.0f },
			TVector&lt;3&gt;{ 0.0f, 2.0f, 6.0f },
			TVector&lt;3&gt;{ 1.0f, 0.0f, 5.0f },
			TVector&lt;3&gt;{ 1.0f, 1.0f, 2.0f },
			TVector&lt;3&gt;{ 1.0f, 2.0f, 1.0f },
			TVector&lt;3&gt;{ 2.0f, 0.0f, 7.0f },
			TVector&lt;3&gt;{ 2.0f, 1.0f, 9.0f },
			TVector&lt;3&gt;{ 2.0f, 2.5f, 12.0f },
		}
	);

	// trilinear - 8 data points
	DoTest&lt;1, 1, 1&gt;(
		{
			TVector&lt;4&gt;{ 0.0f, 0.0f, 0.0f, 8.0f },
			TVector&lt;4&gt;{ 0.0f, 0.0f, 1.0f, 4.0f },
			TVector&lt;4&gt;{ 0.0f, 1.0f, 0.0f, 6.0f },
			TVector&lt;4&gt;{ 0.0f, 1.0f, 1.0f, 5.0f },
			TVector&lt;4&gt;{ 1.0f, 0.0f, 0.0f, 2.0f },
			TVector&lt;4&gt;{ 1.0f, 0.0f, 1.0f, 1.0f },
			TVector&lt;4&gt;{ 1.0f, 1.0f, 0.0f, 7.0f },
			TVector&lt;4&gt;{ 1.0f, 1.0f, 1.0f, 9.0f },
		}
	);

	// trilinear - 9 data points
	DoTest&lt;1, 1, 1&gt;(
		{
			TVector&lt;4&gt;{ 0.0f, 0.0f, 0.0f, 8.0f },
			TVector&lt;4&gt;{ 0.0f, 0.0f, 1.0f, 4.0f },
			TVector&lt;4&gt;{ 0.0f, 1.0f, 0.0f, 6.0f },
			TVector&lt;4&gt;{ 0.0f, 1.0f, 1.0f, 5.0f },
			TVector&lt;4&gt;{ 1.0f, 0.0f, 0.0f, 2.0f },
			TVector&lt;4&gt;{ 1.0f, 0.0f, 1.0f, 1.0f },
			TVector&lt;4&gt;{ 1.0f, 1.0f, 0.0f, 7.0f },
			TVector&lt;4&gt;{ 1.0f, 1.0f, 1.0f, 9.0f },
			TVector&lt;4&gt;{ 0.5f, 0.5f, 0.5f, 12.0f },
		}
	);

	// Linear - 2 data points
    DoTest&lt;1&gt;(
        {
            TVector&lt;2&gt;{ 1.0f, 2.0f },
            TVector&lt;2&gt;{ 2.0f, 4.0f },
        }
    );

	// Quadratic - 4 data points
    DoTest&lt;2&gt;(
        {
            TVector&lt;2&gt;{ 1.0f, 5.0f },
			TVector&lt;2&gt;{ 2.0f, 16.0f },
			TVector&lt;2&gt;{ 3.0f, 31.0f },
			TVector&lt;2&gt;{ 4.0f, 16.0f },
        }
    );

	// Cubic - 4 data points
    DoTest&lt;3&gt;(
        {
            TVector&lt;2&gt;{ 1.0f, 5.0f },
            TVector&lt;2&gt;{ 2.0f, 16.0f },
			TVector&lt;2&gt;{ 3.0f, 31.0f },
			TVector&lt;2&gt;{ 4.0f, 16.0f },
        }
    );

    system(&quot;pause&quot;);
    return 0;
}
[/code]


<h1>Closing</h1>

The next logical step here for me would be to figure out how to break the equation for a surface or hypervolume up into multiple equations, like you'd have with a tensor product surface/hypervolume equation.  It would also be interesting to see how to convert from these multidimensional polynomials to multidimensional Bernstein basis functions, which are otherwise known as Bezier rectangles (and Bezier hypercubes i guess).

The last post inverted the ATA matrix and multiplied by ATY to get the coefficients.  Thanks to some feedback on reddit, I found out that is NOT how you want to solve this sort of equation.  I ended up going with Gaussian elimination for this post which is more numerically robust while also being less computation to calculate.  There are other options out there too that may be even better choices.  I've found out that in general, if you are inverting a matrix in code, or even just using an inverted matrix that has already been given to you, you are probably doing it wrong.  You can read more about that here: <a href="http://www.johndcook.com/blog/2010/01/19/dont-invert-that-matrix/" target="_blank">John D. Cook: Don’t invert that matrix</a>.

I didn't go over what to do if you don't have enough data points because if you find yourself in that situation, you can either decrease the degree of one of the axes, or you could remove and axis completely if you wanted to.  It's situational and ambiguous what parameter to decrease when you don't have enough data points to fit a specific curve or hypervolume, but it's still possible to decay the fit to a lower degree or dimension if you hit this situation, because you will already have all the values you need in the ATA matrix values and the ATV vector.  I leave that to you to decide how to handle it in your own usage cases.  Something interesting to note is that ATA[0][0] is STILL the count of how many data points you have, so you can use this value to know how much you need to decay your fit to be able to handle the data set.

In the WebGL2 demo I mention, I use a finite difference method to calculate the normals of the surface, however since the surface is described by a polynomial, it'd be trivial to calculate the coefficients for the equations that described the partial derivatives of the surface for each axis and use those instead.

I also wanted to mention that in the case of surfaces and hypervolumes it's still possible to get an imperfect fit to your data set, even though you may give the exact minimum required number of control points.  The reason for this is that not all axes are necesarily created equal.  If you have a surface of degree (1,2) it's linear on the x axis, but quadratic on the y axis, and requires a minimum of 6 data points to be able to fit a data set.  As you can imagine, it's possible to give data points such that the data points ARE NOT LINEAR on the x axis.  When this happens, the surface will not be a perfect fit.

Lastly, you may be wondering how to fit data sets where there is more than one output value, like an equation of the form $latex (z,w)=f(x,y)$.

I'm not aware of any ways to least square fit that as a whole, but apparently a common practice is to fit one equation to z and another to w and treat them independently.  There is a math stack exchange question about that here: <a href="http://math.stackexchange.com/questions/2078632/least-square-fitting-multiple-values" target="_blank"/>Math Stack Exchange: Least square fitting multiple values</a>

Here is the webgl demo that goes with this post again:
<a href="http://demofox.org/LeastSquaresSurfaceFit.html" target="_blank">Least Squares Surface Fitting</a>

Thanks for reading, and please speak up if you have anything to add or correct, or a comment to make!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5650</wp:post_id>
		<wp:post_date><![CDATA[2017-01-02 20:00:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-03 04:00:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[incremental-least-squares-surface-and-hyper-volume-fitting]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495684931;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5556;}i:1;a:1:{s:2:"id";i:6321;}i:2;a:1:{s:2:"id";i:2697;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Raytracing Reflection, Refraction, Fresnel, Total Internal Reflection, and Beer&#039;s Law</title>
		<link>http://blog.demofox.org/2017/01/09/raytracing-reflection-refraction-fresnel-total-internal-reflection-and-beers-law/</link>
		<pubDate>Mon, 09 Jan 2017 15:01:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5699</guid>
		<description></description>
		<content:encoded><![CDATA[This post talks about how to render images like the below in real time using ray tracing.  Some realism in the images come from reflection and refraction, but the real icing on the cake comes from Fresnel, total internal reflection and Beer's law.  We'll look at the contributions of these features individually and talk about how to properly combine them for the greatest and most realistic results (:

The renderings come from a shadertoy that accompanies this post: <a href="https://www.shadertoy.com/view/4tyXDR" target="_blank">Shadertoy: Reflect Refract TIR Fresnel RayT</a>
<img src="https://demofox2.files.wordpress.com/2017/01/shadertoy.png"/>

My motivation for learning more about this stuff is that I'm starting to make a marble madness inspired game, and I'm planning to do hybrid rendering between rasterization and ray based techniques.

This post will focus more on how to make these features work for you in ray tracing, and less about the reasons for why they work the way they do.  This post is more about practical implementations, and less about rigorous explanations.

If you have any questions, comments, corrections or additions, feel free to leave in the comments section at the bottom, or feel free to hit me up on twitter at <a href="https://twitter.com/Atrix256" target="_blank">@Atrix256</a>.

This post is assumes you know how to do basic raytracing with ambient, diffuse and specular lighting, like the image below, which we are going to start with:
<img src="https://demofox2.files.wordpress.com/2017/01/diffuse.png"/>

<h1>Reflection</h1>

The first thing to talk about is reflection.  More specifically we are going to be talking about SPECULAR reflection.

Specular is defined by the dictionary to mean "of, relating to, or having the properties of a mirror.", so what we normally think of as reflection (like from a mirror) is in fact specular reflection.

There is non specular reflection, aka diffuse reflection, which just means that light is reflected off of a surface in a non mirror like way.  This is accomplished with diffuse lighting where commonly we dot product the normal of a surface with the direction from the surface to the light to know how much to light that point on the surface.

If specular reflection is how mirrors reflect, and diffuse reflection is how regular diffuse surfaces work, then you might wonder what specular lighting is all about.

A specular highlight is actually just a cheap approximation to doing a mirror like specular reflection of a light source, so it is a cheap kind of specular reflection.

Let's talk about how to do real mirror like specular reflection in a ray tracer.

When light hits a surface, some amount of the light will be reflected, and some amount of the light will be transmitted into the object.  Transmitted light is used for the diffuse shading.

As you might imagine, the amount of light reflected plus the amount of light transmitted must equal the total amount of light that hit the surface.  (note that some transmitted energy may be absorbed and given off as heat, or the object may be glowing, so may give off more light than received but let's ignore that stuff for now.)

A common way to deal with this is to define a reflectivity of a surface as the amount of light it reflects in percent and use 100% minus that amount as the transmitted amount.

You might say that 2% of light that hits a surface reflects.  That means that 98% of the light that hits a surface is transmitted and used for the diffuse shading.

When shading a point on the surface, you would calculate both the reflected color at that point on the surface, and the diffuse shaded color at that point, but you multiply the reflected color by 0.02 and the diffuse shaded color by 0.98 and add them together.  Doing this gives a result like the below:
<img src="https://demofox2.files.wordpress.com/2017/01/reflect.png"/>

The higher the reflectivity percent, the more reflection you get, and the less diffuse shading you get.  Turning down reflectivity has the opposite effect.

How do you calculate the reflected color of a point on a surface though?

You simply calculate the ray that reflected off of the surface, and calculate the color of what that ray hit.

To calculate a reflected ray, you need to know the direction that the ray was traveling when it hit the surface (The incident direction), you need to know the location that the ray hit the surface (the surface location), and you need to know the normal of the surface at the intersection point.

If you have those things you can calculate the reflected ray direction as this:

$latex
ReflectRayLocation = SurfaceLocation \\\\
ReflectRayDirection = IncidentDirection - 2 * SurfaceNormal * DotProduct(IncidentDirection, SurfaceNormal)$

Note that in hlsl and glsl there is a function called "reflect" which takes the incident direction, and the surface normal, and returns you the reflected direction.

Doing the above is mathematically correct, but if you then try to raytrace from that ray, you may hit the same object you are reflecting off.  One way to fight that problem is to push the ray positin a small amount away from the surface to make sure it misses it.  You can do that for example like this:

$latex ReflectRayLocation = ReflectRayLocation + ReflectRayDirection * 0.01$

There are other ways to make sure you don't hit the same object again, but pushing the ray away from the object a small amount really does work pretty nicely in practice.

<h1>Refraction</h1>

I mentioned in the last section that whatever light wasn't reflected when it hit a surface was transmitted. I also said that the transmitted light was used for diffuse shading.

In reality, it's passed through the "bidirectional scattering distribution function" aka BSDF.  You may have heard the term "bidirectional reflection distribution function" aka BRDF.  A BRDF only deals with the hemisphere (half a sphere) that surrounds the surface normal.  The BSDF on the other hand deals with the full sphere surrounding a surface normal so BRDF is a subset of what is possible with the BSDF.

Because the BSDF deals with an entire sphere, that means that it can handle reflection (specular and non specular) like the BRDF can, but it can also deal with transparency and refraction, where some of the light travels THROUGH an object.

In a path tracer where everything is physically accurate and mathematically precise, we would be interested in dealing with a BSDF and integrating over the sphere, but since we are working with a ray tracer, our physical accuracy needs are a lot lower - we only want a result that looks plausible.

What we are going to do for our transparency is calculate a direction that the ray is going to travel through the object, ray trace that ray to get a color, and use the transmitted light (the portion of light that isn't reflected) as a multiplier of that color, that we add to the reflected amount of light.

If we have an object with 10% reflectivity, and 90% transmittance, but use that transmitted light for transparency, we'll have a rendering like below:

<img src="https://demofox2.files.wordpress.com/2017/01/transparent.png"/>

Now that we have transparency, let's talk about refraction.  Refraction is a physical phenomenon where light bends ("changes speed" i guess but that sounds a bit suspicious for light), as it hits a boundary between two different surfaces.

Every material has a refractive index, and in fact, may have different refractive indices per light frequency.  For our purposes, we'll assume surfaces have the same refractive index for every frequency of light.  There's a list of refractive indices for a lot of different materials here: <a href="http://hyperphysics.phy-astr.gsu.edu/hbase/Tables/indrf.html" target="_blank">Index of refraction</a>

How a ray bends when it refracts depends on the ration of the refractive index that it's leaving to the refractive index that it's entering.  AKA outside/inside.

HLSL and GLSL have a function called refract which take the incident vector, the surface normal vector, and that ration of refractive indices, and return the refracted ray.

When you do a raytrace down the refracted ray, you will have the same problem as when tracing the reflected ray, that you may hit the same surface you just hit again erroneously.  To help that, you once again just move the ray slightly away from the surface.

$latex RefractRayLocation = RefractRayLocation + RefractRayDirection * 0.01$

Here is a rendering where the sphere has 10% reflectivity, 90% transmittance, an air refractive index of 1.0, and a refractive index of 1.125 for the sphere.  You can see how the light bends as it goes through the object and looks pretty neat!
<img src="https://demofox2.files.wordpress.com/2017/01/refract.png"/> 

<h1>Fresnel</h1>

There is an interesting property in our world: If you look at something straight on, it's the least reflective it will be.  If you turn it nearly 90 degrees where it's nearly edge on, it will be the most reflective it can be.  Many surfaces will become almost perfectly reflective when you view them almost edge on.  Go try it out with a wall in your house or a glass or other things.

Weird huh? That's called Fresnel, and is something we can also make use of in ray tracing to get a more realistic image.

Instead of just always using the reflectivity amount of the surface, we use the Fresnel equation to figure out how much reflectivity an object should have based on the view angle versus the surface normal, so that when it's more edge on it becomes more reflective.  At minimum the reflectivity will be the reflectivity of the surface, and at maximum the reflectivity will be 100%.

The amount we transmit for either refraction or diffuse will be 100% minus however much percentage is reflective.

Here is the image showing normal reflection again:
<img src="https://demofox2.files.wordpress.com/2017/01/reflect.png"/> 

Here is the image with Fresnel:
<img src="https://demofox2.files.wordpress.com/2017/01/fresnel.png"/>

It looks quite a bit better with fresnel doesn't it?!

Here's a GLSL function of Schlick's Fresnel approximation function.  Notice that it takes the surface normal and incident vector, as well as the refractive index being left (n1) and the refractive index being entered (n2):
[code language="cpp"]
float FresnelReflectAmount (float n1, float n2, vec3 normal, vec3 incident)
{
        // Schlick aproximation
        float r0 = (n1-n2) / (n1+n2);
        r0 *= r0;
        float cosX = -dot(normal, incident);
        if (n1 &gt; n2)
        {
            float n = n1/n2;
            float sinT2 = n*n*(1.0-cosX*cosX);
            // Total internal reflection
            if (sinT2 &gt; 1.0)
                return 1.0;
            cosX = sqrt(1.0-sinT2);
        }
        float x = 1.0-cosX;
        float ret = r0+(1.0-r0)*x*x*x*x*x;

        // adjust reflect multiplier for object reflectivity
        ret = (OBJECT_REFLECTIVITY + (1.0-OBJECT_REFLECTIVITY) * ret);
        return ret;
}
[/code]

Our tale of reflection is complete, so let's go back to refraction / transparency and finish up the last two items.

<h1>Total Internal Reflection</h1>

The way that the Fresnel equation works, it's possible that when moving from a material with a higher index of refraction to a lower one, that the amount of refraction can actually drop to zero percent.  In this case, the light doesn't exit the higher refractive index object and instead ONLY reflects back into the object, because the reflective amount becomes 100%.

When this happens, it's called "Total Internal Reflection" for hopefully obvious reasons (:

There isn't a whole lot to say about this, because you can see that this is even accounted for in the GLSL Fresnel function from the last section.

However, if you are ever under water in a swimming pool and look up to see the water surface looking like a mirror, that is total internal reflection in action.

You can also see it in the render below, where you can see reflections on the inside of the walls of the object, especially on the bottom (floor) of the object:
<img src="https://demofox2.files.wordpress.com/2017/01/TIR.png"/>

<h1>Beer's Law</h1>

Beer's law is the last item to talk about, and relates to transparent surfaces.  Beer's law deals with light being absorbed over distance as it travels through a material.

Beer's law is why a thin piece of jello is mostly colorless, but a thicker piece of jello has a much richer and deeper color.

Here's a cube with beer's law absorbing red and green light over distance.  You should notice that where the light travels less distance through the cube that it's not as blue, because not as much red and green light has been absorbed:
<img src="https://demofox2.files.wordpress.com/2017/01/beerslaw.png"/>

To apply beer's law, you first figure out how long a ray has traveled through the absorbing material (by tracing the ray inside the object to see where it hits the back side).  You then do this calculation:
[code language="cpp"]
vec3 color = RayTrace(rayPos, rayDir);
vec3 absorb = exp(-OBJECT_ABSORB * absorbDistance);
color *= absorb;
[/code]

OBJECT_ABSORB is an RGB value that describes how much of each color channel absorbs over distance.  For example, a value of (8.0, 2.0, 0.1) would make red get absorbed the fastest, then green, then blue, so would result in a blueish, slightly green color object.

<h1>Putting it All Together</h1>

Now that we have the individual components worked out let's talk about how to put it together.

Firstly, when a ray hits any surface, you need to use the Fresnel equation to get the multiplier for the reflected and transmitted light.

Next you calculate the reflected and transmitted light by recursively raytracing.  The transmitted light is either used for the diffuse shading, the transparency/refracted ray, or some combination of those two (technically, it's all up to the BSDF we are approximating).

Then, you multiply the reflected light by the reflected amount from the Fresnel equation, and the transmitted amount by 100%-reflectionAmount and add the results together.

(Quick side note, if you have emissive color on the surface aka the object glows, you would also add that in here).

Since raytracing is recursive, you would do this each time a ray intersected with an object.  In other words, each intersection causes the ray to split into two rays.

As you can imagine, this can make the rendering quite complex, especially on the GPU where you can't even do real recursion.

One way to help limit the recursiveness a bit is when you are calculating your reflection and transmittance amounts, you can choose a threshold like say 1% where if the reflection is under 1% it clamps it to 0%, and if it's greater than 99% it clamps it at 100%.  You can then choose not to recurse down a specific ray if the ray's multiplier is 0.  The end result will be that reflections or transmittance rays that don't contribute much to the end result won't be followed at all.

If you are willing to sacrifice some visual quality to not have to split your ray into two at each object intersection, you could also figure out if reflection or transmittance has the higher multiplier, and make the ray only follow one of the paths.  If you were doing this in a path tracer, you could choose which one to follow randomly, using the multiplier as a weight for the random selection.

The problem in both of these two optimizations is that the multiplier is only half of the information though so may incorrectly choose the less meaningful contribution.  The other half of the information is the color of the ray if you followed it.  The reason for this is that you might have a low multiplier for a really bright spot (caustics have this problem commonly!), or vice versa you may have a high multiplier for a dull featureless spot.  With path tracing, if you take enough samples, it all washes out in the averages, and with ray tracing, maybe you accept that it will do the wrong thing sometimes, to stay a real time algorithm, but it's important to know how this type of choice can fail for you.  (Side note, this sort of stuff is what importance sampling in path tracing is all about - trying to make rays follow more meaningful paths to get better results quicker).

When doing real time raytracing you also often have to decide how many times you want to allow a ray to bounce around.  In the shadertoy that goes with this post, that parameter is MAX_RAY_BOUNCES and I have it set to 10.

Interestingly, setting it to 1 has no visible impact on the sphere at all, which is a nice improvement.  For the box, a value of 3 seems to be the maximum it needs.  3 also seems to be the magic number for the geometric gem type shape.

So, 10 is overkill, but i left it at that in case people play with parameters and change them to values which would require more bounces.

Lastly I wanted to mention that in the scene that I rendered, I did a small "trick" to make it so I didn't need to do full recursive splitting of rays at each intersection.  I did this by making it so the main object in the center of the scene was the only object that had reflection.

This way, I only need to split the ray into two if i hit the main object.  Furthermore, when I'm splitting the ray at the main object, the ray that gets the color for the outside world (versus the inside of the object) is a single non recursive ray cast since it can't hit anything reflective.  The result is that at each intersection of the sphere, i do a simple non recursive ray cast for the ray that is going outside of the main object, then i continue the iterative ray on the inside of the object until i run out of bounces.

Doing this causes a recursive process to become an iterative one, which is much friendlier on the gpu.

Below is the final render again from the shadertoy.  The parameters are:
<ul>
	<li>The refractive index of the air is 1.00029</li>
	<li>The refractive index inside the objects are 1.125</li>
	<li>Reflectivity is 1%</li>
	<li>The absorption for beers law is (8.0, 8.0, 3.0)</li>

</ul>

<img src="https://demofox2.files.wordpress.com/2017/01/shadertoy.png"/>

<h1>Links</h1>
<a href="https://www.shadertoy.com/view/4tyXDR" target="_blank">Shadertoy: Reflect Refract TIR Fresnel RayT</a>
<a href="https://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf" target="_blank">Reflections and Refractions in Ray Tracing</a>
<a href="http://blog.demofox.org/2016/09/21/path-tracing-getting-started-with-diffuse-and-emissive/" target="_blank">Path Tracing – Getting Started With Diffuse and Emissive</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5699</wp:post_id>
		<wp:post_date><![CDATA[2017-01-09 07:01:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-09 15:01:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[raytracing-reflection-refraction-fresnel-total-internal-reflection-and-beers-law]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="ray-tracing"><![CDATA[Ray Tracing]]></category>
		<category domain="category" nicename="shadertoy"><![CDATA[Shadertoy]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495721192;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4744;}i:1;a:1:{s:2:"id";i:3860;}i:2;a:1:{s:2:"id";i:2;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Old Master: How to Correct as a Mentor or a Teacher</title>
		<link>http://blog.demofox.org/2017/01/24/my-old-master-how-to-correct-as-a-mentor-or-a-teacher/</link>
		<pubDate>Tue, 24 Jan 2017 20:45:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5758</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Preface: I studied martial arts for a little over a decade (shaolin kempo at USSD) and learned a lot while I was there.  Our teacher was a great guy who genuinely cared about his students, and in particular, taught my friends and I some really interesting things when we became instructors.  I'd like to share some of that information with you in the "My Old Master" posts category.  As cliched as it is, many things he taught us apply to all aspects of life, not just martial arts and I'd like other people to benefit from them.</strong>

My old master used to say...

<blockquote>"Praise, Correct, Praise.  Even if you have to make something up, you need to say something positive."</blockquote>

Let's say that I'm teaching you how to punch and you aren't quite doing it right.

Here are two things I might say to try and correct it:
<ol>
	<li>"Keep your wrist straight when you are punching so you don't hurt your hand" or...</li>
	<li>"I really love how you are keeping your left hand up while you punch with your right.  It's doing a great job of protecting your head against your opponent hitting you back.  Now try keeping your wrist straight when you punch so that you don't hurt your hand." Then I watch you try again and I say "Great, just like that, keep it up!"</li>
</ol>

Think about how those two responses make you feel for a second.

The first one likely makes you feel like you are messing up and need to fix it (a negative thing), while the second makes you feel like you were doing well and are now are doing even better.

What's the difference?  Well, like the opening quote says, I praised, corrected, and then praised.  First I found something you were doing well, complimented you on it, gave a suggestion for improvement, and then praised you on doing (or attempting!) the correction.

This can be a great way to give people feedback, in a way that makes them feel better about themselves, and feel better about the feedback you are giving them.  Instead of being a negative thing, it becomes a positive thing.

Pretty simple stuff, and if you practice this technique it starts to become second nature.

The quote says that if you can't find anything positive to say, you should make it up.  It shouldn't be your first choice to make something up, because the more genuine you are about the praise, the better it will be.  However, if you really can't find anything nice to say, yes, you should make something up.

A person's ego and self worth is a measurable quantity that is increased with praise and decreased with corrections or negative feedback (aka "you suck!").  When this tank of self worth gets too low, your student or mentee will feel worthless, get frustrated and/or start to get resentful at you.

This technique is useful because it allows you to give a correction while minimizing hit to the person's self worth.  In the end allows you to give MORE correction and help them more in the long run, just by phrasing your corrections differently.  Another term for this is "complement sandwich" which you may have heard of before.

Another thing to be mindful of however is that you can only give so much feedback at any one time.  The ego/self worth tank needs to refill after it's diminished, and frankly, the person needs to absorb and internalize what you've taught them before they are ready for more.

Our teacher would say "it's better having a mediocre black belt, than having a stellar white belt who quits out of frustration" and that's very true.  It's better for them since a mediocre black belt is FAR SUPERIOR to a stellar white belt and much better able to protect themselves and their loved ones, but also better for the organization, since we are often teaching or mentoring in a "for profit" situation where the person we are trying to help is either a customer or a co-worker which the company is interested in keeping around.

Before wrapping it up, I heard a funny story regarding this topic about a special needs child and his or her parents.  Just like everyone else, this child has a concept of self worth, however being disabled makes it very easy to feel depressed when you realize there are so many things you can't do that other people can do.  It's difficult too for the parents to help the child feel better about themselves if they really can't find an area he shines in.  One day the parents noticed he loved to use tools and it clicked.  They started loosening screws in the house and asking him to tighten them for him.  "Jimmy, can you come tighten this screw up for us? You are so good at it!".

I think that's a cute story but really shows how we work as humans.  Your job as (an effective) teacher, mentor, parent, boss or leader, is to teach whatever you need to teach, correct whatever you need to correct, but also to make sure you do so in a way that is least damaging to the person's ego and self worth.  They feel better about themselves, but you are also more effective at getting the job done.  It matters!

So go out there and serve some compliment sandwiches, making sure to be as genuine as possible with your praise!

P.S. Yes people can have over inflated egos and feeding them more is only going to make things worse.  That's the topic of another post (;
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5758</wp:post_id>
		<wp:post_date><![CDATA[2017-01-24 12:45:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-24 20:45:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[my-old-master-how-to-correct-as-a-mentor-or-a-teacher]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="my-old-master"><![CDATA[My Old Master]]></category>
		<category domain="category" nicename="people-skills"><![CDATA[People Skills]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495682175;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2596;}i:1;a:1:{s:2:"id";i:54;}i:2;a:1:{s:2:"id";i:5116;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Geometric Interpretation of Neural Networks</title>
		<link>http://blog.demofox.org/2017/02/07/a-geometric-interpretation-of-neural-networks/</link>
		<pubDate>Tue, 07 Feb 2017 20:31:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5803</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="https://demofox2.files.wordpress.com/2017/02/tease2.png"/>

In the 90s before I was a professional programmer / game developer I looked at neural networks and found them interesting but got scared off by things like back propagation, which I wasn't yet ready to understand.

With all the interesting machine learning things going on in modern times, I decided to have a look again and have been pleasantly surprised at how simple they are to understand.  If you have knowledge of partial derivatives and gradients (like, if you've done any ray marching), you have the knowledge it takes to understand it.

Here are some really great resources I recomend for learning the nuts and bolts of how modern neural networks actually work:
<a href="https://cloud.google.com/blog/big-data/2017/01/learn-tensorflow-and-deep-learning-without-a-phd" target="_blank">Learn TensorFlow and deep learning, without a Ph.D.</a>
<a href="http://neuralnetworksanddeeplearning.com/chap1.html" target="_blank">Neural Networks and Deep Learning</a>
<a href="http://playground.tensorflow.org/" target="_blank">A Neural Network Playground (Web Based NN sand box from google)</a>

This post doesn't require any understanding of neural networks or partial derivatives, so don't worry if you don't have that knowledge.  The harder math comes up when training a neural network, but we are only going to be dealing with evaluating neural networks, which is much simpler.

<h2>A Geometric Interpretation of a Neuron</h2>

A neural network is made up layers.

Each layer has some number of neurons in it.

Every neuron is connected to every neuron in the previous and next layer.

Below is a diagram of a neural network, courtesy of wikipedia. Every circle is a neuron.
<img src="https://upload.wikimedia.org/wikipedia/commons/4/46/Colored_neural_network.svg" style="background:white"/>

To calculate the output value of a neuron, you multiply every input into that neuron by a weight for that input, and add a bias.  This value is fed into an activation function (more on activation functions shortly) and the result is the output value of that neuron.  Here is a diagram for a single neuron:
<img src="https://demofox2.files.wordpress.com/2017/02/Neuron.png"/>

A more formal definition of a neuron's output is below. $latex b$ is the bias, $latex w_j$ is the j'th weight and $latex i_j$ is the j'th input.
$latex Output = b+\\sum_{j=0}^nw_ji_j $

You might notice that the above is really just the dot product of the weight vector and the input vector, with a value added on the end.  We could re-write it like that:
$latex Output = Dot(w,i)+b$

Interestingly, that is the same equation that you use to find the distance of a point to a plane.  Let's say that we have a plane defined by a unit length normal N and a distance to the origin d, and we want to calculate the distance of a point P to that plane.  We'd use this formula:
$latex Distance = Dot(N,P)+d$

This would give us a signed distance, where the value will be negative if we are in the negative half space defined by the plane, and positive otherwise.

This equation works if you are working in 3 dimensional space, but also works in general for any N dimensional point and plane definition.

What does this mean?  Well, this tells us that every neuron in a neural network is essentially deciding what side of a hyperplane a point is on.  Each neuron is doing a linear classification, saying if something is on side A or side B, and giving a distance of how far it is into A or B.

This also means that when you combine multiple neurons into a network, that an output neuron of that neural network tells you whether the input point is inside or outside of some shape, and by how much.

I find this interesting for two reason.

Firstly, it means that a neural network can be interpreted as encoding SHAPES, which means it could be used for modeling shapes.  I'm interested in seeing what sort of shapes it's capable of, and any sorts of behaviors this representation might have.  I don't expect it to be useful for, say, main stream game development (bonus if it is useful!) but at minimum it ought to be an interesting investigation to help understand neural networks a bit better.

Secondly, there is another machine learning algorithm called <a href="https://en.wikipedia.org/wiki/Support_vector_machine" target="_blank">Support Vector Machines</a> which are also based on being able to tell you which side of a separation a data point is on.  However, unlike the above, SVM separations are not limited to plane tests and can use arbitrary shapes for separation.  Does this mean that we are leaving something on the table for neural networks?  Could we do better than we are to make networks with fewer layers and fewer neurons that do better classification by doing non linear separation tests?

Quick side note: besides classification, neural nets can help us with something called regression, which is where you fit a network to some analog data, instead of the more discrete problem of classification, which tells you what group something belongs to.

It turns out that the activation function of a neuron can have a pretty big influence on what sort of shapes are possible, which makes it so we aren't strictly limited to shapes made up of planes and lines, and also means we aren't necessarily leaving things on the table compared to SVM's.

This all sort of gives me the feeling though that modern neural networks may not be the best possible algorithm for the types of things we use them for.  I feel like we may need to generalize them beyond biological limitations to allow things like multiplications between weighted inputs instead of only sums.  I feel like that sort of setup will be closer to whatever the real ideal "neural computation" model might be.  However, the modern main stream neural models do have the benefit that they are evaluated very efficiently via dot products.  They are particularly well suited for execution on GPUs which excel at performing homogenous operations on lots and lots of data. So, a more powerful and more general "neuron" may come at the cost of increased computational costs, which may make them less desirable in the end.

As a quick tangent, here is a paper from 2011 which shows a neural network model which does in fact allow for multiplication between neuron inputs.  You then will likely be wanting exponents and other things, so while it's a step in the right direction perhaps, it doesn't yet seem to be the end all be all!
<a href="https://turing.cs.washington.edu/papers/uai11-poon.pdf" target="_blank">Sum-Product Networks: A New Deep Architecture</a>

It's also worth while to note that there are other flavors of neural networks, such as convolutional neural networks, which work quite a bit differently.

Let's investigate this geometric interpretation of neurons as binary classifiers a bit, focusing on some different activation functions!

<h2>Step Activation Function</h2>

The <a href="https://en.wikipedia.org/wiki/Heaviside_step_function" target="_blank">Heaviside step function</a> is very simple.  If you give it a value greater than zero, it returns a 1, else it returns a 0.  That makes our neuron just spit out binary: either a 0 or a 1.  The output of a neuron using the step activation function is just the below:

$latex Output = Dot(w,i)+b > 0$

The output of a neuron using the step activation function is true if the input point is in the positive half space of the plane that this neuron describes, else it returns false.

Let's think about this in 2d.  Let's make a neural network that takes x and y as input and spits out a value.  We can make an image that visualizes the range from (-1,-1) to (1,1).  Negative values can be shown in blue, zero in white, and positive values in orange.

To start out, we'll make a 2d plane (aka a line) that runs vertically and passes through the origin.  That means it is a 2d plane with a normal of (1,0) and a distance from the origin of 0.  In other words, our network will have a single neuron that has weights of (1,0) and a bias of 0.  This is what the visualization looks like:
<img src="https://demofox2.files.wordpress.com/2017/02/nnstep1.png"/>

You can actually play around with the experiments of this post and do your own using an interactive visualization I made for this post.  Click here to see this first experiment: <a href="http://demofox.org/NN2D.html?scale=1&discrete=false&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x%22%2C%20%22pos.y%22%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%2C0%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%0A%7D%0A" target="_blank">Experiment: Vertical Seperation</a>

We can change the normal (weights) to change the angle of the line, and we can also change the bias to move the line to it's relative left or right.  Here is the same network that has it's weights adjusted to (1,1) with a bias of 0.1.
<img src="https://demofox2.files.wordpress.com/2017/02/nnstep2.png"/>
<a href="http://demofox.org/NN2D.html?scale=1&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x%22%2C%20%22pos.y%22%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%2C1%5D%2C%20%22bias%22%3A%200.1%2C%20%22activation%22%3A%20%22step%22%7D%0A%7D%0A" target="_blank">Experiment: Diagonal Separation</a>

The normal (1,1) isn't normalized though, which makes it so the distance from origin (aka the bias) isn't really 0.1 units.  The distance from origin is actually divided by the length of the normal to get the REAL distance to origin, so in the above image, where the normal is a bit more than 1.0, the line is actually less than 0.1 units from the origin.

Below is the visualization if we normalize the weights to (0.707,0.707) but leave the bias at 0.1 units.  The result is that the line is actually 0.1 units away from the origin.
<img src="https://demofox2.files.wordpress.com/2017/02/nnstep3.png"/>
<a href="http://demofox.org/NN2D.html?scale=1&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x%22%2C%20%22pos.y%22%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B0.707%2C0.707%5D%2C%20%22bias%22%3A%200.1%2C%20%22activation%22%3A%20%22step%22%7D%0A%7D%0A" target="_blank">Experiment: Normalized Diagonal Separation</a>

Recalling the description of our visualization, white is where the network outputs zero, while orange is where the network outputs a positive number (which is 1 in this case).

If we define three lines such that their negative half spaces don't completely overlap, we can get a triangle where the network outputs a zero, while everywhere else it outputs a positive value.  We do this by having three sibling neurons in the first layer which define three separate lines, and then in the output neuron we give them all a weight of 1.  This makes it so the area outside the triangle is always a positive value, which step turns into 1, but inside the triangle, the value remains at 0.

<img src="https://demofox2.files.wordpress.com/2017/02/nnstep4.png"/>
<a href="http://demofox.org/NN2D.html?scale=1&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x%22%2C%20%22pos.y%22%5D%2C%0A%0A%20%20%22layer0%22%20%3A%20%5B%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.995%2C%200.099%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.099%2C%200.995%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B-0.707%2C-0.707%5D%2C%20%22bias%22%3A%20-0.6%2C%20%22activation%22%3A%20%22step%22%7D%0A%20%20%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%2C1%2C1%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%0A%7D%0A" target="_blank">Experiment: Negative Space Triangle</a>

We can turn this negative space triangle into a positive space triangle however by making the output neuron have a weight on the inputs of -1, and adding a bias of 0.1.  This makes it so that pixels in the positive space of any of the lines will become a negative value.  The negative space of those three lines get a small bias to make it be a positive value, resulting in the step function making the values be 0 outside of the triangle, and 1 inside the triangle.  This gives us a positive space triangle:

<img src="https://demofox2.files.wordpress.com/2017/02/nnstep5.png"/>
<a href="http://demofox.org/NN2D.html?scale=1&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x%22%2C%20%22pos.y%22%5D%2C%0A%0A%20%20%22layer0%22%20%3A%20%5B%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.995%2C%200.099%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.099%2C%200.995%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B-0.707%2C-0.707%5D%2C%20%22bias%22%3A%20-0.6%2C%20%22activation%22%3A%20%22step%22%7D%0A%20%20%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B-1%2C-1%2C-1%5D%2C%20%22bias%22%3A%200.1%2C%20%22activation%22%3A%20%22step%22%7D%0A%7D%0A" target="_blank">Experiment: Positive Space Triangle</a>

Taking this a bit further, we can make the first layer define 6 lines, which make up two different triangles - a bigger one and a smaller one.  We can then have a second layer which has two neurons - one which makes a positive space larger triangle, and one which makes a positive space smaller triangle.  Then, in the output neuron we can give the larger triangle neuron a weight of 1, while giving the smaller triangle neuron a weight of -1.  The end result is that we have subtracted the smaller triangle from the larger one:

<img src="https://demofox2.files.wordpress.com/2017/02/nnstep6.png"/>
<a href="http://demofox.org/NN2D.html?scale=1&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x%22%2C%20%22pos.y%22%5D%2C%0A%0A%20%20%22layer0%22%20%3A%20%5B%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.995%2C%200.099%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.099%2C%200.995%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B-0.707%2C-0.707%5D%2C%20%22bias%22%3A%20-0.6%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.995%2C%200.099%5D%2C%20%22bias%22%3A%200.025%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.099%2C%200.995%5D%2C%20%22bias%22%3A%200.025%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B-0.707%2C-0.707%5D%2C%20%22bias%22%3A%20-0.575%2C%20%22activation%22%3A%20%22step%22%7D%0A%20%20%5D%2C%0A%0A%20%20%22layer1%22%20%3A%20%5B%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B1%2C1%2C1%2C0%2C0%2C0%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0%2C0%2C0%2C1%2C1%2C1%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%0A%20%20%5D%2C%0A%0A%20%20%22layer2%22%20%3A%20%5B%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B-1%2C0%5D%2C%20%22bias%22%3A%200.1%2C%20%22activation%22%3A%20%22step%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0%2C-1%5D%2C%20%22bias%22%3A%200.1%2C%20%22activation%22%3A%20%22step%22%7D%0A%20%20%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%2C-1%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22step%22%7D%0A%7D%0A" target="_blank">Experiment: Triangle Cutout</a>

Using the step function we have so far been limited to line based shapes.  This has been due to the fact that we can only test our inputs against lines.  There is a way around this though: Pass non linear input into the network!

Below is a circle with radius 0.5.  The neural network has only a single input which is sqrt(x*x+y*y).  The output neuron has a bias of -0.5 and a weight of 1.  It's the bias value which controls the radius of the circle.

You could pass other non linear inputs into the network to get a whole host of other shapes.  You could pass sin(x) as an input for example, or x squared.

<img src="https://demofox2.files.wordpress.com/2017/02/nnstep7.png"/>
<a href="http://demofox.org/NN2D.html?scale=1&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22sqrt%28pos.x*pos.x+pos.y*pos.y%29%22%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%5D%2C%20%22bias%22%3A%20-0.5%2C%20%22activation%22%3A%20%22step%22%7D%0A%7D%0A" target="_blank">Experiment: Circle</a>

While the step function is inherently very much limited to linear tests, you can still do quite a lot of interesting non linear shapes (and data separations) by passing non linear input into the network.

Unfortunately though, you as a human would have to know the right non linear inputs to provide.  The network can't learn how to make optimal non linear separations when using the step function.  That's quite a limitation, but as I understand it, that's how it works with support vector machines as well: a human can define non linear separations, but the human must decide the details of that separation.

BTW it seems like there could be a fun puzzle game here.  Something like you have a fixed number of neurons that you can arrange in however many layers you want, and your goal is to separate blue data points from orange ones, or something like that.  If you think that'd be a fun game, go make it with my blessing! I don't have time to pursue it, so have at it (:

<h2>Identity and Relu Activation Functions</h2>

The identity activation function doesn't do anything.  It's the same as if no activation function is used.  I've heard that it can be useful in regression, but it can also be useful for our geometric interpretation.

Below is the same circle experiment as before, but using the identity activation function instead of the step activation function:

<img src="https://demofox2.files.wordpress.com/2017/02/nnidentity1.png"/>
<a href="http://demofox.org/NN2D.html?scale=1&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22sqrt%28pos.x*pos.x+pos.y*pos.y%29%22%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%5D%2C%20%22bias%22%3A%20-0.5%2C%20%22activation%22%3A%20%22identity%22%7D%0A%7D%0A" target="_blank">Experiment: Identity Circle</a>

Remembering that orange is positive, blue is negative, and white is zero, you can see that outside the circle is orange (positive) and inside the circle is blue (negative), while the outline of the circle itself is white.  We are looking at a signed distance field of the circle!  Every point on this image is a scalar value that says how far inside or outside that point is from the surface of the shape.

Signed distance fields are a popular way of rendering vector graphics on the GPU.  They are often approximated by storing the distance field in a texture and sampling that texture at runtime.  Storing them in a texture only requires a single color channel for storage, and as you zoom in to the shape, they preserve their shape a lot better than regular images.  You can read more about SDF textures on my post: <a href="http://blog.demofox.org/2014/06/30/distance-field-textures/" target="_blank">Distance Field Textures</a>.

Considering the machine learning perspective, having a signed distance field is also an interesting proposition.  It would allow you to do classification of input, but also let you know how deeply that input point is classified within it's group.  This could be a confidence level maybe, or could be interpreted in some other way, but it gives a sort of analog value to classification, which definitely seems like it could come in handy sometimes.

If we take our negative space triangle example from the last section and change it from using step activation to identity activation, we find that our technique doesn't generalize naively though, as we see below. (It doesn't generalize for the positive space triangle either)

<img src="https://demofox2.files.wordpress.com/2017/02/nnidentity2.png"/>
<a href="http://demofox.org/NN2D.html?scale=1&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x%22%2C%20%22pos.y%22%5D%2C%0A%0A%20%20%22layer0%22%20%3A%20%5B%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.995%2C%200.099%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22identity%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.099%2C%200.995%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22identity%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B-0.707%2C-0.707%5D%2C%20%22bias%22%3A%20-0.6%2C%20%22activation%22%3A%20%22identity%22%7D%0A%20%20%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%2C1%2C1%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22identity%22%7D%0A%7D%0A" target="_blank">Experiment: Negative Space Triangle Identity</a>

The reason it doesn't generalize is that the negatives and positives of pixel distances to each of the lines cancel out.  Consider a pixel on the edge of the triangle: you are going to have a near zero value for the edge it's on, and two larger magnitude negative values from the other edges it is in the negative half spaces of.  Adding those all together is going to be a negative value.

To help sort this out we can use an activation function called "relu", which returns 0 if the value it's given is less than zero, otherwise it returns the value.  This means that all our negative values become 0 and don't affect the distance summation.  If we switch all the neurons to using relu activation, we get this:

<img src="https://demofox2.files.wordpress.com/2017/02/nnrelu1.png"/>
<a href="http://demofox.org/NN2D.html?scale=1&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x%22%2C%20%22pos.y%22%5D%2C%0A%0A%20%20%22layer0%22%20%3A%20%5B%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.995%2C%200.099%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22relu%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.099%2C%200.995%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22relu%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B-0.707%2C-0.707%5D%2C%20%22bias%22%3A%20-0.6%2C%20%22activation%22%3A%20%22relu%22%7D%0A%20%20%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%2C1%2C1%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22relu%22%7D%0A%7D%0A" target="_blank">Experiment: Negative Space Triangle Relu</a>

If you squint a bit, you can see a triangle in the white. If you open the experiment and turn on "discrete output" to force <= 0 to blue and > 0 to orange you get a nice image that shows you that the triangle is in fact still there.

<img src="https://demofox2.files.wordpress.com/2017/02/reludiscrete.png"/>

Our result with relu is better than identity, but there are two problems with our resulting distance field.

Firstly it isn't a signed distance field - there is no blue as you might notice.  It only gives positive distances, for pixels that are outside the shape.  This isn't actually that big of an issue from a rendering perspective, as unsigned distance fields are still useful.  It also doesn't seem that big of an issue from a machine learning perspective, as it still gives some information about how deeply something is classified, even though it is only from one direction.

I think with some clever operations, you could probably create the internal negative signed distance using different operations, and then could compose it with the external positive distance in the output neuron by adding them together.

The second problem is a bigger deal though: The distance field is no longer accurate!

By summing the distance values, the distance is incorrect for points where the closest feature of the triangle is a vertex, because multiple lines are contributing their distance to the final value.

I can't think of any good ways to correct that problem in the context of a neural network, but the distance is an approximation, and is correct for the edges, and also gets more correct the closer you get to the object, so this is still useful for rendering, and probably still useful for machine learning despite it being an imperfect measurement.

<h2>Sigmoid and Hyperbolic Tangent Activation Function</h2>

The sigmoid function is basically a softer version of the step function and gives output between 0 and 1.  The hyperbolic tangent activation function is also a softer version of the step function but gives output between -1 and 1.

Sigmoid:
<img src="https://demofox2.files.wordpress.com/2017/02/SigmoidFunction_7011.gif" style="background:white"/>

Hyperbolic Tangent:
<img src="https://demofox2.files.wordpress.com/2017/02/TanhReal1.gif"/>
(images from <a href="http://mathworld.wolfram.com/" target="_blank">Wolfram Mathworld</a>)

They have different uses in machine learning, but I've found them to be visibly indistinguishable in my experiments after compensating for the different range of output values.  It makes me think that <a href="https://en.wikipedia.org/wiki/Smoothstep" target="_blank">smoothstep</a> could probably be a decent activation function too, so long as your input was in the 0 to 1 range (maybe you could clamp input to 0 and 1?).

These activation functions let you get some non linearity in your neural network in a way that the learning algorithms can adjust, which is pretty neat.  That puts us more into the realm where a neural net can find a good non linear separation for learned data.  For the geometric perspective, this also lets us make more interesting non linear shapes.

Unfortunately, I haven't been able to get a good understanding of how to use these functions to craft desired results.

It seems like if you add even numbers of hyperbolic tangents together in a neural network that you end up getting a lot of white, like below:

<img src="https://demofox2.files.wordpress.com/2017/02/nntanh1.png"/>
<a href="http://demofox.org/NN2D.html?scale=10.9&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x%22%2C%20%22pos.y%22%5D%2C%0A%0A%20%20%22layer0%22%20%3A%20%5B%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.995%2C%200.099%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22tanh%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.099%2C%200.995%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22tanh%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B-0.707%2C-0.707%5D%2C%20%22bias%22%3A%20-0.6%2C%20%22activation%22%3A%20%22tanh%22%7D%0A%20%20%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%2C1%2C0%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22tanh%22%7D%0A%7D%0A" target="_blank">Experiment: tanh1</a>

However, if you add an odd number of them together, it starts to look a bit more interesting, like this:

<img src="https://demofox2.files.wordpress.com/2017/02/nntanh2.png"/>
<a href="http://demofox.org/NN2D.html?scale=10.9&discrete=false&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x%22%2C%20%22pos.y%22%5D%2C%0A%0A%20%20%22layer0%22%20%3A%20%5B%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.995%2C%200.099%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22tanh%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.099%2C%200.995%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22tanh%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B-0.707%2C-0.707%5D%2C%20%22bias%22%3A%20-0.6%2C%20%22activation%22%3A%20%22tanh%22%7D%0A%20%20%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%2C1%2C1%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22tanh%22%7D%0A%7D%0A" target="_blank">Experiment: tanh2</a>

Other than that, it's been difficult seeing a pattern that I can use to craft things.  The two examples above were made by modifying the negative space triangle to use tanh instead of step.

<h2>Closing</h2>

We've wandered a bit in the idea of interpreting neural networks geometrically but I feel like we've only barely scratched the surface.  This also hasn't been a very rigorous exploration, but more has just been about exploring the problem space to get a feeling for what might be possible.

It would be interesting to look more deeply into some of these areas, particularly for the case of distance field generation of shapes, or combining activation functions to get more diverse results.

While stumbling around, it seems like we may have gained some intuition about how neural networks work as well.

It feels like whenever you add a layer, you are adding the ability for a "logical operation" to happen within the network.

For instance, in the triangle cutout experiment, the first layer after the inputs defines the 6 individual lines of the two triangles and classifies input accordingly.  The next layer combines those values into the two different triangle shapes.  The layer after that converts them from negative space triangles to positive space triangles.  Lastly, the output layer subtracts the smaller triangle's values from the larger triangle's values to make the final triangle outline shape.

Each layer has a logical operation it performs, which is based on the steps previous to it.

Another piece of intuition I've found is that it seems like adding more neurons to a layer allows it to do more work in parallel.

For instance, in the triangle cutout experiment, we created those two triangles in parallel, reserving some neurons in each layer for each triangle.  It was only in the final step that we combined the values into a single output.

Since neurons can only access data from the previous network layer, it seems as though adding more neurons to layers can help push data forward from previous layers, to later layers that might need the data.  But, it seems like it is most efficient to process input data as early as possible, so that you don't have to shuttle it forward and waste layers / neurons / memory and computing power.

Here is some info on other activation functions:
<a href="https://en.wikipedia.org/wiki/Activation_function" target="_blank">Wikipedia:Activation Function</a>

Here's a link that talks about how perceptrons (step activated neural networks) relate to SVMs:
<a href="https://www.cs.utah.edu/~piyush/teaching/8-9-print.pdf" target="_blank">Hyperplane based Classification: Perceptron and (Intro to) Support Vector Machines</a> 

By the way, did I mention you can visualize neural networks in three dimensions as well?
<img src="https://demofox2.files.wordpress.com/2017/02/nn3d.png"/>
<a href="http://demofox.org/NN3D.html?scale=1&resolution=400&network=%7B%0A%20%20%22input%22%3A%20%5B%22pos.x-0.5%22%2C%20%22pos.y%22%2C%20%22pos.z+0.3%22%5D%2C%0A%0A%20%20%22layer0%22%20%3A%20%5B%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.9%2C%200.3%2C%200.1%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22tanh%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.1%2C%201%2C%200.2%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22tanh%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.1%2C%200.1%2C%201%5D%2C%20%22bias%22%3A%20-0.4%2C%20%22activation%22%3A%20%22relu%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B-1%2C%20-1%2C%20-1%5D%2C%20%22bias%22%3A%200.1%2C%20%22activation%22%3A%20%22relu%22%7D%2C%0A%20%20%20%20%7B%20%22weights%22%3A%20%5B0.5%2C%20-1%2C%200.9%5D%2C%20%22bias%22%3A%20-0.4%2C%20%22activation%22%3A%20%22relu%22%7D%0A%20%20%5D%2C%0A%0A%20%20%22output%22%20%3A%20%7B%20%22weights%22%3A%20%5B1%2C1%2C1%2C1%2C1%5D%2C%20%22bias%22%3A%200%2C%20%22activation%22%3A%20%22relu%22%7D%0A%7D%0A" target="_blank">Experiment: 3d Visualization</a>

Here are the two visualizers of neural networks I made for this post using WebGL2:
<a href="http://demofox.org/NN2D.html" target="_blank">Neural Network Visualization 2D</a>
<a href="http://demofox.org/NN3D.html" target="_blank">Neural Network Visualization 3D</a>

If you play around with this stuff and find anything interesting, please share!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5803</wp:post_id>
		<wp:post_date><![CDATA[2017-02-07 12:31:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-07 20:31:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[a-geometric-interpretation-of-neural-networks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="neural-networks"><![CDATA[Neural Networks]]></category>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495680576;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5999;}i:1;a:1:{s:2:"id";i:71;}i:2;a:1:{s:2:"id";i:6208;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Multivariable Dual Numbers &amp; Automatic Differentiation</title>
		<link>http://blog.demofox.org/2017/02/20/multivariable-dual-numbers-automatic-differentiation/</link>
		<pubDate>Mon, 20 Feb 2017 22:50:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5949</guid>
		<description></description>
		<content:encoded><![CDATA[In a previous post I showed how to use dual numbers to be able to get both the value and derivative of a function at the same time:
<a href="http://blog.demofox.org/2014/12/30/dual-numbers-automatic-differentiation/" target="_blank">Dual Numbers & Automatic Differentiation</a>

That post mentions that you can extend it to multivariable functions but doesn't explain how.  This post is that explanation, including simple working C++ code!

Extending this to multivariable functions is useful for ray marching, calculating analytical surface normals and also likely useful for training a neural network if you want an alternative to back propagation.  I'm not sure about the efficiency comparison of this versus back propagation but I intend on looking into it (:

<h1>How Does it Work?</h1>

It turns out to be really simple to use dual numbers with multivariable functions.  The end result is that you want a partial derivative for each variable in the equation, so to do that, you just have a dual number per variable, and process the entire equation for each of those dual numbers separately.

We'll work through an example.  Let's find the partial derivatives of x and y of the function $latex 3x^2-2y^3$, at input (5,2).

We'll start by finding the derivative of x, and then the derivative of y.

<h1>Example: df/dx</h1>

We start by making a dual number for our x value, remembering that the real part is the actual value for x, and the dual part is the derivative of x, which is 1:

$latex 5+1\\epsilon$

or:

$latex 5+\\epsilon$

We multiply that value by itself to get the $latex x^2$ value, keeping in mind that $latex \\epsilon^2$ is zero:
$latex (5+\\epsilon)*(5+\\epsilon)= \\\\
25+10\\epsilon+\\epsilon^2= \\\\
25+10\\epsilon \\\\
$

Next we need to multiply that by 3 to get the $latex 3x^2$ term:

$latex 3*(25+10\\epsilon) = 75+30\\epsilon$

Putting that aside for a moment, we need to make the $latex 2y^3$ term.  We start by making our y value:

$latex 2+0\\epsilon$

or:

$latex 2$

If you are wondering why it has a zero for the epsilon term, it's because when we are calculating the partial derivative of x, y is a constant, so has a derivative of zero.

Next, we multiply this y value by itself twice to get the $latex y^3$ value:

$latex 2*2*2=8$

We then multiply it by 2 to get the $latex 2y^3$ term:

$latex 8*2=16$

Now that we have our two terms, we subtract the y term from the x term to get our final result:

$latex 75+30\\epsilon-16 = \\\\
59+30\\epsilon$

This result says that $latex 3x^2-2y^3$ has a value of 59 at location (5,2), and that the derivative of x at that point is 30.

That checks out, let's move on to the derivative of y!

<h1>Example: df/dy</h1>

Calculating the derivative of y is very similar to calculating the derivative of x, except that it's the x term that has an epsilon value (derivative) of 0, instead of the y term.  The y term has the epsilon value of 1 this time as well.  We'll work through it to see how it plays out.

First up, we need to make the value for x:

$latex 5+0\\epsilon$

or:

$latex 5$

Next we square it and multiply it by 3 to get the $latex 3x^2$ term:

$latex 5*5*3=75$

Next we need to make the value for y, remembering that we use an epsilon value of 1 since the derivative of y is 1 this time around.

$latex 2+\\epsilon$

We cube that value and multiply by 2 to get the $latex 2y^3$ term:
$latex 2*(2+\\epsilon)*(2+\\epsilon)*(2+\\epsilon)= \\\\
2*(2+\\epsilon)*(4+4\\epsilon+\\epsilon^2)= \\\\
2*(2+\\epsilon)*(4+4\\epsilon)= \\\\
2*(8+12\\epsilon+4\\epsilon^2)= \\\\
2*(8+12\\epsilon)= \\\\
16+24\\epsilon
$

Now we subtract the y term from the x term to get the final result:

$latex 75 - (16+24\\epsilon)= \\\\
59-24\\epsilon
$

This result says that $latex 3x^2-2y^3$ has a value of 59 at location (5,2), and that the derivative of y at that point is -24.

That also checks out, so we got the correct value and partial derivatives for the equation.

<h1>Reducing Redundancy</h1>

There was quite a bit of redundancy when working through the x and y derivatives wasn't there?  Increasing the number of variables will increase the amount of redundancy too, so it doesn't scale up well.

Luckily there is a way to address this.  Basically, instead of making two dual numbers which have two items, you make them share the real value (since it's the same for both, as is the work to make it) and append the dual values for x and y to it.

Thus, instead of having:

$latex x'=(a+b\\epsilon) \\\\
y'=(a+b\\epsilon)
$

You have:

$latex (a+b\\epsilon_x+c\\epsilon_y)$

Then, in your math or in your program, you treat it as if it's two different dual numbers packed into one.  This lets you do the work for the real number once instead of twice, but still lets you do your dual number work for each variable independently.

While it's probably easiest to think of these as two dual numbers packed into one value, there is actually a mathematical basis for it as well, which may or may not surprise you.

Check out what happens when we multiply two of these together, keeping in mind that multiplying ANY two epsilon values together becomes zero, even if they are different epsilons:

$latex (a+b\\epsilon_x+c\\epsilon_y) * (d+e\\epsilon_x+f\\epsilon_y)= \\\\
ad + ae\\epsilon_x + af\\epsilon_y + bd\\epsilon_x + be\\epsilon_x^2 + bf\\epsilon_x\\epsilon_y + cd\\epsilon_y + ce\\epsilon_x\\epsilon_y + cf\\epsilon_y^2= \\\\
ad + ae\\epsilon_x + af\\epsilon_y + bd\\epsilon_x + cd\\epsilon_y= \\\\
ad + (ae+bd)\\epsilon_x + (af+cd)\\epsilon_y
$

The interesting thing is that the above result gives you the same values as if you did the same work for two dual numbers individually.

Let's see this three component dual number in action by re-doing the example again.  Note that this pattern scales up to ANY number of variables!

<h1>Example: Both Derivatives (Gradient Vector)</h1>

Our goal is to calculate the value and partial derivatives of the function $latex 3x^2-2y^3$ at location (5,2).

First we make our x value:

$latex 5 + 1\\epsilon_x + 0\\epsilon_y$

or:

$latex 5 + \\epsilon_x$

We square that and multiply it by 3 to get our $latex 3x^2$ term:

$latex 3*(5 + \\epsilon_x)*(5 + \\epsilon_x)= \\\\
3*(25+10\\epsilon_x+\\epsilon_x^2)= \\\\
3*(25+10\\epsilon_x)= \\\\
75+30\\epsilon_x
$

Next, we make our y value:

$latex 2 + 0\\epsilon_x + 1\\epsilon_y$

or:

$latex 2 + \\epsilon_y$

We cube it and multiply it by 2 to get our $latex 2x^3$ term:

$latex 16+24\\epsilon_y$

Lastly we subtract the y term from the x term to get our final answer:

$latex (75+30\\epsilon_x) - (16+24\\epsilon_y)= \\\\
59+30\\epsilon_x-24\\epsilon_y
$

The result says that $latex 3x^2-2y^3$ has a value of 59 at location (5,2), and that the derivative of x at that point is 30, and the derivative of y at that point is -24.

Neat, right?!

<h1>Example Code</h1>

Here is the example code output:
<img src="https://demofox2.files.wordpress.com/2017/02/multivardualnums.png"/>

Here is the code that generated it:
[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;cmath&gt;
#include &lt;array&gt;
#include &lt;algorithm&gt;
 
#define PI 3.14159265359f

#define EPSILON 0.001f  // for numeric derivatives calculation

template &lt;size_t NUMVARIABLES&gt;
class CDualNumber
{
public:

	// constructor to make a constant
	CDualNumber (float f = 0.0f) {
		m_real = f;
		std::fill(m_dual.begin(), m_dual.end(), 0.0f);
	}

	// constructor to make a variable value.  It sets the derivative to 1.0 for whichever variable this is a value for.
	CDualNumber (float f, size_t variableIndex) {
		m_real = f;
		std::fill(m_dual.begin(), m_dual.end(), 0.0f);
		m_dual[variableIndex] = 1.0f;
	}

	// storage for real and dual values
	float							m_real;
	std::array&lt;float, NUMVARIABLES&gt; m_dual;
};
 
//----------------------------------------------------------------------
// Math Operations
//----------------------------------------------------------------------
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; operator + (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a, const CDualNumber&lt;NUMVARIABLES&gt; &amp;b)
{
	CDualNumber&lt;NUMVARIABLES&gt; ret;
	ret.m_real = a.m_real + b.m_real;
	for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
		ret.m_dual[i] = a.m_dual[i] + b.m_dual[i];
	return ret;
}
 
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; operator - (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a, const CDualNumber&lt;NUMVARIABLES&gt; &amp;b)
{
	CDualNumber&lt;NUMVARIABLES&gt; ret;
	ret.m_real = a.m_real - b.m_real;
	for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
		ret.m_dual[i] = a.m_dual[i] - b.m_dual[i];
	return ret;
}

template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; operator * (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a, const CDualNumber&lt;NUMVARIABLES&gt; &amp;b)
{
	CDualNumber&lt;NUMVARIABLES&gt; ret;
	ret.m_real = a.m_real * b.m_real;
	for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
		ret.m_dual[i] = a.m_real * b.m_dual[i] + a.m_dual[i] * b.m_real;
	return ret;
}

template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; operator / (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a, const CDualNumber&lt;NUMVARIABLES&gt; &amp;b)
{
	CDualNumber&lt;NUMVARIABLES&gt; ret;
	ret.m_real = a.m_real / b.m_real;
	for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
		ret.m_dual[i] = (a.m_dual[i] * b.m_real - a.m_real * b.m_dual[i]) / (b.m_real * b.m_real);
	return ret;
}

template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; sqrt (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a)
{
	CDualNumber&lt;NUMVARIABLES&gt; ret;
	float sqrtReal = sqrt(a.m_real);
	ret.m_real = sqrtReal;
	for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
		ret.m_dual[i] = 0.5f * a.m_dual[i] / sqrtReal;
	return ret;
}

template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; pow (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a, float y)
{
	CDualNumber&lt;NUMVARIABLES&gt; ret;
	ret.m_real = pow(a.m_real, y);
	for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
		ret.m_dual[i] = y * a.m_dual[i] * pow(a.m_real, y - 1.0f);
	return ret;
}

template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; sin (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a)
{
	CDualNumber&lt;NUMVARIABLES&gt; ret;
	ret.m_real = sin(a.m_real);
	for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
		ret.m_dual[i] = a.m_dual[i] * cos(a.m_real);
	return ret;
}

template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; cos (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a)
{
	CDualNumber&lt;NUMVARIABLES&gt; ret;
	ret.m_real = cos(a.m_real);
	for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
		ret.m_dual[i] = -a.m_dual[i] * sin(a.m_real);
	return ret;
}

template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; tan (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a)
{
	CDualNumber&lt;NUMVARIABLES&gt; ret;
	ret.m_real = tan(a.m_real);
	for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
		ret.m_dual[i] = a.m_dual[i] / (cos(a.m_real) * cos(a.m_real));
	return ret;
}

template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; atan (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a)
{
	CDualNumber&lt;NUMVARIABLES&gt; ret;
	ret.m_real = tan(a.m_real);
	for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
		ret.m_dual[i] = a.m_dual[i] / (1.0f + a.m_real * a.m_real);
	return ret;
}

// templated so it can work for both a CDualNumber&lt;1&gt; and a float
template &lt;typename T&gt;
inline T SmoothStep (const T&amp; x)
{
	return x * x * (T(3.0f) - T(2.0f) * x);
}
 
//----------------------------------------------------------------------
// Test Functions
//----------------------------------------------------------------------
 
void TestSmoothStep (float input)
{
	// create a dual number as the value of x
	CDualNumber&lt;1&gt; x(input, 0);

	// calculate value and derivative using dual numbers
	CDualNumber&lt;1&gt; y = SmoothStep(x);

	// calculate numeric derivative using central differences
	float derivNumeric = (SmoothStep(input + EPSILON) - SmoothStep(input - EPSILON)) / (2.0f * EPSILON);

	// calculate actual derivative
	float derivActual = 6.0f * input - 6.0f * input * input;

	// show value and derivatives
	printf(&quot;(smoothstep) y=3x^2-2x^3  (x=%0.4f)\n&quot;, input);
	printf(&quot;  y = %0.4f\n&quot;, y.m_real);
	printf(&quot;  dual# dy/dx = %0.4f\n&quot;, y.m_dual[0]);
	printf(&quot;  actual dy/dx = %0.4f\n&quot;, derivActual);
	printf(&quot;  numeric dy/dx = %0.4f\n\n&quot;, derivNumeric);
}

void TestTrig (float input)
{
	// create a dual number as the value of x
	CDualNumber&lt;1&gt; x(input, 0);

	// sin
	{
		// calculate value and derivative using dual numbers
		CDualNumber&lt;1&gt; y = sin(x);

		// calculate numeric derivative using central differences
		float derivNumeric = (sin(input + EPSILON) - sin(input - EPSILON)) / (2.0f * EPSILON);

		// calculate actual derivative
		float derivActual = cos(input);

		// show value and derivatives
		printf(&quot;sin(%0.4f) = %0.4f\n&quot;, input, y.m_real);
		printf(&quot;  dual# dy/dx = %0.4f\n&quot;, y.m_dual[0]);
		printf(&quot;  actual dy/dx = %0.4f\n&quot;, derivActual);
		printf(&quot;  numeric dy/dx = %0.4f\n\n&quot;, derivNumeric);
	}

	// cos
	{
		// calculate value and derivative using dual numbers
		CDualNumber&lt;1&gt; y = cos(x);

		// calculate numeric derivative using central differences
		float derivNumeric = (cos(input + EPSILON) - cos(input - EPSILON)) / (2.0f * EPSILON);

		// calculate actual derivative
		float derivActual = -sin(input);

		// show value and derivatives
		printf(&quot;cos(%0.4f) = %0.4f\n&quot;, input, y.m_real);
		printf(&quot;  dual# dy/dx = %0.4f\n&quot;, y.m_dual[0]);
		printf(&quot;  actual dy/dx = %0.4f\n&quot;, derivActual);
		printf(&quot;  numeric dy/dx = %0.4f\n\n&quot;, derivNumeric);
	}

	// tan
	{
		// calculate value and derivative using dual numbers
		CDualNumber&lt;1&gt; y = tan(x);

		// calculate numeric derivative using central differences
		float derivNumeric = (tan(input + EPSILON) - tan(input - EPSILON)) / (2.0f * EPSILON);

		// calculate actual derivative
		float derivActual = 1.0f / (cos(input)*cos(input));

		// show value and derivatives
		printf(&quot;tan(%0.4f) = %0.4f\n&quot;, input, y.m_real);
		printf(&quot;  dual# dy/dx = %0.4f\n&quot;, y.m_dual[0]);
		printf(&quot;  actual dy/dx = %0.4f\n&quot;, derivActual);
		printf(&quot;  numeric dy/dx = %0.4f\n\n&quot;, derivNumeric);
	}

	// atan
	{
		// calculate value and derivative using dual numbers
		CDualNumber&lt;1&gt; y = atan(x);

		// calculate numeric derivative using central differences
		float derivNumeric = (atan(input + EPSILON) - atan(input - EPSILON)) / (2.0f * EPSILON);

		// calculate actual derivative
		float derivActual = 1.0f / (1.0f + input * input);

		// show value and derivatives
		printf(&quot;atan(%0.4f) = %0.4f\n&quot;, input, y.m_real);
		printf(&quot;  dual# dy/dx = %0.4f\n&quot;, y.m_dual[0]);
		printf(&quot;  actual dy/dx = %0.4f\n&quot;, derivActual);
		printf(&quot;  numeric dy/dx = %0.4f\n\n&quot;, derivNumeric);
	}
}

void TestSimple (float input)
{
	// create a dual number as the value of x
	CDualNumber&lt;1&gt; x(input, 0);

	// sqrt
	{
		// calculate value and derivative using dual numbers
		CDualNumber&lt;1&gt; y = CDualNumber&lt;1&gt;(3.0f) / sqrt(x);

		// calculate numeric derivative using central differences
		float derivNumeric = ((3.0f / sqrt(input + EPSILON)) - (3.0f / sqrt(input - EPSILON))) / (2.0f * EPSILON);

		// calculate actual derivative
		float derivActual = -3.0f / (2.0f * pow(input, 3.0f / 2.0f));

		// show value and derivatives
		printf(&quot;3/sqrt(%0.4f) = %0.4f\n&quot;, input, y.m_real);
		printf(&quot;  dual# dy/dx = %0.4f\n&quot;, y.m_dual[0]);
		printf(&quot;  actual dy/dx = %0.4f\n&quot;, derivActual);
		printf(&quot;  numeric dy/dx = %0.4f\n\n&quot;, derivNumeric);
	}

	// pow
	{
		// calculate value and derivative using dual numbers
		CDualNumber&lt;1&gt; y = pow(x + CDualNumber&lt;1&gt;(1.0f), 1.337f);

		// calculate numeric derivative using central differences
		float derivNumeric = ((pow(input + 1.0f + EPSILON, 1.337f)) - (pow(input + 1.0f - EPSILON, 1.337f))) / (2.0f * EPSILON);

		// calculate actual derivative
		float derivActual = 1.337f * pow(input + 1.0f, 0.337f);

		// show value and derivatives
		printf(&quot;(%0.4f+1)^1.337 = %0.4f\n&quot;, input, y.m_real);
		printf(&quot;  dual# dy/dx = %0.4f\n&quot;, y.m_dual[0]);
		printf(&quot;  actual dy/dx = %0.4f\n&quot;, derivActual);
		printf(&quot;  numeric dy/dx = %0.4f\n\n&quot;, derivNumeric);
	}
}

void Test2D (float inputx, float inputy)
{
	// create dual numbers as the value of x and y
	CDualNumber&lt;2&gt; x(inputx, 0);
	CDualNumber&lt;2&gt; y(inputy, 1);

	// z = 3x^2 - 2y^3
	{
		// calculate value and partial derivatives using dual numbers
		CDualNumber&lt;2&gt; z = CDualNumber&lt;2&gt;(3.0f) * x * x - CDualNumber&lt;2&gt;(2.0f) * y * y * y;

		// calculate numeric partial derivatives using central differences
		auto f = [] (float x, float y) {
			return 3.0f * x * x - 2.0f * y * y * y;
		};
		float derivNumericX = (f(inputx + EPSILON, inputy) - f(inputx - EPSILON, inputy)) / (2.0f * EPSILON);
		float derivNumericY = (f(inputx, inputy + EPSILON) - f(inputx, inputy - EPSILON)) / (2.0f * EPSILON);

		// calculate actual partial derivatives
		float derivActualX = 6.0f * inputx;
		float derivActualY = -6.0f * inputy * inputy;

		// show value and derivatives
		printf(&quot;z=3x^2-2y^3 (x = %0.4f, y = %0.4f)\n&quot;, inputx, inputy);
		printf(&quot;  z = %0.4f\n&quot;, z.m_real);
		printf(&quot;  dual# dz/dx = %0.4f\n&quot;, z.m_dual[0]);
		printf(&quot;  dual# dz/dy = %0.4f\n&quot;, z.m_dual[1]);
		printf(&quot;  actual dz/dx = %0.4f\n&quot;, derivActualX);
		printf(&quot;  actual dz/dy = %0.4f\n&quot;, derivActualY);
		printf(&quot;  numeric dz/dx = %0.4f\n&quot;, derivNumericX);
		printf(&quot;  numeric dz/dy = %0.4f\n\n&quot;, derivNumericY);
	}
}

void Test3D (float inputx, float inputy, float inputz)
{
	// create dual numbers as the value of x and y
	CDualNumber&lt;3&gt; x(inputx, 0);
	CDualNumber&lt;3&gt; y(inputy, 1);
	CDualNumber&lt;3&gt; z(inputz, 2);

	// w = sin(x*cos(2*y)) / tan(z)
	{
		// calculate value and partial derivatives using dual numbers
		CDualNumber&lt;3&gt; w = sin(x * cos(CDualNumber&lt;3&gt;(2.0f)*y)) / tan(z);

		// calculate numeric partial derivatives using central differences
		auto f = [] (float x, float y, float z) {
			return sin(x*cos(2.0f*y)) / tan(z);
		};
		float derivNumericX = (f(inputx + EPSILON, inputy, inputz) - f(inputx - EPSILON, inputy, inputz)) / (2.0f * EPSILON);
		float derivNumericY = (f(inputx, inputy + EPSILON, inputz) - f(inputx, inputy - EPSILON, inputz)) / (2.0f * EPSILON);
		float derivNumericZ = (f(inputx, inputy, inputz + EPSILON) - f(inputx, inputy, inputz - EPSILON)) / (2.0f * EPSILON);

		// calculate actual partial derivatives
		float derivActualX = cos(inputx*cos(2.0f*inputy))*cos(2.0f * inputy) / tan(inputz);
		float derivActualY = cos(inputx*cos(2.0f*inputy)) *-2.0f*inputx*sin(2.0f*inputy) / tan(inputz);
		float derivActualZ = sin(inputx * cos(2.0f * inputy)) / -(sin(inputz) * sin(inputz));

		// show value and derivatives
		printf(&quot;w=sin(x*cos(2*y))/tan(z) (x = %0.4f, y = %0.4f, z = %0.4f)\n&quot;, inputx, inputy, inputz);
		printf(&quot;  w = %0.4f\n&quot;, w.m_real);
		printf(&quot;  dual# dw/dx = %0.4f\n&quot;, w.m_dual[0]);
		printf(&quot;  dual# dw/dy = %0.4f\n&quot;, w.m_dual[1]);
		printf(&quot;  dual# dw/dz = %0.4f\n&quot;, w.m_dual[2]);
		printf(&quot;  actual dw/dx = %0.4f\n&quot;, derivActualX);
		printf(&quot;  actual dw/dy = %0.4f\n&quot;, derivActualY);
		printf(&quot;  actual dw/dz = %0.4f\n&quot;, derivActualZ);
		printf(&quot;  numeric dw/dx = %0.4f\n&quot;, derivNumericX);
		printf(&quot;  numeric dw/dy = %0.4f\n&quot;, derivNumericY);
		printf(&quot;  numeric dw/dz = %0.4f\n\n&quot;, derivNumericZ);
	}
}

int main (int argc, char **argv)
{
	TestSmoothStep(0.5f);
	TestSmoothStep(0.75f);
	TestTrig(PI * 0.25f);
	TestSimple(3.0f);
	Test2D(1.5f, 3.28f);
	Test3D(7.12f, 8.93f, 12.01f);
    return 0;
}
[/code]

<h1>Closing</h1>

One of the neatest things about dual numbers is that they give precise results.  They are not approximations and they are not numerical methods, unlike the central differences method that I compared them to in the example program (More info on numerical derivatives here: <a href="http://blog.demofox.org/2015/08/02/finite-differences/" target="_blank">Finite Differences</a>).  Using dual numbers gives you exact derivatives, within the limitations of (eg) floating point math.

It turns out that backpropagation (the method that is commonly used to train neural networks) is just steepest gradient descent.  You can read about that here: <a href="https://idontgetoutmuch.wordpress.com/2013/10/13/backpropogation-is-just-steepest-descent-with-automatic-differentiation-2/" target="_blank">Backpropogation is Just Steepest Descent with Automatic Differentiation</a>

That makes me wonder how dual numbers would do in run time speed compared to back propagation as well as numerical methods for getting the gradient to adjust a neural network during training.

If I had to guess, I'd say that dual numbers may be slightly slower than backpropagation, but not as slow as numerical methods which are going to be much, much slower.  We'll see though.  It may be much easier to implement neural network learning using dual numbers compared to backpropagation, so may be worth an exploration and write up, even if only to make neural networks a little bit more accessible to people.

Comments, corrections, etc?  Let me know in the comments below, or contact me on twitter at <a href="https://twitter.com/Atrix256" target="_blank">@Atrix256</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5949</wp:post_id>
		<wp:post_date><![CDATA[2017-02-20 14:50:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-20 22:50:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[multivariable-dual-numbers-automatic-differentiation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="neural-networks"><![CDATA[Neural Networks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495629465;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1325;}i:1;a:1:{s:2:"id";i:5999;}i:2;a:1:{s:2:"id";i:6201;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to Train Neural Networks With Backpropagation</title>
		<link>http://blog.demofox.org/2017/03/09/how-to-train-neural-networks-with-backpropagation/</link>
		<pubDate>Fri, 10 Mar 2017 01:47:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=5999</guid>
		<description></description>
		<content:encoded><![CDATA[This post is an attempt to demystify backpropagation, which is the most common method for training neural networks.  This post is broken into a few main sections:
<ol>
	<li>Explanation</li>
	<li>Working through examples</li>
	<li>Simple sample C++ source code using only standard includes</li>
	<li>Links to deeper resources to continue learning</li>
</ol>

Let's talk about the basics of neural nets to start out, specifically multi layer perceptrons.  This is a common type of neural network, and is the type we will be talking about today.  There are other types of neural networks though such as convolutional neural networks, recurrent neural networks, Hopfield networks and more.  The good news is that backpropagation applies to most other types of neural networks too, so what you learn here will be applicable to other types of networks.

<h1>Basics of Neural Networks</h1>

A neural network is made up layers.

Each layer has some number of neurons in it.

Every neuron is connected to every neuron in the previous and next layer.

Below is a diagram of a neural network, courtesy of wikipedia. Every circle is a neuron.  This network takes 3 floating point values as input, passes them through 4 neurons in a hidden layer and outputs two floating point values.  The hidden layer neurons and the output layer neurons do processing of the values they are giving, but the input neurons do not.

<img src="https://upload.wikimedia.org/wikipedia/commons/4/46/Colored_neural_network.svg" style="background:white"/>

To calculate the output value of a single neuron, you multiply every input into that neuron by a weight for that input, sum them up, and add a bias that is set for the neuron.  This "weighted input" value is fed into an activation function and the result is the output value of that neuron.  Here is a diagram for a single neuron:
<img src="https://demofox2.files.wordpress.com/2017/02/Neuron.png"/>

The code for calculating the output of a single neuron could look like this:
[code language="cpp"]
float weightedInput = bias;

for (int i = 0; i &lt; inputs.size(); ++i)
  weightedInput += inputs[i] * weights[i];

float output = Activation(weightedInput);
[/code]

To evaluate an entire network of neurons, you just repeat this process for all neurons in the network, going from left to right (from input to output).

Neural networks are basically black boxes.  We train them to give specific ouputs when we give them specific inputs, but it is often difficult to understand what it is that they've learned, or what part of the data they are picking up on.

Training a neural network just means that we adjust the weight and bias values such that when we give specific inputs, we get the desired outputs from the network.  Being able to figure out what weights and biases to use can be tricky, especially for networks with lots of layers and lots of neurons per layer.  This post talks about how to do just that.

Regarding training, there is a funny story where some people trained a neural network to say whether or not a military tank was in a photograph.  It had a very high accuracy rate with the test data they trained it with, but when they used it with new data, it had terrible accuracy.  It turns out that the training data was a bit flawed.  Pictures of tanks were all taken on a sunny day, and the pictures without tanks were taken on a cloudy day.  The network learned how to detect whether a picture was of a sunny day or a cloudy day, not whether there was a tank in the photo or not!

This is one type of pitfall to watch out for when dealing with neural networks - having good training data - but there are many other pitfalls to watch out for too.  Architecting and training neural networks is quite literally an art form.  If it were painting, this post would be teaching you how to hold a brush and what the primary colors are.  There are many, many techniques to learn beyond what is written here to use as tools in your toolbox.  The information in this post will allow you to succeed in training neural networks, but there is a lot more to learn to get higher levels of accuracy from your nets!

<h1>Neural Networks Learn Using Gradient Descent</h1>

Let's take a look at a simple neural network where we've chosen random values for the weights and the bias:
<img src="https://demofox2.files.wordpress.com/2017/03/NN1.png"/>

If given two floating point inputs, we'd calculate the output of the network like this:

$latex Output = Activation(Input0 * Weight0 + Input1 * Weight1 + Bias)$

Plugging in the specific values for the weights and biases, it looks like this:

$latex Output = Activation(Input0 * 0.23 + Input1 * -0.1 + 0.3)$

Let's say that we want this network to output a zero when we give an input of 1,0, and that we don't care what it outputs otherwise.  We'll plug 1 and 0 in for Input0 and Input1 respectively and see what the output of the network is right now:

$latex Output = Activation(1* 0.23 + 0 * -0.1 + 0.3) \\\\
Output = Activation(0.53)
$

For the activation function, we are going to use a common one called the sigmoid activation function, which is also sometimes called the logistic activation function.  It looks like this:

$latex \\sigma(x) = \\frac{1}{1+e^{-x}}$

Without going into too much detail, the reason why sigmoid is so commonly used is because it's a smoother and differentiable version of the step function.

Applying that activation function to our output neuron, we get this:

$latex Output = Activation(0.53) \\\\
Output = \\sigma(0.53) \\\\
Output = 0.6295
$

So, we plugged in 1 and 0, but instead of getting a 0 out, we got 0.6295.  Our weights and biases are wrong, but how do we correct them?

The secret to correcting our weights and biases is whichever of these terms seem least scary to you: slopes, derivatives, gradients.

If "slope" was the least scary term to you, you probably remember the line formula $latex y=mx+b$ and that the m value was the "rise over run" or the slope of the line.  Well believe it or not, that's all a derivative is.  A derivative is just the slope of a function at a specific point on that function.  Even if a function is curved, you can pick a point on the graph and get a slope at that point.  The notation for a derivative is $latex \\frac{dy}{dx}$, which literally means "change in y divided by change in x", or "delta y divided by delta x", which is literally rise over run.

In the case of a linear function (a line), it has the same derivative over the entire thing, so you can take a step size of any size on the x axis and multiply that step size by $latex \\frac{dy}{dx}$ to figure out how much to add or subtract from y to stay on the line.

In the case of a non linear function, the derivative can change from one point to the next, so this slope is only guaranteed to be accurate for an infinitely small step size. In practice, people just often use "small" step sizes and calling it good enough, which is what we'll be doing momentarily.

Now that you realize you already knew what a derivative is, we have to talk about partial derivatives.  There really isn't anything very scary about them and they still mean the exact same thing - they are the slope!  They are even calculated the exact same way, but they use a fancier looking d in their notation: $latex \\frac{\\partial y}{\\partial x}$.

The reason partial derivatives even exist is because if you have a function of multiple variables like $latex z=f(x,y)=x^2+3y+2$, you have two variables that you can take the derivative of.  You can calculate $latex \\frac{\\partial z}{\\partial x}$ and $latex \\frac{\\partial z}{\\partial y}$.  The first value tells you how much the z value changes for a change in x, the second value tells you how much the z value changes for a change in y.

By the way, if you are curious, the partial derivatives for that function above are below.  When calculating partial derivatives, any variable that isn't the one you care about, you just treat as a constant and do normal derivation.

$latex \\frac{\\partial z}{\\partial x} = 2x\\\\
\\frac{\\partial z}{\\partial y} = 3\\\\
$

If you put both of those values together into a vector $latex (\\frac{\\partial z}{\\partial x},\\frac{\\partial z}{\\partial y})$ you have what is called the gradient vector.

The gradient vector has an interesting property, which is that it points in the direction that makes the function output grow the most.  Basically, if you think of your function as a surface, it points up the steepest direction of the surface, from the point you evaluated the function at.

We are going to use that property to train our neural network by doing the following:
<ol>
	<li>Calculate the gradient of a function that describes the error in our network.  This means we will have the partial derivatives of all the weights and biases in the network.</li>
	<li>Multiply the gradient by a small "learning rate" value, such as 0.05</li>
	<li>Subtract these scaled derivatives from the weights and biases to decrease the error a small amount.</li>
</ol>

This technique is called steepest gradient descent (SGD) and when we do the above, our error will decrease by a small amount.  The only exception is that if we use too large of a learning rate, it's possible that we make the error grow, but usually the error will decrease.

We will do the above over and over, until either the error is small enough, or we've decided we've tried enough iterations that we think the neural network is never going to learn the things we want to teach it.  If the network doesn't learn, it means it needs to be re-architected with a different structure, different numbers of neurons and layers, different activation functions, etc.  This is part of the "art" that I mentioned earlier.

Before moving on, there is one last thing to talk about: global minimums vs local minimums.

Imagine that the function describing the error in our network is visualized as bumpy ground.  When we initialize our weights and biases to random numbers we are basically just choosing a random location on the ground to start at.  From there, we act like a ball, and just roll down hill from wherever we are.  We are definitely going to get to the bottom of SOME bump / hole in the ground, but there is absolutely no reason to except that we'll get to the bottom of the DEEPEST bump / hole.

The problem is that SGD will find a LOCAL minimum - whatever we are closest too - but it might not find the GLOBAL minimum.

In practice, this doesn't seem to be too large of a problem, at least for people casually using neural nets like you and me, but it is one of the active areas of research in neural networks: how do we do better at finding more global minimums?

You might notice the strange language I'm using where I say we have a function that describes the error, instead of just saying we use the error itself.  The function I'm talking about is called the "cost function" and the reason for this is that different ways of describing the error give us different desirable properties.

For instance, a common cost function is to use mean squared error of the actual output compared to the desired output.

For a single training example, you plug the input into the network and calculate the output.  You then plug the actual output and the target output into the function below:

$latex Cost = ||target-output||^2$

In other words, you take the vector of the neuron outputs, subtract it from the actual output that we wanted, calculate the length of the resulting vector and square it.  This gives you the squared error.

The reason we use squared error in the cost function is because this way error in either direction is a positive number, so when gradient descent does it's work, we'll find the smallest magnitude of error, regardless of whether it's positive or negative amounts.  We could use absolute value, but absolute value isn't differentiable, while squaring is.

To handle calculating the cost of multiple inputs and outputs, you just take the average of the squared error for each piece of training data.  This gives you the mean squared error as the cost function across all inputs.  You also average the derivatives to get the combined gradient.

<h1>More on Training</h1>

Before we go into backpropagation, I want to re-iterate this point: Neural Networks Learn Using Gradient Descent.

All you need is the gradient vector of the cost function, aka the partial derivatives of all the weights and the biases for the cost.

Backpropagation gets you the gradient vector, but it isn't the only way to do so!

Another way to do it is to use dual numbers which you can read about on my post about them: <a href="http://blog.demofox.org/2017/02/20/multivariable-dual-numbers-automatic-differentiation/" target="_blank">Multivariable Dual Numbers & Automatic Differentiation</a>.

Using dual numbers, you would evaluate the output of the network, using dual numbers instead of floating point numbers, and at the end you'd have your gradient vector.  It's not quite as efficient as backpropagation (or so I've heard, I haven't tried it), but if you know how dual numbers work, it's super easy to implement.

Another way to get the gradient vector is by doing so numerically using finite differences.  You can read about numerical derivatives on my post here: <a href="http://blog.demofox.org/2015/08/02/finite-differences/" target="_blank">Finite Differences</a>

Basically what you would do is if you were trying to calculate the partial derivative of a weight, like $latex \\frac{\\partial Cost}{\\partial Weight0}$, you would first calculate the cost of the network as usual, then you would add a small value to Weight0 and evaluate the cost again.  You subtract the new cost from the old cost, and divide by the small value you added to Weight0.  This will give you the partial derivative for that weight value.  You'd repeat this for all your weights and biases.

Since realistic neural networks often have MANY MANY weights and biases, calculating the gradient numerically is a REALLY REALLY slow process because of how many times you have to run the network to get cost values with adjusted weights.  The only upside is that this method is even easier to implement than dual numbers.  You can literally stop reading and go do this right now if you want to :P

Lastly, there is a way to train neural networks which doesn't use derivatives or the gradient vector, but instead uses the more brute force-ish method of genetic algorithms.

Using genetic algorithms to train neural networks is a huge topic even to summarize, but basically you create a bunch of random networks, see how they do, and try combining features of networks that did well.  You also let some of the "losers" reproduce as well, and add in some random mutation to help stay out of local minimums.  Repeat this for many many generations, and you can end up with a well trained network!

Here's a fun video visualizing neural networks being trained by genetic algorithms: <a href="https://www.youtube.com/watch?v=Iv_Fy6Urik4">Youtube: Learning using a genetic algorithm on a neural network</a>

<h1>Backpropagation is Just the Chain Rule!</h1>

Going back to our talk of dual numbers for a second, dual numbers are useful for what is called "forward mode automatic differentiation".

Backpropagation actually uses "reverse mode automatic differentiation", so the two techniques are pretty closely tied, but they are both made possible by what is known as the chain rule.

The chain rule basically says that if you can write a derivative like this:

$latex dy/dx$

That you can also write it like this:

$latex dy/du*du/dx$

That might look weird or confusing, but since we know that derivatives are actual values, aka actual ratios, aka actual FRACTIONS, let's think back to fractions for a moment.

$latex 3/2 = 1.5$

So far so good?  Now let's choose some number out of the air - say, 5 - and do the same thing we did with the chain rule
$latex 3/2 = \\\\
3/5 * 5/2 = \\\\
15/10 = \\\\
3/2 = \\\\
1.5$

Due to doing the reverse of cross cancellation, we are able to inject multiplicative terms into fractions (and derivatives!) and come up with the same answer.

Ok, but who cares?

Well, when we are evaluating the output of a neural network for given input, we have lots of equations nested in each other.  We have neurons feeding into neurons feeding into neurons etc, with the logistic activation function at each step.

Instead of trying to figure out how to calculate the derivatives of the weights and biases for the entire monster equation (it's common to have hundreds or thousands of neurons or more!), we can instead calculate derivatives for each step we do when evaluating the network and then compose them together.

Basically, we can break the problem into small bites instead of having to deal with the equation in it's entirety.

Instead of calculating the derivative of how a specific weight affects the cost directly, we can instead calculate these:
<ol>
	<li>dCost/dOutput: The derivative of how a neuron's output affects cost</li>
	<li>dOutput/dWeightedInput: The derivative of how the weighted input of a neuron affects a neuron's output</li>
	<li>dWeightedInput/dWeight: The derivative of how a weight affects the weighted input of a neuron</li>
</ol>

Then, when we multiply them all together, we get the real value that we want:
dCost/dOutput * dOutput/dWeightedInput * dWeightedInput/dWeight = dCost/dWeight

Now that we understand all the basic parts of back propagation, I think it'd be best to work through some examples of increasing complexity to see how it all actually fits together!

<h1>Backpropagation Example 1: Single Neuron, One Training Example</h1>

This example takes one input and uses a single neuron to make one output.  The neuron is only trained to output a 0 when given a 1 as input, all other behavior is undefined.  This is implemented as the Example1() function in the sample code.  

<img src="https://demofox2.files.wordpress.com/2017/03/Example1.png"/>

Let's work through the training process manually.

We put a 1 as input and calculate Z which is the "weighted input" of the neuron.

$latex Z = input*weight+bias \\\\
Z = 1*0.3+0.5 \\\\
Z = 0.8$

Next, we need to calculate O which is the neuron output.  We calculate this by putting the weighted input through the sigmoid activation function.

$latex O = \\sigma(0.8) \\\\
O = 0.6900$

The last step of the "forward pass" is to calculate the cost.  We are going to use half squared error as our cost, to slightly simplify some math.

$latex Cost = 0.5*||target - actual||^2\\\\
Cost = 0.5*||0-0.6900||^2\\\\
Cost = 0.5*0.4761\\\\
Cost = 0.238
$

Now the backpropagation pass begins, which will give us the partial derivatives we need to be able to adjust this network and do one iteration of training.

First we want to calculate dCost/dO which tells us how much the cost changes when the neuron output changes.  Thanks to the nice form of our cost function, that value is simple to calculate:

$latex \\frac{\\partial Cost}{\\partial O} = O - target\\\\
\\frac{\\partial Cost}{\\partial O} = 0.69 - 0\\\\
\\frac{\\partial Cost}{\\partial O} = 0.69$

Next we want to calculate dO/dZ which tells us how much the neuron output changes when the neuron's weighted input changes.  The activation function we used also makes this very easy to calculate:

$latex \\frac{\\partial O}{\\partial Z} = O * (1-O)\\\\
\\frac{\\partial O}{\\partial Z} = 0.69 * 0.31\\\\
\\frac{\\partial O}{\\partial Z} = 0.2139$

Next we are going to multiply these two values together to get dCost/dZ which tells us how much the cost changes when the weighted input to the neuron changes.

$latex \\frac{\\partial Cost}{\\partial Z} = \\frac{\\partial Cost}{\\partial O} * \\frac{\\partial O}{\\partial Z}\\\\
\\frac{\\partial Cost}{\\partial Z} = 0.69 * 0.2139 \\\\
\\frac{\\partial Cost}{\\partial Z} = 0.1476$

This value has two special meanings.  Firstly, this value represents the amount of error in this neuron.  Secondly, this value represents dCost/dBias, which is one of the values we need to do training!

$latex \\frac{\\partial Cost}{\\partial bias} = \\frac{\\partial Cost}{\\partial Z}\\\\
\\frac{\\partial Cost}{\\partial bias} = 0.1476\\\\$

Next, we need dZ/dWeight, which tells us how much the weighted input of the neuron changes when you change the weight.  This is just the input value, which is 1.  This makes intuitive sense because if you added 1.0 to the weight, Z would grow by whatever the input is.

Now that we have dCost/dZ and dZ/dWeight, we can calculate dCost/dWeight:

$latex \\frac{\\partial Cost}{\\partial Weight} = \\frac{\\partial Cost}{\\partial Z} * \\frac{\\partial Z}{\\partial Weight}\\\\
\\frac{\\partial Cost}{\\partial Weight} = 0.1476 * 1\\\\
\\frac{\\partial Cost}{\\partial Weight} = 0.1476$

We now have the partial derivatives we need to be able to train our network!

Using a learning rate of 0.5, we'll first update our weight:

$latex Weight = Weight - \\frac{\\partial Cost}{\\partial Weight} * 0.5\\\\
Weight = 0.3 - 0.1476 * 0.5\\\\
Weight = 0.2262$

Then we'll update our bias:

$latex Bias = Bias - \\frac{\\partial Cost}{\\partial Bias } * 0.5\\\\
Bias = 0.5 - 0.1476 * 0.5\\\\
Bias = 0.4262$

Our network has learned a very small amount!

To verify this, let's calculate the network's output and cost with these new values.

$latex Z = input*weight+bias \\\\
Z = 1*0.2262+0.4262 \\\\
Z = 0.6524\\\\
\\\\
O = \\sigma(0.6524) \\\\
O = 0.6576\\\\
\\\\
Cost = 0.5*||target - actual||^2\\\\
Cost = 0.5*||0-0.6576||^2\\\\
Cost = 0.5*0.4324\\\\
Cost = 0.2162
$

Our cost decreased from 0.238 to 0.2162 due to our training, so we have indeed improved the error of the network, hooray!

After 10,000 iterations of this, the cost drops down to 0.000026 (weight = -2.564909, bias = -2.364907).  That sounds pretty good, and it is decent, but since that is based on error squared, it looks more accurate than it is.  The error at that point is 0.007176.  Specifically, that means that when we input a 1, it outputs a 0.007176 instead of zero.

With a larger number of trainings it improves though.  At 100,000 iterations it gives 0.002246 as output, and at 1,000,000 iterations it gives 0.000728 as output.

You could also try adjusting the learning rate parameter to see if you can make it get to a higher accuracy more quickly, and then perhaps dropping it down to a smaller number once you got there, to get the higher accuracy.  Again, neural networks are an art and there are all sorts of techniques you can use to attempt to make them better (more accurate, learn faster, etc).

<h1>Backpropagation Example 2: Single Neuron, Two Training Examples</h1>

Let's start with the same neural network from last time: 
<img src="https://demofox2.files.wordpress.com/2017/03/Example1.png"/>

This time, we are going to teach it not only that it should output 0 when given a 1, but also that it should output 1 when given a 0.

We have two training examples, and we are training the neuron to act like a NOT gate.  This is implemented as the Example2() function in the sample code.

The first thing we do is calculate the derivatives (gradient vector) for each of the inputs.

We already calculated the "input 1, output 0" derivatives in the last example:
$latex \\frac{\\partial Cost}{\\partial Weight} = 0.1476 \\\\
\\frac{\\partial Cost}{\\partial Bias} = 0.1476$

If we follow the same steps with the "input 0, output 1" training example we get these:
$latex \\frac{\\partial Cost}{\\partial Weight} = 0.0 \\\\
\\frac{\\partial Cost}{\\partial Bias} = -0.0887$

To get the actual derivatives to train the network with, we just average them!
$latex \\frac{\\partial Cost}{\\partial Weight} = 0.0738 \\\\
\\frac{\\partial Cost}{\\partial Bias} = 0.0294$

From there, we do the same adjustments as before to the weight and bias values to get a weight of 0.2631 and a bias of 0.4853.

If you are wondering how to calculate the cost, again you just take the cost of each training example and average them.  Adjusting the weight and bias values causes the cost to drop from 0.1547 to 0.1515, so we have made progress.

It takes 10 times as many iterations with these two training examples to get the same level of error as it did with only one training example though.

As we saw in the last example, after 10,000 iterations, the error was 0.007176.

In this example, after 100,000 iterations, the error is 0.007141.  At that point, weight is -9.879733 and bias is 4.837278

<h1>Backpropagation Example 3: Two Neurons in One Layer</h1>

Here is the next example, implemented as Example3() in the sample code.  Two input neurons feed to two neurons in a single layer giving two outputs.

<img src="https://demofox2.files.wordpress.com/2017/03/Example3.png"/>

Let's look at how we'd calculate the derivatives needed to train this network using the training example that when we give the network 01 as input that it should give out 10 as output.

First comes the forward pass where we calculate the network's output when we give it 01 as input.

$latex Z0=input0*weight0+input1*weight1+bias0 \\\\
Z0=0*0.2+1*0.8+0.5 \\\\
Z0=1.3 \\\\
\\\\
O0=\\sigma(1.3) \\\\
O0=0.7858\\\\
\\\\
Z1=input0*weight2+input0*weight3+bias1\\\\
Z1=0*0.6+1*0.4+0.1\\\\
Z1=0.5\\\\
\\\\
O1=\\sigma(0.5)\\\\
O1=0.6225$

Next we calculate a cost.  We don't strictly need to do this step since we don't use this value during backpropagation, but this will be useful to verify that we've improved things after an iteration of training.

$latex Cost=0.5*||target-actual||^2\\\\
Cost=0.5*||(1,0)-(0.7858,0.6225)||^2\\\\
Cost=0.5*||(0.2142,-0.6225)||^2\\\\
Cost=0.5*0.6583^2\\\\
Cost=0.2167$

Now we begin the backwards pass to calculate the derivatives that we'll need for training.

Let's calculate dCost/dZ0 aka the error in neuron 0.  We'll do this by calculating dCost/dO0, then dO0/dZ0 and then multiplying them together to get dCost/dZ0.  Just like before, this is also the derivative for the bias of the neuron, so this value is also dCost/dBias0.

$latex \\frac{\\partial Cost}{\\partial O0}=O0-target0\\\\
\\frac{\\partial Cost}{\\partial O0}=0.7858-1\\\\
\\frac{\\partial Cost}{\\partial O0}=-0.2142\\\\
\\\\
\\frac{\\partial O0}{\\partial Z0} = O0 * (1-O0)\\\\
\\frac{\\partial O0}{\\partial Z0} = 0.7858 * 0.2142\\\\
\\frac{\\partial O0}{\\partial Z0} = 0.1683\\\\
\\\\
\\frac{\\partial Cost}{\\partial Z0} = \\frac{\\partial Cost}{\\partial O0} * \\frac{\\partial O0}{\\partial Z0}\\\\
\\frac{\\partial Cost}{\\partial Z0} = -0.2142 * 0.1683\\\\
\\frac{\\partial Cost}{\\partial Z0} = -0.0360\\\\
\\\\
\\frac{\\partial Cost}{\\partial Bias0} = -0.0360
$

We can use dCost/dZ0 to calculate dCost/dWeight0 and dCost/dWeight1 by multiplying it by dZ0/dWeight0 and dZ0/dWeight1, which are input0 and input1 respectively.

$latex \\frac{\\partial Cost}{\\partial Weight0} = \\frac{\\partial Cost}{\\partial Z0} * \\frac{\\partial Z0}{\\partial Weight0} \\\\
\\frac{\\partial Cost}{\\partial Weight0} = -0.0360 * 0 \\\\
\\frac{\\partial Cost}{\\partial Weight0} = 0\\\\
\\\\
\\frac{\\partial Cost}{\\partial Weight1} = \\frac{\\partial Cost}{\\partial Z0} * \\frac{\\partial Z0}{\\partial Weight1} \\\\
\\frac{\\partial Cost}{\\partial Weight1} = -0.0360 * 1 \\\\
\\frac{\\partial Cost}{\\partial Weight1} = -0.0360
$

Next we need to calculate dCost/dZ1 aka the error in neuron 1.  We'll do this like before.  We'll calculate dCost/dO1, then dO1/dZ1 and then multiplying them together to get dCost/dZ1.  Again, this is also the derivative for the bias of the neuron, so this value is also dCost/dBias1.

$latex \\frac{\\partial Cost}{\\partial O1}=O1-target1\\\\
\\frac{\\partial Cost}{\\partial O1}=0.6225-0\\\\
\\frac{\\partial Cost}{\\partial O1}=0.6225\\\\
\\\\
\\frac{\\partial O1}{\\partial Z1} = O1 * (1-O1)\\\\
\\frac{\\partial O1}{\\partial Z1} = 0.6225 * 0.3775\\\\
\\frac{\\partial O1}{\\partial Z1} = 0.235\\\\
\\\\
\\frac{\\partial Cost}{\\partial Z1} = \\frac{\\partial Cost}{\\partial O1} * \\frac{\\partial O1}{\\partial Z1}\\\\
\\frac{\\partial Cost}{\\partial Z1} = 0.6225 * 0.235\\\\
\\frac{\\partial Cost}{\\partial Z1} = 0.1463\\\\
\\\\
\\frac{\\partial Cost}{\\partial Bias1} = 0.1463
$

Just like with neuron 0, we can use dCost/dZ1 to calculate dCost/dWeight2 and dCost/dWeight3 by multiplying it by dZ1/dWeight2 and dZ1/dWeight2, which are input0 and input1 respectively.

$latex \\frac{\\partial Cost}{\\partial Weight2} = \\frac{\\partial Cost}{\\partial Z1} * \\frac{\\partial Z1}{\\partial Weight2} \\\\
\\frac{\\partial Cost}{\\partial Weight2} = 0.1463 * 0 \\\\
\\frac{\\partial Cost}{\\partial Weight2} = 0\\\\
\\\\
\\frac{\\partial Cost}{\\partial Weight3} = \\frac{\\partial Cost}{\\partial Z1} * \\frac{\\partial Z1}{\\partial Weight3} \\\\
\\frac{\\partial Cost}{\\partial Weight3} = 0.1463 * 1 \\\\
\\frac{\\partial Cost}{\\partial Weight3} = 0.1463
$

After using these derivatives to update the weights and biases with a learning rate of 0.5, they become:
Weight0 = 0.2
Weight1 = 0.818
Weight2 = 0.6
Weight3 = 0.3269
Bias0 = 0.518
Bias1 = 0.0269

Using these values, the cost becomes 0.1943, which dropped from 0.2167, so we have indeed made progress with our learning!

Interestingly, it takes about twice as many trainings as example 1 to get a similar level of error.  In this case, 20,000 iterations of learning results in an error of 0.007142.

If we have the network learn the four patterns below instead:
00 = 00
01 = 10
10 = 10
11 = 11

It takes 520,000 learning iterations to get to an error of 0.007223.

<h1>Backpropagation Example 4: Two Layers, Two Neurons Each</h1>

This is the last example, implemented as Example4() in the sample code. Two input neurons feed to two neurons in a hidden layer, feeding into two neurons in the output layer giving two outputs.  This is the exact same network that is walked through on this page which is also linked to at the end of this post: <a href="https://mattmazur.com/2015/03/17/a-step-by-step-backpropagation-example/" target="_blank">A Step by Step Backpropagation Example</a>

<img src="https://demofox2.files.wordpress.com/2017/03/Example4.png"/>


First comes the forward pass where we calculate the network's output.  We'll give it 0.05 and 0.1 as input, and we'll say our desired output is 0.01 and 0.99.

$latex Z0=input0*weight0+input1*weight1+bias0 \\\\
Z0=0.05*0.15+0.1*0.2+0.35 \\\\
Z0=0.3775 \\\\
\\\\
O0=\\sigma(0.3775) \\\\
O0=0.5933 \\\\
\\\\
Z1=input0*weight2+input1*weight3+bias1\\\\
Z1=0.05*0.25+0.1*0.3+0.35\\\\
Z1=0.3925\\\\
\\\\
O1=\\sigma(0.3925)\\\\
O1=0.5969\\\\
\\\\
Z2=O0*weight4+O1*weight5+bias2\\\\
Z2=0.5933*0.4+0.5969*0.45+0.6\\\\
Z2=1.106\\\\
\\\\
O2=\\sigma(1.106)\\\\
O2=0.7514\\\\
\\\\
Z3=O0*weight6+O1*weight7+bias3\\\\
Z3=0.5933*0.5+0.5969*0.55+0.6\\\\
Z3=1.225\\\\
\\\\
O3=\\sigma(1.225)\\\\
O3=0.7729
$

Next we calculate the cost, taking O2 and O3 as our actual output, and 0.01 and 0.99 as our target (desired) output.

$latex Cost=0.5*||target-actual||^2\\\\
Cost=0.5*||(0.01,0.99)-(0.7514,0.7729)||^2\\\\
Cost=0.5*||(-0.7414,-0.2171)||^2\\\\
Cost=0.5*0.7725^2\\\\
Cost=0.2984$

Now we start the backward pass to calculate the derivatives for training.

<h2>Neuron 2</h2>

First we'll calculate dCost/dZ2 aka the error in neuron 2, remembering that the value is also dCost/dBias2.

$latex \\frac{\\partial Cost}{\\partial O2}=O2-target0\\\\
\\frac{\\partial Cost}{\\partial O2}=0.7514-0.01\\\\
\\frac{\\partial Cost}{\\partial O2}=0.7414\\\\
\\\\
\\frac{\\partial O2}{\\partial Z2} = O2 * (1-O2)\\\\
\\frac{\\partial O2}{\\partial Z2} = 0.7514 * 0.2486\\\\
\\frac{\\partial O2}{\\partial Z2} = 0.1868\\\\
\\\\
\\frac{\\partial Cost}{\\partial Z2} = \\frac{\\partial Cost}{\\partial O2} * \\frac{\\partial O2}{\\partial Z2}\\\\
\\frac{\\partial Cost}{\\partial Z2} = 0.7414 * 0.1868\\\\
\\frac{\\partial Cost}{\\partial Z2} = 0.1385\\\\
\\\\
\\frac{\\partial Cost}{\\partial Bias2} = 0.1385
$

We can use dCost/dZ2 to calculate dCost/dWeight4 and dCost/dWeight5.

$latex
\\frac{\\partial Cost}{\\partial Weight4} = \\frac{\\partial Cost}{\\partial Z2} * \\frac{\\partial Z2}{\\partial Weight4}\\\\
\\frac{\\partial Cost}{\\partial Weight4} = \\frac{\\partial Cost}{\\partial Z2} * O0\\\\
\\frac{\\partial Cost}{\\partial Weight4} = 0.1385 * 0.5933\\\\
\\frac{\\partial Cost}{\\partial Weight4} = 0.0822\\\\
\\\\
\\frac{\\partial Cost}{\\partial Weight5} = \\frac{\\partial Cost}{\\partial Z2} * \\frac{\\partial Z2}{\\partial Weight5}\\\\
\\frac{\\partial Cost}{\\partial Weight5} = \\frac{\\partial Cost}{\\partial Z2} * O1\\\\
\\frac{\\partial Cost}{\\partial Weight5} = 0.1385 * 0.5969\\\\
\\frac{\\partial Cost}{\\partial Weight5} = 0.0827\\\\
$

<h2>Neuron 3</h2>

Next we'll calculate dCost/dZ3 aka the error in neuron 3, which is also dCost/dBias3.

$latex \\frac{\\partial Cost}{\\partial O3}=O3-target1\\\\
\\frac{\\partial Cost}{\\partial O3}=0.7729-0.99\\\\
\\frac{\\partial Cost}{\\partial O3}=-0.2171\\\\
\\\\
\\frac{\\partial O3}{\\partial Z3} = O3 * (1-O3)\\\\
\\frac{\\partial O3}{\\partial Z3} = 0.7729 * 0.2271\\\\
\\frac{\\partial O3}{\\partial Z3} = 0.1755\\\\
\\\\
\\frac{\\partial Cost}{\\partial Z3} = \\frac{\\partial Cost}{\\partial O3} * \\frac{\\partial O3}{\\partial Z3}\\\\
\\frac{\\partial Cost}{\\partial Z3} = -0.2171 * 0.1755\\\\
\\frac{\\partial Cost}{\\partial Z3} = -0.0381\\\\
\\\\
\\frac{\\partial Cost}{\\partial Bias3} = -0.0381
$

We can use dCost/dZ3 to calculate dCost/dWeight6 and dCost/dWeight7.

$latex
\\frac{\\partial Cost}{\\partial Weight6} = \\frac{\\partial Cost}{\\partial Z3} * \\frac{\\partial Z3}{\\partial Weight6}\\\\
\\frac{\\partial Cost}{\\partial Weight6} = \\frac{\\partial Cost}{\\partial Z3} * O0\\\\
\\frac{\\partial Cost}{\\partial Weight6} = -0.0381 * 0.5933\\\\
\\frac{\\partial Cost}{\\partial Weight6} = -0.0226\\\\
\\\\
\\frac{\\partial Cost}{\\partial Weight7} = \\frac{\\partial Cost}{\\partial Z3} * \\frac{\\partial Z3}{\\partial Weight7}\\\\
\\frac{\\partial Cost}{\\partial Weight7} = \\frac{\\partial Cost}{\\partial Z3} * O1\\\\
\\frac{\\partial Cost}{\\partial Weight7} = -0.0381 * 0.5969\\\\
\\frac{\\partial Cost}{\\partial Weight7} = -0.0227\\\\
$

<h2>Neuron 0</h2>

Next, we want to calculate dCost/dO0, but doing that requires us to do something new.  Neuron 0 affects both neuron 2 and neuron 3, which means that it affects the cost through those two neurons as well.  That means our calculation for dCost/dO0 is going to be slightly different, where we add the derivatives of both paths together.  Let's work through it:

$latex
\\frac{\\partial Cost}{\\partial O0} = \\frac{\\partial Cost}{\\partial Z2} * \\frac{\\partial Z2}{\\partial O0} + \\frac{\\partial Cost}{\\partial Z3} * \\frac{\\partial Z3}{\\partial O0}\\\\
\\frac{\\partial Cost}{\\partial O0} = \\frac{\\partial Cost}{\\partial Z2} * Weight4 + \\frac{\\partial Cost}{\\partial Z3} * Weight6\\\\
\\frac{\\partial Cost}{\\partial O0} = 0.1385 * 0.4 - 0.0381 * 0.5\\\\
\\frac{\\partial Cost}{\\partial O0} = 0.0364
$

We can then continue and calculate dCost/dZ0, which is also dCost/dBias0, and the error in neuron 0.

$latex
\\frac{\\partial O0}{\\partial Z0} = O0 * (1-O0)\\\\
\\frac{\\partial O0}{\\partial Z0} = 0.5933 * 0.4067\\\\
\\frac{\\partial O0}{\\partial Z0} = 0.2413\\\\
\\\\
\\frac{\\partial Cost}{\\partial Z0} = \\frac{\\partial Cost}{\\partial O0} * \\frac{\\partial O0}{\\partial Z0}\\\\
\\frac{\\partial Cost}{\\partial Z0} = 0.0364 * 0.2413\\\\
\\frac{\\partial Cost}{\\partial Z0} = 0.0088\\\\
\\\\
\\frac{\\partial Cost}{\\partial Bias0} = 0.0088
$

We can use dCost/dZ0 to calculate dCost/dWeight0 and dCost/dWeight1.

$latex
\\frac{\\partial Cost}{\\partial Weight0} = \\frac{\\partial Cost}{\\partial Z0} * \\frac{\\partial Z0}{\\partial Weight0}\\\\
\\frac{\\partial Cost}{\\partial Weight0} = \\frac{\\partial Cost}{\\partial Z0} * input0\\\\
\\frac{\\partial Cost}{\\partial Weight0} = 0.0088 * 0.05\\\\
\\frac{\\partial Cost}{\\partial Weight0} = 0.0004\\\\
\\\\
\\frac{\\partial Cost}{\\partial Weight1} = \\frac{\\partial Cost}{\\partial Z0} * \\frac{\\partial Z0}{\\partial Weight1}\\\\
\\frac{\\partial Cost}{\\partial Weight1} = \\frac{\\partial Cost}{\\partial Z0} * input1\\\\
\\frac{\\partial Cost}{\\partial Weight1} = 0.0088 * 0.1\\\\
\\frac{\\partial Cost}{\\partial Weight1} = 0.0009\\\\
$

<h2>Neuron 1</h2>

We are almost done, so hang in there.  For our home stretch, we need to calculate dCost/dO1 similarly as we did for dCost/dO0, and then use that to calculate the derivatives of bias1 and weight2 and weight3.

$latex
\\frac{\\partial Cost}{\\partial O1} = \\frac{\\partial Cost}{\\partial Z2} * \\frac{\\partial Z2}{\\partial O1} + \\frac{\\partial Cost}{\\partial Z3} * \\frac{\\partial Z3}{\\partial O1}\\\\
\\frac{\\partial Cost}{\\partial O1} = \\frac{\\partial Cost}{\\partial Z2} * Weight5 + \\frac{\\partial Cost}{\\partial Z3} * Weight7\\\\
\\frac{\\partial Cost}{\\partial O1} = 0.1385 * 0.45 - 0.0381 * 0.55\\\\
\\frac{\\partial Cost}{\\partial O1} = 0.0414\\\\
\\\\
\\frac{\\partial O1}{\\partial Z1} = O1 * (1-O1)\\\\
\\frac{\\partial O1}{\\partial Z1} = 0.5969 * 0.4031\\\\
\\frac{\\partial O1}{\\partial Z1} = 0.2406\\\\
\\\\
\\frac{\\partial Cost}{\\partial Z1} = \\frac{\\partial Cost}{\\partial O1} * \\frac{\\partial O1}{\\partial Z1}\\\\
\\frac{\\partial Cost}{\\partial Z1} = 0.0414 * 0.2406\\\\
\\frac{\\partial Cost}{\\partial Z1} = 0.01\\\\
\\\\
\\frac{\\partial Cost}{\\partial Bias1} = 0.01
$

Lastly, we will use dCost/dZ1 to calculate dCost/dWeight2 and dCost/dWeight3.

$latex
\\frac{\\partial Cost}{\\partial Weight2} = \\frac{\\partial Cost}{\\partial Z1} * \\frac{\\partial Z1}{\\partial Weight2}\\\\
\\frac{\\partial Cost}{\\partial Weight2} = \\frac{\\partial Cost}{\\partial Z1} * input0\\\\
\\frac{\\partial Cost}{\\partial Weight2} = 0.01 * 0.05\\\\
\\frac{\\partial Cost}{\\partial Weight2} = 0.0005\\\\
\\\\
\\frac{\\partial Cost}{\\partial Weight3} = \\frac{\\partial Cost}{\\partial Z1} * \\frac{\\partial Z1}{\\partial Weight3}\\\\
\\frac{\\partial Cost}{\\partial Weight3} = \\frac{\\partial Cost}{\\partial Z1} * input1\\\\
\\frac{\\partial Cost}{\\partial Weight3} = 0.01 * 0.1\\\\
\\frac{\\partial Cost}{\\partial Weight3} = 0.001\\\\
$

<h2>Backpropagation Done</h2>

Phew, we have all the derivatives we need now.

Here's our new weights and biases using a learning rate of 0.5:

Weight0 = 0.15 - (0.5 * 0.0004) = 0.1498
Weight1 = 0.2 - (0.5 * 0.0009) = 0.1996
Weight2 = 0.25 - (0.5 * 0.0005) = 0.2498
Weight3 = 0.3 - (0.5 * 0.001) = 0.2995
Weight4 = 0.4 - (0.5 * 0.0822) = 0.3589
Weight5 = 0.45 - (0.5 * 0.0827) = 0.4087
Weight6 = 0.5 - (0.5 * -0.0226) = 0.5113
Weight7 = 0.55 - (0.5 * -0.0227) = 0.5614
Bias0 = 0.35 - (0.5 * 0.0088) = 0.3456
Bias1 = 0.35 - (0.5 * 0.01) = 0.345
Bias2 = 0.6 - (0.5 * 0.1385) = 0.5308
Bias3 = 0.6 - (0.5 * -0.0381) = 0.6191

Using these new values, the cost function value drops from 0.2984 to 0.2839, so we have made progress!

Interestingly, it only takes 5,000 iterations of learning for this network to reach an error of 0.007157, when it took 10,000 iterations of learning for example 1 to get to 0.007176.

Before moving on, take a look at the weight adjustments above.  You might notice that the derivatives for the weights are much smaller for weights 0,1,2,3 compared to weights 4,5,6,7.  The reason for this is because weights 0,1,2,3 appear earlier in the network.  The problem is that earlier layer neurons don't learn as fast as later layer neurons and this is caused by the nature of the neuron activation functions - specifically, that the sigmoid function has a long tail near 0 and 1 - and is called the "vanishing gradient problem".  The opposite effect can also happen however, where earlier layer gradients explode to super huge numbers, so the more general term is called the "unstable gradient problem".  This is an active area of research on how to address, and this becomes more and more of a problem the more layers you have in your network.

You can use other activation functions such as tanh, identity, relu and others to try and get around this problem.  If trying different activation functions, the forward pass (evaluation of a neural network) as well as the backpropagation of error pass remain the same, but of course the calculation for getting O from Z changes, and of course, calculating the derivative deltaO/deltaZ becomes different.  Everything else remains the same.

Check the links at the bottom of the post for more information about this!

<h1>Sample Code</h1>

Below is the sample code which implements all the back propagation examples we worked through above.

Note that this code is meant to be readable and understandable.  The code is not meant to be re-usable or highly efficient.

A more efficient implementation would use SIMD instructions, multithreading, stochastic gradient descent, and other things.

It's also useful to note that calculating a neuron's Z value is actually a dot product and an addition and that the addition can be handled within the dot product by adding a "fake input" to each neuron that is a constant of 1.  This lets you do a dot product to calculate the Z value of a neuron, which you can take further and combine into matrix operations to calculate multiple neuron values at once.  You'll often see neural networks described in matrix notation because of this, but I have avoided that in this post to try and make things more clear to programmers who may not be as comfortable thinking in strictly matrix notation.

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;

// Nonzero value enables csv logging.
#define LOG_TO_CSV_NUMSAMPLES() 50

// ===== Example 1 - One Neuron, One training Example =====

void Example1RunNetwork (
	float input, float desiredOutput,
	float weight, float bias,
	float&amp; error, float&amp; cost, float&amp; actualOutput,
	float&amp; deltaCost_deltaWeight, float&amp; deltaCost_deltaBias, float&amp; deltaCost_deltaInput
) {
	// calculate Z (weighted input) and O (activation function of weighted input) for the neuron
	float Z = input * weight + bias;
	float O = 1.0f / (1.0f + std::exp(-Z));

	// the actual output of the network is the activation of the neuron
	actualOutput = O;

	// calculate error
	error = std::abs(desiredOutput - actualOutput);

	// calculate cost
	cost = 0.5f * error * error;

	// calculate how much a change in neuron activation affects the cost function
	// deltaCost/deltaO = O - target
	float deltaCost_deltaO = O - desiredOutput;

	// calculate how much a change in neuron weighted input affects neuron activation
	// deltaO/deltaZ = O * (1 - O)
	float deltaO_deltaZ = O * (1 - O);


	// calculate how much a change in a neuron's weighted input affects the cost function.
	// This is deltaCost/deltaZ, which equals deltaCost/deltaO * deltaO/deltaZ
	// This is also deltaCost/deltaBias and is also refered to as the error of the neuron
	float neuronError = deltaCost_deltaO * deltaO_deltaZ;
	deltaCost_deltaBias = neuronError;

	// calculate how much a change in the weight affects the cost function.
	// deltaCost/deltaWeight = deltaCost/deltaO * deltaO/deltaZ * deltaZ/deltaWeight
	// deltaCost/deltaWeight = neuronError * deltaZ/deltaWeight
	// deltaCost/deltaWeight = neuronError * input
	deltaCost_deltaWeight = neuronError * input;


	// As a bonus, calculate how much a change in the input affects the cost function.
	// Follows same logic as deltaCost/deltaWeight, but deltaZ/deltaInput is the weight.
	// deltaCost/deltaInput = neuronError * weight
	deltaCost_deltaInput = neuronError * weight;
}

void Example1 ()
{
	#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
		// open the csv file for this example
		FILE *file = fopen(&quot;Example1.csv&quot;,&quot;w+t&quot;);
		if (file != nullptr)
			fprintf(file, &quot;\&quot;training index\&quot;,\&quot;error\&quot;,\&quot;cost\&quot;,\&quot;weight\&quot;,\&quot;bias\&quot;,\&quot;dCost/dWeight\&quot;,\&quot;dCost/dBias\&quot;,\&quot;dCost/dInput\&quot;\n&quot;);
	#endif

	// learning parameters for the network
	const float c_learningRate = 0.5f;
	const size_t c_numTrainings = 10000;

	// training data
	// input: 1, output: 0
	const std::array&lt;float, 2&gt; c_trainingData = {1.0f, 0.0f};

	// starting weight and bias values
	float weight = 0.3f;
	float bias = 0.5f;

	// iteratively train the network
	float error = 0.0f;
	for (size_t trainingIndex = 0; trainingIndex &lt; c_numTrainings; ++trainingIndex)
	{
		// run the network to get error and derivatives
		float output = 0.0f;
		float cost = 0.0f;
		float deltaCost_deltaWeight = 0.0f;
		float deltaCost_deltaBias = 0.0f;
		float deltaCost_deltaInput = 0.0f;
		Example1RunNetwork(c_trainingData[0], c_trainingData[1], weight, bias, error, cost, output, deltaCost_deltaWeight, deltaCost_deltaBias, deltaCost_deltaInput);

		#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
			const size_t trainingInterval = (c_numTrainings / (LOG_TO_CSV_NUMSAMPLES() - 1));
			if (file != nullptr &amp;&amp; (trainingIndex % trainingInterval == 0 || trainingIndex == c_numTrainings - 1))
			{
				// log to the csv
				fprintf(file, &quot;\&quot;%zi\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\n&quot;, trainingIndex, error, cost, weight, bias, deltaCost_deltaWeight, deltaCost_deltaBias, deltaCost_deltaInput);
			}
		#endif

		// adjust weights and biases
		weight -= deltaCost_deltaWeight * c_learningRate;
		bias -= deltaCost_deltaBias * c_learningRate;
	}

	printf(&quot;Example1 Final Error: %f\n&quot;, error);

	#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
		if (file != nullptr)
			fclose(file);
	#endif
}

// ===== Example 2 - One Neuron, Two training Examples =====

void Example2 ()
{
	#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
		// open the csv file for this example
		FILE *file = fopen(&quot;Example2.csv&quot;,&quot;w+t&quot;);
		if (file != nullptr)
			fprintf(file, &quot;\&quot;training index\&quot;,\&quot;error\&quot;,\&quot;cost\&quot;,\&quot;weight\&quot;,\&quot;bias\&quot;,\&quot;dCost/dWeight\&quot;,\&quot;dCost/dBias\&quot;,\&quot;dCost/dInput\&quot;\n&quot;);
	#endif

	// learning parameters for the network
	const float c_learningRate = 0.5f;
	const size_t c_numTrainings = 100000;

	// training data
	// input: 1, output: 0
	// input: 0, output: 1
	const std::array&lt;std::array&lt;float, 2&gt;, 2&gt; c_trainingData = { {
		{1.0f, 0.0f},
		{0.0f, 1.0f}
	} };

	// starting weight and bias values
	float weight = 0.3f;
	float bias = 0.5f;

	// iteratively train the network
	float avgError = 0.0f;
	for (size_t trainingIndex = 0; trainingIndex &lt; c_numTrainings; ++trainingIndex)
	{
		avgError = 0.0f;
		float avgOutput = 0.0f;
		float avgCost = 0.0f;
		float avgDeltaCost_deltaWeight = 0.0f;
		float avgDeltaCost_deltaBias = 0.0f;
		float avgDeltaCost_deltaInput = 0.0f;

		// run the network to get error and derivatives for each training example
		for (const std::array&lt;float, 2&gt;&amp; trainingData : c_trainingData)
		{
			float error = 0.0f;
			float output = 0.0f;
			float cost = 0.0f;
			float deltaCost_deltaWeight = 0.0f;
			float deltaCost_deltaBias = 0.0f;
			float deltaCost_deltaInput = 0.0f;
			Example1RunNetwork(trainingData[0], trainingData[1], weight, bias, error, cost, output, deltaCost_deltaWeight, deltaCost_deltaBias, deltaCost_deltaInput);

			avgError += error;
			avgOutput += output;
			avgCost += cost;
			avgDeltaCost_deltaWeight += deltaCost_deltaWeight;
			avgDeltaCost_deltaBias += deltaCost_deltaBias;
			avgDeltaCost_deltaInput += deltaCost_deltaInput;
		}

		avgError /= (float)c_trainingData.size();
		avgOutput /= (float)c_trainingData.size();
		avgCost /= (float)c_trainingData.size();
		avgDeltaCost_deltaWeight /= (float)c_trainingData.size();
		avgDeltaCost_deltaBias /= (float)c_trainingData.size();
		avgDeltaCost_deltaInput /= (float)c_trainingData.size();

		#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
			const size_t trainingInterval = (c_numTrainings / (LOG_TO_CSV_NUMSAMPLES() - 1));
			if (file != nullptr &amp;&amp; (trainingIndex % trainingInterval == 0 || trainingIndex == c_numTrainings - 1))
			{
				// log to the csv
				fprintf(file, &quot;\&quot;%zi\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;,\n&quot;, trainingIndex, avgError, avgCost, weight, bias, avgDeltaCost_deltaWeight, avgDeltaCost_deltaBias, avgDeltaCost_deltaInput);
			}
		#endif

		// adjust weights and biases
		weight -= avgDeltaCost_deltaWeight * c_learningRate;
		bias -= avgDeltaCost_deltaBias * c_learningRate;
	}

	printf(&quot;Example2 Final Error: %f\n&quot;, avgError);

	#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
		if (file != nullptr)
			fclose(file);
	#endif
}

// ===== Example 3 - Two inputs, two neurons in one layer =====

struct SExample3Training
{
	std::array&lt;float, 2&gt; m_input;
	std::array&lt;float, 2&gt; m_output;
};

void Example3RunNetwork (
	const std::array&lt;float, 2&gt;&amp; input, const std::array&lt;float, 2&gt;&amp; desiredOutput,
	const std::array&lt;float, 4&gt;&amp; weights, const std::array&lt;float, 2&gt;&amp; biases,
	float&amp; error, float&amp; cost, std::array&lt;float, 2&gt;&amp; actualOutput,
	std::array&lt;float, 4&gt;&amp; deltaCost_deltaWeights, std::array&lt;float, 2&gt;&amp; deltaCost_deltaBiases, std::array&lt;float, 2&gt;&amp; deltaCost_deltaInputs
) {

	// calculate Z0 and O0 for neuron0
	float Z0 = input[0] * weights[0] + input[1] * weights[1] + biases[0];
	float O0 = 1.0f / (1.0f + std::exp(-Z0));

	// calculate Z1 and O1 for neuron1
	float Z1 = input[0] * weights[2] + input[1] * weights[3] + biases[1];
	float O1 = 1.0f / (1.0f + std::exp(-Z1));

	// the actual output of the network is the activation of the neurons
	actualOutput[0] = O0;
	actualOutput[1] = O1;

	// calculate error
	float diff0 = desiredOutput[0] - actualOutput[0];
	float diff1 = desiredOutput[1] - actualOutput[1];
	error = std::sqrt(diff0*diff0 + diff1*diff1);

	// calculate cost
	cost = 0.5f * error * error;

	//----- Neuron 0 -----

	// calculate how much a change in neuron 0 activation affects the cost function
	// deltaCost/deltaO0 = O0 - target0
	float deltaCost_deltaO0 = O0 - desiredOutput[0];

	// calculate how much a change in neuron 0 weighted input affects neuron 0 activation
	// deltaO0/deltaZ0 = O0 * (1 - O0)
	float deltaO0_deltaZ0 = O0 * (1 - O0);

	// calculate how much a change in neuron 0 weighted input affects the cost function.
	// This is deltaCost/deltaZ0, which equals deltaCost/deltaO0 * deltaO0/deltaZ0
	// This is also deltaCost/deltaBias0 and is also refered to as the error of neuron 0
	float neuron0Error = deltaCost_deltaO0 * deltaO0_deltaZ0;
	deltaCost_deltaBiases[0] = neuron0Error;

	// calculate how much a change in weight0 affects the cost function.
	// deltaCost/deltaWeight0 = deltaCost/deltaO0 * deltaO/deltaZ0 * deltaZ0/deltaWeight0
	// deltaCost/deltaWeight0 = neuron0Error * deltaZ/deltaWeight0
	// deltaCost/deltaWeight0 = neuron0Error * input0
	// similar thing for weight1
	deltaCost_deltaWeights[0] = neuron0Error * input[0];
	deltaCost_deltaWeights[1] = neuron0Error * input[1];

	//----- Neuron 1 -----

	// calculate how much a change in neuron 1 activation affects the cost function
	// deltaCost/deltaO1 = O1 - target1
	float deltaCost_deltaO1 = O1 - desiredOutput[1];

	// calculate how much a change in neuron 1 weighted input affects neuron 1 activation
	// deltaO0/deltaZ1 = O1 * (1 - O1)
	float deltaO1_deltaZ1 = O1 * (1 - O1);

	// calculate how much a change in neuron 1 weighted input affects the cost function.
	// This is deltaCost/deltaZ1, which equals deltaCost/deltaO1 * deltaO1/deltaZ1
	// This is also deltaCost/deltaBias1 and is also refered to as the error of neuron 1
	float neuron1Error = deltaCost_deltaO1 * deltaO1_deltaZ1;
	deltaCost_deltaBiases[1] = neuron1Error;

	// calculate how much a change in weight2 affects the cost function.
	// deltaCost/deltaWeight2 = deltaCost/deltaO1 * deltaO/deltaZ1 * deltaZ0/deltaWeight1
	// deltaCost/deltaWeight2 = neuron1Error * deltaZ/deltaWeight1
	// deltaCost/deltaWeight2 = neuron1Error * input0
	// similar thing for weight3
	deltaCost_deltaWeights[2] = neuron1Error * input[0];
	deltaCost_deltaWeights[3] = neuron1Error * input[1];

	//----- Input -----

	// As a bonus, calculate how much a change in the inputs affect the cost function.
	// A complication here compared to Example1 and Example2 is that each input affects two neurons instead of only one.
	// That means that...
	// deltaCost/deltaInput0 = deltaCost/deltaZ0 * deltaZ0/deltaInput0 + deltaCost/deltaZ1 * deltaZ1/deltaInput0
	//                       = neuron0Error * weight0 + neuron1Error * weight2
	// and
	// deltaCost/deltaInput1 = deltaCost/deltaZ0 * deltaZ0/deltaInput1 + deltaCost/deltaZ1 * deltaZ1/deltaInput1
	//                       = neuron0Error * weight1 + neuron1Error * weight3
	deltaCost_deltaInputs[0] = neuron0Error * weights[0] + neuron1Error * weights[2];
	deltaCost_deltaInputs[1] = neuron0Error * weights[1] + neuron1Error * weights[3];
}

void Example3 ()
{
	#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
		// open the csv file for this example
		FILE *file = fopen(&quot;Example3.csv&quot;,&quot;w+t&quot;);
		if (file != nullptr)
			fprintf(file, &quot;\&quot;training index\&quot;,\&quot;error\&quot;,\&quot;cost\&quot;\n&quot;);
	#endif

	// learning parameters for the network
	const float c_learningRate = 0.5f;
	const size_t c_numTrainings = 520000;

	// training data: OR/AND
	// input: 00, output: 00
	// input: 01, output: 10
	// input: 10, output: 10
	// input: 11, output: 11
	const std::array&lt;SExample3Training, 4&gt; c_trainingData = { {
		{{0.0f, 0.0f}, {0.0f, 0.0f}},
		{{0.0f, 1.0f}, {1.0f, 0.0f}},
		{{1.0f, 0.0f}, {1.0f, 0.0f}},
		{{1.0f, 1.0f}, {1.0f, 1.0f}},
	} };

	// starting weight and bias values
	std::array&lt;float, 4&gt; weights = { 0.2f, 0.8f, 0.6f, 0.4f };
	std::array&lt;float, 2&gt; biases = { 0.5f, 0.1f };

	// iteratively train the network
	float avgError = 0.0f;
	for (size_t trainingIndex = 0; trainingIndex &lt; c_numTrainings; ++trainingIndex)
	{
		//float avgCost = 0.0f;
		std::array&lt;float, 2&gt; avgOutput = { 0.0f, 0.0f };
		std::array&lt;float, 4&gt; avgDeltaCost_deltaWeights = { 0.0f, 0.0f, 0.0f, 0.0f };
		std::array&lt;float, 2&gt; avgDeltaCost_deltaBiases = { 0.0f, 0.0f };
		std::array&lt;float, 2&gt; avgDeltaCost_deltaInputs = { 0.0f, 0.0f };
		avgError = 0.0f;
		float avgCost = 0.0;

		// run the network to get error and derivatives for each training example
		for (const SExample3Training&amp; trainingData : c_trainingData)
		{
			float error = 0.0f;
			std::array&lt;float, 2&gt; output = { 0.0f, 0.0f };
			float cost = 0.0f;
			std::array&lt;float, 4&gt; deltaCost_deltaWeights = { 0.0f, 0.0f, 0.0f, 0.0f };
			std::array&lt;float, 2&gt; deltaCost_deltaBiases = { 0.0f, 0.0f };
			std::array&lt;float, 2&gt; deltaCost_deltaInputs = { 0.0f, 0.0f };
			Example3RunNetwork(trainingData.m_input, trainingData.m_output, weights, biases, error, cost, output, deltaCost_deltaWeights, deltaCost_deltaBiases, deltaCost_deltaInputs);

			avgError += error;
			avgCost += cost;
			for (size_t i = 0; i &lt; avgOutput.size(); ++i)
				avgOutput[i] += output[i];
			for (size_t i = 0; i &lt; avgDeltaCost_deltaWeights.size(); ++i)
				avgDeltaCost_deltaWeights[i] += deltaCost_deltaWeights[i];
			for (size_t i = 0; i &lt; avgDeltaCost_deltaBiases.size(); ++i)
				avgDeltaCost_deltaBiases[i] += deltaCost_deltaBiases[i];
			for (size_t i = 0; i &lt; avgDeltaCost_deltaInputs.size(); ++i)
				avgDeltaCost_deltaInputs[i] += deltaCost_deltaInputs[i];
		}

		avgError /= (float)c_trainingData.size();
		avgCost /= (float)c_trainingData.size();
		for (size_t i = 0; i &lt; avgOutput.size(); ++i)
			avgOutput[i] /= (float)c_trainingData.size();
		for (size_t i = 0; i &lt; avgDeltaCost_deltaWeights.size(); ++i)
			avgDeltaCost_deltaWeights[i] /= (float)c_trainingData.size();
		for (size_t i = 0; i &lt; avgDeltaCost_deltaBiases.size(); ++i)
			avgDeltaCost_deltaBiases[i] /= (float)c_trainingData.size();
		for (size_t i = 0; i &lt; avgDeltaCost_deltaInputs.size(); ++i)
			avgDeltaCost_deltaInputs[i] /= (float)c_trainingData.size();

		#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
			const size_t trainingInterval = (c_numTrainings / (LOG_TO_CSV_NUMSAMPLES() - 1));
			if (file != nullptr &amp;&amp; (trainingIndex % trainingInterval == 0 || trainingIndex == c_numTrainings - 1))
			{
				// log to the csv
				fprintf(file, &quot;\&quot;%zi\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;\n&quot;, trainingIndex, avgError, avgCost);
			}
		#endif

		// adjust weights and biases
		for (size_t i = 0; i &lt; weights.size(); ++i)
			weights[i] -= avgDeltaCost_deltaWeights[i] * c_learningRate;
		for (size_t i = 0; i &lt; biases.size(); ++i)
			biases[i] -= avgDeltaCost_deltaBiases[i] * c_learningRate;
	}

	printf(&quot;Example3 Final Error: %f\n&quot;, avgError);

	#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
		if (file != nullptr)
			fclose(file);
	#endif
}

// ===== Example 4 - Two layers with two neurons in each layer =====

void Example4RunNetwork (
	const std::array&lt;float, 2&gt;&amp; input, const std::array&lt;float, 2&gt;&amp; desiredOutput,
	const std::array&lt;float, 8&gt;&amp; weights, const std::array&lt;float, 4&gt;&amp; biases,
	float&amp; error, float&amp; cost, std::array&lt;float, 2&gt;&amp; actualOutput,
	std::array&lt;float, 8&gt;&amp; deltaCost_deltaWeights, std::array&lt;float, 4&gt;&amp; deltaCost_deltaBiases, std::array&lt;float, 2&gt;&amp; deltaCost_deltaInputs
) {
	// calculate Z0 and O0 for neuron0
	float Z0 = input[0] * weights[0] + input[1] * weights[1] + biases[0];
	float O0 = 1.0f / (1.0f + std::exp(-Z0));

	// calculate Z1 and O1 for neuron1
	float Z1 = input[0] * weights[2] + input[1] * weights[3] + biases[1];
	float O1 = 1.0f / (1.0f + std::exp(-Z1));

	// calculate Z2 and O2 for neuron2
	float Z2 = O0 * weights[4] + O1 * weights[5] + biases[2];
	float O2 = 1.0f / (1.0f + std::exp(-Z2));

	// calculate Z3 and O3 for neuron3
	float Z3 = O0 * weights[6] + O1 * weights[7] + biases[3];
	float O3 = 1.0f / (1.0f + std::exp(-Z3));

	// the actual output of the network is the activation of the output layer neurons
	actualOutput[0] = O2;
	actualOutput[1] = O3;

	// calculate error
	float diff0 = desiredOutput[0] - actualOutput[0];
	float diff1 = desiredOutput[1] - actualOutput[1];
	error = std::sqrt(diff0*diff0 + diff1*diff1);

	// calculate cost
	cost = 0.5f * error * error;

	//----- Neuron 2 -----

	// calculate how much a change in neuron 2 activation affects the cost function
	// deltaCost/deltaO2 = O2 - target0
	float deltaCost_deltaO2 = O2 - desiredOutput[0];

	// calculate how much a change in neuron 2 weighted input affects neuron 2 activation
	// deltaO2/deltaZ2 = O2 * (1 - O2)
	float deltaO2_deltaZ2 = O2 * (1 - O2);

	// calculate how much a change in neuron 2 weighted input affects the cost function.
	// This is deltaCost/deltaZ2, which equals deltaCost/deltaO2 * deltaO2/deltaZ2
	// This is also deltaCost/deltaBias2 and is also refered to as the error of neuron 2
	float neuron2Error = deltaCost_deltaO2 * deltaO2_deltaZ2;
	deltaCost_deltaBiases[2] = neuron2Error;

	// calculate how much a change in weight4 affects the cost function.
	// deltaCost/deltaWeight4 = deltaCost/deltaO2 * deltaO2/deltaZ2 * deltaZ2/deltaWeight4
	// deltaCost/deltaWeight4 = neuron2Error * deltaZ/deltaWeight4
	// deltaCost/deltaWeight4 = neuron2Error * O0
	// similar thing for weight5
	deltaCost_deltaWeights[4] = neuron2Error * O0;
	deltaCost_deltaWeights[5] = neuron2Error * O1;

	//----- Neuron 3 -----

	// calculate how much a change in neuron 3 activation affects the cost function
	// deltaCost/deltaO3 = O3 - target1
	float deltaCost_deltaO3 = O3 - desiredOutput[1];

	// calculate how much a change in neuron 3 weighted input affects neuron 3 activation
	// deltaO3/deltaZ3 = O3 * (1 - O3)
	float deltaO3_deltaZ3 = O3 * (1 - O3);

	// calculate how much a change in neuron 3 weighted input affects the cost function.
	// This is deltaCost/deltaZ3, which equals deltaCost/deltaO3 * deltaO3/deltaZ3
	// This is also deltaCost/deltaBias3 and is also refered to as the error of neuron 3
	float neuron3Error = deltaCost_deltaO3 * deltaO3_deltaZ3;
	deltaCost_deltaBiases[3] = neuron3Error;

	// calculate how much a change in weight6 affects the cost function.
	// deltaCost/deltaWeight6 = deltaCost/deltaO3 * deltaO3/deltaZ3 * deltaZ3/deltaWeight6
	// deltaCost/deltaWeight6 = neuron3Error * deltaZ/deltaWeight6
	// deltaCost/deltaWeight6 = neuron3Error * O0
	// similar thing for weight7
	deltaCost_deltaWeights[6] = neuron3Error * O0;
	deltaCost_deltaWeights[7] = neuron3Error * O1;

	//----- Neuron 0 -----

	// calculate how much a change in neuron 0 activation affects the cost function
	// deltaCost/deltaO0 = deltaCost/deltaZ2 * deltaZ2/deltaO0 + deltaCost/deltaZ3 * deltaZ3/deltaO0
	// deltaCost/deltaO0 = neuron2Error * weight4 + neuron3error * weight6
	float deltaCost_deltaO0 = neuron2Error * weights[4] + neuron3Error * weights[6];

	// calculate how much a change in neuron 0 weighted input affects neuron 0 activation
	// deltaO0/deltaZ0 = O0 * (1 - O0)
	float deltaO0_deltaZ0 = O0 * (1 - O0);

	// calculate how much a change in neuron 0 weighted input affects the cost function.
	// This is deltaCost/deltaZ0, which equals deltaCost/deltaO0 * deltaO0/deltaZ0
	// This is also deltaCost/deltaBias0 and is also refered to as the error of neuron 0
	float neuron0Error = deltaCost_deltaO0 * deltaO0_deltaZ0;
	deltaCost_deltaBiases[0] = neuron0Error;

	// calculate how much a change in weight0 affects the cost function.
	// deltaCost/deltaWeight0 = deltaCost/deltaO0 * deltaO0/deltaZ0 * deltaZ0/deltaWeight0
	// deltaCost/deltaWeight0 = neuron0Error * deltaZ0/deltaWeight0
	// deltaCost/deltaWeight0 = neuron0Error * input0
	// similar thing for weight1
	deltaCost_deltaWeights[0] = neuron0Error * input[0];
	deltaCost_deltaWeights[1] = neuron0Error * input[1];

	//----- Neuron 1 -----

	// calculate how much a change in neuron 1 activation affects the cost function
	// deltaCost/deltaO1 = deltaCost/deltaZ2 * deltaZ2/deltaO1 + deltaCost/deltaZ3 * deltaZ3/deltaO1
	// deltaCost/deltaO1 = neuron2Error * weight5 + neuron3error * weight7
	float deltaCost_deltaO1 = neuron2Error * weights[5] + neuron3Error * weights[7];

	// calculate how much a change in neuron 1 weighted input affects neuron 1 activation
	// deltaO1/deltaZ1 = O1 * (1 - O1)
	float deltaO1_deltaZ1 = O1 * (1 - O1);

	// calculate how much a change in neuron 1 weighted input affects the cost function.
	// This is deltaCost/deltaZ1, which equals deltaCost/deltaO1 * deltaO1/deltaZ1
	// This is also deltaCost/deltaBias1 and is also refered to as the error of neuron 1
	float neuron1Error = deltaCost_deltaO1 * deltaO1_deltaZ1;
	deltaCost_deltaBiases[1] = neuron1Error;

	// calculate how much a change in weight2 affects the cost function.
	// deltaCost/deltaWeight2 = deltaCost/deltaO1 * deltaO1/deltaZ1 * deltaZ1/deltaWeight2
	// deltaCost/deltaWeight2 = neuron1Error * deltaZ2/deltaWeight2
	// deltaCost/deltaWeight2 = neuron1Error * input0
	// similar thing for weight3
	deltaCost_deltaWeights[2] = neuron1Error * input[0];
	deltaCost_deltaWeights[3] = neuron1Error * input[1];

	//----- Input -----

	// As a bonus, calculate how much a change in the inputs affect the cost function.
	// A complication here compared to Example1 and Example2 is that each input affects two neurons instead of only one.
	// That means that...
	// deltaCost/deltaInput0 = deltaCost/deltaZ0 * deltaZ0/deltaInput0 + deltaCost/deltaZ1 * deltaZ1/deltaInput0
	//                       = neuron0Error * weight0 + neuron1Error * weight2
	// and
	// deltaCost/deltaInput1 = deltaCost/deltaZ0 * deltaZ0/deltaInput1 + deltaCost/deltaZ1 * deltaZ1/deltaInput1
	//                       = neuron0Error * weight1 + neuron1Error * weight3
	deltaCost_deltaInputs[0] = neuron0Error * weights[0] + neuron1Error * weights[2];
	deltaCost_deltaInputs[1] = neuron0Error * weights[1] + neuron1Error * weights[3];
}

void Example4 ()
{
	#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
		// open the csv file for this example
		FILE *file = fopen(&quot;Example4.csv&quot;,&quot;w+t&quot;);
		if (file != nullptr)
			fprintf(file, &quot;\&quot;training index\&quot;,\&quot;error\&quot;,\&quot;cost\&quot;\n&quot;);
	#endif

	// learning parameters for the network
	const float c_learningRate = 0.5f;
	const size_t c_numTrainings = 5000;

	// training data: 0.05, 0.1 in = 0.01, 0.99 out
	const std::array&lt;SExample3Training, 1&gt; c_trainingData = { {
		{{0.05f, 0.1f}, {0.01f, 0.99f}},
	} };

	// starting weight and bias values
	std::array&lt;float, 8&gt; weights = { 0.15f, 0.2f, 0.25f, 0.3f, 0.4f, 0.45f, 0.5f, 0.55f};
	std::array&lt;float, 4&gt; biases = { 0.35f, 0.35f, 0.6f, 0.6f };

	// iteratively train the network
	float avgError = 0.0f;
	for (size_t trainingIndex = 0; trainingIndex &lt; c_numTrainings; ++trainingIndex)
	{
		std::array&lt;float, 2&gt; avgOutput = { 0.0f, 0.0f };
		std::array&lt;float, 8&gt; avgDeltaCost_deltaWeights = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };
		std::array&lt;float, 4&gt; avgDeltaCost_deltaBiases = { 0.0f, 0.0f, 0.0f, 0.0f };
		std::array&lt;float, 2&gt; avgDeltaCost_deltaInputs = { 0.0f, 0.0f };
		avgError = 0.0f;
		float avgCost = 0.0;

		// run the network to get error and derivatives for each training example
		for (const SExample3Training&amp; trainingData : c_trainingData)
		{
			float error = 0.0f;
			std::array&lt;float, 2&gt; output = { 0.0f, 0.0f };
			float cost = 0.0f;
			std::array&lt;float, 8&gt; deltaCost_deltaWeights = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };
			std::array&lt;float, 4&gt; deltaCost_deltaBiases = { 0.0f, 0.0f, 0.0f, 0.0f };
			std::array&lt;float, 2&gt; deltaCost_deltaInputs = { 0.0f, 0.0f };
			Example4RunNetwork(trainingData.m_input, trainingData.m_output, weights, biases, error, cost, output, deltaCost_deltaWeights, deltaCost_deltaBiases, deltaCost_deltaInputs);

			avgError += error;
			avgCost += cost;
			for (size_t i = 0; i &lt; avgOutput.size(); ++i)
				avgOutput[i] += output[i];
			for (size_t i = 0; i &lt; avgDeltaCost_deltaWeights.size(); ++i)
				avgDeltaCost_deltaWeights[i] += deltaCost_deltaWeights[i];
			for (size_t i = 0; i &lt; avgDeltaCost_deltaBiases.size(); ++i)
				avgDeltaCost_deltaBiases[i] += deltaCost_deltaBiases[i];
			for (size_t i = 0; i &lt; avgDeltaCost_deltaInputs.size(); ++i)
				avgDeltaCost_deltaInputs[i] += deltaCost_deltaInputs[i];
		}

		avgError /= (float)c_trainingData.size();
		avgCost /= (float)c_trainingData.size();
		for (size_t i = 0; i &lt; avgOutput.size(); ++i)
			avgOutput[i] /= (float)c_trainingData.size();
		for (size_t i = 0; i &lt; avgDeltaCost_deltaWeights.size(); ++i)
			avgDeltaCost_deltaWeights[i] /= (float)c_trainingData.size();
		for (size_t i = 0; i &lt; avgDeltaCost_deltaBiases.size(); ++i)
			avgDeltaCost_deltaBiases[i] /= (float)c_trainingData.size();
		for (size_t i = 0; i &lt; avgDeltaCost_deltaInputs.size(); ++i)
			avgDeltaCost_deltaInputs[i] /= (float)c_trainingData.size();

		#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
			const size_t trainingInterval = (c_numTrainings / (LOG_TO_CSV_NUMSAMPLES() - 1));
			if (file != nullptr &amp;&amp; (trainingIndex % trainingInterval == 0 || trainingIndex == c_numTrainings - 1))
			{
				// log to the csv
				fprintf(file, &quot;\&quot;%zi\&quot;,\&quot;%f\&quot;,\&quot;%f\&quot;\n&quot;, trainingIndex, avgError, avgCost);
			}
		#endif

		// adjust weights and biases
		for (size_t i = 0; i &lt; weights.size(); ++i)
			weights[i] -= avgDeltaCost_deltaWeights[i] * c_learningRate;
		for (size_t i = 0; i &lt; biases.size(); ++i)
			biases[i] -= avgDeltaCost_deltaBiases[i] * c_learningRate;
	}

	printf(&quot;Example4 Final Error: %f\n&quot;, avgError);

	#if LOG_TO_CSV_NUMSAMPLES() &gt; 0
		if (file != nullptr)
			fclose(file);
	#endif
}

int main (int argc, char **argv)
{
	Example1();
	Example2();
	Example3();
	Example4();
	system(&quot;pause&quot;);
	return 0;
}
[/code]

<h2>Closing & Links</h2>

The sample code outputs csv files showing how the values of the networks change over time.  One of the reasons for this is because I want to show you error over time.

Below is example 4's error over time, as we do it's 5,000 learning iterations.

<img src="https://demofox2.files.wordpress.com/2017/03/example4error.png"/>

The other examples show a similarly shaped graph, where there is a lot of learning in the very beginning, and then there is a very long tail of learning very slowly.

When you train neural networks as I've described them, you will almost always see this, and sometimes will also see a slow learning time at the BEGINNING of the training.

This issue is also due to the activation function used, just like the unstable gradient problem, and is also an active area of research.

To help fix this issue, there is something called a "cross entropy cost function" which you can use instead of the mean squared error cost function I have been using.

That cost function essentially cancels out the non linearity of the activation function so that you get nicer linear learning progress, and can get networks to learn more quickly and evenly.  However, it only cancels out the non linearity for the LAST layer in the network.  This means it's still a problem for networks that have more layers.

Lastly, there is an entirely different thing you can use backpropagation for.  We adjusted the weights and biases to get our desired output for the desired inputs.  What if instead we adjusted our inputs to give us the desired outputs?

You can do that by using backpropagation to calculate the dCost/dInput derivatives and using those to adjust the input, in the exact same way we adjusted the weights and biases.

You can use this to do some interesting things, including:

<ol>
	<li>finding images that a network will recognize as a familiar object, that a human wouldn't.  Start with static as input to the network, and adjust inputs to give the desired output.</li>
	<li>Modifying images that a network recognizes, into images it doesn't recognize, but a human would.  Start with a well recognized image, and adjust inputs using gradient ASCENT (add the derivatives, don't subtract them) until the network stops recognizing it.</li>
</ol>

Believe it or not, this is how all those creepy "deep dream" images were made that came out of google as well, like the one below.

<img src="https://demofox2.files.wordpress.com/2017/03/3dae4a000d4da699014800205f38d6291.jpg"/>

Now that you know the basics, you are ready to learn some more if you are interested.  If you still have some questions about things I did or didn't talk about, these resources might help you make sense of it too.  I used these resources and they were all very helpful!  You can also give me a shout in the comments below, or on twitter at <a href="https://twitter.com/Atrix256" target="_blank">@Atrix256</a>.

<a href="https://mattmazur.com/2015/03/17/a-step-by-step-backpropagation-example/" target="_blank">A Step by Step Backpropagation Example</a>
<a href="http://neuralnetworksanddeeplearning.com" target="_blank">Neural Networks and Deep Learning</a>
<a href="https://idontgetoutmuch.wordpress.com/2013/10/13/backpropogation-is-just-steepest-descent-with-automatic-differentiation-2/" target="_blank"> Backpropogation is Just Steepest Descent with Automatic Differentiation</a>
<a href="http://www.sosmath.com/calculus/diff/der04/der04.html" target="_blank">Chain Rule</a>
<a href="http://yosinski.com/deepvis" target="_blank">Deep Vis</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5999</wp:post_id>
		<wp:post_date><![CDATA[2017-03-09 17:47:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-10 01:47:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-train-neural-networks-with-backpropagation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="computer-science"><![CDATA[Computer Science]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="neural-networks"><![CDATA[Neural Networks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495715576;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5803;}i:1;a:1:{s:2:"id";i:71;}i:2;a:1:{s:2:"id";i:6208;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Neural Network Gradients: Backpropagation, Dual Numbers, Finite Differences</title>
		<link>http://blog.demofox.org/2017/03/13/neural-network-gradients-backpropagation-dual-numbers-finite-differences/</link>
		<pubDate>Mon, 13 Mar 2017 16:34:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=6201</guid>
		<description></description>
		<content:encoded><![CDATA[In the post <a target="_blank" href="http://blog.demofox.org/2017/03/09/how-to-train-neural-networks-with-backpropagation/">How to Train Neural Networks With Backpropagation</a> I said that you could also calculate the gradient of a neural network by using dual numbers or finite differences.

By special request, this is that post!

The post I already linked to explains backpropagation.

If you want an explanation of dual numbers, check out these posts:
<ol>
	<li><a target="_blank" href="http://blog.demofox.org/2014/12/30/dual-numbers-automatic-differentiation/">Dual Numbers & Automatic Differentiation</a></li>
	<li><a target="_blank" href="http://blog.demofox.org/2017/02/20/multivariable-dual-numbers-automatic-differentiation/">Multivariable Dual Numbers & Automatic Differentiation</a></li>
</ol>

If you want an explanation of finite differences, check out this post:
<a target="_blank" href="http://blog.demofox.org/2015/08/02/finite-differences/">Finite Differences</a>

Since the fundamentals are explained in the links above, we'll go straight to the code.

We'll be getting the gradient (learning values) for the network in example 4 in the backpropagation post:
<img src="https://demofox2.files.wordpress.com/2017/03/Example4.png"/>

Note that I am using "central differences" for the gradient, but it would be more efficient to do a forward or backward difference, at the cost of some accuracy.  I'm using an epsilon of 0.001.

I didn't compare the running times of each method as my code is meant to be readable, not fast, and the code isn't doing enough work to make a meaningful performance test IMO.  If you did do a speed test, the finite differences should be by far the slowest, backpropagation should be the fastest, and dual numbers are probably going to be closer to backpropagation than to finite differences.

The output of the program is below.  Both backpropagation and dual numbers get the exact derivatives (within the tolerances of floating point math of course!) because they use the chain rule, whereas finite differences is a numerical approximation.  This shows up in the fact that backpropagation and dual numbers agree for all values, where finite differences has some small error in the derivatives.

<img src="https://demofox2.files.wordpress.com/2017/03/nngrads.png"/>

And here is the code:
[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;cmath&gt;
#include &lt;array&gt;
#include &lt;algorithm&gt;
  
#define PI 3.14159265359f

#define EPSILON 0.001f  // for numeric derivatives calculation

//----------------------------------------------------------------------
// Dual Number Class - CDualNumber
//----------------------------------------------------------------------

template &lt;size_t NUMVARIABLES&gt;
class CDualNumber
{
public:
 
    // constructor to make a constant
    CDualNumber (float f = 0.0f) {
        m_real = f;
        std::fill(m_dual.begin(), m_dual.end(), 0.0f);
    }
 
    // constructor to make a variable value.  It sets the derivative to 1.0 for whichever variable this is a value for.
    CDualNumber (float f, size_t variableIndex) {
        m_real = f;
        std::fill(m_dual.begin(), m_dual.end(), 0.0f);
        m_dual[variableIndex] = 1.0f;
    }

	// Set a constant value.
	void Set (float f) {
		m_real = f;
		std::fill(m_dual.begin(), m_dual.end(), 0.0f);
	}

	// Set a variable value.  It sets the derivative to 1.0 for whichever variable this is a value for.
	void Set (float f, size_t variableIndex) {
		m_real = f;
		std::fill(m_dual.begin(), m_dual.end(), 0.0f);
		m_dual[variableIndex] = 1.0f;
	}
 
    // storage for real and dual values
    float                           m_real;
    std::array&lt;float, NUMVARIABLES&gt; m_dual;
};
  
//----------------------------------------------------------------------
// Dual Number Math Operations
//----------------------------------------------------------------------
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; operator + (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a, const CDualNumber&lt;NUMVARIABLES&gt; &amp;b)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    ret.m_real = a.m_real + b.m_real;
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = a.m_dual[i] + b.m_dual[i];
    return ret;
}
  
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; operator - (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a, const CDualNumber&lt;NUMVARIABLES&gt; &amp;b)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    ret.m_real = a.m_real - b.m_real;
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = a.m_dual[i] - b.m_dual[i];
    return ret;
}
 
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; operator * (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a, const CDualNumber&lt;NUMVARIABLES&gt; &amp;b)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    ret.m_real = a.m_real * b.m_real;
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = a.m_real * b.m_dual[i] + a.m_dual[i] * b.m_real;
    return ret;
}
 
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; operator / (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a, const CDualNumber&lt;NUMVARIABLES&gt; &amp;b)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    ret.m_real = a.m_real / b.m_real;
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = (a.m_dual[i] * b.m_real - a.m_real * b.m_dual[i]) / (b.m_real * b.m_real);
    return ret;
}

// NOTE: the &quot;special functions&quot; below all just use the chain rule, which you can also use to add more functions
 
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; sqrt (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    float sqrtReal = sqrt(a.m_real);
    ret.m_real = sqrtReal;
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = 0.5f * a.m_dual[i] / sqrtReal;
    return ret;
}
 
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; pow (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a, float y)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    ret.m_real = pow(a.m_real, y);
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = y * a.m_dual[i] * pow(a.m_real, y - 1.0f);
    return ret;
}

template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; exp (const CDualNumber&lt;NUMVARIABLES&gt;&amp; a)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    ret.m_real = exp(a.m_real);
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = a.m_dual[i] * exp(a.m_real);
    return ret;
}
 
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; sin (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    ret.m_real = sin(a.m_real);
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = a.m_dual[i] * cos(a.m_real);
    return ret;
}
 
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; cos (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    ret.m_real = cos(a.m_real);
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = -a.m_dual[i] * sin(a.m_real);
    return ret;
}
 
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; tan (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    ret.m_real = tan(a.m_real);
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = a.m_dual[i] / (cos(a.m_real) * cos(a.m_real));
    return ret;
}
 
template &lt;size_t NUMVARIABLES&gt;
inline CDualNumber&lt;NUMVARIABLES&gt; atan (const CDualNumber&lt;NUMVARIABLES&gt; &amp;a)
{
    CDualNumber&lt;NUMVARIABLES&gt; ret;
    ret.m_real = tan(a.m_real);
    for (size_t i = 0; i &lt; NUMVARIABLES; ++i)
        ret.m_dual[i] = a.m_dual[i] / (1.0f + a.m_real * a.m_real);
    return ret;
}
 
// templated so it can work for both a CDualNumber&lt;1&gt; and a float
template &lt;typename T&gt;
inline T SmoothStep (const T&amp; x)
{
    return x * x * (T(3.0f) - T(2.0f) * x);
}

//----------------------------------------------------------------------
// Driver Program
//----------------------------------------------------------------------

enum EWeightsBiases
{
	e_weight0 = 0,
	e_weight1,
	e_weight2,
	e_weight3,
	e_weight4,
	e_weight5,
	e_weight6,
	e_weight7,
	e_bias0,
	e_bias1,
	e_bias2,
	e_bias3,

	e_count
};

// our dual number needs a &quot;dual&quot; for every value we want a derivative for: aka every weight and bias
typedef CDualNumber&lt;EWeightsBiases::e_count&gt; TDualNumber;

// templated so it can work for both the dual numbers, as well as the float finite differences
template &lt;typename TBaseType&gt;
void ForwardPass (const std::array&lt;TBaseType, 2&gt;&amp; input, const std::array&lt;TBaseType, 2&gt;&amp; desiredOutput, const std::array&lt;TBaseType, EWeightsBiases::e_count&gt;&amp; weightsBiases, TBaseType&amp; cost)
{
	// calculate hidden layer neuron activations
	TBaseType Z0 = input[0] * weightsBiases[e_weight0] + input[1] * weightsBiases[e_weight1] + weightsBiases[e_bias0];
	TBaseType O0 = TBaseType(1.0f) / (TBaseType(1.0f) + exp(Z0 * TBaseType(-1.0f)));

	TBaseType Z1 = input[0] * weightsBiases[e_weight2] + input[1] * weightsBiases[e_weight3] + weightsBiases[e_bias1];
	TBaseType O1 = TBaseType(1.0f) / (TBaseType(1.0f) + exp(Z1 * TBaseType(-1.0f)));

	// calculate output layer neuron activations
	TBaseType Z2 = O0 * weightsBiases[e_weight4] + O1 * weightsBiases[e_weight5] + weightsBiases[e_bias2];
	TBaseType O2 = TBaseType(1.0f) / (TBaseType(1.0f) + exp(Z2 * TBaseType(-1.0f)));

	TBaseType Z3 = O0 * weightsBiases[e_weight6] + O1 * weightsBiases[e_weight7] + weightsBiases[e_bias3];
	TBaseType O3 = TBaseType(1.0f) / (TBaseType(1.0f) + exp(Z3 * TBaseType(-1.0f)));

	// calculate the cost: 0.5 * ||target-actual||^2
	// aka cost = half (error squared)
	TBaseType diff1 = TBaseType(desiredOutput[0]) - O2;
	TBaseType diff2 = TBaseType(desiredOutput[1]) - O3;
	cost = TBaseType(0.5f) * (diff1*diff1 + diff2*diff2);
}

// backpropagation
void ForwardPassAndBackpropagation (
    const std::array&lt;float, 2&gt;&amp; input, const std::array&lt;float, 2&gt;&amp; desiredOutput,
	const std::array&lt;float, EWeightsBiases::e_count&gt;&amp; weightsBiases,
    float&amp; error, float&amp; cost, std::array&lt;float, 2&gt;&amp; actualOutput,
	std::array&lt;float, EWeightsBiases::e_count&gt;&amp; deltaWeightsBiases
) {
    // calculate Z0 and O0 for neuron0
    float Z0 = input[0] * weightsBiases[e_weight0] + input[1] * weightsBiases[e_weight1] + weightsBiases[e_bias0];
    float O0 = 1.0f / (1.0f + std::exp(-Z0));
 
    // calculate Z1 and O1 for neuron1
    float Z1 = input[0] * weightsBiases[e_weight2] + input[1] * weightsBiases[e_weight3] + weightsBiases[e_bias1];
    float O1 = 1.0f / (1.0f + std::exp(-Z1));
 
    // calculate Z2 and O2 for neuron2
    float Z2 = O0 * weightsBiases[e_weight4] + O1 * weightsBiases[e_weight5] + weightsBiases[e_bias2];
    float O2 = 1.0f / (1.0f + std::exp(-Z2));
 
    // calculate Z3 and O3 for neuron3
    float Z3 = O0 * weightsBiases[e_weight6] + O1 * weightsBiases[e_weight7] + weightsBiases[e_bias3];
    float O3 = 1.0f / (1.0f + std::exp(-Z3));
 
    // the actual output of the network is the activation of the output layer neurons
    actualOutput[0] = O2;
    actualOutput[1] = O3;
 
    // calculate error
    float diff0 = desiredOutput[0] - actualOutput[0];
    float diff1 = desiredOutput[1] - actualOutput[1];
    error = std::sqrt(diff0*diff0 + diff1*diff1);
 
    // calculate cost
    cost = 0.5f * error * error;
 
    //----- Neuron 2 -----
 
    // calculate how much a change in neuron 2 activation affects the cost function
    // deltaCost/deltaO2 = O2 - target0
    float deltaCost_deltaO2 = O2 - desiredOutput[0];
 
    // calculate how much a change in neuron 2 weighted input affects neuron 2 activation
    // deltaO2/deltaZ2 = O2 * (1 - O2)
    float deltaO2_deltaZ2 = O2 * (1 - O2);
 
    // calculate how much a change in neuron 2 weighted input affects the cost function.
    // This is deltaCost/deltaZ2, which equals deltaCost/deltaO2 * deltaO2/deltaZ2
    // This is also deltaCost/deltaBias2 and is also refered to as the error of neuron 2
    float neuron2Error = deltaCost_deltaO2 * deltaO2_deltaZ2;
	deltaWeightsBiases[e_bias2] = neuron2Error;
 
    // calculate how much a change in weight4 affects the cost function.
    // deltaCost/deltaWeight4 = deltaCost/deltaO2 * deltaO2/deltaZ2 * deltaZ2/deltaWeight4
    // deltaCost/deltaWeight4 = neuron2Error * deltaZ/deltaWeight4
    // deltaCost/deltaWeight4 = neuron2Error * O0
    // similar thing for weight5
	deltaWeightsBiases[e_weight4] = neuron2Error * O0;
	deltaWeightsBiases[e_weight5] = neuron2Error * O1;
 
    //----- Neuron 3 -----
 
    // calculate how much a change in neuron 3 activation affects the cost function
    // deltaCost/deltaO3 = O3 - target1
    float deltaCost_deltaO3 = O3 - desiredOutput[1];
 
    // calculate how much a change in neuron 3 weighted input affects neuron 3 activation
    // deltaO3/deltaZ3 = O3 * (1 - O3)
    float deltaO3_deltaZ3 = O3 * (1 - O3);
 
    // calculate how much a change in neuron 3 weighted input affects the cost function.
    // This is deltaCost/deltaZ3, which equals deltaCost/deltaO3 * deltaO3/deltaZ3
    // This is also deltaCost/deltaBias3 and is also refered to as the error of neuron 3
    float neuron3Error = deltaCost_deltaO3 * deltaO3_deltaZ3;
	deltaWeightsBiases[e_bias3] = neuron3Error;
 
    // calculate how much a change in weight6 affects the cost function.
    // deltaCost/deltaWeight6 = deltaCost/deltaO3 * deltaO3/deltaZ3 * deltaZ3/deltaWeight6
    // deltaCost/deltaWeight6 = neuron3Error * deltaZ/deltaWeight6
    // deltaCost/deltaWeight6 = neuron3Error * O0
    // similar thing for weight7
	deltaWeightsBiases[e_weight6] = neuron3Error * O0;
	deltaWeightsBiases[e_weight7] = neuron3Error * O1;
 
    //----- Neuron 0 -----
 
    // calculate how much a change in neuron 0 activation affects the cost function
    // deltaCost/deltaO0 = deltaCost/deltaZ2 * deltaZ2/deltaO0 + deltaCost/deltaZ3 * deltaZ3/deltaO0
    // deltaCost/deltaO0 = neuron2Error * weight4 + neuron3error * weight6
    float deltaCost_deltaO0 = neuron2Error * weightsBiases[e_weight4] + neuron3Error * weightsBiases[e_weight6];
 
    // calculate how much a change in neuron 0 weighted input affects neuron 0 activation
    // deltaO0/deltaZ0 = O0 * (1 - O0)
    float deltaO0_deltaZ0 = O0 * (1 - O0);
 
    // calculate how much a change in neuron 0 weighted input affects the cost function.
    // This is deltaCost/deltaZ0, which equals deltaCost/deltaO0 * deltaO0/deltaZ0
    // This is also deltaCost/deltaBias0 and is also refered to as the error of neuron 0
    float neuron0Error = deltaCost_deltaO0 * deltaO0_deltaZ0;
	deltaWeightsBiases[e_bias0] = neuron0Error;
 
    // calculate how much a change in weight0 affects the cost function.
    // deltaCost/deltaWeight0 = deltaCost/deltaO0 * deltaO0/deltaZ0 * deltaZ0/deltaWeight0
    // deltaCost/deltaWeight0 = neuron0Error * deltaZ0/deltaWeight0
    // deltaCost/deltaWeight0 = neuron0Error * input0
    // similar thing for weight1
	deltaWeightsBiases[e_weight0] = neuron0Error * input[0];
	deltaWeightsBiases[e_weight1] = neuron0Error * input[1];
 
    //----- Neuron 1 -----
 
    // calculate how much a change in neuron 1 activation affects the cost function
    // deltaCost/deltaO1 = deltaCost/deltaZ2 * deltaZ2/deltaO1 + deltaCost/deltaZ3 * deltaZ3/deltaO1
    // deltaCost/deltaO1 = neuron2Error * weight5 + neuron3error * weight7
    float deltaCost_deltaO1 = neuron2Error * weightsBiases[e_weight5] + neuron3Error * weightsBiases[e_weight7];
 
    // calculate how much a change in neuron 1 weighted input affects neuron 1 activation
    // deltaO1/deltaZ1 = O1 * (1 - O1)
    float deltaO1_deltaZ1 = O1 * (1 - O1);
 
    // calculate how much a change in neuron 1 weighted input affects the cost function.
    // This is deltaCost/deltaZ1, which equals deltaCost/deltaO1 * deltaO1/deltaZ1
    // This is also deltaCost/deltaBias1 and is also refered to as the error of neuron 1
    float neuron1Error = deltaCost_deltaO1 * deltaO1_deltaZ1;
	deltaWeightsBiases[e_bias1] = neuron1Error;
 
    // calculate how much a change in weight2 affects the cost function.
    // deltaCost/deltaWeight2 = deltaCost/deltaO1 * deltaO1/deltaZ1 * deltaZ1/deltaWeight2
    // deltaCost/deltaWeight2 = neuron1Error * deltaZ2/deltaWeight2
    // deltaCost/deltaWeight2 = neuron1Error * input0
    // similar thing for weight3
	deltaWeightsBiases[e_weight2] = neuron1Error * input[0];
	deltaWeightsBiases[e_weight3] = neuron1Error * input[1];
}
 
int main (int argc, char **argv)
{

	// weights and biases, inputs and desired output
	const std::array&lt;float, EWeightsBiases::e_count&gt; weightsBiases =
	{
		0.15f, // e_weight0
		0.2f,  // e_weight1
		0.25f, // e_weight2
		0.3f,  // e_weight3
		0.4f,  // e_weight4
		0.45f, // e_weight5
		0.5f,  // e_weight6
		0.55f, // e_weight7
		0.35f, // e_bias0
		0.35f, // e_bias1
		0.6f,  // e_bias2
		0.6f   // e_bias3
	};

	const std::array&lt;float, 2&gt; inputs = 
	{
		0.05f,
		0.1f
	};

	std::array&lt;float, 2&gt; desiredOutput = {
		0.01f,
		0.99f
	};

	// =====================================================
	// ===== FINITE DIFFERENCES CALCULATED DERIVATIVES =====
	// =====================================================

	std::array&lt;float, EWeightsBiases::e_count&gt; gradientFiniteDifferences;
	std::array&lt;float, EWeightsBiases::e_count&gt; weightsBiasesFloat;
	for (size_t i = 0; i &lt; EWeightsBiases::e_count; ++i)
		weightsBiasesFloat[i] = weightsBiases[i];

	// use central differences to approximate the gradient
	for (size_t i = 0; i &lt; EWeightsBiases::e_count; ++i)
	{
		float costSample1 = 0.0f;
		weightsBiasesFloat[i] = weightsBiases[i] - EPSILON;
		ForwardPass(inputs, desiredOutput, weightsBiasesFloat, costSample1);

		float costSample2 = 0.0f;
		weightsBiasesFloat[i] = weightsBiases[i] + EPSILON;
		ForwardPass(inputs, desiredOutput, weightsBiasesFloat, costSample2);

		gradientFiniteDifferences[i] = (costSample2 - costSample1) / (EPSILON * 2.0f);

		weightsBiasesFloat[i] = weightsBiases[i];
	}

	// ==============================================
	// ===== DUAL NUMBER CALCULATED DERIVATIVES =====
	// ==============================================

	// dual number weights and biases
	std::array&lt;TDualNumber, EWeightsBiases::e_count&gt; weightsBiasesDual;
	for (size_t i = 0; i &lt; EWeightsBiases::e_count; ++i)
		weightsBiasesDual[i].Set(weightsBiases[i], i);

	// dual number inputs and desired output
	std::array&lt;TDualNumber, 2&gt; inputsDual;
	for (size_t i = 0; i &lt; inputsDual.size(); ++i)
		inputsDual[i].Set(inputs[i]);

	std::array&lt;TDualNumber, 2&gt; desiredOutputDual;
	for (size_t i = 0; i &lt; desiredOutputDual.size(); ++i)
		desiredOutputDual[i].Set(desiredOutput[i]);

	// dual number derivatives
	TDualNumber gradientDualNumbers;
	ForwardPass(inputsDual, desiredOutputDual, weightsBiasesDual, gradientDualNumbers);

	// ==================================================
	// ===== BACKPROPAGATION CALCULATED DERIVATIVES =====
	// ==================================================

	float error;
	float cost;
	std::array&lt;float, 2&gt; actualOutput;
	std::array&lt;float, EWeightsBiases::e_count&gt; gradientBackPropagation;
	ForwardPassAndBackpropagation(inputs, desiredOutput, weightsBiases, error, cost, actualOutput, gradientBackPropagation);

	// ==========================
	// ===== Report Results =====
	// ==========================

	printf(&quot;Neural Network Gradient\n\nBackpropagation     Dual Numbers (Error)       Finite Differences (Error)\n&quot;);
	for (size_t i = 0; i &lt; EWeightsBiases::e_count; ++i)
	{
		float diffDual = gradientBackPropagation[i] - gradientDualNumbers.m_dual[i];
		float diffFinitDifferences = gradientBackPropagation[i] - gradientFiniteDifferences[i];
		printf(&quot;% 08f,         % 08f (% 08f),     % 08f (% 08f)\n&quot;,
			gradientBackPropagation[i],
			gradientDualNumbers.m_dual[i], diffDual,
			gradientFiniteDifferences[i], diffFinitDifferences
		);
	}
	printf(&quot;\n&quot;);

	system(&quot;pause&quot;);
    return 0;
}
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6201</wp:post_id>
		<wp:post_date><![CDATA[2017-03-13 08:34:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-13 16:34:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[neural-network-gradients-backpropagation-dual-numbers-finite-differences]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="neural-networks"><![CDATA[Neural Networks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495676970;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5999;}i:1;a:1:{s:2:"id";i:5949;}i:2;a:1:{s:2:"id";i:6208;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Neural Network Recipe: Recognize Handwritten Digits With 95% Accuracy</title>
		<link>http://blog.demofox.org/2017/03/15/neural-network-recipe-recognize-handwritten-digits-with-95-accuracy/</link>
		<pubDate>Wed, 15 Mar 2017 19:42:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=6208</guid>
		<description></description>
		<content:encoded><![CDATA[This post is a recipe for making a neural network which is able to recognize hand written numeric digits (0-9) with 95% accuracy.

The intent is that you can use this recipe (and included simple C++ code, and interactive web demo!) as a starting point for some hands on experimentation.

A recent post of mine talks about all the things used in this recipe so give it a read if you want more info about anything: <a target="_blank" href="http://blog.demofox.org/2017/03/09/how-to-train-neural-networks-with-backpropagation/">How to Train Neural Networks With Backpropagation</a>.

This recipe is also taken straight from this amazing website (but coded from scratch in C++ by myself), where it's implemented in python: <a target="_blank" href="http://neuralnetworksanddeeplearning.com/chap1.html">Using neural nets to recognize handwritten digits</a>.

<h1>Recipe</h1>

The neural network takes as input 28x28 greyscale images, so there will be 784 input neurons.

There is one hidden layer that has 30 neurons.

The final layer is the output layer which has 10 neurons.

The output neuron with the highest activation is the digit that was recognized.  For instance if output neuron 0 had the highest activation, the network detected a 0.  If output neuron 2 was highest, the network detected a 2.

The neurons use the sigmoid activation function, and the cost function used is half mean squared error.

Training uses a learning rate of 3.0 and the training data is processed by the network 30 times (aka 30 training epochs), using a minibatch size of 10.

A minibatch size of 10 just means that we calculate the gradient for 10 training samples at a time and adjust the weights and biases using that gradient.  We do that for the entire (shuffled) 60,000 training items and call that a single epoch.  30 epochs mean we do this full process 30 times.

There are 60,000 items in the training data, mapping 28x28 greyscale images to what digit 0-9 they actually represent.

Besides the 60,000 training data items, there are also 10,000 separate items that are the test data.  These test data items are items never seen by the network during training and are just used as a way to see how well the network has learned about the problem in general, versus learning about the specific training data items.

The test and training data is the MNIST data set.  I have a link to zip file I made with the data in it below, but this is where I got the data from: <a href="http://yann.lecun.com/exdb/mnist/" target="_blank">The MNIST database of handwritten digits</a>.

That is the entire recipe!

<h2>Results</h2>

The 30 training epochs took 1 minute 22 seconds on my machine in release x64 (with REPORT_ERROR_WHILE_TRAINING() set to 0 to speed things up), but the code could be made to run faster by using SIMD, putting it on the GPU, getting multithreading involved or other things.

Below is a graph of the accuracy during the training epochs.
<img src="https://demofox2.files.wordpress.com/2017/03/mnist1error.png"/>

Notice that most learning happened very early on and then only slowly improved from there.  This is due to our neuron activation functions and also our cost function.  There are better choices for both, but this is also an ongoing area of research to improve in neural networks.

The end result of my training run is 95.32% accuracy but you may get slightly higher or lower due to random initialization of weights and biases.  That sounds pretty high, but if you were actually using this, 4 or 5 numbers wrong out of 100 is a pretty big deal!  The record for MNIST is 99.77% accuracy using "a committee of convolutional networks" where they distorted the input data during training to make it learn in a more generalized way (described as "committee of 35 conv. net, 1-20-P-40-P-150-10 [elastic distortions]").

A better cost function would probably be the cross entropy cost function, a better activation function than sigmoid would probably be an <a href="http://image-net.org/challenges/posters/JKU_EN_RGB_Schwarz_poster.pdf" target="_blank">ELU (Exponential Linear Unit)</a>.  A soft max layer could be used instead of just taking the maximum output neuron as the answer.  The weights could be initialized to smarter values.  We could also use a convolutional layer to help let the network learn features in a way that didn't also tie the features to specific locations in the images.

Many of these things are described in good detail at <a href="http://neuralnetworksanddeeplearning.com/" target="_blank"/>http://neuralnetworksanddeeplearning.com/</a>, particularly in chapter 3 where they make a python implementation of a convolutional neural network which performs better than this one.  I highly recommend checking that website out!

<h1>HTML5 Demo</h1>

You can play with a network created with this recipe here: <a href="http://demofox.org/MNIST1.html" target="_blank">Recognize Handwritten Digit 95% Accuracy</a>

Here is an example of it correctly detecting that I drew a 4.
<img src="https://demofox2.files.wordpress.com/2017/03/demo.png"/>

The demo works "pretty well" but it does have a little less than 95% accuracy.

The reason for this though is that it isn't comparing apples to apples.

A handwritten digit isn't quite the same as a digit drawn with a mouse.  Check out the image below to see 100 of the training images and see what i mean.

<img src="https://demofox2.files.wordpress.com/2017/03/mnist_100_digits1.png"/>

The demo finds the bounding box of the drawn image and rescales that bounding box to a 20x20 image, preserving the aspect ratio.  It then puts that into a 28x28 image, using the center of mass of the pixels to center the smaller image in the larger one.  This is how the MNIST data was generated, so makes the demo more accurate, but it also has the nice side effect of making it so you can draw a number of any size, in any part of the box, and it will treat it the same as if you drew it at a difference size, or in a different part of the box.

The code that goes with this post outputs the weights, biases and network structure in a json format that is very easy to drop into the html5 demo.  This way, if you want to try different things in the network, it should be fairly low effort to adjust the demo to try your adjustments there as well.

Lastly, it might be interesting to get the derivatives of the inputs and play around with the input you gave it.  Some experiments I can think of:
<ol>
	<li>When it misclassifies what number you drew, have it adjust what you drew (the input) to be more like what the network would expect to see for that digit.  This could help show why it misclassified your number.</li>
	<li>Start with a well classified number and make it morph into something recognized by the network as a different number.</li>
	<li>Start with a random static (noise) image and adjust it until the network recognizes it as a digit.  It would be interesting to see if it looked anything like a number, or if it was still just static.</li>
</ol>

<h1>Source Code</h1>

The source code and mnist data is on github at <a href="https://github.com/Atrix256/MNIST1" target="_blank">MNIST1</a>, but is also included below for your convenience.

If grabbing the source code from below instead of github, you will need to extract this zip file into the working directory of the program as well.  It contains the test data used for training the network.
<a href="https://demofox2.files.wordpress.com/2017/03/mnist.zip" target="_blank"/>mnist.zip</a>

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS

#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;random&gt;
#include &lt;array&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;chrono&gt;

typedef uint32_t uint32;
typedef uint16_t uint16;
typedef uint8_t uint8;

// Set to 1 to have it show error after each training and also writes it to an Error.csv file.
// Slows down the process a bit (+~50% time on my machine)
#define REPORT_ERROR_WHILE_TRAINING() 1 

const size_t c_numInputNeurons = 784;
const size_t c_numHiddenNeurons = 30;  // NOTE: setting this to 100 hidden neurons can give better results, but also can be worse other times.
const size_t c_numOutputNeurons = 10;

const size_t c_trainingEpochs = 30;
const size_t c_miniBatchSize = 10;
const float c_learningRate = 3.0f;

// ============================================================================================
//                                     SBlockTimer
// ============================================================================================
// times a block of code
struct SBlockTimer
{
	SBlockTimer (const char* label)
	{
		m_start = std::chrono::high_resolution_clock::now();
		m_label = label;
	}

	~SBlockTimer ()
	{
		std::chrono::duration&lt;float&gt; seconds = std::chrono::high_resolution_clock::now() - m_start;
		printf(&quot;%s%0.2f seconds\n&quot;, m_label, seconds.count());
	}

	std::chrono::high_resolution_clock::time_point m_start;
	const char* m_label;
};

// ============================================================================================
//                                    MNIST DATA LOADER
// ============================================================================================

inline uint32 EndianSwap (uint32 a)
{
	return (a&lt;&lt;24) | ((a&lt;&lt;8) &amp; 0x00ff0000) |
           ((a&gt;&gt;8) &amp; 0x0000ff00) | (a&gt;&gt;24);
}

// MNIST data and file format description is from http://yann.lecun.com/exdb/mnist/
class CMNISTData
{
public:
	CMNISTData ()
	{
		m_labelData = nullptr;
		m_imageData = nullptr;

		m_imageCount = 0;
		m_labels = nullptr;
		m_pixels = nullptr;
	}

	bool Load (bool training)
	{
		// set the expected image count
		m_imageCount = training ? 60000 : 10000;

		// read labels
		const char* labelsFileName = training ? &quot;train-labels.idx1-ubyte&quot; : &quot;t10k-labels.idx1-ubyte&quot;;
		FILE* file = fopen(labelsFileName,&quot;rb&quot;);
		if (!file)
		{
			printf(&quot;could not open %s for reading.\n&quot;, labelsFileName);
			return false;
		}
		fseek(file, 0, SEEK_END);
		long fileSize = ftell(file);
		fseek(file, 0, SEEK_SET);
		m_labelData = new uint8[fileSize];
		fread(m_labelData, fileSize, 1, file);
		fclose(file);

		// read images
		const char* imagesFileName = training ? &quot;train-images.idx3-ubyte&quot; : &quot;t10k-images.idx3-ubyte&quot;;
		file = fopen(imagesFileName, &quot;rb&quot;);
		if (!file)
		{
			printf(&quot;could not open %s for reading.\n&quot;, imagesFileName);
			return false;
		}
		fseek(file, 0, SEEK_END);
		fileSize = ftell(file);
		fseek(file, 0, SEEK_SET);
		m_imageData = new uint8[fileSize];
		fread(m_imageData, fileSize, 1, file);
		fclose(file);

		// endian swap label file if needed, just first two uint32's.  The rest is uint8's.
		uint32* data = (uint32*)m_labelData;
		if (data[0] == 0x01080000)
		{
			data[0] = EndianSwap(data[0]);
			data[1] = EndianSwap(data[1]);
		}

		// verify that the label file has the right header
		if (data[0] != 2049 || data[1] != m_imageCount)
		{
			printf(&quot;Label data had unexpected header values.\n&quot;);
			return false;
		}
		m_labels = (uint8*)&amp;(data[2]);

		// endian swap the image file if needed, just first 4 uint32's. The rest is uint8's.
		data = (uint32*)m_imageData;
		if (data[0] == 0x03080000)
		{
			data[0] = EndianSwap(data[0]);
			data[1] = EndianSwap(data[1]);
			data[2] = EndianSwap(data[2]);
			data[3] = EndianSwap(data[3]);
		}

		// verify that the image file has the right header
		if (data[0] != 2051 || data[1] != m_imageCount || data[2] != 28 || data[3] != 28)
		{
			printf(&quot;Label data had unexpected header values.\n&quot;);
			return false;
		}
		m_pixels = (uint8*)&amp;(data[4]);

		// convert the pixels from uint8 to float
		m_pixelsFloat.resize(28 * 28 * m_imageCount);
		for (size_t i = 0; i &lt; 28 * 28 * m_imageCount; ++i)
			m_pixelsFloat[i] = float(m_pixels[i]) / 255.0f;

		// success!
		return true;
	}

	~CMNISTData ()
	{
		delete[] m_labelData;
		delete[] m_imageData;
	}

	size_t NumImages () const { return m_imageCount; }

	const float* GetImage (size_t index, uint8&amp; label) const
	{
		label = m_labels[index];
		return &amp;m_pixelsFloat[index * 28 * 28];
	}

private:
	void* m_labelData;
	void* m_imageData;

	size_t m_imageCount;
	uint8* m_labels;
	uint8* m_pixels;

	std::vector&lt;float&gt; m_pixelsFloat;
};

// ============================================================================================
//                                    NEURAL NETWORK
// ============================================================================================

template &lt;size_t INPUTS, size_t HIDDEN_NEURONS, size_t OUTPUT_NEURONS&gt;
class CNeuralNetwork
{
public:
	CNeuralNetwork ()
	{
		// initialize weights and biases to a gaussian distribution random number with mean 0, stddev 1.0
		std::random_device rd;
		std::mt19937 e2(rd());
		std::normal_distribution&lt;float&gt; dist(0, 1);

		for (float&amp; f : m_hiddenLayerBiases)
			f = dist(e2);

		for (float&amp; f : m_outputLayerBiases)
			f = dist(e2);

		for (float&amp; f : m_hiddenLayerWeights)
			f = dist(e2);

		for (float&amp; f : m_outputLayerWeights)
			f = dist(e2);
	}

	void Train (const CMNISTData&amp; trainingData, size_t miniBatchSize, float learningRate)
	{
		// shuffle the order of the training data for our mini batches
		if (m_trainingOrder.size() != trainingData.NumImages())
		{
			m_trainingOrder.resize(trainingData.NumImages());
			size_t index = 0;
			for (size_t&amp; v : m_trainingOrder)
			{
				v = index;
				++index;
			}
		}
		static std::random_device rd;
		static std::mt19937 e2(rd());
		std::shuffle(m_trainingOrder.begin(), m_trainingOrder.end(), e2);

		// process all minibatches until we are out of training examples
		size_t trainingIndex = 0;
		while (trainingIndex &lt; trainingData.NumImages())
		{
			// Clear out minibatch derivatives.  We sum them up and then divide at the end of the minimatch
			std::fill(m_miniBatchHiddenLayerBiasesDeltaCost.begin(), m_miniBatchHiddenLayerBiasesDeltaCost.end(), 0.0f);
			std::fill(m_miniBatchOutputLayerBiasesDeltaCost.begin(), m_miniBatchOutputLayerBiasesDeltaCost.end(), 0.0f);
			std::fill(m_miniBatchHiddenLayerWeightsDeltaCost.begin(), m_miniBatchHiddenLayerWeightsDeltaCost.end(), 0.0f);
			std::fill(m_miniBatchOutputLayerWeightsDeltaCost.begin(), m_miniBatchOutputLayerWeightsDeltaCost.end(), 0.0f);

			// process the minibatch
			size_t miniBatchIndex = 0;
			while (miniBatchIndex &lt; miniBatchSize &amp;&amp; trainingIndex &lt; trainingData.NumImages())
			{
				// get the training item
				uint8 imageLabel = 0;
				const float* pixels = trainingData.GetImage(m_trainingOrder[trainingIndex], imageLabel);

				// run the forward pass of the network
				uint8 labelDetected = ForwardPass(pixels, imageLabel);

				// run the backward pass to get derivatives of the cost function
				BackwardPass(pixels, imageLabel);

				// add the current derivatives into the minibatch derivative arrays so we can average them at the end of the minibatch via division.
				for (size_t i = 0; i &lt; m_hiddenLayerBiasesDeltaCost.size(); ++i)
					m_miniBatchHiddenLayerBiasesDeltaCost[i] += m_hiddenLayerBiasesDeltaCost[i];
				for (size_t i = 0; i &lt; m_outputLayerBiasesDeltaCost.size(); ++i)
					m_miniBatchOutputLayerBiasesDeltaCost[i] += m_outputLayerBiasesDeltaCost[i];
				for (size_t i = 0; i &lt; m_hiddenLayerWeightsDeltaCost.size(); ++i)
					m_miniBatchHiddenLayerWeightsDeltaCost[i] += m_hiddenLayerWeightsDeltaCost[i];
				for (size_t i = 0; i &lt; m_outputLayerWeightsDeltaCost.size(); ++i)
					m_miniBatchOutputLayerWeightsDeltaCost[i] += m_outputLayerWeightsDeltaCost[i];

				// note that we've added another item to the minibatch, and that we've consumed another training example
				++trainingIndex;
				++miniBatchIndex;
			}

			// divide minibatch derivatives by how many items were in the minibatch, to get the average of the derivatives.
			// NOTE: instead of doing this explicitly like in the commented code below, we'll do it implicitly
			// by dividing the learning rate by miniBatchIndex.
			/*
			for (float&amp; f : m_miniBatchHiddenLayerBiasesDeltaCost)
				f /= float(miniBatchIndex);
			for (float&amp; f : m_miniBatchOutputLayerBiasesDeltaCost)
				f /= float(miniBatchIndex);
			for (float&amp; f : m_miniBatchHiddenLayerWeightsDeltaCost)
				f /= float(miniBatchIndex);
			for (float&amp; f : m_miniBatchOutputLayerWeightsDeltaCost)
				f /= float(miniBatchIndex);
			*/

			float miniBatchLearningRate = learningRate / float(miniBatchIndex);

			// apply training to biases and weights
			for (size_t i = 0; i &lt; m_hiddenLayerBiases.size(); ++i)
				m_hiddenLayerBiases[i] -= m_miniBatchHiddenLayerBiasesDeltaCost[i] * miniBatchLearningRate;
			for (size_t i = 0; i &lt; m_outputLayerBiases.size(); ++i)
				m_outputLayerBiases[i] -= m_miniBatchOutputLayerBiasesDeltaCost[i] * miniBatchLearningRate;
			for (size_t i = 0; i &lt; m_hiddenLayerWeights.size(); ++i)
				m_hiddenLayerWeights[i] -= m_miniBatchHiddenLayerWeightsDeltaCost[i] * miniBatchLearningRate;
			for (size_t i = 0; i &lt; m_outputLayerWeights.size(); ++i)
				m_outputLayerWeights[i] -= m_miniBatchOutputLayerWeightsDeltaCost[i] * miniBatchLearningRate;
		}
	}

	// This function evaluates the network for the given input pixels and returns the label it thinks it is from 0-9
	uint8 ForwardPass (const float* pixels, uint8 correctLabel)
	{
		// first do hidden layer
		for (size_t neuronIndex = 0; neuronIndex &lt; HIDDEN_NEURONS; ++neuronIndex)
		{
			float Z = m_hiddenLayerBiases[neuronIndex];

			for (size_t inputIndex = 0; inputIndex &lt; INPUTS; ++inputIndex)
				Z += pixels[inputIndex] * m_hiddenLayerWeights[HiddenLayerWeightIndex(inputIndex, neuronIndex)];

			m_hiddenLayerOutputs[neuronIndex] = 1.0f / (1.0f + std::exp(-Z));
		}

		// then do output layer
		for (size_t neuronIndex = 0; neuronIndex &lt; OUTPUT_NEURONS; ++neuronIndex)
		{
			float Z = m_outputLayerBiases[neuronIndex];

			for (size_t inputIndex = 0; inputIndex &lt; HIDDEN_NEURONS; ++inputIndex)
				Z += m_hiddenLayerOutputs[inputIndex] * m_outputLayerWeights[OutputLayerWeightIndex(inputIndex, neuronIndex)];

			m_outputLayerOutputs[neuronIndex] = 1.0f / (1.0f + std::exp(-Z));
		}

		// calculate error.
		// this is the magnitude of the vector that is Desired - Actual.
		// Commenting out because it's not needed.
		/*
		{
			error = 0.0f;
			for (size_t neuronIndex = 0; neuronIndex &lt; OUTPUT_NEURONS; ++neuronIndex)
			{
				float desiredOutput = (correctLabel == neuronIndex) ? 1.0f : 0.0f;
				float diff = (desiredOutput - m_outputLayerOutputs[neuronIndex]);
				error += diff * diff;
			}
			error = std::sqrt(error);
		}
		*/

		// find the maximum value of the output layer and return that index as the label
		float maxOutput = m_outputLayerOutputs[0];
		uint8 maxLabel = 0;
		for (uint8 neuronIndex = 1; neuronIndex &lt; OUTPUT_NEURONS; ++neuronIndex)
		{
			if (m_outputLayerOutputs[neuronIndex] &gt; maxOutput)
			{
				maxOutput = m_outputLayerOutputs[neuronIndex];
				maxLabel = neuronIndex;
			}
		}
		return maxLabel;
	}

	// Functions to get weights/bias values. Used to make the JSON file.
	const std::array&lt;float, HIDDEN_NEURONS&gt;&amp; GetHiddenLayerBiases () const { return m_hiddenLayerBiases; }
	const std::array&lt;float, OUTPUT_NEURONS&gt;&amp; GetOutputLayerBiases () const { return m_outputLayerBiases; }
	const std::array&lt;float, INPUTS * HIDDEN_NEURONS&gt;&amp; GetHiddenLayerWeights () const { return m_hiddenLayerWeights; }
	const std::array&lt;float, HIDDEN_NEURONS * OUTPUT_NEURONS&gt;&amp; GetOutputLayerWeights () const { return m_outputLayerWeights; }

private:

	static size_t HiddenLayerWeightIndex (size_t inputIndex, size_t hiddenLayerNeuronIndex)
	{
		return hiddenLayerNeuronIndex * INPUTS + inputIndex;
	}

	static size_t OutputLayerWeightIndex (size_t hiddenLayerNeuronIndex, size_t outputLayerNeuronIndex)
	{
		return outputLayerNeuronIndex * HIDDEN_NEURONS + hiddenLayerNeuronIndex;
	}

	// this function uses the neuron output values from the forward pass to backpropagate the error
	// of the network to calculate the gradient needed for training.  It figures out what the error
	// is by comparing the label it came up with to the label it should have come up with (correctLabel).
	void BackwardPass (const float* pixels, uint8 correctLabel)
	{
		// since we are going backwards, do the output layer first
		for (size_t neuronIndex = 0; neuronIndex &lt; OUTPUT_NEURONS; ++neuronIndex)
		{
			// calculate deltaCost/deltaBias for each output neuron.
			// This is also the error for the neuron, and is the same value as deltaCost/deltaZ.
			//
			// deltaCost/deltaZ = deltaCost/deltaO * deltaO/deltaZ
			//
			// deltaCost/deltaO = O - desiredOutput
			// deltaO/deltaZ = O * (1 - O)
			//
			float desiredOutput = (correctLabel == neuronIndex) ? 1.0f : 0.0f;

			float deltaCost_deltaO = m_outputLayerOutputs[neuronIndex] - desiredOutput;
			float deltaO_deltaZ = m_outputLayerOutputs[neuronIndex] * (1.0f - m_outputLayerOutputs[neuronIndex]);

			m_outputLayerBiasesDeltaCost[neuronIndex] = deltaCost_deltaO * deltaO_deltaZ;

			// calculate deltaCost/deltaWeight for each weight going into the neuron
			//
			// deltaCost/deltaWeight = deltaCost/deltaZ * deltaCost/deltaWeight
			// deltaCost/deltaWeight = deltaCost/deltaBias * input
			//
			for (size_t inputIndex = 0; inputIndex &lt; HIDDEN_NEURONS; ++inputIndex)
				m_outputLayerWeightsDeltaCost[OutputLayerWeightIndex(inputIndex, neuronIndex)] = m_outputLayerBiasesDeltaCost[neuronIndex] * m_hiddenLayerOutputs[inputIndex];
		}

		// then do the hidden layer
		for (size_t neuronIndex = 0; neuronIndex &lt; HIDDEN_NEURONS; ++neuronIndex)
		{
			// calculate deltaCost/deltaBias for each hidden neuron.
			// This is also the error for the neuron, and is the same value as deltaCost/deltaZ.
			//
			// deltaCost/deltaO =
			//   Sum for each output of this neuron:
			//     deltaCost/deltaDestinationZ * deltaDestinationZ/deltaSourceO
			//
			// deltaCost/deltaDestinationZ is already calculated and lives in m_outputLayerBiasesDeltaCost[destinationNeuronIndex].
			// deltaTargetZ/deltaSourceO is the value of the weight connecting the source and target neuron.
			//
			// deltaCost/deltaZ = deltaCost/deltaO * deltaO/deltaZ
			// deltaO/deltaZ = O * (1 - O)
			//
			float deltaCost_deltaO = 0.0f;
			for (size_t destinationNeuronIndex = 0; destinationNeuronIndex &lt; OUTPUT_NEURONS; ++destinationNeuronIndex)
				deltaCost_deltaO += m_outputLayerBiasesDeltaCost[destinationNeuronIndex] * m_outputLayerWeights[OutputLayerWeightIndex(neuronIndex, destinationNeuronIndex)];
			float deltaO_deltaZ = m_hiddenLayerOutputs[neuronIndex] * (1.0f - m_hiddenLayerOutputs[neuronIndex]);
			m_hiddenLayerBiasesDeltaCost[neuronIndex] = deltaCost_deltaO * deltaO_deltaZ;

			// calculate deltaCost/deltaWeight for each weight going into the neuron
			//
			// deltaCost/deltaWeight = deltaCost/deltaZ * deltaCost/deltaWeight
			// deltaCost/deltaWeight = deltaCost/deltaBias * input
			//
			for (size_t inputIndex = 0; inputIndex &lt; INPUTS; ++inputIndex)
				m_hiddenLayerWeightsDeltaCost[HiddenLayerWeightIndex(inputIndex, neuronIndex)] = m_hiddenLayerBiasesDeltaCost[neuronIndex] * pixels[inputIndex];
		}
	}

private:

	// biases and weights
	std::array&lt;float, HIDDEN_NEURONS&gt;					m_hiddenLayerBiases;
	std::array&lt;float, OUTPUT_NEURONS&gt;					m_outputLayerBiases;

	std::array&lt;float, INPUTS * HIDDEN_NEURONS&gt;			m_hiddenLayerWeights;
	std::array&lt;float, HIDDEN_NEURONS * OUTPUT_NEURONS&gt;	m_outputLayerWeights;

	// neuron activation values aka &quot;O&quot; values
	std::array&lt;float, HIDDEN_NEURONS&gt;					m_hiddenLayerOutputs;
	std::array&lt;float, OUTPUT_NEURONS&gt;					m_outputLayerOutputs;

	// derivatives of biases and weights for a single training example
	std::array&lt;float, HIDDEN_NEURONS&gt;					m_hiddenLayerBiasesDeltaCost;
	std::array&lt;float, OUTPUT_NEURONS&gt;					m_outputLayerBiasesDeltaCost;

	std::array&lt;float, INPUTS * HIDDEN_NEURONS&gt;			m_hiddenLayerWeightsDeltaCost;
	std::array&lt;float, HIDDEN_NEURONS * OUTPUT_NEURONS&gt;	m_outputLayerWeightsDeltaCost;

	// derivatives of biases and weights for the minibatch. Average of all items in minibatch.
	std::array&lt;float, HIDDEN_NEURONS&gt;					m_miniBatchHiddenLayerBiasesDeltaCost;
	std::array&lt;float, OUTPUT_NEURONS&gt;					m_miniBatchOutputLayerBiasesDeltaCost;

	std::array&lt;float, INPUTS * HIDDEN_NEURONS&gt;			m_miniBatchHiddenLayerWeightsDeltaCost;
	std::array&lt;float, HIDDEN_NEURONS * OUTPUT_NEURONS&gt;	m_miniBatchOutputLayerWeightsDeltaCost;

	// used for minibatch generation
	std::vector&lt;size_t&gt;									m_trainingOrder;
};

// ============================================================================================
//                                   DRIVER PROGRAM
// ============================================================================================

// training and test data
CMNISTData g_trainingData;
CMNISTData g_testData;

// neural network
CNeuralNetwork&lt;c_numInputNeurons, c_numHiddenNeurons, c_numOutputNeurons&gt; g_neuralNetwork;

float GetDataAccuracy (const CMNISTData&amp; data)
{
	size_t correctItems = 0;
	for (size_t i = 0, c = data.NumImages(); i &lt; c; ++i)
	{
		uint8 label;
		const float* pixels = data.GetImage(i, label);
		uint8 detectedLabel = g_neuralNetwork.ForwardPass(pixels, label);

		if (detectedLabel == label)
			++correctItems;
	}
	return float(correctItems) / float(data.NumImages());
}

void ShowImage (const CMNISTData&amp; data, size_t imageIndex)
{
	uint8 label = 0;
	const float* pixels = data.GetImage(imageIndex, label);
	printf(&quot;showing a %i\n&quot;, label);
	for (int iy = 0; iy &lt; 28; ++iy)
	{
		for (int ix = 0; ix &lt; 28; ++ix)
		{
			if (*pixels &lt; 0.125)
				printf(&quot; &quot;);
			else
				printf(&quot;+&quot;);
			++pixels;
		}
		printf(&quot;\n&quot;);
	}
}

int main (int argc, char** argv)
{
	// load the MNIST data if we can
	if (!g_trainingData.Load(true) || !g_testData.Load(false))
	{
		printf(&quot;Could not load mnist data, aborting!\n&quot;);
		system(&quot;pause&quot;);
		return 1;
	}

	#if REPORT_ERROR_WHILE_TRAINING()
	FILE *file = fopen(&quot;Error.csv&quot;,&quot;w+t&quot;);
	if (!file)
	{
		printf(&quot;Could not open Error.csv for writing, aborting!\n&quot;);
		system(&quot;pause&quot;);
		return 2;
	}
	fprintf(file, &quot;\&quot;Training Data Accuracy\&quot;,\&quot;Testing Data Accuracy\&quot;\n&quot;);
	#endif

	{
		SBlockTimer timer(&quot;Training Time:  &quot;);

		// train the network, reporting error before each training
		for (size_t epoch = 0; epoch &lt; c_trainingEpochs; ++epoch)
		{
			#if REPORT_ERROR_WHILE_TRAINING()
				float accuracyTraining = GetDataAccuracy(g_trainingData);
				float accuracyTest = GetDataAccuracy(g_testData);
				printf(&quot;Training Data Accuracy: %0.2f%%\n&quot;, 100.0f*accuracyTraining);
				printf(&quot;Test Data Accuracy: %0.2f%%\n\n&quot;, 100.0f*accuracyTest);
				fprintf(file, &quot;\&quot;%f\&quot;,\&quot;%f\&quot;\n&quot;, accuracyTraining, accuracyTest);
			#endif

			printf(&quot;Training epoch %zu / %zu...\n&quot;, epoch+1, c_trainingEpochs);
			g_neuralNetwork.Train(g_trainingData, c_miniBatchSize, c_learningRate);
			printf(&quot;\n&quot;);
		}
	}

	// report final error
	float accuracyTraining = GetDataAccuracy(g_trainingData);
	float accuracyTest = GetDataAccuracy(g_testData);
	printf(&quot;\nFinal Training Data Accuracy: %0.2f%%\n&quot;, 100.0f*accuracyTraining);
	printf(&quot;Final Test Data Accuracy: %0.2f%%\n\n&quot;, 100.0f*accuracyTest);

	#if REPORT_ERROR_WHILE_TRAINING()
		fprintf(file, &quot;\&quot;%f\&quot;,\&quot;%f\&quot;\n&quot;, accuracyTraining, accuracyTest);
		fclose(file);
	#endif

	// Write out the final weights and biases as JSON for use in the web demo
	{
		FILE* file = fopen(&quot;WeightsBiasesJSON.txt&quot;, &quot;w+t&quot;);
		fprintf(file, &quot;{\n&quot;);

		// network structure
		fprintf(file, &quot;  \&quot;InputNeurons\&quot;:%zu,\n&quot;, c_numInputNeurons);
		fprintf(file, &quot;  \&quot;HiddenNeurons\&quot;:%zu,\n&quot;, c_numHiddenNeurons);
		fprintf(file, &quot;  \&quot;OutputNeurons\&quot;:%zu,\n&quot;, c_numOutputNeurons);

		// HiddenBiases
		auto hiddenBiases = g_neuralNetwork.GetHiddenLayerBiases();
		fprintf(file, &quot;  \&quot;HiddenBiases\&quot; : [\n&quot;);
		for (size_t i = 0; i &lt; hiddenBiases.size(); ++i)
		{
			fprintf(file, &quot;    %f&quot;, hiddenBiases[i]);
			if (i &lt; hiddenBiases.size() -1)
				fprintf(file, &quot;,&quot;);
			fprintf(file, &quot;\n&quot;);
		}
		fprintf(file, &quot;  ],\n&quot;);

		// HiddenWeights
		auto hiddenWeights = g_neuralNetwork.GetHiddenLayerWeights();
		fprintf(file, &quot;  \&quot;HiddenWeights\&quot; : [\n&quot;);
		for (size_t i = 0; i &lt; hiddenWeights.size(); ++i)
		{
			fprintf(file, &quot;    %f&quot;, hiddenWeights[i]);
			if (i &lt; hiddenWeights.size() - 1)
				fprintf(file, &quot;,&quot;);
			fprintf(file, &quot;\n&quot;);
		}
		fprintf(file, &quot;  ],\n&quot;);

		// OutputBiases
		auto outputBiases = g_neuralNetwork.GetOutputLayerBiases();
		fprintf(file, &quot;  \&quot;OutputBiases\&quot; : [\n&quot;);
		for (size_t i = 0; i &lt; outputBiases.size(); ++i)
		{
			fprintf(file, &quot;    %f&quot;, outputBiases[i]);
			if (i &lt; outputBiases.size() - 1)
				fprintf(file, &quot;,&quot;);
			fprintf(file, &quot;\n&quot;);
		}
		fprintf(file, &quot;  ],\n&quot;);

		// OutputWeights
		auto outputWeights = g_neuralNetwork.GetOutputLayerWeights();
		fprintf(file, &quot;  \&quot;OutputWeights\&quot; : [\n&quot;);
		for (size_t i = 0; i &lt; outputWeights.size(); ++i)
		{
			fprintf(file, &quot;    %f&quot;, outputWeights[i]);
			if (i &lt; outputWeights.size() - 1)
				fprintf(file, &quot;,&quot;);
			fprintf(file, &quot;\n&quot;);
		}
		fprintf(file, &quot;  ]\n&quot;);

		// done
		fprintf(file, &quot;}\n&quot;);
		fclose(file);
	}

	// You can use the code like the below to visualize an image if you want to.
	//ShowImage(g_testData, 0);

	system(&quot;pause&quot;);
	return 0;
}
[/code]

Thanks for reading, and if you have any questions, comments, or just want to chat, hit me up in the comments below, or on twitter at <a href="https://twitter.com/Atrix256" target="_blank">@Atrix256</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6208</wp:post_id>
		<wp:post_date><![CDATA[2017-03-15 11:42:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-15 19:42:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[neural-network-recipe-recognize-handwritten-digits-with-95-accuracy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="neural-networks"><![CDATA[Neural Networks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495723906;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5999;}i:1;a:1:{s:2:"id";i:5803;}i:2;a:1:{s:2:"id";i:71;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Plastic Bag Ban - Semi Reusable Bag Kiosks a Better Solution?</title>
		<link>http://blog.demofox.org/2017/03/17/plastic-bag-ban-semi-reusable-bag-kiosks-a-better-solution/</link>
		<pubDate>Fri, 17 Mar 2017 21:47:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=6247</guid>
		<description></description>
		<content:encoded><![CDATA[I an in favor of people generating less trash, and have been amazed that where I live (southern California), people have taken a "plastic bag ban" so well in stride.  It felt like one of those things where we couldn't live without it, but it turns out we can quite easily.  Maybe there's a lesson there, but that's not the point of this post so I'll get back to it (;

Where I live, you can BUY plastic bags for use from the grocery store for about 10 cents each, which is cost prohibitive enough that people tend to bring their own bags.

Now let me tell you, I'm no dummy.  I am pretty sure those re-usable plastic bags everyone has gotten use far more resources to make and create more pollution in the process so seem like they will take some usage before they hit a break even point compared to the disposable bags.  Google seems to give mixed results, saying that some bags are better than others: <a href="https://www.google.com/search?q=are+reusable+bags+better+for+the+environment" target="_blank">Google: are reusable bags better for the environment</a>.

I think that the sentiment of what's going on is good for sure though, and I'm hoping it's a net positive (?), and I think that there is some winning to be had here environmentally - if done right.

However, let's put the environmental concerns on the back burner for a second.

Grocery store baggers now get handed all sorts of differently shaped bags of various capacity, and folks often want their stuff bagged specific ways to make sure it all fits in however many they brought.  It's also very common for people to forget their bags at home, leave them in the car, etc.  This makes things a bit awkward and definitely not as fast and smooth as it used to be with disposable bags.

My idea to address these issues is this:
<ul>
	<li>When you check out from the store, there are semi-reusable bags in bails similar to how disposable bags are in bails now.  You pay to use the bags, but the cost is mostly a refundable deposit.</li>
	<li>You take the bags home, unload, etc like normal, but ideally you do not throw the bags away.</li>
	<li>The next time you come to the store, you feed your empty bags into a kiosk at the front of the store (similar to the coin to cash machines many currently have) and it prints you out a voucher saying how many bags you returned.</li>
	<li>The machine bails the bags back up for use by the store employees at the register, or perhaps some off site service does this and washes the bags, gets rid of damaged ones etc.</li>
	<li>You shop as normal, but when you check out, you give them your bag voucher.   If the voucher is for fewer bags than you need for this trip, you can pay for some extra ones.  If your voucher is for more than you need this time, you get the deposit refunded on the ones you don't need.</li>
</ul>

The idea here is that at the end of the day...
<ul>
	<li>The baggers have a uniform type of bag to work with, which makes their job easier and allows them to bag more quickly (like the old days!).</li>
	<li>The bags are ideally as environmentally friendly made as possible (heck, they could be made from corn, hemp, burlap, whatever).</li>
	<li>It isn't a big deal if you forgot your bags at home or in the car - you pay a little extra to use new bags, but when you return them, you get most of that back.</li>
</ul>

There are some obvious issues to work through, including:

<ul>
	<li>Getting those kiosks into the stores, and ideally having all stores use compatible bags.</li>
	<li>Dealing with damaged or dirty bags.  It would be nice if the machine or whatever process bails them is able to detect and segregate them somehow, and ideally have some washing / minimal recycling process off site to make new ones (like pulp and re-form?)</li>
	<li>The plastic bags are a profit center for grocery stores now.  They would need sufficient incentive, or pressure from customers to make it happen.</li>
</ul>

So, that's my idea.  Environmentally friendly semi-reusable bags - but with the convenience we all have come to enjoy from disposable bags.  The best of both worlds.

As a video game programmer this is far outside of my interest and ability, so please take this business idea if you have the desire and the means.  Let's make it happen!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6247</wp:post_id>
		<wp:post_date><![CDATA[2017-03-17 13:47:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-17 21:47:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[plastic-bag-ban-semi-reusable-bag-kiosks-a-better-solution]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="other"><![CDATA[Other]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495611229;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1663;}i:1;a:1:{s:2:"id";i:2596;}i:2;a:1:{s:2:"id";i:5803;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Orthogonal Projection Matrix Plainly Explained</title>
		<link>http://blog.demofox.org/2017/03/31/orthogonal-projection-matrix-plainly-explained/</link>
		<pubDate>Fri, 31 Mar 2017 19:24:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=6264</guid>
		<description></description>
		<content:encoded><![CDATA["Scratch a Pixel" has a really nice explanation of perspective and orthogonal projection matrices.

It inspired me to make a very simple / plain explanation of orthogonal projection matrices that hopefully will help them be less opaque for folks and more intuitive.

Original article: <a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/projection-matrix-introduction" target="_blank">Scratch A Pixel: The Perspective and Orthographic Projection Matrix</a>

<h1>Let's Get To It!</h1>

The whole purpose of an orthogonal matrix is to take x,y and z as input and output x,y and z such that valid points on the screen will have x,y,z values between -1 and 1.

If we transform a point and get an x,y or z that is outside of that range, we know the point is outside of the screen either because it's too far left, right, up or down, or because it's too close or too far on the z axis.

Let's think about how we'd do this, thinking only about the x coordinate for now.

To map some range of x values from -1 to 1, we'll need to decide on what x value maps to -1 and what x value maps to 1.  We'll call these "left" and "right".

Given a left and right value, and an x value we want to map to the range, perhaps the most straight forward way to do it would be this:

$latex XOut = \\frac{X-Left}{Right-Left} * 2 - 1$

The division calculates the percentage of how far X is between left and right.  Multiplying that by 2 and subtracting 1 changes it so instead of valid points being from 0 to 1 (aka from 0% to 100%), they are instead between -1 and 1.

Let's change this formula so that there is one term that is multiplied by X and another term that has everything else. (Wondering why? It's because I'm cheating and know the final form. Don't feel bad if it isn't intuitive why we'd do this!)

$latex \\frac{X-Left}{Right-Left} * 2 - 1 =\\\\
\\\\
\\frac{2(X-Left)}{Right-Left} - 1 =\\\\
\\\\
\\frac{2X-2*Left}{Right-Left} - 1 =\\\\
\\\\
\\frac{2X-2*Left}{Right-Left} - \\frac{Right-Left}{Right-Left} =\\\\
\\\\
\\frac{2X-2*Left-(Right-Left)}{Right-Left} =\\\\
\\\\
\\frac{2X-2*Left-Right+Left}{Right-Left} =\\\\
\\\\
\\frac{2X-Left-Right}{Right-Left} =\\\\
\\\\
\\frac{2X}{Right-Left} - \\frac{Right+Left}{Right-Left} =\\\\
\\\\
\\frac{2}{Right-Left}X - \\frac{Right+Left}{Right-Left}\\\\
$

Setting up the formula this way allows us to transform the x component of an (x,y,z,1) point using a dot product:

$latex (x,y,z,1) \\cdot (\\frac{2}{Right-Left},0,0,-\\frac{Right+Left}{Right-Left}) = \\frac{2}{Right-Left}X - \\frac{Right+Left}{Right-Left}$

A dot product is what happens during matrix multiplication, so if we put this into a 4x4 matrix, we get the same result.  Let's check that out.

We start with an identity matrix.  If we use it to transform an (x,y,z,1) point, we get the same point as output aka nothing happens.

$latex
\\begin{bmatrix}
1 & 0 & 0 & 0 \\\\
0 & 1 & 0 & 0 \\\\
0 & 0 & 1 & 0 \\\\
0 & 0 & 0 & 1 \\\\
\\end{bmatrix}
$

Now let's put the x transform we came up with into the matrix:

$latex
\\begin{bmatrix}
\\frac{2}{Right-Left} & 0 & 0 & 0 \\\\
0 & 1 & 0 & 0 \\\\
0 & 0 & 1 & 0 \\\\
-\\frac{Right+Left}{Right-Left} & 0 & 0 & 1 \\\\
\\end{bmatrix}
$

If we use that matrix to transform an (x,y,z,1) point, it will transform our x component as we described (valid ranges of x that are between left and right will be between -1 and 1), while leaving the other components of the point alone.

As you might imagine, it's pretty simple to get our formulas for y and z as well.  Starting with the x formula, we can just change x with y and z, and right/left with top/bottom and far/near. 

$latex
XOut = \\frac{2}{Right-Left}X - \\frac{Right+Left}{Right-Left} \\\\
\\\\
YOut = \\frac{2}{Top-Bottom}Y - \\frac{Top+Bottom}{Top-Bottom} \\\\
\\\\
ZOut = \\frac{2}{Far-Near}Z - \\frac{Far+Near}{Far-Near}
$

We can put those into our matrix to get a full orthographic projection matrix.

$latex
\\begin{bmatrix}
\\frac{2}{Right-Left} & 0 & 0 & 0 \\\\
0 & \\frac{2}{Top-Bottom} & 0 & 0 \\\\
0 & 0 & \\frac{2}{Far-Near} & 0 \\\\
-\\frac{Right+Left}{Right-Left} & - \\frac{Top+Bottom}{Top-Bottom} & - \\frac{Far+Near}{Far-Near} & 1 \\\\
\\end{bmatrix}
$

There we go, that's all there is to making an orthographic projection matrix.  It's whole purpose is to convert x,y,z values to be between -1 and 1 so that the GPU knows whether points are inside our outside the screen - and thus whether they need to be clipped or not.

<h2>Variations</h2>

While the projection matrix we made is a valid orthographic projection matrix in OpenGL, we actually need a tweak for it to be valid for DirectX.  The reason for this is because while in OpenGL the clip space for z is between -1 and 1, it's actually between 0 and 1 for DirectX!

If you leave off the *2-1 for the z formula, but leave it for x and y, you'll end up with a matrix like this one:

$latex
\\begin{bmatrix}
\\frac{2}{Right-Left} & 0 & 0 & 0 \\\\
0 & \\frac{2}{Top-Bottom} & 0 & 0 \\\\
0 & 0 & \\frac{1}{Near-Far} & 0 \\\\
-\\frac{Right+Left}{Right-Left} & - \\frac{Top+Bottom}{Top-Bottom} & - \\frac{Near}{Near-Far} & 1 \\\\
\\end{bmatrix}
$

Another variation you'll see is a version where the camera is centered on the origin for the x and y axis.  In other words, left = -right, and top = -bottom.  When that is true, right+left and top+bottom become zero which simplifies the matrix to this:

$latex
\\begin{bmatrix}
\\frac{2}{Width} & 0 & 0 & 0 \\\\
0 & \\frac{2}{Height} & 0 & 0 \\\\
0 & 0 & \\frac{2}{Far-Near} & 0 \\\\
0 & 0 & -\\frac{Far+Near}{Far-Near} & 1 \\\\
\\end{bmatrix}
$

Another variation you'll see is that the matrix is transposed.  You'll see this when switching between pre and post multiplication, or when switching from column major matrices to row matrices.  Either is valid and it's basically just a notation and convention thing.  Here is the origional matrix we made transposed.

$latex
\\begin{bmatrix}
\\frac{2}{Right-Left} & 0 & 0 & -\\frac{Right+Left}{Right-Left}  \\\\
0 & \\frac{2}{Top-Bottom} & 0 & -\\frac{Top+Bottom}{Top-Bottom} \\\\
0 & 0 & \\frac{2}{Far-Near} & -\\frac{Far+Near}{Far-Near} \\\\
0 & 0 & 0 & 1 \\\\
\\end{bmatrix}
$

Lastly, the above matrices were all for a "left handed" system.  That means that it assumes the positive x axis goes to the right, the positive y axis goes up, and the positive z goes into your screen (aka, the camera is looking down the positive z axis).  Positive Z values will map to the valid -1 to 1 range, while negative z values will be outside the valid range.

A variation on the orthographic projection matrix we made that you'll see is the matrix being a "right handed" matrix which is the same as the left handed matrix, except that the positive z axis goes out from your screen (aka the camera is looking down the negative z axis).  Negative Z values will map to the valid -1 to 1 range, while positive z values will be outside the valid range.

To switch the handedness of the matrix, you just flip the sign of the element at (3,3), so here is our original orthographic projection matrix, but converted to right handed instead of left handed.

$latex
\\begin{bmatrix}
\\frac{2}{Right-Left} & 0 & 0 & 0 \\\\
0 & \\frac{2}{Top-Bottom} & 0 & 0 \\\\
0 & 0 & -\\frac{2}{Far-Near} & 0 \\\\
-\\frac{Right+Left}{Right-Left} & - \\frac{Top+Bottom}{Top-Bottom} & - \\frac{Far+Near}{Far-Near} & 1 \\\\
\\end{bmatrix}
$

You may also just see the denominator changed from $latex Far-Near$ to $latex Near-Far$ which has the same effect, and would give you something like this:

$latex
\\begin{bmatrix}
\\frac{2}{Right-Left} & 0 & 0 & 0 \\\\
0 & \\frac{2}{Top-Bottom} & 0 & 0 \\\\
0 & 0 & \\frac{2}{Near-Far} & 0 \\\\
-\\frac{Right+Left}{Right-Left} & - \\frac{Top+Bottom}{Top-Bottom} & - \\frac{Far+Near}{Far-Near} & 1 \\\\
\\end{bmatrix}
$


Fun trivia: the term "sinister" comes from latin, meaning "left handed". So, when talking to someone about their graphics engine, you can ask them whether or not they use sinister projection :P

<h1>Links</h1>

<a href="https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/projection-matrix-introduction" target="_blank">Scratch A Pixel: The Perspective and Orthographic Projection Matrix</a>

<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb205349(v=vs.85).aspx" target="_blank">D3DXMatrixOrthoRH (DirectX)</a> - shows the resulting matrix.  Also links to left handed and off center variants.

<a href="http://www-evasion.imag.fr/~Francois.Faure/enseignement/ressources/openGL/glOrtho.html" target="_blank">glOrtho (OpenGL)</a> - shows resulting matrix.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6264</wp:post_id>
		<wp:post_date><![CDATA[2017-03-31 11:24:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-31 19:24:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[orthogonal-projection-matrix-plainly-explained]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495706935;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:775;}i:1;a:1:{s:2:"id";i:5556;}i:2;a:1:{s:2:"id";i:5650;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solving N equations and N unknowns: The Fine Print (Gauss Jordan Elimination)</title>
		<link>http://blog.demofox.org/2017/04/10/solving-n-equations-and-n-unknowns-the-fine-print-gauss-jordan-elimination/</link>
		<pubDate>Mon, 10 Apr 2017 20:23:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=6321</guid>
		<description></description>
		<content:encoded><![CDATA[In basic algebra we were taught that if we have three unknowns (variables), it takes three equations to solve for them.

There's some fine print though that isn't talked about until quite a bit later.

Let's have a look at three unknowns in two equations:

$latex A + B + C = 2 \\\\
B = 5$

If we just need a third equation to solve this, why not just modify the second equation to make a third?

$latex -B = -5$

That obviously doesn't work, because it doesn't add any new information!  If you try it out, you'll find that adding that equation doesn't get you any closer to solving for the variables.

So, it takes three equations to solve for three unknowns, but the three equations have to provide unique, meaningful information.  That is the fine print.

How can we know if an equation provides unique, meaningful information though?

It turns out that linear algebra gives us a neat technique for simplifying a system of equations.  It actually solves for individual variables if it's able to, and also gets rid of redundant equations that don't add any new information.

This simplest form is called the <a href="https://en.wikipedia.org/wiki/Row_echelon_form" target="_blank">Reduced Row Echelon Form (Wikipedia)</a> which you may also see abbreviated as "rref" (perhaps a bit of a confusing term for programmers) and it involves you putting the equations into a matrix and then performing an algorithm, such as <a href="https://en.wikipedia.org/wiki/Gaussian_elimination" target="_blank">Gauss–Jordan elimination (Wikipedia)</a> to get the rref.

<h1>Equations as a Matrix</h2>

Putting n set of equations into a matrix is really straight forward.

Each row of a matrix is a separate equation, and each column represents the coefficient of a variable.

Let's see how with this set of equations:

$latex
3x + y = 5\\\\
2y = 7\\\\
y + z = 14
$

Not every equation has every variable in it, so let's fix that by putting in zero terms for the missing variables, and let's make the one terms explicit as well:

$latex
3x + 1y + 0z = 5\\\\
0x + 2y + 0z = 7\\\\
0x + 1y + 1z = 14
$

Putting those equations into a matrix looks like this:

$latex
\\left[\\begin{array}{rrr}
3 & 1 & 0 \\\\
0 & 2 & 0 \\\\
0 & 1 & 1
\\end{array}\\right]
$

If you also include the constants on the right side of the equation, you get what is called an augmented matrix, which looks like this:

$latex
\\left[\\begin{array}{rrr|r}
3 & 1 & 0 & 5 \\\\
0 & 2 & 0 & 7 \\\\
0 & 1 & 1 & 14
\\end{array}\\right]
$

<h1>Reduced Row Echelon Form</h1>

<a href="https://en.wikipedia.org/wiki/Row_echelon_form" target="_blank">Wikipedia</a> explains the reduced row echelon form this way:

<blockquote>
<ul>
	<li>all nonzero rows (rows with at least one nonzero element) are above any rows of all zeroes (all zero rows, if any, belong at the bottom of the matrix), and</li>
	<li>the leading coefficient (the first nonzero number from the left, also called the pivot) of a nonzero row is always strictly to the right of the leading coefficient of the row above it.</li>
	<li>Every leading coefficient is 1 and is the only nonzero entry in its column.</li>
</ul>

This is an example of a 3×5 matrix in reduced row echelon form:
$latex
\\left[\\begin{array}{rrrrr}
1 & 0 & a_1 & 0 & b_1 \\\\
0 & 1 & a_2 & 0 & b_2 \\\\
0 & 0 & 0 & 1 & b_3
\\end{array}\\right]
$
</blockquote>

Basically, the lower left triangle of the matrix (the part under the diagonal) needs to be zero, and the first number in each row needs to be one.

Looking back at the augmented matrix we made:

$latex
\\left[\\begin{array}{rrr|r}
3 & 1 & 0 & 5 \\\\
0 & 2 & 0 & 7 \\\\
0 & 1 & 1 & 14
\\end{array}\\right]
$

If we put it into reduced row echelon form, we get this:

$latex
\\left[\\begin{array}{rrr|r}
1 & 0 & 0 & 0.5 \\\\
0 & 1 & 0 & 3.5 \\\\
0 & 0 & 1 & 10.5
\\end{array}\\right]
$

There's something really neat about the reduced row echelon form.  If we take the above augmented matrix and turn it back into equations, look what we get:

$latex
1x + 0y + 0z = 0.5\\\\
0x + 1y + 0z = 3.5\\\\
0x + 0y + 1z = 10.5
$

Or if we simplify that:

$latex
x = 0.5\\\\
y = 3.5\\\\
z = 10.5
$

Putting it into reduced row echelon form simplified our set of equations so much that it actually solved for our variables.  Neat!

How do we put a matrix into rref?  We can use <a href="https://en.wikipedia.org/wiki/Gaussian_elimination" target="_blank">Gauss–Jordan elimination</a>.

<h1>Gauss–Jordan Elimination</h1>

Gauss Jordan Elimination is a way of doing operations on rows to be able to manipulate the matrix to get it into the desired form.

It's often explained that there are three row operations you can do:

<ul>
	<li>Type 1: Swap the positions of two rows.</li>
	<li>Type 2: Multiply a row by a nonzero scalar.</li>
	<li>Type 3: Add to one row a scalar multiple of another.</li>
</ul>

You might notice that the first two rules are technically just cases of using the third rule.  I find that easier to remember, maybe you will too.

The algorithm for getting the rref is actually pretty simple.

<ol>
	<li>Starting with the first column of the matrix, find a row which has a non zero in that column, and make that row be the first row by swapping it with the first row.</li>
	<li>Multiply the first row by a value so that the first column has a 1 in it.</li>
	<li>Subtract a multiple of the first row from every other row in the matrix so that they have a zero in the first column.</li>
</ol>

You've now handled one column (one variable) so move onto the next.

<ol>
	<li>Continuing on, we consider the second column.  Find a row which has a non zero in that column and make that row be the second row by swapping it with the second row.</li>
	<li>Multiply the second row by a value so that the second column has a 1 in it.</li>
	<li>Subtract a multiple of the second row from every other row in the matrix so that they have a zero in the second column.</li>
</ol>

You repeat this process until you either run out of rows or columns, at which point you are done.

Note that if you ever find a column that has only zeros in it, you just skip that row.

Let's work through the example augmented matrix to see how we got it into rref.  Starting with this:

$latex
\\left[\\begin{array}{rrr|r}
3 & 1 & 0 & 5 \\\\
0 & 2 & 0 & 7 \\\\
0 & 1 & 1 & 14
\\end{array}\\right]
$

We already have a non zero in the first column, so we multiply the top row by 1/3 to get this:

$latex
\\left[\\begin{array}{rrr|r}
1 & 0.3333 & 0 & 1.6666 \\\\
0 & 2 & 0 & 7 \\\\
0 & 1 & 1 & 14
\\end{array}\\right]
$

All the other rows have a zero in the first column so we move to the second row and the second column.  The second row already has a non zero in the second column, so we multiply the second row by 1/2 to get this:

$latex
\\left[\\begin{array}{rrr|r}
1 & 0.3333 & 0 & 1.6666 \\\\
0 & 1 & 0 & 3.5 \\\\
0 & 1 & 1 & 14
\\end{array}\\right]
$

To make sure the second row is the only row that has a non zero in the second column, we subtract the second row times 1/3 from the first row.  We also subtract the second row from the third row.  That gives us this:

$latex
\\left[\\begin{array}{rrr|r}
1 & 0 & 0 & 0.5 \\\\
0 & 1 & 0 & 3.5 \\\\
0 & 0 & 1 & 10.5
\\end{array}\\right]
$

Since the third row has a 1 in the third column, and all other rows have a 0 in that column we are done.

That's all there is to it!  We put the matrix into rref, and we also solved the set of equations.  Neat huh?

You may notice that the ultimate rref of a matrix is just the identity matrix.  This is true unless the equations can't be fully solved.

<h1>Overdetermined, Underdetermined & Inconsistent Equations</h1>

Systems of equations are overdetermined when they have more equations than unknowns, like the below which has three equations and two unknowns:

$latex
x + y = 3 \\\\
x = 1 \\\\
y = 2 \\\\
$

Putting that into (augmented) matrix form gives you this:

$latex
\\left[\\begin{array}{rr|r}
1 & 1 & 3 \\\\
1 & 0 & 1 \\\\
0 & 1 & 2
\\end{array}\\right]
$

If you put that into rref, you end up with this:

$latex
\\left[\\begin{array}{rr|r}
1 & 0 & 1 \\\\
0 & 1 & 2 \\\\
0 & 0 & 0
\\end{array}\\right]
$

The last row became zeroes, which shows us that there was redundant info in the system of equations that disappeared.  We can easily see that x = 1 and y = 2, and that satisfies all three equations.

Just like we talked about in the opening of this post, if you have equations that don't add useful information beyond what the other equations already give, it will disappear when you put it into rref.  That made our over-determined system become just a determined system.

What happens though if we change the third row in the overdetermined system to be something else? For instance, we can say y=10 instead of y=2:

$latex
x + y = 3 \\\\
x = 1 \\\\
y = 10 \\\\
$

The augmented matrix for that is this:

$latex
\\left[\\begin{array}{rr|r}
1 & 1 & 3 \\\\
1 & 0 & 1 \\\\
0 & 1 & 10
\\end{array}\\right]
$

If we put that in rref, we get the identity matrix out which seems like everything is ok:

$latex
\\left[\\begin{array}{rr|r}
1 & 0 & 0 \\\\
0 & 1 & 0 \\\\
0 & 0 & 1
\\end{array}\\right]
$

However, if we turn it back into a set of equations, we can see that we have a problem:

$latex
x = 0 \\\\
x = 0 \\\\
0 = 1 \\\\
$

The result says that 0 = 1, which is not true.  Having a row of "0 = 1" in rref is how you detect that a system of equations is inconsistent, or in other words, that the equations give contradictory information.

A system of equations can also be underderdetermined, meaning there isn't enough information to solve the equations.  Let's use the example from the beginning of the post:

$latex
A + B + C = 2 \\\\
B = 5 \\\\
$

In an augmented matrix, that looks like this:

$latex
\\left[\\begin{array}{rrr|r}
1 & 1 & 1 & 2 \\\\
0 & 1 & 0 & 5 \\\\
\\end{array}\\right]
$

Putting that in rref we get this:

$latex
\\left[\\begin{array}{rrr|r}
1 & 0 & 1 & -3 \\\\
0 & 1 & 0 & 5 \\\\
\\end{array}\\right]
$

Converting the matrix back into equations we get this:

$latex
A + C = -3 \\\\
B = 5 \\\\
$

This says there isn't enough information to fully solve the equations, and shows how A and C are related, even though B is completely determined.

Note that another way of looking at this is that "A" and "C" are "free variables".  That means that if your equations specify constraints, that you are free to choose a value for either A or C.  If you choose a value for one, the other becomes defined.  B is not a free variable because it's value is determined.

Let's finish the example from the beginning of the post, showing what happens when we "make up" an equation by transforming one of the equations we already have:

$latex
A + B + C = 2 \\\\
B = 5\\\\
-B = -5
$

The augmented matrix looks like this:

$latex
\\left[\\begin{array}{rrr|r}
1 & 1 & 1 & 2 \\\\
0 & 1 & 0 & 5 \\\\
0 & -1 & 0 & -5 \\\\
\\end{array}\\right]
$

Putting it in rref, we get this:

$latex
\\left[\\begin{array}{rrr|r}
1 & 0 & 1 & -3 \\\\
0 & 1 & 0 & 5 \\\\
0 & 0 & 0 & 0 \\\\
\\end{array}\\right]
$

Which as you can see, our rref matrix is the same as it was without the extra "made up" equation besides the extra row of zeros in the result.

The number of non zero rows in a matrix in rref is known as the rank of the matrix.  In these last two examples, the rank of the matrix was two in both cases.  That means that you can tell if adding an equation to a system of equations adds any new, meaningful information or not by seeing if it changes the rank of the matrix for the set of equations.  If the rank is the same before and after adding the new equation, it doesn't add anything new.  If the rank does change, that means it does add new information.

This concept of "adding new, meaningful information" actually has a formalized term: linear independence.  If a new equation is linearly independent from the other equations in the system, it will change the rank of the rref matrix, else it won't.

The rank of a matrix for a system of equations just tells you the number of linearly independent equations there actually are, and actually gives you what those equations are in their simplest form.

Lastly I wanted to mention that the idea of a system of equations being inconsistent is completely separate from the idea of a system of equations being under determined or over determined.  They can be both over determined and inconsistent, under determined and inconsistent, over determined and consistent or under determined and consistent .  The two ideas are completely separate, unrelated things.
 
<h1>Inverting a Matrix</h1>

Interestingly, Gauss-Jordan elimination is also a common way for efficiently inverting a matrix!

How you do that is make an augmented matrix where on the left side you have the matrix you want to invert, and on the right side you have the identity matrix.

Let's invert a matrix I made up pretty much at random:

$latex
\\left[\\begin{array}{rrr|rrr}
1 & 0 & 1 & 1 & 0 & 0 \\\\
0 & 3 & 0 & 0 & 1 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 1\\\\
\\end{array}\\right]
$

Putting that matrix in rref, we get this:

$latex
\\left[\\begin{array}{rrr|rrr}
1 & 0 & 0 & 1 & 0 & -1 \\\\
0 & 1 & 0 & 0 & 0.3333 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 1\\\\
\\end{array}\\right]
$

The equation on the right is the inverse of the original matrix we had on the left!

You can double check by using an online matrix inverse calculator if you want: <a href="https://matrix.reshish.com/inverse.php" target="_blank">Inverse Matrix Calculator</a>

Note that not all matrices are invertible though!  When you get an inconsistent result, or the result is not the identity matrix, it wasn't invertible.

<h1>Solving Mx = b</h1>

Let's say that you have two vectors x and b, and a matrix M.  Let's say that we know the matrix M and the vector b, and that we are trying to solve for the vector x.

This comes up more often that you might suspect, including when doing "least squares fitting" of an equation to a set of data points (more info on that: <a href="http://blog.demofox.org/2016/12/22/incremental-least-squares-curve-fitting/" target="_blank">Incremental Least Squares Curve Fitting</a>).

One way to solve this equation would be to calculate the inverse matrix of M and multiply that by vector b to get vector x:

$latex
Mx = b\\\\
x = M^{-1} * b
$

However, Gauss-Jordan elimination can help us here too.

If we make an augmented matrix where on the left we have M, and on the right we have b, we can put the matrix into rref, which will essentially multiply vector b by the inverse of M, leaving us with the vector x.

For instance, on the left is our matrix M that scales x,y,z by 2.  On the right is our vector b, which is the matrix M times our unknown vector x:

$latex
\\left[\\begin{array}{rrr|r}
2 & 0 & 0 & 2 \\\\
0 & 2 & 0 & 4 \\\\
0 & 0 & 2 & 8 \\\\
\\end{array}\\right]
$

Putting that into rref form we get this:

$latex
\\left[\\begin{array}{rrr|r}
1 & 0 & 0 & 1 \\\\
0 & 1 & 0 & 2 \\\\
0 & 0 & 1 & 4 \\\\
\\end{array}\\right]
$

From this, we know that the value of vector x is the right side of the augmented matrix: (1,2,4)

This only works when the matrix is invertible (aka when the rref goes to an identity matrix).

<h1>Source Code</h1>

Here is some C++ source code which does Gauss-Jordan elimination.  It's written mainly to be readable, not performant!

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;array&gt;
#include &lt;vector&gt;
#include &lt;assert.h&gt;

// Define a vector as an array of floats
template&lt;size_t N&gt;
using TVector = std::array&lt;float, N&gt;;

// Define a matrix as an array of vectors
template&lt;size_t M, size_t N&gt;
using TMatrix = std::array&lt;TVector&lt;N&gt;, M&gt;;

// Helper function to fill out a matrix
template &lt;size_t M, size_t N&gt;
TMatrix&lt;M, N&gt; MakeMatrix (std::initializer_list&lt;std::initializer_list&lt;float&gt;&gt; matrixData)
{
    TMatrix&lt;M, N&gt; matrix;

    size_t m = 0;
	assert(matrixData.size() == M);
    for (const std::initializer_list&lt;float&gt;&amp; rowData : matrixData)
    {
		assert(rowData.size() == N);
        size_t n = 0;
        for (float value : rowData)
        {
            matrix[m][n] = value;
            ++n;
        }
        ++m;
    }
   
    return matrix;
}

// Make a specific row have a 1 in the colIndex, and make all other rows have 0 there
template &lt;size_t M, size_t N&gt;
bool MakeRowClaimVariable (TMatrix&lt;M, N&gt;&amp; matrix, size_t rowIndex, size_t colIndex)
{
	// Find a row that has a non zero value in this column and swap it with this row
	{
		// Find a row that has a non zero value
		size_t nonZeroRowIndex = rowIndex;
		while (nonZeroRowIndex &lt; M &amp;&amp; matrix[nonZeroRowIndex][colIndex] == 0.0f)
			++nonZeroRowIndex;

		// If there isn't one, nothing to do
		if (nonZeroRowIndex == M)
			return false;

		// Otherwise, swap the row
		if (rowIndex != nonZeroRowIndex)
			std::swap(matrix[rowIndex], matrix[nonZeroRowIndex]);
	}

	// Scale this row so that it has a leading one
	float scale = 1.0f / matrix[rowIndex][colIndex];
	for (size_t normalizeColIndex = colIndex; normalizeColIndex &lt; N; ++normalizeColIndex)
		matrix[rowIndex][normalizeColIndex] *= scale;

	// Make sure all rows except this one have a zero in this column.
	// Do this by subtracting this row from other rows, multiplied by a multiple that makes the column disappear.
	for (size_t eliminateRowIndex = 0; eliminateRowIndex &lt; M; ++eliminateRowIndex)
	{
		if (eliminateRowIndex == rowIndex)
			continue;

		float scale = matrix[eliminateRowIndex][colIndex];
		for (size_t eliminateColIndex = 0; eliminateColIndex &lt; N; ++eliminateColIndex)
			matrix[eliminateRowIndex][eliminateColIndex] -= matrix[rowIndex][eliminateColIndex] * scale;
	}

	return true;
}

// make matrix into reduced row echelon form
template &lt;size_t M, size_t N&gt;
void GaussJordanElimination (TMatrix&lt;M, N&gt;&amp; matrix)
{
	size_t rowIndex = 0;
	for (size_t colIndex = 0; colIndex &lt; N; ++colIndex)
	{
		if (MakeRowClaimVariable(matrix, rowIndex, colIndex))
		{
			++rowIndex;
			if (rowIndex == M)
				return;
		}
	}
}

int main (int argc, char **argv)
{
	auto matrix = MakeMatrix&lt;3, 4&gt;(
	{
		{ 2.0f, 0.0f, 0.0f, 2.0f },
		{ 0.0f, 2.0f, 0.0f, 4.0f },
        { 0.0f, 0.0f, 2.0f, 8.0f },
	});

    GaussJordanElimination(matrix);

    return 0;
}
[/code]

I hope you enjoyed this post and/or learned something from it.  This is a precursor to an interesting (but maybe obscure) topic for my next blog post, which involves a graphics / gamedev thing.

Any comments, questions or corrections, let me know in the comments below or on twitter at <a href="https://twitter.com/Atrix256" target="_blank">@Atrix256</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6321</wp:post_id>
		<wp:post_date><![CDATA[2017-04-10 12:23:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-10 20:23:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[solving-n-equations-and-n-unknowns-the-fine-print-gauss-jordan-elimination]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495710227;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3276;}i:1;a:1:{s:2:"id";i:3239;}i:2;a:1:{s:2:"id";i:6384;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Improved Storage Space Efficiency of GPU Texture Sampler Bezier Curve Evaluation</title>
		<link>http://blog.demofox.org/2017/05/07/improved-storage-space-efficiency-of-gpu-texture-sampler-bezier-curve-evaluation/</link>
		<pubDate>Mon, 08 May 2017 00:28:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://blog.demofox.org/?p=6384</guid>
		<description></description>
		<content:encoded><![CDATA[This is an extension of a paper I wrote which shows how to use the linear texture sampling capabilities of the GPU to calculate points on Bezier curves (also just polynomials in general as well as rational polynomials, and also surfaces and volumes made by tensor products). You store the control points in the texture, then sample along the texture’s diagonal to get points on the curve:
<a href="http://blog.demofox.org/2016/02/22/gpu-texture-sampler-bezier-curve-evaluation/">GPU Texture Sampler Bezier Curve Evaluation</a>

This extension improves on the efficiency of the storage space usage, allowing a higher density of curve data per pixel, but the post also talks about some caveats and limitations.

This post is divided into the following sections:
<ol>
	<li>Basic Idea of Extension</li>
	<li>2D Texture / Quadratic Piecewise Curves</li>
	<li>2D Texture / Quadratic Piecewise Curves - C0 Continuity</li>
        <li>2D Texture / Quadratic Piecewise Curves - Storage Efficiency</li>
	<li>Real World Limitations</li>
	<li>3D Texture / Cubic Piecewise Curves</li>
	<li>3D Texture / Cubic Piecewise Curves - Multiple Curves?</li>
        <li>3D Texture / Cubic Piecewise Curves - C0 Continuity</li>
        <li>3D Texture / Cubic Piecewise Curves - Storage Efficiency</li>
        <li>Generalizing The Unit Hyper Cube</li>
	<li>Closing</li>
	<li>Code</li>
</ol>

<h1>1. Basic Idea of Extension</h1>

Let's talk about the base technique before going into the details of the extension.

The image below shows how bilinear interpolation across the diagonal between pixels can calculate points on curves.  Bilinear interpolation is exactly equivalent to the De Casteljau algorithm when the u and v coordinate are the same value.
<img src="https://demofox2.files.wordpress.com/2016/02/image.png"/>

Linear interpolation between two values A and B at time t is done with this formula:
$latex A(1-t) + Bt$

I've found useful to replace (1-t) with it's own symbol s.  That makes it become this:
$latex As + Bt$

Now, if you bilinear interpolate between 4 values, you have two rows. One row has A,B in it and the other row has C,D in it.  To bilinear interpolate between these four values at time (t,t), the formula is this:
$latex (As + Bt)s + (Cs+Dt)t$

If you expand that and collect like terms you come up with this equation:
$latex As^2 + (B+C)st + Dt^2$

At this point, the last step is to make B and C the same value (make them both into B) and then rename D to C since that letter is unused.  The resulting formula turns out to be the formula for a quadratic Bezier curve.  This shows that mathematically, bilinear interpolation can be made to be mathematically the same as the quadratic Bezier formula. (Note: there are extensions to get higher order curves and surfaces as well)
$latex As^2 + 2Bst + Ct^2$

However, for this extension we are going to take one step back to the prior equation:
$latex As^2 + (B+C)st + Dt^2$

What you may notice is that the two values in the corners of the 2x2 bilinear interpolation don't have to be the exact value of the middle control point of the quadratic Bezier curve - they only have to AVERAGE to that value.

This is interesting because to encode two different piecewise quadratic curves (C0-C2 and C3-C5) into a 2d texture before this extension, I would do it like this:

<img src="https://demofox2.files.wordpress.com/2017/04/2x4ABCDEF.png"/>

$latex
A = C_0 \\\\
B = C_1 \\\\
C = C_2 \\\\
D = C_3 \\\\
E = C_4 \\\\
F = C_5\\\\
$

That uses 8 pixels to store the 6 control points of the two quadratic curves.

With the ideas of this extension, one way it could look now is this:

<img src="https://demofox2.files.wordpress.com/2017/04/2x3ABCDEF.png"/>

$latex
A = C_0 \\\\
B + C = 2*C_1 : B = 2*C_1 - C_3 \\\\
D = C_2 \\\\
C = C_3 \\\\
D + E = 2*C_4 : E = 2*C_4 - C_2\\\\
F = C_5\\\\
$

The result is that 6 pixels are used instead of 8, for storing the 6 control points of the two quadratic curves.

That isn't the only result though, so let's explore the details (:

<h1>2. 2D Texture / Quadratic Piecewise Curves</h1>

Let's start by more formally looking at the 2d texture / quadratic curve case.

We are going to number the pixels by their texture coordinate location (in the form of Pyx) instead of using letters.  Later on that will help show a pattern of generalization.  We are still using the same notation for control points where C0 is the first control point, C1 is the second control point and so on.

Looking at a single quadratic curve we have this texture which has these constraints on it's pixel values:

<img src="https://demofox2.files.wordpress.com/2017/05/2x2P0-3.png"/>

$latex
P_{00} = C_0 \\\\
P_{01}+P_{10} = 2*C_1 \\\\
P_{11} = C_2 \\\\
$

To analyze this, let's make an augmented matrix.  The left matrix is a 3x4 matrix where each column is a pixel and each row is the left side of the equation for a constraint.  The right matrix is a 3x3 matrix where each column is a control point and each row is the right side of the equation for a constraint.  The first row of the matrix is column labels to help see what's going on more easily.

Note that i put my pixel columns and control point columns in ascending order in the matrix, but if you put them in a different order, you'd get the same (or equivalent) results as I did.  It's just my convention they are in this order.

$latex
\\left[\\begin{array}{rrrr|rrr}
P_{00} & P_{01} & P_{10} & P_{11} & C_0 & C_1 & C_2 \\\\
1 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & 1 & 1 & 0 & 0 & 2 & 0\\\\
0 & 0 & 0 & 1 & 0 & 0 & 1
\\end{array}\\right]
$

The next step would be to put this matrix into reduced row echelon form to solve the equations to see what the values of the pixels need to be, but the matrix is in fact already in rref form! (For more information on rref, check out my last post: <a href="http://blog.demofox.org/2017/04/10/solving-n-equations-and-n-unknowns-the-fine-print-gauss-jordan-elimination/" target="_blank">Solving N equations and N unknowns: The Fine Print (Gauss Jordan Elimination)</a>)

What we can see by looking at the rref of the matrix is that either P01 or P10 can be a free variable - meaning we can choose whatever value we want for it.  After we choose a value for either of those variables (pixels), the rest of the pixels are fully defined.

Deciding that P10 is the free variable (just by convention that it isn't the leading non zero value), the second equation (constraint) becomes P01 = 2*C1-P10.

If we choose the value C1 for P10, that means that P01 must equal C1 too (this is how the original technique worked).  If we choose 0 for P10, that means that P01 must equal 2*C1.  This is because P01 must always equal 2*C1-P10.  We then are in the new territory of this extension, where the pixels representing the middle control point have some freedom about what values they can take on, so long as they average to the middle control point value.

Let's add a row of pixels and try encoding a second quadratic curve:

<img src="https://demofox2.files.wordpress.com/2017/05/2x3P00-21.png"/>

$latex
P_{00} = C_0 \\\\
P_{01}+P_{10} = 2*C_1 \\\\
P_{11} = C_2 \\\\
P_{10} = C_3 \\\\
P_{11}+P_{20} = 2*C_4 \\\\
P_{21} = C_5
$

Let's again make an augmented matrix with pixels on the left and control points on the right.

$latex
\\left[\\begin{array}{rrrrrr|rrrrrr}
P_{00} & P_{01} & P_{10} & P_{11} & P_{20} & P_{21} & C_0 & C_1 & C_2 & C_3 & C_4 & C_5\\\\
1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\
0 & 1 & 1 & 0 & 0 & 0 & 0 & 2 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 2 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 
\\end{array}\\right]
$

Putting that into rref to solve for the pixel values we get this:

$latex
\\left[\\begin{array}{rrrrrr|rrrrrr}
P_{00} & P_{01} & P_{10} & P_{11} & P_{20} & P_{21} & C_0 & C_1 & C_2 & C_3 & C_4 & C_5\\\\
1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\
0 & 1 & 0 & 0 & 0 & 0 & 0 & 2 & 0 & -1 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & -1 & 0 & 2 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 
\\end{array}\\right]
$

We got the identity matrix on the left, so we don't have any inconsistencies or free variables.

If we turn that matrix back into equations we get this:

$latex
P_{00} = C_0 \\\\
P_{01} = 2*C_1 - C_3 \\\\
P_{10} = C_3 \\\\
P_{11} = C_2 \\\\
P_{20} = 2*C_4 - C_2 \\\\
P_{21} = C_5
$

We were successful!  We can store two piecewise Bezier curves in 6 pixels by setting the pixel values to these specific values.

The last example we'll show is the next stage, where it falls apart.  We'll add another row of pixels and try to encode 3 Bezier curves (9 control points) into those 8 pixels.

<img src="https://demofox2.files.wordpress.com/2017/05/2x4P00-P31.png"/>

$latex
P_{00} = C_0 \\\\
P_{01}+P_{10} = 2*C_1 \\\\
P_{11} = C_2 \\\\
P_{10} = C_3 \\\\
P_{11}+P_{20} = 2*C_4 \\\\
P_{21} = C_5 \\\\
P_{20} = C_6 \\\\
P_{21}+P_{30} = 2*C_7 \\\\
P_{31} = C_8
$

This is the augmented matrix with pixels on the left and control points on the right:

$latex
\\left[\\begin{array}{rrrrrrrr|rrrrrrrrr}
P_{00} & P_{01} & P_{10} & P_{11} & P_{20} & P_{21} & P_{30} & P_{31} & C_0 & C_1 & C_2 & C_3 & C_4 & C_5 & C_6 & C_7 & C_8\\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\
0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
\\end{array}\\right]
$

The rref form is:

$latex
\\left[\\begin{array}{rrrrrrrr|rrrrrrrrr}
P_{00} & P_{01} & P_{10} & P_{11} & P_{20} & P_{21} & P_{30} & P_{31} & C_0 & C_1 & C_2 & C_3 & C_4 & C_5 & C_6 & C_7 & C_8\\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\
0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0 & -1 & 0 & 0 & 0 & 0 & 0\\\\
0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0 & -1 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & -1 & 0 & 2 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & -2 & 0 & 1 & 0 & 0 \\\\
\\end{array}\\right]
$

Let's turn that back into equations.

$latex
P_{00} = C_0 \\\\
P_{01} = 2*C_1 - C_3 \\\\
P_{10} = C_3 \\\\
P_{11} = 2*C_4 - C_6 \\\\
P_{20} = C_6 \\\\
P_{21} = C_5 \\\\
P_{30} = 2*C_7 - C_5 \\\\
P_{31} = C_8 \\\\
0 = C_2 - 2*C_4 + C_6
$

We have a problem unfortunately!  The bottom row says this:

$latex 0 = C_2 - 2*C_4 + C_6$

That means that we can only store these curves in this pixel configuration if we limit the values of the control points 2,4,6 to values that make that last equation true.

Since my desire is to be able to store curves in textures without "unusual" restrictions on what the control points can be, I'm going to count this as a failure for a general case solution.

It only gets worse from here for the case of trying to add another row of pixels for each curve you want to add.

It looks like storing two quadratic curves in a 2x6 group of pixels is the most optimal (data dense) storage.  If you go any higher, it puts restrictions on the control points.  If you go any lower, you have a free variable, which means you aren't making full use of all of the pixels you have.

This means that if you are storing piecewise quadratic curves in 2d textures, doing it this way will cause you to use 3/4 as many pixels as doing it the other way, and you will be using 1 pixel per control point stored, instead of 1.333 pixels per control point stored.

This isn't the end of the story though, so let's continue (:

<h1>3. 2D Texture / Quadratic Piecewise Curves - C0 Continuity</h1>

If we add the requirement that our piecewise curves must be connected (aka that they have C0 continuity), we can actually do something pretty interesting.  Take a look at this setup:

<img src="https://demofox2.files.wordpress.com/2017/05/2x3P00-21ZigZag.png"/>

$latex
P_{00} = C_0 \\\\
P_{01}+P_{10} = 2*C_1 \\\\
P_{11} = C_2 \\\\
P_{11} = C_3 \\\\
P_{10}+P_{21} = 2*C_4 \\\\
P_{20} = C_5
$

Putting this into matrix form looks like this:

$latex
\\left[\\begin{array}{rrrrrr|rrrrrr}
P_{00} & P_{01} & P_{10} & P_{11} & P_{20} & P_{21} & C_0 & C_1 & C_2 & C_3 & C_4 & C_5\\\\
1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\
0 & 1 & 1 & 0 & 0 & 0 & 0 & 2 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 2 & 0 \\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
\\end{array}\\right]
$

In rref it becomes this:

$latex
\\left[\\begin{array}{rrrrrr|rrrrrr}
P_{00} & P_{01} & P_{10} & P_{11} & P_{20} & P_{21} & C_0 & C_1 & C_2 & C_3 & C_4 & C_5\\\\
1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\
0 & 1 & 0 & 0 & 0 & -1 & 0 & 2 & 0 & 0 & -2 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 2 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & -1 & 0 & 0 \\\\
\\end{array}\\right]
$

Turning the rref back into equations we get:

$latex
P_{00} = C_0 \\\\
P_{01} - P_{21} = 2*C_1-2*C_4 \\\\
P_{10} + P_{21} = 2*C_4 \\\\
P_{11} = C_3 \\\\
P_{20} = C_5 \\\\
0 = C_2 - C_3
$

P21 is a free variable, so we can set it to whatever we want.  Once we choose a value, the pixel values P01 and P10 will be fully defined.

The bottom equation might have you worried, because it looks like an inconsistency (aka restriction) but it is actually expected.

That last equation says 0 = C2-C3 which can be rearranged into C2 = C3.  That just means that the end of our first curve has to equal the beginning of our second curve.  That is C0 just the continuity we already said we'd agree to.

So, it worked!  Let's try adding a row of pixels and another curve to see what happens.

<img src="https://demofox2.files.wordpress.com/2017/05/2x4P00-31ZigZag.png"/>

$latex
P_{00} = C_0 \\\\
P_{01}+P_{10} = 2*C_1 \\\\
P_{11} = C_2 \\\\
P_{11} = C_3 \\\\
P_{10}+P_{21} = 2*C_4 \\\\
P_{20} = C_5\\\\
P_{20} = C_6\\\\
P_{21}+P_{30} = 2*C_7\\\\
P_{31} = C_8
$

Putting that into matrix form:

$latex
\\left[\\begin{array}{rrrrrrrr|rrrrrrrrr}
P_{00} & P_{01} & P_{10} & P_{11} & P_{20} & P_{21} & P_{30} & P_{31} & C_0 & C_1 & C_2 & C_3 & C_4 & C_5 & C_6 & C_7 & C_8\\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\
0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0\\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\
0 & 0 & 1 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0 & 0 & 0 & 0\\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0\\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0\\\\
0 & 0 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0\\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\\\
\\end{array}\\right]
$

And in rref:

$latex
\\left[\\begin{array}{rrrrrrrr|rrrrrrrrr}
P_{00} & P_{01} & P_{10} & P_{11} & P_{20} & P_{21} & P_{30} & P_{31} & C_0 & C_1 & C_2 & C_3 & C_4 & C_5 & C_6 & C_7 & C_8\\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\\\\
0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 2 & 0 & 0 & -2 & 0 & 0 & 2 & 0\\\\
0 & 0 & 1 & 0 & 0 & 0 & -1 & 0 & 0 & 0 & 0 & 0 & 2 & 0 & 0 & -2 & 0\\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0\\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0\\\\
0 & 0 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 2 & 0\\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1\\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & -1 & 0 & 0 & 0 & 0 & 0\\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & -1 & 0 & 0\\\\
\\end{array}\\right]
$

Turning the rref back into equations:

$latex
P_{00} = C_0 \\\\
P_{01}+P_{30} = 2*C_1 - 2*C_4+2*C_7 \\\\
P_{10}-P_{30} = 2*C_4-2*C_7 \\\\
P_{11} = C_3 \\\\
P_{20} = C_6 \\\\
P_{21} + P_{30} = 2*C_7\\\\
P_{31} = C_8\\\\
0 = C_2 - C_3\\\\
0 = C_5 - C_6\\\\
$

We see that P30 is a free variable, and the last two rows show us we have the C0 continuity requirements: C2 = C3 and C5 = C6.

The last section without C0 continuity reached it's limit of storage space efficiency after storing two curves (6 control points) in 6 pixels.

When we add the C0 continuity requirement, we were able to take it further and store 3 curves in 8 pixels.  Technically those 3 curves have 9 control points, but because the end point of each curve has to be the same as the start point of the next curve it makes it so in reality there is only 3 control points for the first curve and then 2 additional control points for each additional curve.  That makes 8 control points for 3 curves, not 9.

Unlike the last section, using this zigzag pattern with C0 continuity, you can encode any number of curves.  I am not sure how to prove it, but from observation, there is no sign of any shrinking of capacity as we increase the number of curves, adding two more rows of pixels for each curve.  If you know how to prove this more formally, please let me know!

Note that instead of explicitly having 3 control points per curve, where the first control point of a curve has to equal the last control point of the previous curve, you can instead describe the piecewise curves with fewer control points.  You need 3 control points for the first curve, and then 2 control points for each curve after that.

Mathematically both ways are equivelant and you'll get to the same answer.  The accompanying source code works that way, but I show this example in this longer way to more explicitly show how things work.

<h1>4. 2D Texture / Quadratic Piecewise Curves - Storage Efficiency</h1>

Let's compare the storage efficiency of the last two sections to each other, as well as to the original technique.

$latex
\\begin{array}{|cccccc|}
\\hline
& & \\rlap{\\text{2d / Quadratic - Extension}} & & & \\\\
\\hline
\\text{Curves} & \\text{Dimensions} & \\text{Pixels} & \\text{Control Points} & \\text{Pixels Per Control Point} & \\text{Pixels Per Curve} \\\\
\\hline
1 & 2x2 & 4 & 3 & 1.33 & 4.00 \\\\
2 & 2x3 & 6 & 6 & 1.00 & 3.00 \\\\
3 & 2x5 & 10 & 9 & 1.11 & 3.33 \\\\
4 & 2x6 & 12 & 12 & 1.00 & 3.00 \\\\
5 & 2x8 & 16 & 15 & 1.06 & 3.20 \\\\
6 & 2x9 & 18 & 18 & 1.00 & 3.00 \\\\
\\hline
\\end{array}
$

$latex
\\begin{array}{|cccccc|}
\\hline
& & \\rlap{\\text{2d / Quadratic - Extension + C0 Continuity}} & & & \\\\
\\hline
\\text{Curves} & \\text{Dimensions} & \\text{Pixels} & \\text{Control Points} & \\text{Pixels Per Control Point} & \\text{Pixels Per Curve} \\\\
\\hline
1 & 2x2 & 4 & 3 & 1.33 & 4.00 \\\\
2 & 2x3 & 6 & 5 & 1.20 & 3.00 \\\\
3 & 2x4 & 8 & 7 & 1.14 & 2.66 \\\\
4 & 2x5 & 10 & 9 & 1.11 & 2.50 \\\\
5 & 2x6 & 12 & 11 & 1.09 & 2.40 \\\\
6 & 2x7 & 14 & 13 & 1.08 & 2.33 \\\\
\\hline
\\end{array}
$

$latex
\\begin{array}{|cccccc|}
\\hline
& & \\rlap{\\text{2d / Quadratic - Original Technique}} & & & \\\\
\\hline
\\text{Curves} & \\text{Dimensions} & \\text{Pixels} & \\text{Control Points} & \\text{Pixels Per Control Point} & \\text{Pixels Per Curve} \\\\
\\hline
1 & 2x2 & 4 & 3 & 1.33 & 4.00 \\\\
2 & 2x4 & 8 & 6 & 1.33 & 4.00 \\\\
3 & 2x6 & 12 & 9 & 1.33 & 4.00 \\\\
4 & 2x8 & 16 & 12 & 1.33 & 4.00 \\\\
5 & 2x10 & 20 & 15 & 1.33 & 4.00 \\\\
6 & 2x12 & 24 & 18 & 1.33 & 4.00 \\\\
\\hline
\\end{array}
$

The tables show that the first method uses fewer pixels per control point, while the second method uses fewer pixels per curve.

The first method can get you to what I believe to be the maximum density of 1 pixel per control point if you store an even number of curves.  It can also give you a curve for every 3 pixels of storage.

The second method approaches the 1 pixel per control point as you store more and more curves and also approaches 2 pixels of storage per curve stored.  Note that the second method's table is using the convention of 3 control points are used for the first curve, and 2 additional control points for each curve after that.

The deciding factor for which method to use is probably going to be whether or not you want to force C0 continuity of your curve data.  If so, you'd use the second technique, else you'd use the first.

The original technique uses a constant 1.33 pixels per control point, and 4 pixels to store each curve.  Those numbers shows how this extension improves on the storage efficiency of the original technique.

<h1>5. Real World Limitations</h1>

This extension has a problem that the original technique does not have unfortunately.

While the stuff above is correct mathematically, there are limitations on the values we can store in actual textures.  For instance, if we have 8 bit uint8 color channels we can only store values 0 to 255.

Looking at one of the equations $latex P_{01} = 2*C_1 - C_3 $, if C1 is 255 and C3 is 0, we are going to need to store 510 in the 8 bits we have for P01, which we can't.  If C1 is 0 and C3 is not zero, we are going to have to store a negative value in the 8 bits we have for P01, which we can't.

This becomes less of a problem when using 16 bit floats per color channel, and is basically solved when using 32 bit floats per color channels, but that makes the technique hungrier for storage and less efficient again.

While that limits the usefulness of this extension, there are situations where this would still be appropriate - like if you already have your data stored in 16 or 32 bit color channels like some data (eg position data) would require..

The extension goes further, into 3d textures and beyond though, so let's explore a little bit more.

<h1>6. 3D Texture / Cubic Piecewise Curves</h1>

The original technique talks about how to use a 2x2x2 3d volume texture to store a cubic Bezier curve (per color channel) and to retrieve it by doing a trilinear interpolated texture read.

If you have four control points A,B,C,D then the first slice of the volume texture will be a 2d texture storing the quadratic Bezier curve defined by A,B,C and the second slice will store B,C,D.  You still sample along the diagonal of the texture but this time it's a 3d diagonal instead of 2d.  Here is that setup, where the texture is sampled along the diagonal from from A to D:

<img src="https://demofox2.files.wordpress.com/2017/04/3dold.png"/>

$latex 
A = C_0 \\\\
B = C_1 \\\\
C = C_2 \\\\
D = C_3
$

Let's look at what this extension means for 3d textures / cubic curves.

The equation for a cubic Bezier curve looks like this:

$latex As^3 + 3Bs^2t + 3Cst^2 + Dt^3$

If we derive that from trilinear interpolation between 8 points A,B,C,D,E,F,G,H, the second to last step would look like this:

$latex As^3 + (B+C+E)s^2t + (D+F+G)st^2 + Ht^3$

So, similar to our 2d setup, we have some freedom about our values. 

In the original technique, B,C,E would have to be equal to the second control point, and D,F,G would have to be equal to the third control point.  With the new extension, in both cases, those groups of values only have to AVERAGE to their specific control points.  Once again, this gives us some freedoms for the values we can use, and lets us use our pixels more efficiently.

Here is the setup, again using texture coordinates (in the form Pzyx) for the pixels instead of letters.

<img src="https://demofox2.files.wordpress.com/2017/05/3dP000-P111.png"/>

$latex
P_{000} = C_0\\\\
P_{001}+P_{010}+P_{100} = 3*C_1\\\\
P_{011}+P_{101}+P_{110} = 3*C_2\\\\
P_{111} = C_3
$

here's how the equations look in matrix form, which also happens to already be in rref:

$latex
\\left[\\begin{array}{rrrrrrrr|rrrr}
P_{000} & P_{001} & P_{010} & P_{011} & P_{100} & P_{101} & P_{110} & P_{111} &    C_0 & C_1 & C_2 & C_3 \\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 &    1 & 0 & 0 & 0 \\\\
0 & 1 & 1 & 0 & 1 & 0 & 0 & 0 &    0 & 3 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 1 & 1 & 0 &    0 & 0 & 3 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 &    0 & 0 & 0 & 1 \\\\
\\end{array}\\right]
$

P010 and P100 are free variables and so are P101 and P110, making a total of four free variables.  They can be set to any value desired, which will then define the value that P001 and P011 need to be.

Let's add another piecewise cubic Bezier curve, and another row of pixels to the texture to see what happens.

<img src="https://demofox2.files.wordpress.com/2017/05/2x3x2_P000-121.png"/>

$latex
P_{000} = C_{0}\\\\
P_{001} + P_{010} + P_{100} = 3C_{1}\\\\
P_{011} + P_{101} + P_{110} = 3C_{2}\\\\
P_{111} = C_{3}\\\\
P_{010} = C_{4}\\\\
P_{011} + P_{020} + P_{110} = 3C_{5}\\\\
P_{021} + P_{111} + P_{120} = 3C_{6}\\\\
P_{121} = C_{7}\\\\
$

Here are the equations in matrix form:

$latex
\\left[\\begin{array}{rrrrrrrrrrrr|rrrrrrrr}
P_{000} & P_{001} & P_{010} & P_{011} & P_{020} & P_{021} & P_{100} & P_{101} & P_{110} & P_{111} & P_{120} & P_{121} & C_{0} & C_{1} & C_{2} & C_{3} & C_{4} & C_{5} & C_{6} & C_{7} \\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 1 & 1 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 3 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 3 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 3 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 3 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
\\end{array}\\right]
$

Here it is in rref:

$latex
\\left[\\begin{array}{rrrrrrrrrrrr|rrrrrrrr}
P_{000} & P_{001} & P_{010} & P_{011} & P_{020} & P_{021} & P_{100} & P_{101} & P_{110} & P_{111} & P_{120} & P_{121} & C_{0} & C_{1} & C_{2} & C_{3} & C_{4} & C_{5} & C_{6} & C_{7} \\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 3 & 0 & 0 & -1 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 3 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & -1 & 0 & 0 & 0 & 0 & 0 & 0 & -3 & 0 & 0 & 3 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & -1 & 0 & 0 & 3 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
\\end{array}\\right]
$

Putting that back into equations we have this:

$latex
P_{000} = C_{0}\\\\
P_{001} + P_{100} = 3C_{1} + -C_{4}\\\\
P_{010} = C_{4}\\\\
P_{011} + P_{101} + P_{110} = 3C_{2}\\\\
P_{020} + -P_{101} = -3C_{2} + 3C_{5}\\\\
P_{021} + P_{120} = -C_{3} + 3C_{6}\\\\
P_{111} = C_{3}\\\\
P_{121} = C_{7}\\\\
$

The result is that we still have four free variables: P100, P101, P110 and P120.  When we give values to those pixels, we will then be able to calculate the values for P001, P011, P020 and P021.

There is a limit to this pattern though.  Where the maximum number of curves to follow the pattern was 2 with the 2d / quadratic case, the maximum number of curves to follow this pattern with the 3d / cubic case is 3.  As soon as you try to put 4 curves in this pattern it fails by having constraints.  Interestingly, we still have 4 free variables when putting 3 curves in there, so it doesn't follow the 2d case where free variables disappeared as we put more curves in, indicating when the failure would happen.

If you know how to more formally analyze when these patterns of equations will fail, please let me know!

<h1>7. 3D Texture / Cubic Piecewise Curves - Multiple Curves?</h1>

Looking at the 3d texture case of 2x2x2 storing a single curve, I saw that there were 4 free variables.  Since it takes 4 control points to define a cubic curve, I wondered if we could use those 4 free variables to encode another cubic curve.

Here's a setup where the x axis is flipped for the second curve.  It's a little bit hard to tell from the diagram, but the blue line does still go through the center of the 3d cube. It goes from P001 to P110, while the first curve still goes from P000 to P111.

<img src="https://demofox2.files.wordpress.com/2017/05/3dP000-P111Dual.png"/>

Here's what the equations look like:

$latex
P_{000} = C_{0}\\\\
P_{001} + P_{010} + P_{100} = 3*C_{1}\\\\
P_{011} + P_{101} + P_{110} = 3*C_{2}\\\\
P_{111} = C_{3}\\\\
P_{001} = C_{4}\\\\
P_{000} + P_{011} + P_{101} = 3*C_{5}\\\\
P_{010} + P_{100} + P_{111} = 3*C_{6}\\\\
P_{110} = C_{7}\\\\
$

And in matrix form:

$latex
\\left[\\begin{array}{rrrrrrrr|rrrrrrrr}
P_{000} & P_{001} & P_{010} & P_{011} & P_{100} & P_{101} & P_{110} & P_{111} & C_{0} & C_{1} & C_{2} & C_{3} & C_{4} & C_{5} & C_{6} & C_{7} \\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 1 & 1 & 0 & 1 & 0 & 0 & 0 & 0 & 3 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 1 & 1 & 0 & 0 & 0 & 3 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\
0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
1 & 0 & 0 & 1 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 3 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 1 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 3 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
\\end{array}\\right]
$

After putting the matrix in rref to solve the equations, we get this matrix:

$latex
\\left[\\begin{array}{rrrrrrrr|rrrrrrrr}
P_{000} & P_{001} & P_{010} & P_{011} & P_{100} & P_{101} & P_{110} & P_{111} & C_{0} & C_{1} & C_{2} & C_{3} & C_{4} & C_{5} & C_{6} & C_{7} \\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & -3 & 0 & 0 & 3 & 0 & 1 \\\\
0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & -1 & 0 & 0 & 3 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 1 & 0 & 0 & 0 & 0 & 3 & 0 & 0 & 0 & 0 & -1 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 3 & 0 & 0 & -3 & 0 & -1 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & \\frac{1}{3} & \\frac{-1}{3} & 0 & -1 & 0 \\\\
\\end{array}\\right]
$

Which is this set of equations:

$latex
P_{000} = -3C_{2} + 3C_{5} + C_{7}\\\\
P_{001} = C_{4}\\\\
P_{010} + P_{100} = -C_{3} + 3C_{6}\\\\
P_{011} + P_{101} = 3C_{2} + -C_{7}\\\\
P_{110} = C_{7}\\\\
P_{111} = C_{3}\\\\
0 = C_{0} + 3C_{2} - 3C_{5} - C_{7}\\\\
0 = C_{1} + C_{3}/3 - C_{4}/3 + -C_{6}\\\\
$

In the end there are 2 free variables, but also 2 constraints on the values that the control points can take.  The constraints mean it doesn't work which is unfortunate.  That would have been a nice way to bring the 3d / cubic case to using 1 pixel per control point!

I also tried other variations like flipping y or z along with x (flipping all three just makes the first curve in the reverse direction!) but couldn't find anything that worked.  Too bad!

<h1>8. 3D Texture / Cubic Piecewise Curves - C0 Continuity</h1>

Since the regular 3d texture / cubic curve pattern has a limit (3 curves), let's look at the C0 continuity version like we did for the 2d texture / quadratic case where we sample zig zag style.

Since the sampling has to pass through the center of the cube, we need to flip both x and z each curve.

That gives us a setup like this:

<img src="https://demofox2.files.wordpress.com/2017/05/2x3x2_P000-121ZigZag.png"/>

Here are the constraints for the pixel values:

$latex
P_{000} = C_{0}\\\\
P_{001} + P_{010} + P_{100} = 3C_{1}\\\\
P_{011} + P_{101} + P_{110} = 3C_{2}\\\\
P_{111} = C_{3}\\\\
P_{011} + P_{110} + P_{121} = 3C_{4}\\\\
P_{010} + P_{021} + P_{120} = 3C_{5}\\\\
P_{020} = C_{6}\\\\
$

Which looks like this in matrix form:

$latex
\\left[\\begin{array}{rrrrrrrrrrrr|rrrrrrr}
P_{000} & P_{001} & P_{010} & P_{011} & P_{020} & P_{021} & P_{100} & P_{101} & P_{110} & P_{111} & P_{120} & P_{121} & C_{0} & C_{1} & C_{2} & C_{3} & C_{4} & C_{5} & C_{6} \\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 1 & 1 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 3 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 1 & 1 & 0 & 0 & 0 & 0 & 0 & 3 & 0 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 3 & 0 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 3 & 0 \\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
\\end{array}\\right]
$

Here is the matrix solved in rref:

$latex
\\left[\\begin{array}{rrrrrrrrrrrr|rrrrrrr}
P_{000} & P_{001} & P_{010} & P_{011} & P_{020} & P_{021} & P_{100} & P_{101} & P_{110} & P_{111} & P_{120} & P_{121} & C_{0} & C_{1} & C_{2} & C_{3} & C_{4} & C_{5} & C_{6} \\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\
0 & 1 & 0 & 0 & 0 & -1 & 1 & 0 & 0 & 0 & -1 & 0 & 0 & 3 & 0 & 0 & 0 & -3 & 0 \\\\
0 & 0 & 1 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 3 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 3 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & -1 & 0 & 0 & 3 & 0 & -3 & 0 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\
\\end{array}\\right]
$

And here is that matrix put back into equations form:

$latex
P_{000} = C_{0}\\\\
P_{001} - P_{021} + P_{100} - P_{120} = 3C_{1} - 3C_{5}\\\\
P_{010} + P_{021} + P_{120} = 3C_{5}\\\\
P_{011} + P_{110} + P_{121} = 3C_{4}\\\\
P_{020} = C_{6}\\\\
P_{101} - P_{121} = 3C_{2} - 3C_{4}\\\\
P_{111} = C_{3}\\\\
$

It worked!  It also has 5 free variables.

This pattern works for as many curves as i tried (21 of them), and each time you add another curve / row of this pattern you gain another free variable.

So, storing 2 curves results in 6 free variables, 3 curves has 7 free variables, 4 curves has 8 free variables and so on.

<h1>9. 3D Texture / Cubic Piecewise Curves - Storage Efficiency</h1>

Let's compare storage efficiency of these 3d texture / cubic curve techniques like we did for the 2d texture / quadratic curve techniques.

$latex
\\begin{array}{|cccccc|}
\\hline
& & \\rlap{\\text{3d / Cubic - Extension}} & & & \\\\
\\hline
\\text{Curves} & \\text{Dimensions} & \\text{Pixels} & \\text{Control Points} & \\text{Pixels Per Control Point} & \\text{Pixels Per Curve} \\\\
\\hline
1 & 2x2x2 & 8 & 4 & 2.00 & 8.00 \\\\
2 & 2x3x2 & 12 & 8 & 1.50 & 6.00 \\\\
3 & 2x4x2 & 16 & 12 & 1.33 & 5.33 \\\\
4 & 2x6x2 & 24 & 16 & 1.50 & 6.00 \\\\
5 & 2x7x2 & 28 & 20 & 1.40 & 5.60 \\\\
6 & 2x8x2 & 32 & 24 & 1.33 & 5.33 \\\\
\\hline
\\end{array}
$

$latex
\\begin{array}{|cccccc|}
\\hline
& & \\rlap{\\text{3d / Quadratic - Extension + C0 Continuity}} & & & \\\\
\\hline
\\text{Curves} & \\text{Dimensions} & \\text{Pixels} & \\text{Control Points} & \\text{Pixels Per Control Point} & \\text{Pixels Per Curve} \\\\
\\hline
1 & 2x2x2 & 8 & 4 & 2.00 & 8.00 \\\\
2 & 2x3x2 & 12 & 7 & 1.71 & 6.00 \\\\
3 & 2x4x2 & 16 & 10 & 1.60 & 5.33 \\\\
4 & 2x5x2 & 20 & 13 & 1.54 & 5.00 \\\\
5 & 2x6x2 & 24 & 16 & 1.50 & 4.80 \\\\
6 & 2x7x2 & 28 & 19 & 1.47 & 4.67 \\\\
\\hline
\\end{array}
$

$latex
\\begin{array}{|cccccc|}
\\hline
& & \\rlap{\\text{3d / Cubic - Original Technique}} & & & \\\\
\\hline
\\text{Curves} & \\text{Dimensions} & \\text{Pixels} & \\text{Control Points} & \\text{Pixels Per Control Point} & \\text{Pixels Per Curve} \\\\
\\hline
1 & 2x2x2 & 8 & 4 & 2.00 & 8.00 \\\\
2 & 2x4x2 & 16 & 8 & 2.00 & 8.00 \\\\
3 & 2x6x2 & 24 & 12 & 2.00 & 8.00 \\\\
4 & 2x8x2 & 32 & 16 & 2.00 & 8.00 \\\\
5 & 2x10x2 & 40 & 20 & 2.00 & 8.00 \\\\
6 & 2x12x2 & 48 & 24 & 2.00 & 8.00 \\\\
\\hline
\\end{array}
$

The original technique had a constant 2 pixels per control point and 8 pixels per cubic curve.

The basic extension lets you bring that down to 1.33 pixels per control point, and 5.33 pixels per curve.

If C0 continuity is desired, as you store more and more curves the extension can bring things down towards 1.33 pixels per control point, and 4 pixels per curve.  (Remember that with the C0 extension you have 4 control points for the first curve and then 3 more for each subsequent curve, so that 1.33 pixels per control point isn't exactly an apples to apples comparison vs the basic extension).

The pattern continues for 4D textures and higher (for higher than cubic curves too!), but working through the 2d and 3d cases for quadratic / cubic curves is the most likely usage case both because 4d textures and higher are kind of excessive (probably you'd need to do multiple texture reads to simulate them), but also when fitting curves to data, quadratic and cubic curves tend to do well in that they don't usually overfit the data or have as many problems with ringing.

Despite that, I do think it's useful to look at it from an N dimensional point of view to see the larger picture, so let's do that next.

<h1>10. Generalizing The Unit Hyper Cube</h1>

Let's ignore the zig zag sampling pattern and storing multiple curves in a texture and just get back to the basic idea.

Given an N dimensional texture that is 2x2x...x2 that you are going to sample across the diagonal to get a degree N Bezier curve from, how do you know what values to put in which control points to use this technique?

You could derive it from N-linear interpolation, but that is a lot of work.

The good news is it turns out there is a simple pattern, that is also pretty interesting.

Let's check out the 1d, 2d and 3d cases to see what patterns we might be able to see.

1d Texture / linear Bezier / linear interpolation:

<img src="https://demofox2.files.wordpress.com/2017/05/2x1P0-P1new.png"/>

$latex
P_{0} = C_0 \\\\
P_{1} = C_1 \\\\
$

$latex
\\left[\\begin{array}{rr|rr}
P_{0} & P_{1} & C_0 & C_1\\\\
1 & 0 & 1 & 0 \\\\
0 & 1 & 0 & 1 \\\\
\\end{array}\\right]
$

2d Texture / Quadratic Bezier:

<img src="https://demofox2.files.wordpress.com/2017/05/2x2P0-3.png"/>

$latex
P_{00} = C_0 \\\\
P_{01}+P_{10} = 2*C_1 \\\\
P_{11} = C_2 \\\\
$

$latex
\\left[\\begin{array}{rrrr|rrr}
P_{00} & P_{01} & P_{10} & P_{11} & C_0 & C_1 & C_2 \\\\
1 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & 1 & 1 & 0 & 0 & 2 & 0\\\\
0 & 0 & 0 & 1 & 0 & 0 & 1
\\end{array}\\right]
$

3d Texture / Cubic Bezier:

<img src="https://demofox2.files.wordpress.com/2017/05/3dP000-P111.png"/>

$latex
P_{000} = C_0\\\\
P_{001}+P_{010}+P_{100} = 3*C_1\\\\
P_{011}+P_{101}+P_{110} = 3*C_2\\\\
P_{111} = C_3
$

$latex
\\left[\\begin{array}{rrrrrrrr|rrrr}
P_{000} & P_{001} & P_{010} & P_{011} & P_{100} & P_{101} & P_{110} & P_{111} &    C_0 & C_1 & C_2 & C_3 \\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 &    1 & 0 & 0 & 0 \\\\
0 & 1 & 1 & 0 & 1 & 0 & 0 & 0 &    0 & 3 & 0 & 0 \\\\
0 & 0 & 0 & 1 & 0 & 1 & 1 & 0 &    0 & 0 & 3 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 &    0 & 0 & 0 & 1 \\\\
\\end{array}\\right]
$

The first pattern you might see is that the right side of the equations for an N dimensional hypercube is the identity matrix, but instead of using 1 for the value along the diagonal, it uses values from <a href="https://en.wikipedia.org/wiki/Pascal%27s_triangle" target="_blank">Pascal's Triangle</a> (binomial coefficients).

To simplify this a bit though, we could also notice that the number on the right side of the equation equals the sum of the numbers on the left side of the equation.  Mathematically it would be the same to say that the numbers on the left side of the equation have to sum up to 1.  This would make the matrix on the right just be the identity matrix and we can forget about Pascal's triangle numbers (they will show up implicitly as divisors of the left side equation coefficients but there's no need to explicitly calculate them).

But then we are still left with the matrix on the left.  How do we know which pixels belong in which rows?

It turns out there is another interesting pattern here.  In all the matrices above it follows this pattern:
<ul>
	<li>Row 0 has a "1" wherever the pixel coordinate has 0 ones set</li>
	<li>Row 1 has a "1" wherever the pixel coordinate has 1 ones set</li>
	<li>Row 2 has a "1" wherever the pixel coordinate has 2 ones set</li>
	<li>Row 3 has a "1" wherever the pixel coordinate has 3 ones set</li>
	<li>....</li>
</ul>

That pattern continues indefinitely, but don't forget that the numbers (coefficients) on the left side of the equation must add up to one.

Here is the matrix form of 1d / linear, 2d / quadratic, and 3d / cubic again with the right matrix being the identity matrix, and the equations below them.  Notice the pattern about counts of one bits in each row!

1D:

$latex
\\left[\\begin{array}{rr|rr}
P_{0} & P_{1} & C_0 & C_1\\\\
1 & 0 & 1 & 0 \\\\
0 & 1 & 0 & 1 \\\\
\\end{array}\\right]
$

$latex
P_0 = C_0 \\\\
P_1 = C_1 \\\\
$

2D:

$latex
\\left[\\begin{array}{rrrr|rrr}
P_{00} & P_{01} & P_{10} & P_{11} & C_0 & C_1 & C_2 \\\\
1 & 0 & 0 & 0 & 1 & 0 & 0 \\\\
0 & \\frac{1}{2} & \\frac{1}{2} & 0 & 0 & 1 & 0\\\\
0 & 0 & 0 & 1 & 0 & 0 & 1
\\end{array}\\right]
$

$latex
P_{00} = C_0 \\\\
P_{01}/2 + P_{10}/2 = C_1 \\\\
P_{11} = C_2 \\\\
$

3D:

$latex
\\left[\\begin{array}{rrrrrrrr|rrrr}
P_{000} & P_{001} & P_{010} & P_{011} & P_{100} & P_{101} & P_{110} & P_{111} &    C_0 & C_1 & C_2 & C_3 \\\\
1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 &    1 & 0 & 0 & 0 \\\\
0 & \\frac{1}{3} & \\frac{1}{3} & 0 & \\frac{1}{3} & 0 & 0 & 0 &    0 & 1 & 0 & 0 \\\\
0 & 0 & 0 & \\frac{1}{3} & 0 & \\frac{1}{3} & \\frac{1}{3} & 0 &    0 & 0 & 1 & 0 \\\\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 &    0 & 0 & 0 & 1 \\\\
\\end{array}\\right]
$

$latex
P_{000} = C_0 \\\\
P_{001}/3 + P_{010}/3 + P_{100}/3 = C_1 \\\\
P_{011}/3 + P_{101}/3 + P_{110}/3 = C_2 \\\\
P_{111} = C_3 \\\\
$

Here are the formulas for linear, quadratic and cubic Bezier curves to show a different way of looking at this. Below each is the same formula but with the 1d, 2d and 3d pixels in the formula instead of the control points, using the formulas above which relate pixel values to control point values.  Note that I have replaced (1-t) with s for easier reading.

$latex
f(t) = As + Bt \\\\
\\\\
f(t) = P_0s + P_1t\\\\
$

$latex
f(t) = As^2 + 2Bst + Ct^2 \\\\
\\\\
f(t) = P_{00}s^2 + (P_{01}+P_{10})st + P_{11}t^2 \\\\
$

$latex
f(t) = As^3 + 3Bs^2t + 3Cst^2 + Dt^3
\\\\
f(t) = P_{000}s^3 + (P_{001}+P_{010}+P_{100})s^2t + (P_{011}+P_{101}+P_{110})st^2 + P_{111}t^3
$

I think it's really interesting how in the last equation as an example, "3B" literally becomes 3 values which could have the value of B.  In the plain vanilla technique they did have the value of B.  In this extension, the only requirement is that they average to B.

It's also interesting to notice that if you have an N bit number and you count how many permutations have each possible number of bits turned on, the resulting counts is the Pascal's triangle row.  That is nothing new, but it seems like there might be a fun way to convert a set of random numbers (white noise) into a Gaussian distribution, just by counting how many one bits there were in each number.  That isn't new either, and there are better algorithms, but still I think it's an interesting idea, and may be useful in a pinch since it seems pretty computationally inexpensive.

<h1>11. Closing</h1>

This extension makes storage efficiency a bit better than the plain vanilla technique, especially if you are interested in C0 continuous curves.

The extension does come at a price though, as you may find yourself in a situation where you need to store a value that is outside of the possible values for common data formats to store (such as needing to store a negative number or a larger than 255 number in a uint8).

Even so, if these three criteria are met:
<ol>
	<li>You are already storing data in textures. (Counter point: compute is usually preferred over texture lookup these days)</li>
	<li>You are relying on the texture interpolator to interpolate values between data points. (Counter point: if you don't want the interpolation, use a buffer instead so you fit more of the data you actually care about in the cache)</li>
	<li>You are storing data in 16 or 32 bit real numbers.  (Counter point: uint8 is half as large as 16 bit and a quarter as large as 32 bit already)</li>
</ol>

Then this may be an attractive solution for you, even over the plain vanilla technique.

For future work, I think it would be interesting to see how this line of thinking applies to surfaces.

I also think there is probably some fertile ground looking into what happens when sampling off of the diagonal of the textures.  Intuitively it seems you might be able to store some special case higher order curves in lower dimension / storage textures, but I haven't looked into it yet.

A common usage case when encoding data in a texture would probably include putting curves side by side on the x axis of the texture.  It could be interesting to look into whether curves need to be completely separate from each other horizontally (aka 2 pixel of width for each track of curves in the texture), or if you could perhaps fit two curves side by side in a 3 pixel width, or any similar ideas.

Lastly, when looking at these groups of points on these N dimensional hyper-cubes, I can't help but wonder what kinds of shapes they are.  Are they simplices? If so, is there a pattern to the dimensions they are of?

It's a bit hard to visualize, but taking a look at the first few rows of pascal's triangle / hyper cubes here's what I found:

<ul>
	<li>Dimension 1 (line) : Row 2 = 1,1.  Those are both points, so are simplices of 0 dimension.</li>
	<li>Dimension 2 (square) : Row 3 = 1,2,1.  The 1's are points, the 2 is a line, so are simplices of dimension 0, 1, 0.</li>
	<li>Dimension 3 (cube) : Row 4 = 1,3,3,1.  The 1's are still points.  The 3's are in fact triangles, I checked.  So, simplices of dimension 0, 2, 2, 0.</li>
	<li>Dimension 4 (hypercube) : Row 5 = 1,4,6,4,1.  The 1's are points. The 4's are tetrahedrons.  The 6 is a 3 dimensional object.  I'm not sure it's shape but that makes it not be a simplex.  Possibly it's two simplices fused together some how.  I don't really know.  So, the dimensions anyways are: 0, 3, 3, 3, 0.</li>
	<li>Beyond? That's as far as I looked.  If you look further / deeper and find anything interesting please share!</li>
</ul>

Questions, comments, corrections, etc?  Post a comment below or hit me up on twitter at <a href="https://twitter.com/Atrix256" target="_blank">@Atrix256</a>.

If you have a usage case for this or any of the related techniques, I'd love to hear about them.

Thanks for reading!

<h1>12. Code</h1>

It's easy to talk about things and claim that everything is correct, when in fact, the moment you try it, everything falls apart.

I made up some simple standalone c++ code that goes through the cases we talked about, doing the math we did, and also verifying that the texture interpolation is equivalent to actually calculating Bezier curves (using Bernstein polynomials).

You can also use this code as a starting point to explore higher curve counts or other storage patterns.  It uses only standard includes and no libraries, so it should be real easy to drop this into a compiler and start experimenting.

Here's some example output, which shows 6 cubic curves stored in a 3d texture using the zig zag sampling pattern.

<img src="https://demofox2.files.wordpress.com/2017/05/programoutput.png"/>

Here's the code:

[code language="cpp"]
#define _CRT_SECURE_NO_WARNINGS

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;array&gt;
#include &lt;algorithm&gt;
#include &lt;unordered_set&gt;
#include &lt;random&gt;
#include &lt;vector&gt;

#define SHOW_MATHJAX_MATRIX() 0
#define SHOW_MATHJAX_EQUATIONS() 0
#define SHOW_EQUATIONS_BEFORE_SOLVE() 0
#define EQUALITY_TEST_SAMPLES 1000

typedef int32_t TINT;

TINT CalculateGCD (TINT smaller, TINT larger);
TINT CalculateLCM (TINT smaller, TINT larger);

// A rational number, to handle fractional numbers without typical floating point issues
struct CRationalNumber
{
	CRationalNumber (TINT numerator = 0, TINT denominator = 1)
		: m_numerator(numerator)
		, m_denominator(denominator)
	{ }

	TINT m_numerator;
	TINT m_denominator;

	CRationalNumber Reciprocal () const
	{
		return CRationalNumber(m_denominator, m_numerator);
	}

	void Reduce ()
	{
		if (m_numerator != 0 &amp;&amp; m_denominator != 0)
		{
			TINT div = CalculateGCD(m_numerator, m_denominator);
			m_numerator /= div;
			m_denominator /= div;
		}

		if (m_denominator &lt; 0)
		{
			m_numerator *= -1;
			m_denominator *= -1;
		}
		
		if (m_numerator == 0)
			m_denominator = 1;
	}

	bool IsZero () const
	{
		return m_numerator == 0 &amp;&amp; m_denominator != 0;
	}

	// NOTE: the functions below assume Reduce() has happened
	bool IsOne () const
	{
		return m_numerator == 1 &amp;&amp; m_denominator == 1;
	}

	bool IsMinusOne () const
	{
		return m_numerator == -1 &amp;&amp; m_denominator == 1;
	}

	bool IsWholeNumber () const
	{
		return m_denominator == 1;
	}
};

// Define a vector as an array of rational numbers
template&lt;size_t N&gt;
using TVector = std::array&lt;CRationalNumber, N&gt;;

// Define a matrix as an array of vectors
template&lt;size_t M, size_t N&gt;
using TMatrix = std::array&lt;TVector&lt;N&gt;, M&gt;;

//===================================================================================================================================
//                                              GCD / LCM
//===================================================================================================================================

// from my blog post: http://blog.demofox.org/2015/01/24/programmatically-calculating-gcd-and-lcm/

TINT CalculateGCD (TINT smaller, TINT larger)
{
	// make sure A &lt;= B before starting
	if (larger &lt; smaller)
		std::swap(smaller, larger);

	// loop
	while (1)
	{
		// if the remainder of larger / smaller is 0, they are the same
		// so return smaller as the GCD
		TINT remainder = larger % smaller;
		if (remainder == 0)
			return smaller;

		// otherwise, the new larger number is the old smaller number, and
		// the new smaller number is the remainder
		larger = smaller;
		smaller = remainder;
	}
}

TINT CalculateLCM (TINT A, TINT B)
{
	// LCM(A,B) = (A/GCD(A,B))*B
	return (A / CalculateGCD(A, B))*B;
}

//===================================================================================================================================
//                                              RATIONAL NUMBER MATH
//===================================================================================================================================

void CommonDenominators (CRationalNumber&amp; a, CRationalNumber&amp; b)
{
	TINT lcm = CalculateLCM(a.m_denominator, b.m_denominator);

	a.m_numerator *= lcm / a.m_denominator;
	b.m_numerator *= lcm / b.m_denominator;

	a.m_denominator = lcm;
	b.m_denominator = lcm;
}

bool operator == (const CRationalNumber&amp; a, const CRationalNumber&amp; b)
{
	CRationalNumber _a(a), _b(b);
	CommonDenominators(_a, _b);
	return _a.m_numerator == _b.m_numerator;
}

void operator *= (CRationalNumber&amp; a, const CRationalNumber&amp; b)
{
	a.m_numerator *= b.m_numerator;
	a.m_denominator *= b.m_denominator;
}

CRationalNumber operator * (const CRationalNumber&amp; a, const CRationalNumber&amp; b)
{
	return CRationalNumber(a.m_numerator * b.m_numerator, a.m_denominator * b.m_denominator);
}

void operator -= (CRationalNumber&amp; a, const CRationalNumber&amp; b)
{
	CRationalNumber _b(b);
	CommonDenominators(a, _b);
	a.m_numerator -= _b.m_numerator;
}

//===================================================================================================================================
//                                              GAUSS-JORDAN ELIMINATION CODE
//===================================================================================================================================

// From my blog post: http://blog.demofox.org/2017/04/10/solving-n-equations-and-n-unknowns-the-fine-print-gauss-jordan-elimination/

// Make a specific row have a 1 in the colIndex, and make all other rows have 0 there
template &lt;size_t M, size_t N&gt;
bool MakeRowClaimVariable (TMatrix&lt;M, N&gt;&amp; matrix, size_t rowIndex, size_t colIndex)
{
    // Find a row that has a non zero value in this column and swap it with this row
    {
        // Find a row that has a non zero value
        size_t nonZeroRowIndex = rowIndex;
        while (nonZeroRowIndex &lt; M &amp;&amp; matrix[nonZeroRowIndex][colIndex].IsZero())
            ++nonZeroRowIndex;
 
        // If there isn't one, nothing to do
        if (nonZeroRowIndex == M)
            return false;
 
        // Otherwise, swap the row
        if (rowIndex != nonZeroRowIndex)
            std::swap(matrix[rowIndex], matrix[nonZeroRowIndex]);
    }
 
    // Scale this row so that it has a leading one
    CRationalNumber scale = matrix[rowIndex][colIndex].Reciprocal();
	for (size_t normalizeColIndex = colIndex; normalizeColIndex &lt; N; ++normalizeColIndex)
	{
		matrix[rowIndex][normalizeColIndex] *= scale;
		matrix[rowIndex][normalizeColIndex].Reduce();
	}
 
    // Make sure all rows except this one have a zero in this column.
    // Do this by subtracting this row from other rows, multiplied by a multiple that makes the column disappear.
    for (size_t eliminateRowIndex = 0; eliminateRowIndex &lt; M; ++eliminateRowIndex)
    {
        if (eliminateRowIndex == rowIndex)
            continue;
 
        CRationalNumber scale = matrix[eliminateRowIndex][colIndex];
		for (size_t eliminateColIndex = 0; eliminateColIndex &lt; N; ++eliminateColIndex)
		{
			matrix[eliminateRowIndex][eliminateColIndex] -= matrix[rowIndex][eliminateColIndex] * scale;
			matrix[eliminateRowIndex][eliminateColIndex].Reduce();
		}
    }
 
    return true;
}
 
// make matrix into reduced row echelon form
template &lt;size_t M, size_t N&gt;
void GaussJordanElimination (TMatrix&lt;M, N&gt;&amp; matrix)
{
    size_t rowIndex = 0;
    for (size_t colIndex = 0; colIndex &lt; N; ++colIndex)
    {
        if (MakeRowClaimVariable(matrix, rowIndex, colIndex))
        {
            ++rowIndex;
            if (rowIndex == M)
                return;
        }
    }
}

//===================================================================================================================================
//                                                           Shared Testing Code
//===================================================================================================================================

template &lt;size_t M, size_t N, typename LAMBDA&gt;
void PrintEquations (
	TMatrix&lt;M, N&gt;&amp; augmentedMatrix,
	size_t numPixels,
	LAMBDA&amp; pixelIndexToCoordinates
)
{
	char pixelCoords[10];

#if SHOW_MATHJAX_MATRIX()
	// print the matrix opening stuff
	printf(&quot;\\left[\\begin{array}{&quot;);
	for (size_t i = 0; i &lt; N; ++i)
	{
		if (i == numPixels)
			printf(&quot;|&quot;);
		printf(&quot;r&quot;);
	}
	printf(&quot;}\n&quot;);
	// print the header row
	for (size_t i = 0; i &lt; numPixels; ++i)
	{
		pixelIndexToCoordinates(i, pixelCoords);
		if (i == 0)
			printf(&quot;P_{%s}&quot;, pixelCoords);
		else
			printf(&quot; &amp; P_{%s}&quot;, pixelCoords);
	}
	for (size_t i = numPixels; i &lt; N; ++i)
	{
		printf(&quot; &amp; C_{%zu}&quot;, i-numPixels);
	}
	printf(&quot; \\\\\n&quot;);

	// Print the matrix
	for (const TVector&lt;N&gt;&amp; row : augmentedMatrix)
	{
		bool first = true;
		for (const CRationalNumber&amp; n : row)
		{
			if (first)
				first = false;
			else
				printf(&quot; &amp; &quot;);

			if (n.IsWholeNumber())
				printf(&quot;%i&quot;, n.m_numerator);
			else
				printf(&quot;\\frac{%i}{%i}&quot;, n.m_numerator, n.m_denominator);
		}
		printf(&quot; \\\\\n&quot;);
	}

	// print the matrix closing stuff
	printf(&quot;\\end{array}\\right]\n&quot;);
#endif

	// print equations
	for (const TVector&lt;N&gt;&amp; row : augmentedMatrix)
	{
		// indent
		#if SHOW_MATHJAX_EQUATIONS() == 0
			printf(&quot;    &quot;);
		#endif

		// left side of the equation
		bool leftHasATerm = false;
		for (size_t i = 0; i &lt; numPixels; ++i)
		{
			if (!row[i].IsZero())
			{
				if (leftHasATerm)
					printf(&quot; + &quot;);
				pixelIndexToCoordinates(i, pixelCoords);

				#if SHOW_MATHJAX_EQUATIONS()
					if (row[i].IsOne())
						printf(&quot;P_{%s}&quot;, pixelCoords);
					else if (row[i].IsMinusOne())
						printf(&quot;-P_{%s}&quot;, pixelCoords);
					else if (row[i].IsWholeNumber())
						printf(&quot;%iP_{%s}&quot;, row[i].m_numerator, pixelCoords);
					else if (row[i].m_numerator == 1)
						printf(&quot;P_{%s}/%i&quot;, pixelCoords, row[i].m_denominator);
					else
						printf(&quot;P_{%s} * %i/%i&quot;, pixelCoords, row[i].m_numerator, row[i].m_denominator);
				#else
					if (row[i].IsOne())
						printf(&quot;P%s&quot;, pixelCoords);
					else if (row[i].IsMinusOne())
						printf(&quot;-P%s&quot;, pixelCoords);
					else if (row[i].IsWholeNumber())
						printf(&quot;%iP%s&quot;, row[i].m_numerator, pixelCoords);
					else if (row[i].m_numerator == 1)
						printf(&quot;P%s/%i&quot;, pixelCoords, row[i].m_denominator);
					else
						printf(&quot;P%s * %i/%i&quot;, pixelCoords, row[i].m_numerator, row[i].m_denominator);
				#endif
				leftHasATerm = true;
			}
		}
		if (!leftHasATerm)
			printf(&quot;0 = &quot;);
		else
			printf(&quot; = &quot;);

		// right side of the equation
		bool rightHasATerm = false;
		for (size_t i = numPixels; i &lt; N; ++i)
		{
			if (!row[i].IsZero())
			{
				if (rightHasATerm)
					printf(&quot; + &quot;);

				#if SHOW_MATHJAX_EQUATIONS()
					if (row[i].IsOne())
						printf(&quot;C_{%zu}&quot;, i - numPixels);
					else if (row[i].IsMinusOne())
						printf(&quot;-C_{%zu}&quot;, i - numPixels);
					else if (row[i].IsWholeNumber())
						printf(&quot;%iC_{%zu}&quot;, row[i].m_numerator, i - numPixels);
					else if (row[i].m_numerator == 1)
						printf(&quot;C_{%zu}/%i&quot;, i - numPixels, row[i].m_denominator);
					else
						printf(&quot;C_{%zu} * %i/%i&quot;, i - numPixels, row[i].m_numerator, row[i].m_denominator);
				#else
					if (row[i].IsOne())
						printf(&quot;C%zu&quot;, i - numPixels);
					else if (row[i].IsMinusOne())
						printf(&quot;-C%zu&quot;, i - numPixels);
					else if (row[i].IsWholeNumber())
						printf(&quot;%iC%zu&quot;, row[i].m_numerator, i - numPixels);
					else if (row[i].m_numerator == 1)
						printf(&quot;C%zu/%i&quot;, i - numPixels, row[i].m_denominator);
					else
						printf(&quot;C%zu * %i/%i&quot;, i - numPixels, row[i].m_numerator, row[i].m_denominator);
				#endif
				rightHasATerm = true;
			}
		}

		#if SHOW_MATHJAX_EQUATIONS()
			printf(&quot;\\\\\n&quot;);
		#else
			printf(&quot;\n&quot;);
		#endif
	}
}

template &lt;size_t M, size_t N, typename LAMBDA&gt;
bool SolveMatrixAndPrintEquations (
	TMatrix&lt;M, N&gt;&amp; augmentedMatrix,
	size_t numPixels,
	std::unordered_set&lt;size_t&gt;&amp; freeVariables,
	LAMBDA&amp; pixelIndexToCoordinates
)
{
	#if SHOW_EQUATIONS_BEFORE_SOLVE()
	printf(&quot;   Initial Equations:\n&quot;);
	PrintEquations(augmentedMatrix, numPixels, pixelIndexToCoordinates);
	printf(&quot;   Solved Equations:\n&quot;);
	#endif

	// put augmented matrix into rref
	GaussJordanElimination(augmentedMatrix);

	// Print equations
	PrintEquations(augmentedMatrix, numPixels, pixelIndexToCoordinates);

	// Get free variables and check for control point constraint
	bool constraintFound = false;
	for (const TVector&lt;N&gt;&amp; row : augmentedMatrix)
	{
		bool leftHasATerm = false;
		for (size_t i = 0; i &lt; numPixels; ++i)
		{
			if (!row[i].IsZero())
			{
				if (leftHasATerm)
					freeVariables.insert(i);
				else
					leftHasATerm = true;
			}
		}

		bool rightHasATerm = false;
		for (size_t i = numPixels; i &lt; N; ++i)
		{
			if (!row[i].IsZero())
				rightHasATerm = true;
		}

		if (!leftHasATerm &amp;&amp; rightHasATerm)
			constraintFound = true;
	}

	printf(&quot;  %zu free variables.\n&quot;, freeVariables.size());

	if (constraintFound)
	{
		printf(&quot;  Constraint Found.  This configuration doesn't work for the general case!\n\n&quot;);
		return false;
	}

	return true;
}

float lerp (float t, float a, float b)
{
	return a * (1.0f - t) + b * t;
}

template &lt;size_t NUMPIXELS, size_t NUMCONTROLPOINTS, size_t NUMEQUATIONS&gt;
void FillInPixelsAndControlPoints (
	std::array&lt;float, NUMPIXELS&gt;&amp; pixels,
	std::array&lt;float, NUMCONTROLPOINTS&gt;&amp; controlPoints,
	const TMatrix&lt;NUMEQUATIONS, NUMPIXELS+ NUMCONTROLPOINTS&gt;&amp; augmentedMatrix,
	const std::unordered_set&lt;size_t&gt;&amp; freeVariables)
{
	// come up with random values for the control points and free variable pixels
	static std::random_device rd;
	static std::mt19937 mt(rd());
	static std::uniform_real_distribution&lt;float&gt; dist(-10.0f, 10.0f);
	for (float&amp; cp : controlPoints)
		cp = dist(mt);
	for (size_t var : freeVariables)
		pixels[var] = dist(mt);

	// fill in the non free variable pixels per the equations
	for (const TVector&lt;NUMPIXELS + NUMCONTROLPOINTS&gt;&amp; row : augmentedMatrix)
	{
		// the first non zero value is the non free pixel we need to set.
		// all other non zero values are free variables that we previously calculated values for
		bool foundPixel = false;
		size_t pixelIndex = 0;
		for (size_t i = 0; i &lt; NUMPIXELS; ++i)
		{
			if (!row[i].IsZero())
			{
				// we are setting the first pixel we find
				if (!foundPixel)
				{
					pixelIndex = i;
					foundPixel = true;
				}
				// subtract out all free variables which is the same as moving them to the right side of the equation
				else
				{
					pixels[pixelIndex] -= pixels[i] * float(row[i].m_numerator) / float(row[i].m_denominator);
				}
			}
		}

		// if there is no pixel value to set on the left side of the equation, ignore this row
		if (!foundPixel)
			continue;

		// add in the values from the right side of the equation
		for (size_t i = NUMPIXELS; i &lt; NUMPIXELS + NUMCONTROLPOINTS; ++i)
		{
			if (!row[i].IsZero())
				pixels[pixelIndex] += controlPoints[i - NUMPIXELS] * float(row[i].m_numerator) / float(row[i].m_denominator);
		}
	}
}

size_t TextureCoordinateToPixelIndex2d (size_t width, size_t height, size_t y, size_t x)
{
	return y * width + x;
};

void PixelIndexToTextureCoordinate2d (size_t width, size_t height, size_t pixelIndex, size_t&amp; y, size_t&amp; x)
{
	x = pixelIndex % width;
	y = pixelIndex / width;
}

size_t TextureCoordinateToPixelIndex3d (size_t width, size_t height, size_t depth, size_t z, size_t y, size_t x)
{
	return 
		z * width * height + 
		y * width +
		x;
};

void PixelIndexToTextureCoordinate3d (size_t width, size_t height, size_t depth, size_t pixelIndex, size_t&amp; z, size_t&amp; y, size_t&amp; x)
{
	x = pixelIndex % width;

	pixelIndex = pixelIndex / width;

	y = pixelIndex % height;

	pixelIndex = pixelIndex / height;

	z = pixelIndex;
}

void PiecewiseCurveTime (float time, size_t numCurves, size_t&amp; outCurveIndex, float&amp; outTime)
{
	time *= float(numCurves);
	outCurveIndex = size_t(time);

	if (outCurveIndex == numCurves)
	{
		outCurveIndex = numCurves - 1;
		outTime = 1.0f;
	}
	else
	{
		outTime = std::fmodf(time, 1.0f);
	}
}



//===================================================================================================================================
//                                                       2D Textures / Quadratic Curves
//===================================================================================================================================
//
// Find the limitations of this pattern and show equivalence to Bernstein Polynomials (Bezier Curve Equations). Pattern details below.
//
//  --- For first curve, do:
//
//  P00 P01
//  P10 P11
//
//  P00 = C0                        0
//  P01 + P10 = 2 * C1              1 2
//  P11 = C2                        3
//
//  --- For each additional curve, add two points to the end like this:
//
//  P00 P01
//  P10 P11
//  P20 P21
//
//  P00 = C0                        0
//  P01 + P10 = 2 * C1              1 2
//  P11 = C2                        3
//
//  P10 = C3                        1
//  P11 + P20 = 2 * C4              3 4
//  P21 = C5                        5
//
//  and so on...
//  each equation is then multiplied by a value so the right side is identity and left side coefficients add up to 1.
//
//  --- Other details:
//  
//  * 3 control points per curve.
//  * image width it 2
//  * image height is 1 + NumCurves.
//  * there are 3 equations per curve, so 3 rows in the augmented matrix per curve.
//  * augmented matrix columns = num pixels (left columns) + num control points (right columns)
//

template &lt;size_t N&gt;
float EvaluateBernsteinPolynomial2DQuadratic (float totalTime, const std::array&lt;float, N&gt;&amp; coefficients)
{
	const size_t c_numCurves = N / 3;

	float t;
	size_t startCurve;
	PiecewiseCurveTime(totalTime, c_numCurves, startCurve, t);

	size_t offset = startCurve * 3;

	float s = 1.0f - t;
	return
		coefficients[offset + 0] * s * s +
		coefficients[offset + 1] * s * t * 2.0f +
		coefficients[offset + 2] * t * t;
}

template &lt;size_t N&gt;
float EvaluateLinearInterpolation2DQuadratic (float totalTime, const std::array&lt;float, N&gt;&amp; pixels)
{
	const size_t c_numCurves = (N / 2) - 1;

	float t;
	size_t startRow;
	PiecewiseCurveTime(totalTime, c_numCurves, startRow, t);

	float row0 = lerp(t, pixels[startRow * 2], pixels[startRow * 2 + 1]);
	float row1 = lerp(t, pixels[(startRow + 1) * 2], pixels[(startRow + 1) * 2 + 1]);
	return lerp(t, row0, row1);
}

template &lt;size_t NUMCURVES&gt;
void Test2DQuadratic ()
{
	const size_t c_imageWidth = 2;
	const size_t c_imageHeight = NUMCURVES + 1;
	const size_t c_numPixels = c_imageWidth * c_imageHeight;
	const size_t c_numControlPoints = NUMCURVES * 3;
	const size_t c_numEquations = NUMCURVES * 3;

	// report values for this test
	printf(&quot;  %zu curves.  %zu control points.  2x%zu texture = %zu pixels.\n&quot;, NUMCURVES, c_numControlPoints, c_imageHeight, c_numPixels);
	printf(&quot;  %f pixels per curve.  %f pixels per control point.\n&quot;, float(c_numPixels) / float(NUMCURVES), float(c_numPixels) / float(c_numControlPoints));

	// lambdas to convert between pixel index and texture coordinates
	auto TextureCoordinateToPixelIndex = [&amp;](size_t y, size_t x) -&gt; size_t
	{
		return TextureCoordinateToPixelIndex2d(c_imageWidth, c_imageHeight, y, x);
	};
	auto pixelIndexToCoordinates = [&amp;](size_t pixelIndex, char pixelCoords[10])
	{
		size_t y, x;
		PixelIndexToTextureCoordinate2d(c_imageWidth, c_imageHeight, pixelIndex, y, x);
		sprintf(pixelCoords, &quot;%zu%zu&quot;, y, x);
	};

	// create the equations
	TMatrix&lt;c_numEquations, c_numPixels + c_numControlPoints&gt; augmentedMatrix;
	for (size_t i = 0; i &lt; c_numEquations; ++i)
	{
		TVector&lt;c_numPixels + c_numControlPoints&gt;&amp; row = augmentedMatrix[i];

		// left side of the equation goes in this yx coordinate pattern:
		//   00 
		//   01 10
		//   11
		// But, curve index is added to the y index.
		// Also, left side coefficients must add up to 1.
		size_t curveIndex = i / 3;
		switch (i % 3)
		{
			case 0:
			{
				row[TextureCoordinateToPixelIndex(curveIndex + 0, 0)] = CRationalNumber(1, 1);
				break;
			}
			case 1:
			{
				row[TextureCoordinateToPixelIndex(curveIndex + 0, 1)] = CRationalNumber(1, 2);
				row[TextureCoordinateToPixelIndex(curveIndex + 1, 0)] = CRationalNumber(1, 2);
				break;
			}
			case 2:
			{
				row[TextureCoordinateToPixelIndex(curveIndex + 1, 1)] = CRationalNumber(1, 1);
				break;
			}
		}

		// right side of the equation is identity
		row[c_numPixels + i] = CRationalNumber(1);
	}

	// solve the matrix if possible and print out the equations
	std::unordered_set&lt;size_t&gt; freeVariables;
	if (!SolveMatrixAndPrintEquations(augmentedMatrix, c_numPixels, freeVariables, pixelIndexToCoordinates))
		return;

	// Next we need to show equality between the N-linear interpolation of our pixels and bernstein polynomials with our control points as coefficients

	// Fill in random values for our control points and free variable pixels, and fill in the other pixels as the equations dictate 
	std::array&lt;float, c_numPixels&gt; pixels = { 0 };
	std::array&lt;float, c_numControlPoints&gt; controlPoints = { 0 };
	FillInPixelsAndControlPoints&lt;c_numPixels, c_numControlPoints, c_numEquations&gt;(pixels, controlPoints, augmentedMatrix, freeVariables);

	// do a number of samples of each method at the same time values, and report the largest difference (error)
	float largestDifference = 0.0f;
	for (size_t i = 0; i &lt; EQUALITY_TEST_SAMPLES; ++i)
	{
		float t = float(i) / float(EQUALITY_TEST_SAMPLES - 1);

		float value1 = EvaluateBernsteinPolynomial2DQuadratic(t, controlPoints);
		float value2 = EvaluateLinearInterpolation2DQuadratic(t, pixels);

		largestDifference = std::max(largestDifference, std::abs(value1 - value2));
	}
	printf(&quot;  %i Samples, Largest Error = %f\n\n&quot;, EQUALITY_TEST_SAMPLES, largestDifference);
}

void Test2DQuadratics ()
{
	printf(&quot;Testing 2D Textures / Quadratic Curves\n\n&quot;);

	Test2DQuadratic&lt;1&gt;();
	Test2DQuadratic&lt;2&gt;();
	Test2DQuadratic&lt;3&gt;();

	system(&quot;pause&quot;);
}

//===================================================================================================================================
//                                    2D Textures / Quadratic Curves With C0 Continuity
//===================================================================================================================================
//
// Find the limitations of this pattern and show equivalence to Bernstein Polynomials (Bezier Curve Equations). Pattern details below.
//
//  --- For first curve, do:
//
//  P00 P01
//  P10 P11
//
//  P00 = C0                        0
//  P01 + P10 = 2 * C1              1 2
//  P11 = C2                        3
//
//  --- For second curve, do:
//
//  P00 P01
//  P10 P11
//  P20 P21
//
//  P00 = C0                        0
//  P01 + P10 = 2 * C1              1 2
//  P11 = C2                        3
//
//  P10 + P21 = 2 * C3              2 5
//  P20 = C4                        4
//
//  --- For third curve, do:
//
//  P00 P01
//  P10 P11
//  P20 P21
//  P30 P31
//
//  P00 = C0
//  P01 + P10 = 2 * C1
//  P11 = C2
//
//  P10 + P21 = 2 * C3
//  P20 = C4
//
//  P21 + P30 = 2 * C5
//  P31 = C6
//
//  and so on...
//  each equation is then multiplied by a value so the right side is identity and left side coefficients add up to 1.
//
//  --- Other details:
//  
//  * control points: 1 + NumCurves*2.
//  * image width it 2
//  * image height is 1 + NumCurves.
//  * equations: 1 + NumCurves*2.  This many rows in the augmented matrix.
//  * augmented matrix columns = num pixels (left columns) + num control points (right columns)
//

template &lt;size_t N&gt;
float EvaluateBernsteinPolynomial2DQuadraticC0 (float totalTime, const std::array&lt;float, N&gt;&amp; coefficients)
{
	const size_t c_numCurves = (N - 1) / 2;

	float t;
	size_t startCurve;
	PiecewiseCurveTime(totalTime, c_numCurves, startCurve, t);

	size_t offset = startCurve * 2;

	float s = 1.0f - t;
	return
		coefficients[offset + 0] * s * s +
		coefficients[offset + 1] * s * t * 2.0f +
		coefficients[offset + 2] * t * t;
}

template &lt;size_t N&gt;
float EvaluateLinearInterpolation2DQuadraticC0 (float totalTime, const std::array&lt;float, N&gt;&amp; pixels)
{
	const size_t c_numCurves = (N / 2) - 1;

	float t;
	size_t startRow;
	PiecewiseCurveTime(totalTime, c_numCurves, startRow, t);

	// Note we flip x axis direction every odd row to get the zig zag
	float horizT = (startRow % 2) == 0 ? t : 1.0f - t;

	float row0 = lerp(horizT, pixels[startRow * 2], pixels[startRow * 2 + 1]);
	++startRow;
	float row1 = lerp(horizT, pixels[startRow * 2], pixels[startRow * 2 + 1]);
	return lerp(t, row0, row1);
}

template &lt;size_t NUMCURVES&gt;
void Test2DQuadraticC0 ()
{
	const size_t c_imageWidth = 2;
	const size_t c_imageHeight = NUMCURVES + 1;
	const size_t c_numPixels = c_imageWidth * c_imageHeight;
	const size_t c_numControlPoints = 1 + NUMCURVES * 2;
	const size_t c_numEquations = 1 + NUMCURVES * 2;

	// report values for this test
	printf(&quot;  %zu curves.  %zu control points.  2x%zu texture = %zu pixels.\n&quot;, NUMCURVES, c_numControlPoints, c_imageHeight, c_numPixels);
	printf(&quot;  %f pixels per curve.  %f pixels per control point.\n&quot;, float(c_numPixels) / float(NUMCURVES), float(c_numPixels) / float(c_numControlPoints));

	// lambdas to convert between pixel index and texture coordinates
	auto TextureCoordinateToPixelIndex = [&amp;] (size_t y, size_t x) -&gt; size_t
	{
		return TextureCoordinateToPixelIndex2d(c_imageWidth, c_imageHeight, y, x);
	};
	auto pixelIndexToCoordinates = [&amp;] (size_t pixelIndex, char pixelCoords[10])
	{
		size_t y, x;
		PixelIndexToTextureCoordinate2d(c_imageWidth, c_imageHeight, pixelIndex, y, x);
		sprintf(pixelCoords, &quot;%zu%zu&quot;, y, x);
	};

	// create the equations
	TMatrix&lt;c_numEquations, c_numPixels + c_numControlPoints&gt; augmentedMatrix;
	for (size_t i = 0; i &lt; c_numEquations; ++i)
	{
		TVector&lt;c_numPixels + c_numControlPoints&gt;&amp; row = augmentedMatrix[i];

		// left side of the equation has a pattern like this:
		//   00
		//   01 10
		//
		// But, pattern index is added to the y index.
		// Also, the x coordinates flip from 0 to 1 on those after each pattern.
		// Also, left side coefficients must add up to 1.

		size_t patternIndex = i / 2;
		size_t xoff = patternIndex % 2 == 1;
		size_t xon = patternIndex % 2 == 0;
		switch (i % 2)
		{
			case 0:
			{
				row[TextureCoordinateToPixelIndex(patternIndex + 0, xoff)] = CRationalNumber(1, 1);
				break;
			}
			case 1:
			{
				row[TextureCoordinateToPixelIndex(patternIndex + 0, xon)] = CRationalNumber(1, 2);
				row[TextureCoordinateToPixelIndex(patternIndex + 1, xoff)] = CRationalNumber(1, 2);
				break;
			}
		}

		// right side of the equation is identity
		row[c_numPixels + i] = CRationalNumber(1);
	}
	
	// solve the matrix if possible and print out the equations
	std::unordered_set&lt;size_t&gt; freeVariables;
	if (!SolveMatrixAndPrintEquations(augmentedMatrix, c_numPixels, freeVariables, pixelIndexToCoordinates))
		return;

	// Next we need to show equality between the N-linear interpolation of our pixels and bernstein polynomials with our control points as coefficients

	// Fill in random values for our control points and free variable pixels, and fill in the other pixels as the equations dictate 
	std::array&lt;float, c_numPixels&gt; pixels = { 0 };
	std::array&lt;float, c_numControlPoints&gt; controlPoints = { 0 };
	FillInPixelsAndControlPoints&lt;c_numPixels, c_numControlPoints, c_numEquations&gt;(pixels, controlPoints, augmentedMatrix, freeVariables);

	// do a number of samples of each method at the same time values, and report the largest difference (error)
	float largestDifference = 0.0f;
	for (size_t i = 0; i &lt; EQUALITY_TEST_SAMPLES; ++i)
	{
		float t = float(i) / float(EQUALITY_TEST_SAMPLES - 1);

		float value1 = EvaluateBernsteinPolynomial2DQuadraticC0(t, controlPoints);
		float value2 = EvaluateLinearInterpolation2DQuadraticC0(t, pixels);

		largestDifference = std::max(largestDifference, std::abs(value1 - value2));
	}
	printf(&quot;  %i Samples, Largest Error = %f\n\n&quot;, EQUALITY_TEST_SAMPLES, largestDifference);
}

void Test2DQuadraticsC0 ()
{
	printf(&quot;\nTesting 2D Textures / Quadratic Curves with C0 continuity\n\n&quot;);

	Test2DQuadraticC0&lt;1&gt;();
	Test2DQuadraticC0&lt;2&gt;();
	Test2DQuadraticC0&lt;3&gt;();
	Test2DQuadraticC0&lt;4&gt;();

	system(&quot;pause&quot;);
}

//===================================================================================================================================
//                                             3D Textures / Cubic Curves
//===================================================================================================================================
//
// Find the limitations of this pattern and show equivalence to Bernstein Polynomials (Bezier Curve Equations). Pattern details below.
//
//  --- For first curve, do:
//
//  P000 P001    P100 P101
//  P010 P011    P110 P111
//
//  P000 = C0                       0
//  P001 + P010 + P100 = 3 * C1     1 2 4
//  P011 + P101 + P110 = 3 * C2     3 5 6
//  P111 = C3                       7
//
//  --- For second curve, do:
//
//  P000 P001    P100 P101
//  P010 P011    P110 P111
//  P020 P021    P120 P121
//
//  P000 = C0                       0
//  P001 + P010 + P100 = 3 * C1     1 2 4
//  P011 + P101 + P110 = 3 * C2     3 7 8
//  P111 = C3                       9
//
//  P010 = C4                       2
//  P011 + P020 + P110 = 3 * C5     3 4 8
//  P021 + P111 + P120 = 3 * C6     5 9 10
//  P121 = C7                       11
//
//  and so on...
//  each equation is then multiplied by a value so the right side is identity and left side coefficients add up to 1.
//
//  --- Other details:
//  
//  * control points: 4 * NumCurves.
//  * image width it 2
//  * image depth is 2
//  * image height is 1 + NumCurves.
//  * equations: 4 * NumCurves.  This many rows in the augmented matrix.
//  * augmented matrix columns = num pixels (left columns) + num control points (right columns)
//

template &lt;size_t N&gt;
float EvaluateBernsteinPolynomial3DCubic (float totalTime, const std::array&lt;float, N&gt;&amp; coefficients)
{
	const size_t c_numCurves = N / 4;

	float t;
	size_t startCurve;
	PiecewiseCurveTime(totalTime, c_numCurves, startCurve, t);

	size_t offset = startCurve * 4;

	float s = 1.0f - t;
	return
		coefficients[offset + 0] * s * s * s +
		coefficients[offset + 1] * s * s * t * 3.0f +
		coefficients[offset + 2] * s * t * t * 3.0f +
		coefficients[offset + 3] * t * t * t;
}

template &lt;size_t N, typename LAMBDA&gt;
float EvaluateLinearInterpolation3DCubic (float totalTime, const std::array&lt;float, N&gt;&amp; pixels, LAMBDA&amp; TextureCoordinateToPixelIndex)
{
	const size_t c_numCurves = (N / 4) - 1;

	float t;
	size_t startRow;
	PiecewiseCurveTime(totalTime, c_numCurves, startRow, t);

	//    rowZYX
	float row00x = lerp(t, pixels[TextureCoordinateToPixelIndex(0, startRow + 0, 0)], pixels[TextureCoordinateToPixelIndex(0, startRow + 0, 1)]);
	float row01x = lerp(t, pixels[TextureCoordinateToPixelIndex(0, startRow + 1, 0)], pixels[TextureCoordinateToPixelIndex(0, startRow + 1, 1)]);
	float row0yx = lerp(t, row00x, row01x);

	float row10x = lerp(t, pixels[TextureCoordinateToPixelIndex(1, startRow + 0, 0)], pixels[TextureCoordinateToPixelIndex(1, startRow + 0, 1)]);
	float row11x = lerp(t, pixels[TextureCoordinateToPixelIndex(1, startRow + 1, 0)], pixels[TextureCoordinateToPixelIndex(1, startRow + 1, 1)]);
	float row1yx = lerp(t, row10x, row11x);

	return lerp(t, row0yx, row1yx);
}

template &lt;size_t NUMCURVES&gt;
void Test3DCubic ()
{
	const size_t c_imageWidth = 2;
	const size_t c_imageHeight = NUMCURVES + 1;
	const size_t c_imageDepth = 2;
	const size_t c_numPixels = c_imageWidth * c_imageHeight * c_imageDepth;
	const size_t c_numControlPoints = NUMCURVES * 4;
	const size_t c_numEquations = NUMCURVES * 4;

	// report values for this test
	printf(&quot;  %zu curves.  %zu control points.  2x%zux2 texture = %zu pixels.\n&quot;, NUMCURVES, c_numControlPoints, c_imageHeight, c_numPixels);
	printf(&quot;  %f pixels per curve.  %f pixels per control point.\n&quot;, float(c_numPixels) / float(NUMCURVES), float(c_numPixels) / float(c_numControlPoints));

	// lambdas to convert between pixel index and texture coordinates
	auto TextureCoordinateToPixelIndex = [&amp;] (size_t z, size_t y, size_t x) -&gt; size_t
	{
		return TextureCoordinateToPixelIndex3d(c_imageWidth, c_imageHeight, c_imageDepth, z, y, x);
	};
	auto pixelIndexToCoordinates = [&amp;] (size_t pixelIndex, char pixelCoords[10])
	{
		size_t z, y, x;
		PixelIndexToTextureCoordinate3d(c_imageWidth, c_imageHeight, c_imageDepth, pixelIndex, z, y, x);
		sprintf(pixelCoords, &quot;%zu%zu%zu&quot;, z,y,x);
	};

	// create the equations
	TMatrix&lt;c_numEquations, c_numPixels + c_numControlPoints&gt; augmentedMatrix;
	for (size_t i = 0; i &lt; c_numEquations; ++i)
	{
		TVector&lt;c_numPixels + c_numControlPoints&gt;&amp; row = augmentedMatrix[i];

		// left side of the equation goes in this zyx coordinate pattern:
		//   000 
		//   001 010 100 
		//   011 101 110
		//   111
		// But, curve index is added to the y index.
		// Also, left side coefficients must add up to 1.
		size_t curveIndex = i / 4;
		switch (i % 4)
		{
			case 0:
			{
				row[TextureCoordinateToPixelIndex(0, curveIndex + 0, 0)] = CRationalNumber(1, 1);
				break;
			}
			case 1:
			{
				row[TextureCoordinateToPixelIndex(0, curveIndex + 0, 1)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(0, curveIndex + 1, 0)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(1, curveIndex + 0, 0)] = CRationalNumber(1, 3);
				break;
			}
			case 2:
			{
				row[TextureCoordinateToPixelIndex(0, curveIndex + 1, 1)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(1, curveIndex + 0, 1)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(1, curveIndex + 1, 0)] = CRationalNumber(1, 3);
				break;
			}
			case 3:
			{
				row[TextureCoordinateToPixelIndex(1, curveIndex + 1, 1)] = CRationalNumber(1, 1);
				break;
			}
		}

		// right side of the equation is identity
		row[c_numPixels + i] = CRationalNumber(1);
	}

	// solve the matrix if possible and print out the equations
	std::unordered_set&lt;size_t&gt; freeVariables;
	if (!SolveMatrixAndPrintEquations(augmentedMatrix, c_numPixels, freeVariables, pixelIndexToCoordinates))
		return;

	// Next we need to show equality between the N-linear interpolation of our pixels and bernstein polynomials with our control points as coefficients

	// Fill in random values for our control points and free variable pixels, and fill in the other pixels as the equations dictate 
	std::array&lt;float, c_numPixels&gt; pixels = { 0 };
	std::array&lt;float, c_numControlPoints&gt; controlPoints = { 0 };
	FillInPixelsAndControlPoints&lt;c_numPixels, c_numControlPoints, c_numEquations&gt;(pixels, controlPoints, augmentedMatrix, freeVariables);

	// do a number of samples of each method at the same time values, and report the largest difference (error)
	float largestDifference = 0.0f;
	for (size_t i = 0; i &lt; EQUALITY_TEST_SAMPLES; ++i)
	{
		float t = float(i) / float(EQUALITY_TEST_SAMPLES - 1);

		float value1 = EvaluateBernsteinPolynomial3DCubic(t, controlPoints);
		float value2 = EvaluateLinearInterpolation3DCubic(t, pixels, TextureCoordinateToPixelIndex);

		largestDifference = std::max(largestDifference, std::abs(value1 - value2));
	}
	printf(&quot;  %i Samples, Largest Error = %f\n\n&quot;, EQUALITY_TEST_SAMPLES, largestDifference);
}

void Test3DCubics ()
{
	printf(&quot;\nTesting 3D Textures / Cubic Curves\n\n&quot;);

	Test3DCubic&lt;1&gt;();
	Test3DCubic&lt;2&gt;();
	Test3DCubic&lt;3&gt;();
	Test3DCubic&lt;4&gt;();

	system(&quot;pause&quot;);
}

//===================================================================================================================================
//                                         3D Textures / Cubic Curves Multiple Curves
//===================================================================================================================================
//
// Find the limitations of this pattern and show equivalence to Bernstein Polynomials (Bezier Curve Equations). Pattern details below.
//
// This is the same as 3D Textures / Cubic Curves, but there is a second curve stored by flipping x coordinates.
//
//  --- Other details:
//  
//  * control points: 4 * NumCurves.
//  * image width it 2
//  * image depth is 2
//  * image height is 1 + (NumCurves/2).
//  * equations: 4 * NumCurves.  This many rows in the augmented matrix.
//  * augmented matrix columns = num pixels (left columns) + num control points (right columns)
//

template &lt;size_t HALFNUMCURVES&gt;
void Test3DCubicMulti ()
{
	const size_t NUMCURVES = HALFNUMCURVES * 2;
	const size_t c_imageWidth = 2;
	const size_t c_imageHeight = HALFNUMCURVES + 1;
	const size_t c_imageDepth = 2;
	const size_t c_numPixels = c_imageWidth * c_imageHeight * c_imageDepth;
	const size_t c_numControlPoints = NUMCURVES * 4;
	const size_t c_numEquations = NUMCURVES * 4;

	// report values for this test
	printf(&quot;  %zu curves.  %zu control points.  2x%zux2 texture = %zu pixels.\n&quot;, NUMCURVES, c_numControlPoints, c_imageHeight, c_numPixels);
	printf(&quot;  %f pixels per curve.  %f pixels per control point.\n&quot;, float(c_numPixels) / float(NUMCURVES), float(c_numPixels) / float(c_numControlPoints));

	// lambdas to convert between pixel index and texture coordinates
	auto TextureCoordinateToPixelIndex = [&amp;] (size_t z, size_t y, size_t x) -&gt; size_t
	{
		return TextureCoordinateToPixelIndex3d(c_imageWidth, c_imageHeight, c_imageDepth, z, y, x);
	};
	auto pixelIndexToCoordinates = [&amp;] (size_t pixelIndex, char pixelCoords[10])
	{
		size_t z, y, x;
		PixelIndexToTextureCoordinate3d(c_imageWidth, c_imageHeight, c_imageDepth, pixelIndex, z, y, x);
		sprintf(pixelCoords, &quot;%zu%zu%zu&quot;, z,y,x);
	};

	// create the first set of equations
	TMatrix&lt;c_numEquations, c_numPixels + c_numControlPoints&gt; augmentedMatrix;
	for (size_t i = 0; i &lt; c_numEquations / 2; ++i)
	{
		TVector&lt;c_numPixels + c_numControlPoints&gt;&amp; row = augmentedMatrix[i];

		// left side of the equation goes in this zyx coordinate pattern:
		//   000 
		//   001 010 100 
		//   011 101 110
		//   111
		// But, curve index is added to the y index.
		// Also, left side coefficients must add up to 1.
		size_t curveIndex = i / 4;
		switch (i % 4)
		{
			case 0:
			{
				row[TextureCoordinateToPixelIndex(0, curveIndex + 0, 0)] = CRationalNumber(1, 1);
				break;
			}
			case 1:
			{
				row[TextureCoordinateToPixelIndex(0, curveIndex + 0, 1)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(0, curveIndex + 1, 0)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(1, curveIndex + 0, 0)] = CRationalNumber(1, 3);
				break;
			}
			case 2:
			{
				row[TextureCoordinateToPixelIndex(0, curveIndex + 1, 1)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(1, curveIndex + 0, 1)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(1, curveIndex + 1, 0)] = CRationalNumber(1, 3);
				break;
			}
			case 3:
			{
				row[TextureCoordinateToPixelIndex(1, curveIndex + 1, 1)] = CRationalNumber(1, 1);
				break;
			}
		}

		// right side of the equation is identity
		row[c_numPixels + i] = CRationalNumber(1);
	}

	// create the second set of equations
	for (size_t i = 0; i &lt; c_numEquations / 2; ++i)
	{
		TVector&lt;c_numPixels + c_numControlPoints&gt;&amp; row = augmentedMatrix[i + c_numEquations / 2];

		// left side of the equation goes in this zyx coordinate pattern, which is the same as above but x axis flipped.
		//   001
		//   000 011 101 
		//   010 100 111
		//   110
		// But, curve index is added to the y index.
		// Also, left side coefficients must add up to 1.
		size_t curveIndex = i / 4;
		switch (i % 4)
		{
			case 0:
			{
				row[TextureCoordinateToPixelIndex(0, curveIndex + 0, 1)] = CRationalNumber(1, 1);
				break;
			}
			case 1:
			{
				row[TextureCoordinateToPixelIndex(0, curveIndex + 0, 0)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(0, curveIndex + 1, 1)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(1, curveIndex + 0, 1)] = CRationalNumber(1, 3);
				break;
			}
			case 2:
			{
				row[TextureCoordinateToPixelIndex(0, curveIndex + 1, 0)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(1, curveIndex + 0, 0)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(1, curveIndex + 1, 1)] = CRationalNumber(1, 3);
				break;
			}
			case 3:
			{
				row[TextureCoordinateToPixelIndex(1, curveIndex + 1, 0)] = CRationalNumber(1, 1);
				break;
			}
		}

		// right side of the equation is identity
		row[c_numPixels + i + c_numEquations / 2] = CRationalNumber(1);
	}

	// solve the matrix if possible and print out the equations
	std::unordered_set&lt;size_t&gt; freeVariables;
	SolveMatrixAndPrintEquations(augmentedMatrix, c_numPixels, freeVariables, pixelIndexToCoordinates);
}

void Test3DCubicsMulti ()
{
	printf(&quot;\nTesting 3D Textures / Cubic Curves with Multiple Curves\n\n&quot;);

	Test3DCubicMulti&lt;1&gt;();

	system(&quot;pause&quot;);
}

//===================================================================================================================================
//                                       3D Textures / Cubic Curves With C0 Continuity
//===================================================================================================================================
//
// Find the limitations of this pattern and show equivalence to Bernstein Polynomials (Bezier Curve Equations). Pattern details below.
//
//  --- For first curve, do:
//
//  P000 P001    P100 P101
//  P010 P011    P110 P111
//
//  P000 = C0                       
//  P001 + P010 + P100 = 3 * C1     
//  P011 + P101 + P110 = 3 * C2     
//  P111 = C3                       
//
//  --- For second curve, do:
//
//  P000 P001    P100 P101
//  P010 P011    P110 P111
//  P020 P021    P120 P121
//
//  P000 = C0                       
//  P001 + P010 + P100 = 3 * C1     
//  P011 + P101 + P110 = 3 * C2     
//  P111 = C3                       
//                       
//  P011 + P110 + P121 = 3 * C4     
//  P010 + P021 + P110 = 3 * C5     
//  P020 = C6     
//
//  --- For third curve, do:
//
//  P000 P001    P100 P101
//  P010 P011    P110 P111
//  P020 P021    P120 P121
//  P030 P031    P130 P131
//
//  P000 = C0                       
//  P001 + P010 + P100 = 3 * C1     
//  P011 + P101 + P110 = 3 * C2     
//  P111 = C3                       
//                       
//  P011 + P110 + P121 = 3 * C4     
//  P010 + P021 + P110 = 3 * C5     
//  P020 = C6     
//
//  P021 + P030 + P120 = 3 * C7     
//  P031 + P121 + P130 = 3 * C8     
//  P131 = C9   
//
//  and so on...
//  each equation is then multiplied by a value so the right side is identity and left side coefficients add up to 1.
//
//  --- Other details:
//  
//  * control points: 1 + 3 * NumCurves.
//  * image width it 2
//  * image depth is 2
//  * image height is 1 + NumCurves.
//  * equations: 1 + 3 * NumCurves.  This many rows in the augmented matrix.
//  * augmented matrix columns = num pixels (left columns) + num control points (right columns)
//

template &lt;size_t N&gt;
float EvaluateBernsteinPolynomial3DCubicC0 (float totalTime, const std::array&lt;float, N&gt;&amp; coefficients)
{
	const size_t c_numCurves = (N-1) / 3;

	float t;
	size_t startCurve;
	PiecewiseCurveTime(totalTime, c_numCurves, startCurve, t);

	size_t offset = startCurve * 3;

	float s = 1.0f - t;
	return
		coefficients[offset + 0] * s * s * s +
		coefficients[offset + 1] * s * s * t * 3.0f +
		coefficients[offset + 2] * s * t * t * 3.0f +
		coefficients[offset + 3] * t * t * t;
}

template &lt;size_t N, typename LAMBDA&gt;
float EvaluateLinearInterpolation3DCubicC0 (float totalTime, const std::array&lt;float, N&gt;&amp; pixels, LAMBDA&amp; TextureCoordinateToPixelIndex)
{
	const size_t c_numCurves = (N / 4) - 1;

	float t;
	size_t startRow;
	PiecewiseCurveTime(totalTime, c_numCurves, startRow, t);

	// Note we flip x and z axis direction every odd row to get the zig zag

	//    rowZYX
	float xzT = (startRow % 2) == 0 ? t : 1.0f - t;
	float row00x = lerp(xzT, pixels[TextureCoordinateToPixelIndex(0, startRow + 0, 0)], pixels[TextureCoordinateToPixelIndex(0, startRow + 0, 1)]);
	float row01x = lerp(xzT, pixels[TextureCoordinateToPixelIndex(0, startRow + 1, 0)], pixels[TextureCoordinateToPixelIndex(0, startRow + 1, 1)]);
	float row0yx = lerp(t, row00x, row01x);

	float row10x = lerp(xzT, pixels[TextureCoordinateToPixelIndex(1, startRow + 0, 0)], pixels[TextureCoordinateToPixelIndex(1, startRow + 0, 1)]);
	float row11x = lerp(xzT, pixels[TextureCoordinateToPixelIndex(1, startRow + 1, 0)], pixels[TextureCoordinateToPixelIndex(1, startRow + 1, 1)]);
	float row1yx = lerp(t, row10x, row11x);

	return lerp(xzT, row0yx, row1yx);
}

template &lt;size_t NUMCURVES&gt;
void Test3DCubicC0 ()
{

	const size_t c_imageWidth = 2;
	const size_t c_imageHeight = NUMCURVES + 1;
	const size_t c_imageDepth = 2;
	const size_t c_numPixels = c_imageWidth * c_imageHeight * c_imageDepth;
	const size_t c_numControlPoints = 1 + NUMCURVES * 3;
	const size_t c_numEquations = 1 + NUMCURVES * 3;

	// report values for this test
	printf(&quot;  %zu curves.  %zu control points.  2x%zux2 texture = %zu pixels.\n&quot;, NUMCURVES, c_numControlPoints, c_imageHeight, c_numPixels);
	printf(&quot;  %f pixels per curve.  %f pixels per control point.\n&quot;, float(c_numPixels) / float(NUMCURVES), float(c_numPixels) / float(c_numControlPoints));

	// lambdas to convert between pixel index and texture coordinates
	auto TextureCoordinateToPixelIndex = [&amp;] (size_t z, size_t y, size_t x) -&gt; size_t
	{
		return TextureCoordinateToPixelIndex3d(c_imageWidth, c_imageHeight, c_imageDepth, z, y, x);
	};
	auto pixelIndexToCoordinates = [&amp;] (size_t pixelIndex, char pixelCoords[10])
	{
		size_t z, y, x;
		PixelIndexToTextureCoordinate3d(c_imageWidth, c_imageHeight, c_imageDepth, pixelIndex, z, y, x);
		sprintf(pixelCoords, &quot;%zu%zu%zu&quot;, z,y,x);
	};

	// create the equations
	TMatrix&lt;c_numEquations, c_numPixels + c_numControlPoints&gt; augmentedMatrix;
	for (size_t i = 0; i &lt; c_numEquations; ++i)
	{
		TVector&lt;c_numPixels + c_numControlPoints&gt;&amp; row = augmentedMatrix[i];

		// left side of the equation has a pattern like this:
		//   000
		//   001 010 100
		//   011 101 110
		//
		// But, pattern index is added to the y index.
		// Also, the x and z coordinates flip from 0 to 1 on those after each pattern.
		// Also, left side coefficients must add up to 1.
		size_t patternIndex = i / 3;
		size_t xz0 = patternIndex % 2 == 1;
		size_t xz1 = patternIndex % 2 == 0;
		switch (i % 3)
		{
			case 0:
			{
				row[TextureCoordinateToPixelIndex(xz0, patternIndex + 0, xz0)] = CRationalNumber(1, 1);
				break;
			}
			case 1:
			{
				row[TextureCoordinateToPixelIndex(xz0, patternIndex + 0, xz1)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(xz0, patternIndex + 1, xz0)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(xz1, patternIndex + 0, xz0)] = CRationalNumber(1, 3);
				break;
			}
			case 2:
			{
				row[TextureCoordinateToPixelIndex(xz0, patternIndex + 1, xz1)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(xz1, patternIndex + 0, xz1)] = CRationalNumber(1, 3);
				row[TextureCoordinateToPixelIndex(xz1, patternIndex + 1, xz0)] = CRationalNumber(1, 3);
				break;
			}
		}

		// right side of the equation is identity
		row[c_numPixels + i] = CRationalNumber(1);
	}

	// solve the matrix if possible and print out the equations
	std::unordered_set&lt;size_t&gt; freeVariables;
	if (!SolveMatrixAndPrintEquations(augmentedMatrix, c_numPixels, freeVariables, pixelIndexToCoordinates))
		return;

	// Next we need to show equality between the N-linear interpolation of our pixels and bernstein polynomials with our control points as coefficients

	// Fill in random values for our control points and free variable pixels, and fill in the other pixels as the equations dictate 
	std::array&lt;float, c_numPixels&gt; pixels = { 0 };
	std::array&lt;float, c_numControlPoints&gt; controlPoints = { 0 };
	FillInPixelsAndControlPoints&lt;c_numPixels, c_numControlPoints, c_numEquations&gt;(pixels, controlPoints, augmentedMatrix, freeVariables);

	// do a number of samples of each method at the same time values, and report the largest difference (error)
	float largestDifference = 0.0f;
	for (size_t i = 0; i &lt; EQUALITY_TEST_SAMPLES; ++i)
	{
		float t = float(i) / float(EQUALITY_TEST_SAMPLES - 1);

		float value1 = EvaluateBernsteinPolynomial3DCubicC0(t, controlPoints);
		float value2 = EvaluateLinearInterpolation3DCubicC0(t, pixels, TextureCoordinateToPixelIndex);

		largestDifference = std::max(largestDifference, std::abs(value1 - value2));
	}
	printf(&quot;  %i Samples, Largest Error = %f\n\n&quot;, EQUALITY_TEST_SAMPLES, largestDifference);
}

void Test3DCubicsC0 ()
{

	printf(&quot;\nTesting 3D Textures / Cubic Curves with C0 continuity\n\n&quot;);

	Test3DCubicC0&lt;1&gt;();
	Test3DCubicC0&lt;2&gt;();
	Test3DCubicC0&lt;3&gt;();
	Test3DCubicC0&lt;4&gt;();
	Test3DCubicC0&lt;5&gt;();
	Test3DCubicC0&lt;6&gt;();

	system(&quot;pause&quot;);
}

//===================================================================================================================================
//                                                                 main
//===================================================================================================================================

int main (int agrc, char **argv)
{
	Test2DQuadratics();
	Test2DQuadraticsC0();
	Test3DCubics();
	Test3DCubicsMulti();
	Test3DCubicsC0();

	return 0;
}
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6384</wp:post_id>
		<wp:post_date><![CDATA[2017-05-07 16:28:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-08 00:28:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[improved-storage-space-efficiency-of-gpu-texture-sampler-bezier-curve-evaluation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="graphics"><![CDATA[Graphics]]></category>
		<category domain="category" nicename="math"><![CDATA[Math]]></category>
		<category domain="category" nicename="research"><![CDATA[Research]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_disable_fbc]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1495672403;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:5413;}i:1;a:1:{s:2:"id";i:5276;}i:2;a:1:{s:2:"id";i:4018;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
